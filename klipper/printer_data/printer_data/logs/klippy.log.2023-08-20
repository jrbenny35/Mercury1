Loaded MCU 'CB1' 113 commands (v0.11.0-241-gffb5105b / gcc: (Debian 10.2.1-6) 10.2.1 20210110 binutils: (GNU Binutils for Debian) 2.35.2)
MCU 'CB1' config: ADC_MAX=4095 CLOCK_FREQ=50000000 MCU=linux PCA9685_MAX=4096 PWM_MAX=32768 STATS_SUMSQ_BASE=256
Configured MCU 'CB1' (1024 moves)
===== Config file =====
[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancels the current print.
	Usage: CANCEL_PRINT
rename_existing = _KM_CANCEL_PRINT_BASE
gcode = 
	_KM_CHECK_IS_PRINTING
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=cancelling RESET_STACK=1
	SET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{True}"
	PRINT_END
	_KM_CANCEL_PRINT_BASE
	{% if printer.pause_resume.is_paused %}
	RESTORE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE MOVE=0
	{% endif %}
	CLEAR_PAUSE
	_KM_APPLY_PRINT_OFFSET RESET=1
	{% if 'virtual_sdcard' in printer and not printer.virtual_sdcard.is_active %}
	SDCARD_RESET_FILE
	{% endif %}

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
variable_restore_idle_timeout = 0
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set idle_timeout = client.idle_timeout|default(0) %}
	
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE={printer[printer.toolhead.extruder].target}
	
	{% if idle_timeout > 0 %}
	SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
	SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
	{% endif %}
	PAUSE_BASE
	_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
variable_last_extruder_temp = 0
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move = client.speed_move|default(velocity) %}
	
	
	{% if printer['gcode_macro PAUSE'].restore_idle_timeout > 0 %}
	SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro PAUSE'].restore_idle_timeout}
	{% endif %}
	M109 S{last_extruder_temp}
	_CLIENT_EXTRUDE
	RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	_KM_CHECK_IS_PRINTING
	{% set pause_next_layer =
	printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE | default(1) | int != 0 %}
	{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VALUE="{
	{ 'enable': False, 'call': MACRO }}" VARIABLE=pause_next_layer
	GCODE_AT_LAYER COMMAND="{MACRO|replace('\"','\\\"')
	}" CANCEL="{0 if ENABLE else 1}" LAYER="next"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	_KM_CHECK_IS_PRINTING
	{% set pause_at_layer =
	printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	
	{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined else
	params.LAYER is defined %}
	{% set LAYER = params.LAYER |
	default((pause_at_layer.layer|int,
	printer.print_stats.info.current_layer|int + 1)|max)%}
	{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}
	
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{
	{ 'enable': False, 'layer': 0, 'call': MACRO }}"
	{% if ENABLE and pause_at_layer.enable %}
	
	GCODE_AT_LAYER COMMAND="{pause_at_layer.call|replace('\"','\\\"')
	}" CANCEL="{1}" LAYER="{pause_at_layer.layer}"
	{% endif %}
	
	GCODE_AT_LAYER COMMAND="{MACRO|replace('\"','\\\"')
	}" CANCEL="{0 if ENABLE else 1}" LAYER="{LAYER}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = _KM_SET_PRINT_STATS_INFO
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	_KM_SET_PRINT_STATS_INFO {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.extruder.can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[gcode_macro _km_options]
variable_load_length = 90.0
variable_menu_temperature = [
	{'name' : 'PLA',  'extruder' : 200.0, 'bed' : 60.0},
	{'name' : 'PETG', 'extruder' : 230.0, 'bed' : 85.0},
	{'name' : 'ABS',  'extruder' : 245.0, 'bed' : 110.0, 'chamber' : 60}]
variable_start_purge_length = 50
variable_start_extruder_probing_temp = 150
variable_park_x = 200.0
variable_park_y = 200.0
gcode = 

[gcode_macro bed_mesh_calibrate_fast]
description = Wraps BED_MESH_CALIBRATE, scaling probe count to specified area.
	Usage: See Klipper documentation.
gcode = 
	
	BED_MESH_CHECK ABORT=1
	
	
	{% set calibrate_cmd =
	(printer["gcode_macro list_macros"].macros.bed_mesh_calibrate|
	default(["bed_mesh_calibrate"],True))[-1] %}
	
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set probe_mesh_padding = km.probe_mesh_padding %}
	{% set probe_min_count = km.probe_min_count %}
	{% set probe_count_scale = km.probe_count_scale %}
	{% set bed_mesh = printer.configfile.settings.bed_mesh %}
	
	
	{%if "mesh_radius" not in bed_mesh and
	"MESH_RADIUS" not in params %}
	{% set safe_min_x = bed_mesh.mesh_min[0] %}
	{% set safe_min_y = bed_mesh.mesh_min[1] %}
	{% set safe_max_x = bed_mesh.mesh_max[0] %}
	{% set safe_max_y = bed_mesh.mesh_max[1] %}
	
	
	{% if "MESH_MIN" in params %}
	{% set mesh_min_x = (params.MESH_MIN.split(",")[0]|float -
	probe_mesh_padding, safe_min_x)|max %}
	{% set mesh_min_y = (params.MESH_MIN.split(",")[1]|float -
	probe_mesh_padding, safe_min_y)|max %}
	{% else %}
	{% set mesh_min_x = safe_min_x %}
	{% set mesh_min_y = safe_min_y %}
	{% endif %}
	{% if "MESH_MAX" in params %}
	{% set mesh_max_x = (params.MESH_MAX.split(",")[0]|float +
	probe_mesh_padding, safe_max_x)|min %}
	{% set mesh_max_y = (params.MESH_MAX.split(",")[1]|float +
	probe_mesh_padding, safe_max_y)|min %}
	{% else %}
	{% set mesh_max_x = safe_max_x %}
	{% set mesh_max_y = safe_max_y %}
	{% endif %}
	
	{% set probe_count = bed_mesh.probe_count if not params.PROBE_COUNT else
	params.PROBE_COUNT.split(",")|map('int')|list %}
	
	{% if "PROBE_COUNT" not in params %}
	{% set max_x_probes = probe_count[0] %}
	{% set max_y_probes = probe_count[-1] %}
	
	{% set x_probes = (max_x_probes * (mesh_max_x - mesh_min_x) /
	(safe_max_x - safe_min_x) * probe_count_scale)
	| round(0) | int %}
	{% set x_probes = ((x_probes, probe_min_count)|max, max_x_probes)|min %}
	
	{% set y_probes = (max_y_probes * (mesh_max_y - mesh_min_y ) /
	(safe_max_y - safe_min_y) * probe_count_scale )
	| round(0) | int %}
	{% set y_probes = ((y_probes, probe_min_count)|max, max_y_probes)|min %}
	
	{% if x_probes > 6 and y_probes < 4 %}
	{% set y_probes = 4 %}
	{% elif y_probes > 6 and x_probes < 4 %}
	{% set x_probes = 4 %}
	{% endif %}
	{% set probe_count = [x_probes,y_probes] %}
	{% elif probe_count|length == 1 %}
	{% set dummy = probe_count.append(probe_count[0]) %}
	{% endif %}
	
	
	
	
	
	
	
	{% if "relative_reference_index" in bed_mesh %}
	{% set row = (bed_mesh.relative_reference_index / bed_mesh.probe_count[0]
	)|int%}
	{% set rrf_x = (((safe_max_x - safe_min_x) /
	(bed_mesh.probe_count[0] - 1))|round(2, 'floor')) *
	(bed_mesh.relative_reference_index %
	bed_mesh.probe_count[-1]) %}
	{% if row % 2 %}
	{% set rrf_x = safe_max_x - rrf_x %}
	{% else %}
	{% set rrf_x = safe_min_x + rrf_x %}
	{% endif %}
	{% set rrf_y = (((safe_max_y - safe_min_y) /
	(bed_mesh.probe_count[-1] - 1))|round(2, 'floor')) *
	row + safe_min_x %}
	{% set x_dist = (mesh_max_x - mesh_min_x) / (probe_count[0] - 1) %}
	{% set y_dist = (mesh_max_y - mesh_min_y) / (probe_count[1] - 1) %}
	{% set rrf = {'x':0, 'y':0, 'dist':safe_max_x**2+safe_max_y**2,'pos':0} %}
	{% for row in range(probe_count[1])%}
	{% for col in range(probe_count[0])%}
	{% if row % 2 %}
	{% set x = mesh_max_x - col * x_dist %}
	{% else %}
	{% set x = mesh_min_x + col * x_dist %}
	{% endif %}
	{% set y = mesh_min_y + row * y_dist %}
	{% set dist = ((x - rrf_x)**2 + (y - rrf_y)**2)**0.5 %}
	{% if dist < rrf.dist %}
	{% set dummy = rrf.__setitem__("dist", dist) %}
	{% set dummy = rrf.__setitem__("x", x) %}
	{% set dummy = rrf.__setitem__("y", y) %}
	{% set dummy = rrf.__setitem__("pos", row * probe_count[1] + col) %}
	{% endif %}
	{% endfor %}
	{% endfor %}
	{% if rrf.x != rrf_x or rrf.y != rrf_y %}
	{action_respond_info("relative_reference_index remapped to"
	" %d (%.2f,%.2f) from %d (%.2f,%.2f)" %
	(rrf.pos, rrf.x, rrf.y,
	bed_mesh.relative_reference_index, rrf_x, rrf_y))}
	{% endif %}
	{% set dummy = params.__setitem__("RELATIVE_REFERENCE_INDEX", rrf.pos) %}
	{% endif %}
	
	{% set dummy = params.__setitem__("MESH_MIN", mesh_min_x~","~mesh_min_y) %}
	{% set dummy = params.__setitem__("MESH_MAX", mesh_max_x~","~mesh_max_y) %}
	{% set dummy = params.__setitem__("PROBE_COUNT", probe_count|join(',')) %}
	
	{% if probe_count[0] > 6 or probe_count[1]|default(0) > 6 %}
	{% set dummy = params.__setitem__("ALGORITHM", "bicubic") %}
	{% endif %}
	
	{% if "MESH_MIN" in params or "MESH_MAX" in params %}
	BED_MESH_CHECK {rawparams}
	{% endif %}
	{% else %}
	
	{% set dummy = params.__delitem__("MESH_MIN") %}
	{% set dummy = params.__delitem__("MESH_MAX") %}
	{% endif %}
	
	{% if "MESH_MIN" in params or "MESH_MAX" in params %}
	BED_MESH_CHECK ABORT=1{%for k in params%}{' '~k~'="'~params[k]~'"'}{%
	endfor%}
	{% endif %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=meshing
	{calibrate_cmd}{%for k in params%}{' '~k~'="'~params[k]~'"'}{%endfor%}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro bed_mesh_check]
description = Warns if bed_mesh config may generate an invalid mesh.
	Usage: BED_MESH_CHECK [MESH_MIN=<x,y>] [MESH_MAX=<x,y>] [ABORT=<0|1>]
gcode = 
	{% if printer.bed_mesh is defined %}
	{% set action = action_respond_info if params.ABORT|default(0)|int == 0 else
	action_raise_error %}
	{% set settings = printer.configfile.settings %}
	{% set x_min = settings.stepper_x.position_min %}
	{% set y_min = settings.stepper_y.position_min %}
	{% set x_max = settings.stepper_x.position_max %}
	{% set y_max = settings.stepper_y.position_max %}
	
	{% set label = "[bed_mesh] config" %}
	{% if "MESH_MIN" in params %}
	{% set label = "BED_MESH_CALIBRATE params" %}
	{% set mesh_min_x = params.MESH_MIN.split(",")[0]|float %}
	{% set mesh_min_y = params.MESH_MIN.split(",")[1]|float %}
	{% else %}
	{% set mesh_min_x = settings.bed_mesh.mesh_min[0] %}
	{% set mesh_min_y = settings.bed_mesh.mesh_min[1] %}
	{% endif %}
	{% if "MESH_MAX" in params %}
	{% set label = "BED_MESH_CALIBRATE params" %}
	{% set mesh_max_x = params.MESH_MAX.split(",")[0]|float %}
	{% set mesh_max_y = params.MESH_MAX.split(",")[1]|float %}
	{% else %}
	{% set mesh_max_x = settings.bed_mesh.mesh_max[0] %}
	{% set mesh_max_y = settings.bed_mesh.mesh_max[1] %}
	{% endif %}
	
	{% if "bltouch" in settings %}
	{% set x_offset = settings.bltouch.x_offset %}
	{% set y_offset = settings.bltouch.y_offset %}
	{% set probe = "bltouch" %}
	{% elif "probe" in settings %}
	{% set x_offset = settings.probe.x_offset %}
	{% set y_offset = settings.probe.y_offset %}
	{% set probe = "probe" %}
	{% else %}
	{% set x_offset = 0.0 %}
	{% set y_offset = 0.0 %}
	{% endif %}
	
	{% set output = [] %}
	{% set warn =
	"* mesh_%s (%f, %f) adjusted by " ~ probe ~
	".%s_offset (%f) can move out of range for "
	"stepper_%s.position_%s (%f)." %}
	{% if x_offset > 0 and (mesh_min_x - x_offset) < x_min %}
	{% set dummy = output.append(warn % ('min', mesh_min_x, mesh_min_y,
	'x', x_offset, 'x', 'min', x_min)) %}
	{% elif x_offset < 0 and (mesh_max_x - x_offset) > x_max %}
	{% set dummy = output.append(warn % ('max', mesh_max_x, mesh_max_y,
	'x', x_offset, 'x', 'max', x_max)) %}
	{% endif %}
	{% if y_offset > 0 and (mesh_min_y - y_offset) < y_min %}
	{% set dummy = output.append(warn % ('min', mesh_min_x, mesh_min_y,
	'y', y_offset, 'y', 'min', y_min)) %}
	{% elif y_offset < 0 and (mesh_max_y - y_offset) > y_max %}
	{% set dummy = output.append(warn % ('max', mesh_max_x, mesh_max_y,
	'y', y_offset, 'y', 'max', y_max)) %}
	{% endif %}
	
	{% if output %}
	{ action(
	"Warning: The following issue(s) were detected in your " ~ label ~
	":\n" ~ output|join("\n")) }
	{% endif %}
	{% endif %}

[gcode_macro _apply_bed_surface_offset]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% if surfaces.active %}
	SET_SURFACE_ACTIVE SURFACE={surfaces.active}
	{% endif %}

[gcode_macro _init_surfaces]
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% if "bed_surfaces" in printer.save_variables.variables %}
	{% set old_surfaces = printer.save_variables.variables.bed_surfaces %}
	{% else %}
	{% set old_surfaces = { 'active' : '', 'available' : {} } %}
	{% endif %}
	{% set settings = printer.configfile.settings %}
	{% set new_probe_z = (settings.probe | default(settings.bltouch) |
	default(settings.smart_effector) | default({})
	).z_offset|default(0.0)|float %}
	{% set new_endstop_z = (settings.stepper_z | default({})).position_endstop |
	default(0.0)|float %}
	{% if 'endstop_z' not in old_surfaces %}
	{% set dummy = old_surfaces.__setitem__('endstop_z', new_endstop_z) %}
	{% endif %}
	{% if 'probe_z' not in old_surfaces %}
	{% set dummy = old_surfaces.__setitem__('probe_z', new_probe_z) %}
	{% endif %}
	{% set surfaces = { 'active' : '', 'available' : {},
	'endstop_z' : old_surfaces.endstop_z,
	'probe_z' : old_surfaces.probe_z } %}
	{% for s in km.bed_surfaces %}
	{% set s = s.split()|join(' ')|lower %}
	{% if s|length > km.bed_surface_max_name_length or
	s|list|select("in", " \r\n\"\'")|list %}
	{action_raise_error('Invalid surface name "%s". Name must be %d or fewer '
	'characters and must not include space or quotation characters'
	| format(s, km.bed_surface_max_name_length))}
	{% endif %}
	{% if s in old_surfaces.available %}
	{% set dummy = surfaces.available.__setitem__(s,
	old_surfaces.available[s]) %}
	{% else %}
	{% set dummy = surfaces.available.__setitem__(s, {'offset' : 0.0}) %}
	{% endif %}
	{% endfor %}
	{% if old_surfaces.active in surfaces.available %}
	{% set dummy = surfaces.__setitem__('active', old_surfaces.active) %}
	{% elif km.bed_surfaces %}
	{% set dummy = surfaces.__setitem__('active', km.bed_surfaces[0]|lower) %}
	{% endif %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	_APPLY_BED_SURFACE_OFFSET
	{% if new_probe_z != surfaces.probe_z or
	new_endstop_z != surfaces.endstop_z %}
	{ action_respond_info(
	'Z probe offset or endstop position changed. Run ADJUST_SURFACE_OFFSETS '
	'to adjust the offset for all saved surfaces by the change differential, '
	'or run ADJUST_SURFACE_OFFSETS IGNORE=1 to hide this message without '
	'making changes.') }
	{% endif %}

[gcode_macro adjust_surface_offsets]
description = Adjusts surface offsets to account for changes in the Z endstop
	position or probe Z offset.
	Usage: ADJUST_SURFACE_OFFSETS [IGNORE]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% set settings = printer.configfile.settings %}
	{% set new_probe_z = (settings.probe | default(settings.bltouch) |
	default(settings.smart_effector) | default({})
	).z_offset|default(0.0)|float %}
	{% set new_endstop_z = (settings.stepper_z | default({})).position_endstop |
	default(0.0)|float %}
	{% set diff = (surfaces.probe_z - new_probe_z +
	surfaces.endstop_z - new_endstop_z)|round(6) %}
	{% if not params.IGNORE|default(0)|int %}
	{% for s in surfaces.available %}
	{% set offset = (surfaces.available[s].offset - diff)|round(6) %}
	{% set dummy = surfaces.available.__setitem__(s, {'offset' : offset}) %}
	{% endfor %}
	{ action_respond_info("All bed surfaces now adjusted by %1.4f"|
	format(diff))}
	{% elif diff != 0 %}
	{ action_respond_info("Status cleared without adjustment") }
	{% endif %}
	{% set dummy = surfaces.__setitem__('endstop_z', new_endstop_z| round(6)) %}
	{% set dummy = surfaces.__setitem__('probe_z', new_probe_z|round(6)) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"

[gcode_macro set_surface_offset]
description = Sets the offset for a surface and moves the toolhead (if homed).
	Usage: SET_SURFACE_OFFSET [OFFSET=<offset>] [SURFACE=<surface>]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}
	{% if SURFACE not in surfaces.available %}
	{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }
	{% endif %}
	{% set active = surfaces.available[SURFACE] %}
	
	{% set OFFSET = params.OFFSET|default(active.offset)|float %}
	{% if OFFSET != active.offset %}
	{% set dummy = surfaces.available[SURFACE].__setitem__("offset", OFFSET) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	{% if SURFACE == surfaces.active %}
	_km_set_gcode_offset_base Z="{OFFSET}" MOVE={
	1 if printer.toolhead.homed_axes == 'xyz' else 0}
	{% endif %}
	{% endif %}
	{ action_respond_info("Bed surface: %s Offset: %.3f"
	| format(SURFACE, OFFSET)) }
	
	{% set dummy = None if True else "
	{% set dummy = params.SURFACE|default(active surface) %}
	{% set dummy = params.OFFSET|default(none)|float %}
	" %}

[gcode_macro set_surface_active]
description = Sets the active bed surface and moves the toolhead (if homed). If
	no SURFACE argument is present the available surfaces are listed and the
	active one is preceded by a "*".
	Usage: SET_SURFACE_ACTIVE [SURFACE=<surface>]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% if "SURFACE" in params %}
	{% set SURFACE = params.SURFACE|lower %}
	{% if SURFACE not in surfaces.available %}
	{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }
	{% endif %}
	{% if SURFACE != surfaces.active %}
	{% set dummy = surfaces.__setitem__("active", SURFACE) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	{% endif %}
	{% if surfaces.available[SURFACE].offset !=
	printer.gcode_move.homing_origin.z %}
	_km_set_gcode_offset_base Z="{surfaces.available[SURFACE].offset
	}" MOVE={1 if printer.toolhead.homed_axes == 'xyz' else 0}
	{% endif %}
	{action_respond_info("Active bed surface: %s; offset: %.3f"
	| format(SURFACE, surfaces.available[SURFACE].offset))}
	{% else %}
	{% set output = [] %}
	{% for s in surfaces.available|list|sort %}
	{% set dummy = output.append("%s&nbsp;%s - offset: %.3f"
	| format("*" if s == surfaces.active else "&nbsp;",
	s, surfaces.available[s].offset)) %}
	{% endfor %}
	{action_respond_info(output|join('\n'))}
	{% endif %}
	
	{% set dummy = None if True else "
	{% set dummy = params.SURFACE|default(none) %}
	" %}

[gcode_macro set_gcode_offset]
description = Wraps SET_GCODE_OFFSET to update the current bed sheet offset.
	Usage: SET_GCODE_OFFSET [X=<pos>|X_ADJUST=<adjust>]
	[Y=<pos>|Y_ADJUST=<adjust>]
	[Z=<pos>|Z_ADJUST=<adjust>]
	[MOVE=1 [MOVE_SPEED=<speed>]]
rename_existing = _KM_SET_GCODE_OFFSET_BASE
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% if surfaces.active and
	not printer["gcode_macro _km_save_state"].is_ephemeral %}
	{% set Z = params.Z|default(0.0)|float|round(6) %}
	{% set Z_ADJUST = params.Z_ADJUST|default(0.0)|float %}
	{% if 'Z' in params and
	Z != surfaces.available[surfaces.active].offset %}
	{% set dummy = surfaces.available[surfaces.active].__setitem__("offset",
	Z) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	{% elif Z_ADJUST != 0.0 %}
	{% set dummy = surfaces.available[surfaces.active].__setitem__(
	"offset", (Z_ADJUST + printer.gcode_move.homing_origin.z)|round(6)) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	{% endif %}
	{% endif %}
	_km_set_gcode_offset_base{% for k in params%}{' '~k~'="'~params[k]~'"'
	}{% endfor %}

[gcode_macro make_surface_mesh]
description = Generates and saves a mesh to automatically load in PRINT_START.
	Usage: MAKE_SURFACE_MESH [SURFACE=<surface>] [BED=<probing temperature>]
	[EXTRUDER=<probing temperature>]
	[MESH_MULTIPLIER=<integer multiple of mesh density>]
	[bed_mesh_calibrate parameters]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}
	{% if SURFACE not in surfaces.available %}
	{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }
	{% endif %}
	{% set dummy = params.__setitem__('PROFILE', SURFACE) %}
	{% set BED = params.BED|default(70) | int %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set EXTRUDER = params.EXTRUDER|default(km.start_extruder_probing_temp) |
	int %}
	{% set MESH_MULTIPLIER = (params.MESH_MULTIPLIER|default(2)|int, 1)|max %}
	
	M104 S{EXTRUDER}
	M140 S{BED}
	G28
	
	
	{% if surfaces.available[SURFACE].offset !=
	printer.gcode_move.homing_origin.z %}
	_km_set_gcode_offset_base Z="{surfaces.available[SURFACE].offset
	}" MOVE=1
	{% endif %}
	
	
	{% if BED > 0 %}
	{action_respond_info("Stabilizing bed at %iC" | format(BED,))}
	_KM_PARK_IF_NEEDED HEATER=heater_bed RANGE=0.5
	{% if BED < (printer.heater_bed.temperature - 0.2) %}
	M190 R{BED}
	G4 P{((km.start_bed_heat_delay * 10, 30000)|min,
	km.start_bed_heat_delay)|max}
	{% else %}
	G4 P{km.start_bed_heat_delay}
	{% endif %}
	M190 R{BED}
	{% endif %}
	
	{% if EXTRUDER > 0 %}
	_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=2
	M109 R{km.start_extruder_probing_temp}
	{% endif %}
	
	{% if km.start_home_z_at_temp and not bed_at_target %}
	G28 Z
	{% endif %}
	
	
	
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count
	if not params.PROBE_COUNT else
	params.PROBE_COUNT.split(",")|map('int')|list %}
	{% set dummy = params.__setitem__('PROBE_COUNT',(
	MESH_MULTIPLIER * (probe_count[0] - 1) + 1,
	MESH_MULTIPLIER * (probe_count[-1] - 1) + 1,)|join(',')) %}
	
	BED_MESH_CLEAR
	BED_MESH_CALIBRATE_FAST {%
	for k in params|reject('in',['BED','SURFACE'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor %}
	SAVE_CONFIG
	
	
	{% set dummy = None if True else "
	{% set dummy = params.MESH_MULTIPLIER|default(2) %}
	{% set dummy = params.SURFACE|default(active surface) %}
	" %}

[gcode_macro load_surface_mesh]
description = Attempts to load a mesh associated with the specified surface.
	Usage: LOAD_SURFACE_MESH [SURFACE=<surface>]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}
	{% if SURFACE != surfaces.active %}
	SET_SURFACE_ACTIVE SURFACE={SURFACE}
	{% endif %}
	
	{% if SURFACE in printer.bed_mesh.profiles %}
	{% set mesh = printer.bed_mesh.profiles[SURFACE].mesh_params %}
	{% set default = printer.configfile.settings.bed_mesh %}
	
	{% if mesh.min_x <= (default.mesh_min[0] + 0.5) and
	mesh.min_y <= (default.mesh_min[1] + 0.5) and
	mesh.max_x >= (default.mesh_max[0] - 0.5) and
	mesh.max_y >= (default.mesh_max[1] - 0.5) and
	mesh.x_count >= default.probe_count[0] and
	mesh.y_count >= default.probe_count[-1] %}
	
	BED_MESH_PROFILE LOAD={SURFACE}
	{action_respond_info("Loaded mesh: %s" | format(SURFACE,))}
	{% endif %}
	{% endif %}

[gcode_macro m300]
description = Emits and audible beep.
	Usage: M300 [P<duration>] [S<frequency>]
gcode = 
	{% set settings = printer.configfile.settings %}
	{% if "output_pin beeper" in printer %}
	{% set P = (params.P|default(100)|int, 0)|max %}
	{% set S = (params.S|default(1000)|int, 1)|max %}
	SET_PIN PIN=beeper VALUE={% if settings["output_pin beeper"].pwm %}{
	settings["output_pin beeper"].scale|default(1.0) * 0.5
	} CYCLE_TIME={ 1.0 / S }{% else %}1{% endif %}
	G4 P{P}
	SET_PIN PIN=beeper VALUE=0
	{% else %}
	{action_respond_info(
	"M300 is disabled. To enable create an [output_pin beeper] config.")}
	{% endif %}

[gcode_macro set_draw_params]
description = Sets the default parameters used by DRAW_LINE_TO.
	Usage: SET_DRAW_PARAMS [HEIGHT=<mm>] [WIDTH=<mm>] [FEEDRATE=<mm/m>]
variable_height = 0.2
variable_width = 0.0
variable_feedrate = 1200
gcode = 
	{% set dparams = printer["gcode_macro set_draw_params"] %}
	{% for k in params %}
	{% set kl = k|lower %}
	{% if kl in dparams %}
	{% if dparams[kl] is float %}
	{% set v = params[k]|float %}
	{% elif dparams[kl] is integer %}
	{% set v = params[k]|int %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=set_draw_params VARIABLE={kl} VALUE="{v}"
	{% endif %}
	{% endfor %}

[gcode_macro draw_line_to]
description = Extrudes a line of filament at the specified height and width from
	the current coordinate to the supplied XY coordinate. (The height is used only
	to calculate the extrusion volume.)
	Usage: DRAW_LINE_TO [X=<pos>] [Y=<pos>] [HEIGHT=<mm>] [WIDTH=<mm>]
	[FEEDRATE=<mm/m>]
gcode = 
	{% set dparams = printer["gcode_macro set_draw_params"] %}
	{% set position = printer.gcode_move.gcode_position %}
	{% set X = params.X|default(position.x)|float %}
	{% set Y = params.Y|default(position.y)|float %}
	{% set HEIGHT = params.HEIGHT|default(dparams.height)|float %}
	{% set WIDTH = params.WIDTH|default(dparams.width)|float %}
	{% set FEEDRATE = params.FEEDRATE|default(dparams.feedrate)|int %}
	
	{% set distance = ((X - position.x) ** 2 + (Y - position.y) ** 2) ** 0.5 %}
	
	{% set filament_area = 3.14159 *
	(printer.configfile.settings[
	printer.toolhead.extruder].filament_diameter ** 2) / 4 %}
	{% set E = distance * ((WIDTH * HEIGHT) / filament_area) %}
	
	
	_KM_SAVE_GCODE_STATE NAME=_KM_PURGE
	G90
	G92 E0.0
	G1 X{"%.3f" % X} Y{"%.3f" % Y} E{"%.5f" % E} F{FEEDRATE}
	_KM_RESTORE_GCODE_STATE NAME=_KM_PURGE MOVE=0

[gcode_macro draw_purge_line]
description = Purges the specified length of filament as a line (or rows of
	lines) in front of the supplied print area. If no print area is specified the
	purge lines are drawn at the front edge of the maximum printable area. If no
	printable area is set it defaults to the XY axis limits.
	Usage: DRAW_PURGE_LINE [PRINT_MIN=<X,Y>] [PRINT_MAX=<X,Y>] [HEIGHT=<mm>]
	[WIDTH=<mm>] [LENGTH=<mm>]
gcode = 
	
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set origin = printer.gcode_move.homing_origin %}
	{% set dummy = km.__setitem__('print_min', (km.print_min[0] - origin.x,
	km.print_min[1] - origin.y)) %}
	{% set dummy = km.__setitem__('print_max', (km.print_max[0] - origin.x,
	km.print_max[1] - origin.y)) %}
	
	{% if "PRINT_MIN" in params %}
	{% set PRINT_MIN = (
	(params.PRINT_MIN.split(",")[0]|float, km.print_min[0])|max,
	(params.PRINT_MIN.split(",")[1]|float, km.print_min[1])|max
	) %}
	{% else %}
	{% set PRINT_MIN = km.print_min %}
	{% endif %}
	{% if "PRINT_MAX" in params %}
	{% set PRINT_MAX = (
	(params.PRINT_MAX.split(",")[0]|float, km.print_max[0])|min,
	(params.PRINT_MAX.split(",")[1]|float, km.print_max[1])|min
	) %}
	{% else %}
	{% set PRINT_MAX = km.print_max %}
	{% endif %}
	{% set extruder = printer.toolhead.extruder|string %}
	{% set HEIGHT = params.HEIGHT|default(
	printer.configfile.settings[extruder].nozzle_diameter * 0.625)|float %}
	{% set WIDTH = params.WIDTH|default(
	printer.configfile.settings[extruder].nozzle_diameter * 1.25)|float %}
	{% set LENGTH = params.LENGTH|default(km.start_purge_length)|float %}
	
	{% set dparams = printer["gcode_macro set_draw_params"] %}
	{% set filament_area = 3.14159 *
	(printer.configfile.settings[extruder].filament_diameter ** 2) / 4 %}
	{% set purge_length = (LENGTH * filament_area) / (WIDTH * HEIGHT) %}
	{% set printable_length = PRINT_MAX[0] - PRINT_MIN[0] %}
	{% set purge_rows = (purge_length / printable_length)|round(0,'ceil')|int %}
	{% set printable_inset = (printable_length - purge_length / purge_rows) / 2 %}
	{% set PRINT_MIN = (PRINT_MIN[0] + printable_inset, PRINT_MIN[1]) %}
	{% set PRINT_MAX = (PRINT_MAX[0] - printable_inset, PRINT_MAX[1]) %}
	
	{% set y_start = (km.print_min[1], PRINT_MIN[1] - km.start_purge_clearance -
	(purge_rows + 0.5) * WIDTH )|max %}
	G90
	
	G1 X{"%.3f" % (PRINT_MIN[0] - 30, km.print_min[0])|max} Y{
	"%.3f" % (y_start - 10, km.print_min[1])|max} F{km.travel_speed_xy}
	
	G1 X{"%.3f" % (PRINT_MIN[0] - 2, km.print_min[0])|max} Y{"%.3f" % y_start} Z{
	"%.4f" % HEIGHT} F{km.travel_speed_xy}
	
	G92 E0.0
	G1 E{"%.3f" % km.start_purge_prime_length} F{km.load_priming_speed}
	G92 E0.0
	
	G1 X{"%.3f" % PRINT_MIN[0]} F{km.travel_speed_xy}
	{% for n in range(purge_rows - 1) %}
	{% set x_pos = PRINT_MIN[0] if n % 2 else PRINT_MAX[0] %}
	DRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{
	WIDTH * n + y_start}"
	DRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{
	WIDTH * (n + 1) + y_start}"
	{% endfor %}
	{% set x_pos = PRINT_MAX[0] if purge_rows % 2 else PRINT_MIN[0] %}
	DRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{
	WIDTH * (purge_rows - 1) + y_start}"
	G92 E0.0

[gcode_macro _check_fan_params]
gcode = 
	{% set MAXIMUM = params.MAXIMUM|default(
	printer["gcode_macro set_fan_scaling"].maximum)|int %}
	{% set MINIMUM = params.MINIMUM|default(
	printer["gcode_macro set_fan_scaling"].minimum)|int %}
	
	{% if params.SCALE and params.SCALE|float <= 0 %}
	{ action_raise_error("SCALE must be a positive value.") }
	{% elif MINIMUM < 0 or MINIMUM > 255 %}
	{ action_raise_error("MINIMUM must be between 0 and 255.") }
	{% elif MAXIMUM < 0 or MAXIMUM > 255 %}
	{ action_raise_error("MAXIMUM must be between 0 and 255.") }
	{% elif params.SPEED and (params.SPEED|int < 0 or params.SPEED|int > 255) %}
	{ action_raise_error("SPEED must be between 0 and 255.") }
	{% elif params.BOOST and (params.BOOST|int < 0 or params.BOOST|int > 255) %}
	{ action_raise_error("BOOST must be between 0 and 255.") }
	{% elif MINIMUM > MAXIMUM %}
	{ action_raise_error("MINIMUM must be less than or equal to MAXIMUM.") }
	{% endif %}

[gcode_macro set_fan_scaling]
description = Sets fan scaling factors applied to M106 command. If a speed is
	provided it will be adjusted according to the scaling parameters.
	Usage: SET_FAN_SCALING [SCALE=<scale>] [BOOST=<boost>] [MAXIMUM=<max>]
	[MINIMUM=<min>] [SPEED=<speed>]
variable_scale = 1.0
variable_boost = 0
variable_minimum = 0
variable_maximum = 255
variable_real_speed = 0
gcode = 
	_CHECK_FAN_PARAMS{% for k in params %}{' '~k~'='~params[k]}{% endfor %}
	{% set SCALE = params.SCALE|default(scale)|float %}
	{% set BOOST = params.BOOST|default(boost)|float %}
	{% set MAXIMUM = params.MAXIMUM|default(maximum)|int %}
	{% set MINIMUM = params.MINIMUM|default(minimum)|int %}
	{% set SPEED = params.SPEED|default(real_speed)|int %}
	
	{% if SCALE != 1.0 or BOOST != 0 or MAXIMUM != 255 or MINIMUM != 0 %}
	{action_respond_info("Fan: Scale: %.2f Minimum:%i Maximum: %i Speed: %i"|
	format(SCALE, MINIMUM, MAXIMUM, SPEED))}
	{% endif %}
	
	
	{% if params|length > 0 %}
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=scale VALUE="{SCALE}"
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=boost VALUE="{BOOST}"
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=minimum VALUE="{MINIMUM}"
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=maximum VALUE="{MAXIMUM}"
	
	M106 S{SPEED}
	{% endif %}
	
	{% set dummy = None if True else "
	{% set dummy = params.SCALE|default(1.0)|float %}
	{% set dummy = params.BUMP|default(0)|int %}
	{% set dummy = params.MAXIMUM|default(255)|int %}
	{% set dummy = params.MINIMUM|default(0)|int %}
	{% set dummy = params.SPEED|default(current speed)|int %}
	" %}

[gcode_macro reset_fan_scaling]
description = Clears all fan scaling factors.
	Usage: RESET_FAN_SCALING
gcode = 
	SET_FAN_SCALING SCALE=1.0 BOOST=0 MAXIMUM=255 MINIMUM=0

[gcode_macro m106]
description = Wraps M106 to implement scaling overrides.
rename_existing = M106.6245197
gcode = 
	{% set S = params.S|default(255)|int %}
	{% set scale = printer["gcode_macro set_fan_scaling"] %}
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=real_speed VALUE="{S}"
	M106.6245197 S{((((S + scale.boost) * scale.scale) | round | int,
	scale.minimum) | max, scale.maximum) | min}

[gcode_macro _load_unload]
gcode = 
	{% set saved_extruder = printer.toolhead.extruder %}
	{% set EXTRUDER = params.EXTRUDER|default(saved_extruder)|lower %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% set BEEPS = params.BEEPS|default(8)|int if "output_pin beeper" in printer
	else 0 %}
	{% set default_minimum = km.load_min_temp if km.load_min_temp else
	(printer.configfile.settings[EXTRUDER].min_extrude_temp + 5) %}
	{% if 'MINIMUM' in params %}
	{% set MINIMUM = params.MINIMUM|int %}
	
	{% elif printer.pause_resume.is_paused and printer[EXTRUDER].target == 0 and
	printer["gcode_macro resume"].saved_extruder_temp %}
	{% set MINIMUM = printer["gcode_macro resume"].saved_extruder_temp %}
	
	{% elif printer[EXTRUDER].target > default_minimum %}
	{% set MINIMUM = printer[EXTRUDER].target %}
	{% else %}
	{% set MINIMUM = default_minimum %}
	{% endif %}
	{% if MINIMUM < printer.configfile.settings[EXTRUDER].min_extrude_temp %}
	{ action_raise_error("Extrude below minimum temp.") }
	{% elif printer.pause_resume.is_paused %}
	
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"
	{% endif %}
	{% set SPEED = params.SPEED|default(km.load_speed)|int %}
	{% set priming_length = km.load_priming_length %}
	{% set LENGTH = params.LENGTH|default(km.load_length)|float - priming_length%}
	{% if LENGTH < 0 %}
	{% set priming_length = (priming_length + LENGTH, 0)|max %}
	{% set LENGTH = 0 %}
	{% endif %}
	SAVE_GCODE_STATE NAME=_KM_LOAD_UNLOAD
	{% if EXTRUDER != saved_extruder%}
	ACTIVATE_EXTRUDER EXTRUDER={EXTRUDER}
	{% endif %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	{% if not printer.extruder.can_extrude or
	printer[EXTRUDER].target < default_minimum %}
	{action_respond_info("Preheating %s to %d" | format(EXTRUDER, MINIMUM))}
	M109 S{MINIMUM}
	{% endif %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS={"filament_load"
	if params.LOAD|int else "filament_unload"}
	M83
	{% set priming_speed = (km.load_priming_speed, SPEED)|min %}
	{% if params.LOAD|int %}
	G0 E{LENGTH} F{SPEED}
	G0 E{priming_length} F{priming_speed}
	G0 E{'%.4f' % -printer["gcode_macro resume"].saved_e} F{km.load_speed}
	{% else %}
	{% set pre_prime_distance = 5.0 %}
	{% set shaping_moves = 5 %}
	{% set shaping_distance = (shaping_moves * (1 + shaping_moves)/20) %}
	
	G0 E{pre_prime_distance} F{SPEED}
	G4 P500
	G0 E{'%.4f' % -(priming_length - shaping_distance)} F{SPEED}
	
	
	{% for i in range(1, shaping_moves + 1) %}
	G0 E2 F{priming_speed}
	G0 E-{2 + (0.1 * i)} F{priming_speed}
	{% endfor %}
	
	G0 E{'%.4f' % -(LENGTH + pre_prime_distance)} F{SPEED}
	{% endif %}
	RESTORE_GCODE_STATE NAME=_KM_LOAD_UNLOAD
	
	
	{% for i in range(BEEPS) %}
	M300 P100
	G4 P200
	{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro LOAD_FILAMENT]
description = Loads filament to the extruder.
	Usage: LOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]
	[EXTRUDER=<extruder>] [MINIMUM=<temperature>]
	[BEEPS=<beep count on completion>]
gcode = 
	_LOAD_UNLOAD LOAD=1{% for k in params
	%}{' '~k~'="'~params[k]~'"'}{% endfor %}
	
	
	{% set dummy = None if True else "
	M109
	{% set dummy = params.LENGTH|default(variable_load_length)|float %}
	{% set dummy = params.SPEED|default(variable_load_speed)|float %}
	{% set dummy = params.EXTRUDER|default(current extruder) %}
	{% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}
	{% set dummy = params.BEEPS|default(10)|int %}
	" %}

[gcode_macro UNLOAD_FILAMENT]
description = Unloads filament from the extruder.
	Usage: UNLOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]
	[EXTRUDER=<extruder>] [MINIMUM=<temperature>]
	[BEEPS=<beep count on completion>]
gcode = 
	_LOAD_UNLOAD LOAD=0{% for k in params
	%}{' '~k~'="'~params[k]~'"'}{% endfor %}
	
	
	{% set dummy = None if True else "
	M109
	{% set dummy = params.LENGTH|default(variable_load_length)|float %}
	{% set dummy = params.SPEED|default(variable_load_speed)|float %}
	{% set dummy = params.EXTRUDER|default(default extruder) %}
	{% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}
	{% set dummy = params.BEEPS|default(10)|int %}
	" %}

[gcode_macro _pause_inner_m700]
gcode = 
	{% set extruder = "extruder" ~ params.T|replace('0', '')
	if "T" in params else printer.toolhead.extruder %}
	{% if extruder != printer.toolhead.extruder%}
	ACTIVATE_EXTRUDER EXTRUDER={extruder}
	{% endif %}
	
	{% set z_param = (' Z="%f"' % params.Z) if 'Z' in params else "" %}
	
	{% if printer.idle_timeout.state|string == "Printing" %}
	PAUSE B="{0}" P=2{z_param}
	{% elif not printer.pause_resume.is_paused%}
	PARK B="{0}" P=2{z_param}
	{% endif %}

[gcode_macro m701]
description = Pauses/parks the toolhead then loads filament to the extruder.
	Usage: M701 [L<distance>] [Z<pos>] [T<extruder>]
gcode = 
	{% if 'U' in params %}
	{% if not 'L' in params %}
	RESPOND TYPE=error MSG="Argument \"U\" substituted for missing \"L\"."
	{% set dummy = params.__setitem__("L", params.U) %}
	{% else %}
	RESPOND TYPE=error MSG="Invalid argument \"U\" ignored."
	{% endif %}
	{% endif %}
	
	_PAUSE_INNER_M700 {% for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	LOAD_FILAMENT BEEPS="{10}" LENGTH={
	params.L|default(printer["gcode_macro _km_globals"].load_length)|float}

[gcode_macro m702]
description = Pauses/parks the toolhead then unloads filament from the extruder.
	Usage: M702 [U<distance>] [Z<pos>] [T<extruder>]
gcode = 
	{% if 'L' in params %}
	{% if not 'U' in params %}
	RESPOND TYPE=error MSG="Argument \"L\" substituted for missing \"U\"."
	{% set dummy = params.__setitem__("U", params.L) %}
	{% else %}
	RESPOND TYPE=error MSG="Invalid argument \"L\" ignored."
	{% endif %}
	{% endif %}
	
	_PAUSE_INNER_M700 {% for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	UNLOAD_FILAMENT BEEPS="{10}" LENGTH={
	params.U|default(printer["gcode_macro _km_globals"].load_length)|float}

[gcode_macro _km_globals]
variable_bed_surface_max_name_length = 10
variable_bed_surfaces = ['default']
variable_load_length = 90.0
variable_load_min_temp = 0
variable_load_priming_length = 20.0
variable_load_priming_speed = 200
variable_load_speed = 1200
variable_menu_show_octoprint = True
variable_menu_show_sdcard = True
variable_menu_temperature = [
	{'name' : 'PLA',  'extruder' : 200, 'bed' : 60},
	{'name' : 'PETG', 'extruder' : 230, 'bed' : 85},
	{'name' : 'ABS',  'extruder' : 245, 'bed' : 110}]
variable_park_x = 0.0
variable_park_y = 0.0
variable_park_z = 20.0
variable_print_min = ()
variable_print_max = ()
variable_pressure_advance_scale = -1.0
variable_probe_mesh_padding = 5.0
variable_probe_min_count = 3
variable_probe_count_scale = 1.0
variable_start_bed_heat_delay = 2000
variable_start_bed_heat_overshoot = 2.0
variable_start_clear_adjustments_at_end = True
variable_start_end_park_y = 0.0
variable_start_extruder_preheat_scale = 0.5
variable_start_extruder_probing_temp = 0
variable_start_home_z_at_temp = True
variable_start_level_bed_at_temp = True
variable_start_purge_clearance = 2.0
variable_start_purge_length = 0.0
variable_start_purge_prime_length = 12.0
variable_start_quad_gantry_level_at_temp = True
variable_start_random_placement_max = 0
variable_start_random_placement_padding = 10.0
variable_start_try_saved_surface_mesh = False
variable_start_z_tilt_adjust_at_temp = True
variable_travel_speed_xy = 3000
variable_travel_speed_z = 600
description = Initializes our globals, including any _km_options overrides.
gcode = 
	
	
	
	
	
	
	
	
	{% set required_sections = {"heater_bed" : None,
	"extruder" : None,
	"gcode_macro _km_options" : None,
	"idle_timeout" : ("gcode", "_KM_IDLE_TIMEOUT"),
	"pause_resume" : None,
	"respond" : None,
	"save_variables" : None,
	"virtual_sdcard" :
	("on_error_gcode", "CANCEL_PRINT")
	} %}
	{% set warn_removed = {
	"start_extruder_set_target_before_level" :
	"The start_extruder_set_target_before_level option has been removed. "
	"Use the start_extruder_probing_temp option instead to set a fixed "
	"probing temperature.",
	"start_gcode_before_print" :
	"The start_gcode_before_print option has been removed. The same effect "
	"can now be achieved by inserting custom gcode before the "
	"_PRINT_START_PHASE_PURGE line in your slicer's start gcode, or by "
	"wrapping the _PRINT_START_PHASE_PURGE macro. See the Slicer "
	"Configuration section in the readme for more information.",
	"velocity_decel_scale" :
	"The velocity_decel_scale option has been removed. Klipper's input "
	"shaping provides a superior mechanism for improving print quality "
	"at higher speeds.",
	} %}
	{% set output = [] %}
	{% for s in required_sections %}
	{% set f = required_sections[s][0] if required_sections[s] else None %}
	{% set v = required_sections[s][1] if required_sections[s] else None %}
	{% if s not in printer.configfile.config %}
	{% set dummy = output.append("Missing [%s] section.\n" | format(s)) %}
	{% elif f and
	(v not in printer.configfile.config[s][f]|default("")|upper) %}
	{% set dummy = output.append("Missing %s in %s for [%s] section.\n"
	| format(v, f, s)) %}
	{% endif %}
	{% endfor %}
	{% if output %}
	{ action_emergency_stop((
	"required printer.cfg section(s) missing:\n"
	~ output | join("\n")) ~
	"See readme: https://github.com/jschuh/klipper-macros\x23klipper-setup")
	}
	{% endif %}
	
	
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_level_bed_at_temp VALUE="{
	1 if printer.bed_mesh is defined else 0}"
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_quad_gantry_level_at_temp VALUE="{
	1 if printer.quad_gantry_level is defined else 0}"
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_z_tilt_adjust_at_temp VALUE="{
	1 if printer.z_tilt is defined else 0}"
	{% set toolhead = printer.toolhead %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=print_min VALUE="{
	(toolhead.axis_minimum.x, toolhead.axis_minimum.y)}"
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=print_max VALUE="{
	(toolhead.axis_maximum.x, toolhead.axis_maximum.y)}"
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_end_park_y VALUE="{
	toolhead.axis_maximum.y}"
	{% set settings = printer.configfile.settings %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_home_z_at_temp VALUE="{
	1 if ("stepper_z" in settings and
	settings.stepper_z.endstop_pin.split()|join("")|lower ==
	"probe:z_virtual_endstop") else 0}"
	
	{% set options = printer["gcode_macro _km_options"] %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	
	{% if options.park_x|default("")|string|lower == "min" %}
	{% set dummy = options.__setitem__("park_x",
	printer.configfile.settings.stepper_x.position_min) %}
	{% elif options.park_x|default("")|string|lower == "max" %}
	{% set dummy = options.__setitem__("park_x",
	printer.configfile.settings.stepper_x.position_max) %}
	{% endif %}
	{% if options.park_y|default("")|string|lower == "min" %}
	{% set dummy = options.__setitem__("park_y",
	printer.configfile.settings.stepper_y.position_min) %}
	{% elif options.park_y|default("")|string|lower == "max" %}
	{% set dummy = options.__setitem__("park_y",
	printer.configfile.settings.stepper_y.position_max) %}
	{% endif %}
	{% if options.start_end_park_y|default("")|string|lower == "min" %}
	{% set dummy = options.__setitem__("start_end_park_y",
	printer.configfile.settings.stepper_y.position_min) %}
	{% elif options.start_end_park_y|default("")|string|lower == "max" %}
	{% set dummy = options.__setitem__("start_end_park_y",
	printer.configfile.settings.stepper_y.position_max) %}
	{% endif %}
	{% if options.park_z|default("")|string|lower == "min" %}
	{% set dummy = options.__setitem__("park_z",
	printer.configfile.settings.stepper_z.position_min) %}
	{% elif options.park_z|default("")|string|lower == "max" %}
	{% set dummy = options.__setitem__("park_z",
	printer.configfile.settings.stepper_z.position_max) %}
	{% endif %}
	
	
	{% for k in options %}
	{% if k not in km %}
	{% if k in warn_removed %}
	{action_respond_info(warn_removed[k])}
	{% else %}
	{% set dummy = output.append("%s is not valid for _KM_OPTIONS." |
	format(k)) %}
	{% endif %}
	{% elif km[k] is string %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k
	} VALUE="'{options[k]|replace('\\','\\\\')|replace('\'','\\\'')
	|replace('\"','\\\"')}'"
	{% elif km[k] is float %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k
	} VALUE="{options[k]|float}"
	{% elif km[k] is integer or km[k] is boolean %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k} VALUE="{options[k]|int}"
	{% elif km[k] is mapping %}
	{% if options[k] is not mapping %}
	{% set dummy = output.append("%s requires a mapping type." |
	format(k)) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k
	} VALUE="{options[k]|replace('\"','\\\"')}"
	{% elif km[k] is sequence %}
	{% if options[k] is not sequence %}
	{% set dummy = output.append("%s requires a sequence type." |
	format(k)) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k
	} VALUE="{options[k]|replace('\"','\\\"')}"
	{% else %}
	{% set dummy = output.append("%s is not a valid type for _KM_OPTIONS." |
	format(k)) %}
	{% endif %}
	{% endfor %}
	
	{% if "homing_override" in printer.configfile.config %}
	{% for l in printer.configfile.config.homing_override.gcode.split("\n") %}
	{% if " g28 " in (" " ~ l.split("\x23")[0].split(";")[0]|lower ~ " ") %}
	{% set dummy = output.append(
	"G28 in [homing_override] gcode. Replace with G28.6245197 to "
	"fix recursive macro call.\n"
	"See readme: https://github.com/jschuh/klipper-macros\x23g28") %}
	{% endif %}
	{% endfor %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=check_km_config VARIABLE=load_errors VALUE="{
	output|replace('\"','\\\"')}"
	M400

[delayed_gcode INIT_GLOBALS]
initial_duration = 1
gcode = 
	LIST_MACROS SILENT=1
	_KM_GLOBALS
	
	CHECK_KM_CONFIG
	_INIT_SURFACES
	BED_MESH_CHECK
	
	SET_DRAW_PARAMS WIDTH="{printer.configfile.settings.extruder.nozzle_diameter}"
	
	_KM_OPTIONS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready

[gcode_macro check_km_config]
variable_load_errors = []
description = Checks global variables and throws an error on any invalid values.
	Does nothing if the config has no errors.
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set toolhead = printer.toolhead %}
	{% set output = load_errors %}
	{% if km.park_x > toolhead.axis_maximum.x or
	km.park_x < toolhead.axis_minimum.x %}
	{% set dummy = output.append("park_x is invalid.") %}
	{% endif %}
	{% if km.park_y > toolhead.axis_maximum.y or
	km.park_y < toolhead.axis_minimum.y %}
	{% set dummy = output.append("park_y is invalid.") %}
	{% endif %}
	{% if km.park_z > toolhead.axis_maximum.z or
	km.park_z < toolhead.axis_minimum.z %}
	{% set dummy = output.append("park_z is invalid.") %}
	{% endif %}
	{% if km.print_max[0] > toolhead.axis_maximum.x or
	km.print_max[1] > toolhead.axis_maximum.y %}
	{% set dummy = output.append("print_max is invalid.") %}
	{% endif %}
	{% if km.print_min[0] < toolhead.axis_minimum.x or
	km.print_min[1] < toolhead.axis_minimum.y %}
	{% set dummy = output.append("print_min is invalid.") %}
	{% endif %}
	{% if km.start_extruder_preheat_scale > 1.0 or
	km.start_extruder_preheat_scale < 0.0 %}
	{% set dummy = output.append("extruder_preheat_scale is invalid.") %}
	{% endif %}
	{% if km.load_length >
	printer.configfile.settings["extruder"].max_extrude_only_distance %}
	{% set dummy = output.append(
	"load_length exceeds max_extrude_only_distance.") %}
	{% endif %}
	{% if km.load_length < km.load_priming_length %}
	{% set dummy = output.append(
	"load_length is shorter than load_priming_length.") %}
	{% endif %}
	{% if km.load_length < 0.0 %}
	{% set dummy = output.append("load_length is negative.") %}
	{% endif %}
	{% if km.load_priming_length < 0.0 %}
	{% set dummy = output.append("load_priming_length is negative.") %}
	{% endif %}
	
	
	{% if output %}
	{ action_raise_error(output|sort|join('\nError: ')) }
	{% endif %}
	M400

[gcode_macro kmvars]
description = Lists global variables used by klipper-macros.
	Usage: KMVARS [SEARCH=<search_string>]
gcode = 
	{% set SEARCH = params.SEARCH|default(params.S|default(""))|lower %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set output = [] %}
	{% for k in km %}
	{% if SEARCH in k %}
	{% set dummy = output.append(k ~ ": " ~ km[k]) %}
	{% endif %}
	{% endfor %}
	{ action_respond_info(output|sort|join('\n')) }

[gcode_macro check_macro_docs]
description = Lists macros lacking proper documentation.
	Usage: CHECK_MACRO_DOCS [USAGE=<0|1>] [HIDDEN=<1|0>] [RENAMED=<1|0>]
gcode = 
	{% set USAGE = params.USAGE|default(0)|int %}
	{% set HIDDEN = params.HIDDEN|default(0)|int %}
	{% set RENAMED = params.RENAMED|default(0)|int %}
	{% set output = [] %}
	{%set config = printer.configfile.config %}
	{% for k in config|sort %}
	{% if k.startswith("gcode_macro") %}
	{% set name = k.split()[1] %}
	{% set desc = config[k].description|default("") %}
	{% set is_renamed = config[k].rename_existing|default("") %}
	{% if (not desc or (USAGE and not "Usage: "~name.upper() in desc)) and
	(HIDDEN or not name.startswith('_')) and (RENAMED or is_renamed) %}
	{% set dummy = output.append("%s&nbsp;%s: missing %s."
	| format("*" if is_renamed else "&nbsp;", name,
	"description" if not desc else "usage")) %}
	{% endif %}
	{% endif %}
	{% endfor %}
	{action_respond_info(output|join("\n"))}

[gcode_macro listvars]
description = Lists per-macro variables with a name containing SEARCH. This is
	useful for debugging macros by allowing you to probe printer state. Be very
	careful, however, as an overly broad SEARCH parameter can take a long time
	to process and potentially hang or crash klipper.
	Usage: LISTVARS SEARCH=<search_string>
gcode = 
	
	{% if 'SEARCH' not in params and 'S' not in params %}
	{ action_raise_error("Must provide a SEARCH parameter.") }
	{% endif %}
	{% set SEARCH = params.SEARCH|default(params.S)|lower %}
	{% set ns = namespace() %}
	{% set output = [] %}
	{% for item in printer %}
	{% if item is not string %}
	{% set ns.path = ['printer', "[%s]" % (item|string), ''] %}
	{% elif ' ' in item %}
	{% set ns.path = ['printer', "['%s']" % (item), ''] %}
	{% else %}
	{% set ns.path = ['printer.', item, ''] %}
	{% endif %}
	
	{% if SEARCH in ns.path|lower %}
	{% set dummy = output.append(ns.path|join) %}
	{% endif %}
	
	{% if printer[item].items() %}
	{% for childkey, child in printer[item].items() recursive %}
	{% set ns.path = ns.path[:loop.depth|int + 1] %}
	{% if childkey is not string %}
	{% set null = ns.path.append("[%s]" % (childkey|string)) %}
	{% elif ' ' in childkey %}
	{% set null = ns.path.append("['%s']" % (childkey)) %}
	{% else %}
	{% set null = ns.path.append(".%s" % (childkey)) %}
	{% endif %}
	
	{% if child is mapping  %}
	{loop(child.items())}
	{% else %}
	{% if SEARCH in ns.path|lower %}
	{% set dummy = output.append("%s : %s" % (ns.path|join, child)) %}
	{% endif %}
	{% endif %}
	{% endfor %}
	{% endif %}
	{% endfor %}
	{ action_respond_info(output|join("\n")) }

[gcode_macro list_macros]
description = Lists registered macros (and optionally show variable state).
	Usage: LISTVARS SEARCH=<search_string> VARS=<0|1> SILENT=<0|1>
variable_macros = {}
gcode = 
	
	{% if not macros %}
	{% set renames = {} %}
	{% for k in printer.configfile.config %}
	{% if k.lower().startswith("gcode_macro") and
	printer.configfile.config[k].rename_existing %}
	{% set name = k.split(None, 1)[1] | lower %}
	{% set dummy = renames.__setitem__(name,
	[printer.configfile.config[k].rename_existing|lower] +
	renames[name]|default([])) %}
	{% endif %}
	{% endfor %}
	{% for k in printer %}
	{% if k.lower().startswith("gcode_macro") %}
	{% set name = k.split(None, 1)[1] | lower %}
	{% set dummy = macros.__setitem__(name, renames[name]|default([])) %}
	{% endif %}
	{% endfor %}
	{% endif %}
	
	{% if params.SILENT|default(0)|int == 0 %}
	_LIST_MACROS_DISPLAY {rawparams}
	{% endif %}

[gcode_macro _list_macros_display]
gcode = 
	{% set SEARCH = params.SEARCH | default(params.S) | default("") | lower %}
	{% set VARS = params.VARS | default(params.V) | default(0) | int != 0 %}
	
	{% set macros = printer["gcode_macro list_macros"].macros %}
	{% set output = [] %}
	{% for k in macros %}
	{% if SEARCH in k | lower %}
	{% set line = k ~ ((" (renames: %s)" % (macros[k]|join(","))) if macros[k]
	else "") %}
	{% set outvars = [] %}
	{% if VARS %}
	{% for v in printer["gcode_macro " ~ k] | sort %}
	{% set dummy = outvars.append("\n* %s: %s" %
	(v, printer["gcode_macro " ~ k][v]|string)) %}
	{% endfor %}
	{% endif %}
	{% set dummy = output.append(line + outvars | join("")) %}
	{% endif %}
	{% endfor %}
	{ action_respond_info(output | sort | join("\n")) }

[gcode_macro set_heater_temperature_scaled]
gcode = 
	{% set HEATER = params.HEATER.lower() %}
	{% set TARGET = params.TARGET|default(0.0)|float %}
	{% set scaled_heaters =
	printer["gcode_macro set_heater_scaling"].scaled_heaters %}
	{% if HEATER in scaled_heaters %}
	{% set scales = scaled_heaters[HEATER] %}
	{% set dummy = scales.__setitem__("real_target", TARGET) %}
	{%if TARGET > 0.0 %}
	{% set TARGET = (((TARGET + scales.bump) * scales.scale, scales.minimum)
	| max, scales.maximum)|min %}
	{% endif %}
	{% endif %}
	SET_HEATER_TEMPERATURE HEATER="{HEATER}" TARGET={TARGET}

[gcode_macro temperature_wait_scaled]
gcode = 
	{% set SENSOR = params.SENSOR.lower() %}
	{% set heater = SENSOR if not SENSOR.startswith("heater_generic") else
	SENSOR.split()[1] %}
	{% set scaled_heaters =
	printer["gcode_macro set_heater_scaling"].scaled_heaters %}
	{% if heater in scaled_heaters %}
	{% set scales = scaled_heaters[heater] %}
	{% if "MINIMUM" in params and MINIMUM > 0.0 %}
	{% set MINIMUM = (((MINIMUM + scales.bump) * scales.scale, scales.minimum)
	| max, scales.maximum)|min %}
	{% endif %}
	{% if "MAXIMUM" in params and MAXIMUM > 0.0 %}
	{% set MAXIMUM = (((MAXIMUM + scales.bump) * scales.scale, scales.minimum)
	| max, scales.maximum)|min %}
	{% endif %}
	{% else %}
	{% set settings = printer.configfile.settings[SENSOR] %}
	{% set MINIMUM = params.MINIMUM|default(settings.min_temp) %}
	{% set MAXIMUM = params.MAXIMUM|default(settings.max_temp) %}
	{% endif %}
	{% if printer[sensor].temperature < MINIMUM or
	printer[sensor].temperature > MAXIMUM %}
	TEMPERATURE_WAIT SENSOR="{SENSOR}" MINIMUM={MINIMUM} MAXIMUM={MAXIMUM}
	{% endif %}

[gcode_macro _gcode_wait_wrapper_inner]
gcode = 
	
	
	{% set sensor = params.HEATER if params.HEATER in
	printer.heaters.available_heaters
	else ("heater_generic " ~ params.HEATER) %}
	{% set target = printer[sensor].target %}
	{% if 'R' in params and target > 0.0 %}
	{% set T = params.T|default("") %}
	M{params.M}.6245197 S{target} { (" T"~T) if T else "" }
	{% elif printer[sensor].temperature < target %}
	TEMPERATURE_WAIT SENSOR="{sensor}" MINIMUM={target}
	{% endif %}

[gcode_macro _gcode_wait_wrapper]
gcode = 
	{% set target = params.S | default(params.R | default(0))| float %}
	SET_HEATER_TEMPERATURE_SCALED HEATER="{params.HEATER}" TARGET={target}
	_GCODE_WAIT_WRAPPER_INNER{%
	for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}

[gcode_macro m109]
rename_existing = M109.6245197
gcode = 
	{% set extruder = "extruder" ~ params.T|replace('0', '')
	if "T" in params else printer.toolhead.extruder %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating
	_GCODE_WAIT_WRAPPER HEATER={extruder}{%
	for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro m190]
rename_existing = M190.6245197
gcode = 
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=bed_heating
	_GCODE_WAIT_WRAPPER HEATER=heater_bed {%
	for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro m191]
description = Sets chamber temperature (with wait for heating).
	Usage: M191 [S<temp>]
gcode = 
	
	{% if "R" in params %}
	{% set dummy = params.__setitem__("S", params.R) %}
	{% endif %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=chamber_heating
	_GCODE_WAIT_WRAPPER HEATER=chamber {%
	for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro m104]
rename_existing = M104.6245197
gcode = 
	{% set extruder = "extruder" ~ params.T|replace('0', '')
	if "T" in params else printer.toolhead.extruder %}
	SET_HEATER_TEMPERATURE_SCALED HEATER={extruder} TARGET={params.S|default(0)}

[gcode_macro m140]
rename_existing = M140.6245197
gcode = 
	SET_HEATER_TEMPERATURE_SCALED HEATER=heater_bed TARGET={params.S|default(0)}

[gcode_macro m141]
description = Sets chamber temperature.
	Usage: M141 [S<temp>]
gcode = 
	SET_HEATER_TEMPERATURE_SCALED HEATER=chamber TARGET={params.S|default(0)}

[gcode_macro _check_heater_params]
gcode = 
	{% set HEATER = params.HEATER|lower %}
	{% set sensor = params.HEATER %}
	{% if HEATER not in printer.heaters.available_heaters %}
	{% set sensor = "heater_generic " ~ HEATER %}
	{% if sensor not in printer.heaters.available_heaters %}
	{ action_raise_error("The value '%s' is not valid for HEATER"
	| format(HEATER)) }
	{% endif %}
	{% endif %}
	{% set settings = printer.configfile.settings[sensor] %}
	{% set scaled_heaters =
	printer["gcode_macro set_heater_scaling"].scaled_heaters %}
	{% if HEATER is in scaled_heaters %}
	{% set scales = scaled_heaters[HEATER] %}
	{% else %}
	{% set scales = { "scale": 1.0, "bump": 0.0, "minimum": settings.min_temp,
	"maximum": settings.max_temp,
	"real_target": printer[sensor].target} %}
	{% endif %}
	{% set SCALE = params.SCALE|default(scales.scale)|float %}
	{% set BUMP = params.BUMP|default(scales.bump)|float %}
	{% set MINIMUM = params.MINIMUM|default(scales.minimum)|float %}
	{% set MAXIMUM = params.MAXIMUM|default(scales.maximum)|float %}
	
	{% if SCALE <= 0 %}
	{ action_raise_error("SCALE must be a positive value.") }
	{% elif MINIMUM < settings.min_temp or MINIMUM > settings.max_temp %}
	{ action_raise_error("MINIMUM must be between %.1f and %.1f" |
	format(settings.min_temp, settings.max_temp)) }
	{% elif MAXIMUM < settings.min_temp or MAXIMUM > settings.max_temp %}
	{ action_raise_error("MAXIMUM must be between %.1f and %.1f" |
	format(settings.min_temp, settings.max_temp)) }
	{% elif MINIMUM >= MAXIMUM %}
	{ action_raise_error("MINIMUM must be less than MAXIMUM.") }
	{% elif "TARGET" in params and (params.TARGET|float < MINIMUM or
	params.TARGET|float > MAXIMUM) %}
	{ action_raise_error("TARGET must be between %.1f and %.1f" |
	format(settings.min_temp, settings.max_temp)) }
	{% endif %}

[gcode_macro set_heater_scaling]
description = Sets scaling parameters for heater. If a new target temperature is
	passed it will be adjusted to the scaling parameters.
	Usage: SET_HEATER_SCALING [HEATER=<heater>] [SCALE=<scale_factor>]
	[BUMP=<degrees>] [MAXIMUM=<degrees>]
	[MINIMUM=<degrees>] [TARGET=<temp>]
variable_scaled_heaters = {}
gcode = 
	
	{% if "HEATER" is not in params %}
	{% set output = [] %}
	{% for h in scaled_heaters %}
	{% set dummy = output.append(
	"%s: Scale: %.2f Bump: %.1f Minimum:%.1f Maximum: %.1f"
	| format(h, scaled_heaters[h].scale, scaled_heaters[h].bump,
	scaled_heaters[h].minimum, scaled_heaters[h].maximum)) %}
	{% endfor %}
	{% if output %}}{action_respond_info(output|join('\n'))}{% endif %}
	{% else %}
	
	{% set HEATER = params.HEATER.lower() %}
	{% set settings = printer.configfile.settings[HEATER] %}
	{% if HEATER is not in scaled_heaters %}
	{% set dummy = scaled_heaters.__setitem__(HEATER, {"scale": 1.0,
	"bump": 0.0, "minimum": settings.min_temp,
	"maximum": settings.max_temp,
	"real_target": printer[HEATER].target}) %}
	{% endif %}
	_CHECK_HEATER_PARAMS{% for k in params %}{' '~k~'='~params[k]}{% endfor %}
	{% set scales = scaled_heaters[HEATER] %}
	{% set SCALE = params.SCALE|default(scales.scale)|float %}
	{% set BUMP = params.BUMP|default(scales.bump)|float %}
	{% set MAXIMUM = params.MAXIMUM|default(scales.maximum)|float %}
	{% set MINIMUM = params.MINIMUM|default(scales.minimum)|float %}
	{% set TARGET = params.TARGET|default(scales.real_target)|float %}
	{% set dummy = scales.__setitem__("scale", SCALE) %}
	{% set dummy = scales.__setitem__("bump", BUMP) %}
	{% set dummy = scales.__setitem__("maximum", MAXIMUM) %}
	{% set dummy = scales.__setitem__("minimum", MINIMUM) %}
	{% set dummy = scales.__setitem__("real_target", TARGET) %}
	
	{% set settings = printer.configfile.settings[HEATER] %}
	{% if SCALE != 1.0 or BUMP != 0.0 or MINIMUM != settings.min_temp or
	MAXIMUM != settings.max_temp %}
	{% set dummy = scaled_heaters.__setitem__(HEATER, scales) %}
	{% else %}
	{% set dummy = scaled_heaters.__delitem__(HEATER) %}
	{% endif %}
	SET_HEATER_TEMPERATURE_SCALED HEATER={HEATER} TARGET={TARGET}
	{action_respond_info(
	"%s: Scale: %.2f Bump: %.1f Minimum:%.1f Maximum: %.1f Target: %.1f"
	| format(HEATER, SCALE, BUMP, MINIMUM, MAXIMUM, TARGET))}
	{% endif %}
	
	{% set dummy = None if True else "
	{% set dummy = params.HEATER|default(e.g. extruder) %}
	{% set dummy = params.SCALE|default(1.0)|float %}
	{% set dummy = params.BUMP|default(0.0)|float %}
	{% set dummy = params.MAXIMUM|default(max_temp)|float %}
	{% set dummy = params.MINIMUM|default(min_temp)|float %}
	{% set dummy = params.TARGET|default(current target)|float %}
	" %}

[gcode_macro reset_heater_scaling]
description = Clears scaling for heater (or all heaters if none specified).
	Usage: RESET_HEATER_SCALING [HEATER=<heater>]
gcode = 
	{% if "HEATER" in params %}
	{% set HEATER = params.HEATER.lower() %}
	{% if HEATER not in printer.heaters.available_heaters %}
	{ action_raise_error("The value '%s' is not valid for HEATER"
	| format(HEATER)) }
	{% endif %}
	{% set settings = printer.configfile.settings[HEATER] %}
	SET_HEATER_SCALING HEATER={HEATER
	} SCALE=1.0 BUMP=0.0 MINIMUM={settings.min_temp
	} MAXIMUM={settings.max_temp}
	{% else %}
	
	SET_GCODE_VARIABLE MACRO=set_heater_scaling VARIABLE=scaled_heaters VALUE={
	"{}"}
	{% endif %}

[gcode_macro _km_idle_timeout]
gcode = 
	{% if printer.pause_resume.is_paused %}
	{action_respond_info("Extruder powered down on idle timeout.")}
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{
	printer[printer.toolhead.extruder].target}"
	M104; Turn off extruder but leave the bed on.
	{% else %}
	TURN_OFF_HEATERS
	M107; turn off fan
	M84
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready
	{% endif %}

[gcode_macro _check_kinematic_limits]
gcode = 
	{% set toolhead = printer.toolhead %}
	{% if params.X and (params.X|float < toolhead.axis_minimum.x or
	params.X|float > toolhead.axis_maximum.x) %}
	{action_raise_error("X[%.3f] must be between %.3f and %.3f."
	| format(params.X|float, toolhead.axis_minimum.x,
	toolhead.axis_maximum.x))}
	{% elif params.Y and (params.Y|float < toolhead.axis_minimum.y or
	params.Y|float > toolhead.axis_maximum.y) %}
	{action_raise_error("Y[%.3f] must be between %.3f and %.3f."
	| format(params.Y|float, toolhead.axis_minimum.y,
	toolhead.axis_maximum.y))}
	{% elif params.Z and (params.Z|float < toolhead.axis_minimum.z or
	params.Z|float > toolhead.axis_maximum.z) %}
	{action_raise_error("Z[%.3f] must be between %.3f and %.3f."
	| format(params.Z|float, toolhead.axis_minimum.z,
	toolhead.axis_maximum.z))}
	{% elif params.E and (params.E|float|abs > printer.configfile.settings[
	"extruder"].max_extrude_only_distance) %}
	{action_raise_error("E[%.4f] exceeds max_extrude_only_distance[%.4f]."
	| format(params.E|float|abs, printer.configfile.settings[
	"extruder"].max_extrude_only_distance))}
	{% endif %}

[gcode_macro lazy_home]
description = Homes the specified axes. If lazy is true, already homed axes
	are skipped.
	Usage: LAZY_HOME [LAZY=<1|0>] [AXES=<axes_string>]
gcode = 
	
	LIST_MACROS SILENT=1
	_LAZY_HOME_INNER {rawparams}

[gcode_macro _lazy_home_inner]
gcode = 
	
	{% set G28 = (printer["gcode_macro list_macros"].macros.g28|
	default(["g28"],True))[-1] %}
	{% set axes = 'XYZ'|select('in', params.AXES|default("XYZ")|upper|list) %}
	{% if not axes %}
	{% set axes = 'XYZ' %}
	{% endif %}
	{% if params.LAZY|default(1)|int %}
	{% set axes = axes|reject('in', printer.toolhead.homed_axes|upper)|join() %}
	{% endif %}
	
	{% if axes %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing
	{G28}{% for k in axes %}{' ' ~ k}{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status
	{% endif %}

[gcode_macro g28]
description = Wraps the G28 command to add the Marlin "O" parameter so that
	already homed axes will not be homed again. See the Klipper documentation on
	G28 for the behavior of the other parameters.
	Usage: G28 [O] ...
rename_existing = G28.6245197
gcode = 
	{% set axes = 'XYZ'|select('in', params)|join() %}
	LAZY_HOME LAZY={('O' in params)|int}{%if axes%} AXES={axes}{%endif%}

[gcode_macro before_layer_change]
description = Add this to the "before layer change" input box in the slicer.
	Usage: BEFORE_LAYER_CHANGE HEIGHT=<current_height> LAYER=<current_layer>
gcode = 
	{% set height = params.HEIGHT|default(printer.toolhead.position.z)|float %}
	{% set layer = params.LAYER|default(-1)|int + 1 %}
	{% if height >= 0.0 and layer >= 0 %}
	SET_PRINT_STATS_INFO CURRENT_LAYER="{layer}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{height}"
	{% if printer["gcode_macro _km_layer_run"].clearance_z < height %}
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{
	height}"
	{% endif %}
	{% endif %}

[gcode_macro after_layer_change]
description = Add this to the "after layer change" input box in the slicer.
	Usage: AFTER_LAYER_CHANGE
gcode = 
	_KM_LAYER_RUN

[gcode_macro gcode_at_layer]
description = Schedules the specified g-code command to be run at the specified
	layer. LAYER=next will cause the command to run at the next layer change.
	Usage: GCODE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } COMMAND=<gcode>
	[CANCEL=<0|1>]
gcode = 
	{% set tot_layers = printer.print_stats.info.total_layer %}
	{% if params|length > 0 %}
	_KM_CHECK_IS_PRINTING
	
	{% set CANCEL = params.CANCEL|default(0)|int != 0 %}
	{% set COMMAND = params.COMMAND|default(None) %}
	{% if COMMAND %}
	{% set COMMAND = COMMAND.lstrip().split(None, 1) %}
	{% set COMMAND = " ".join([COMMAND[0]|upper] + COMMAND[1:]) %}
	{% endif %}
	
	{% if "LAYER" in params %}
	{% set cmd_container = "commands_layer" %}
	{% set cur_layer = printer.print_stats.info.current_layer|int %}
	{% if "HEIGHT" in params %}
	{action_raise_error("Conflicting HEIGHT and LAYER arguments provided.")}
	{% elif params.LAYER|string|lower == "next" %}
	{% set LAYER = cur_layer + 1 %}
	{% else %}
	{% set LAYER = params.LAYER|int %}
	{% endif %}
	{% if LAYER <= cur_layer %}
	{action_raise_error("LAYER[%i] must be above current print layer[%i]."
	| format(LAYER, cur_layer))}
	{% elif tot_layers and LAYER > tot_layers %}
	{action_raise_error("LAYER[%i] must not be above top layer[%i]."
	| format(LAYER, tot_layers))}
	{% endif %}
	{% set key = LAYER %}
	
	{% elif "HEIGHT" in params %}
	{% set cmd_container = "commands_height" %}
	{% set HEIGHT = params.HEIGHT|float %}
	{% set cur_height = printer["gcode_macro _km_layer_run"].cur_height %}
	{% if HEIGHT <= cur_height %}
	{action_raise_error(
	"HEIGHT[%.3f] must be above current print height[%.3f].")
	| format(HEIGHT, cur_height)}
	{% elif HEIGHT >= printer.toolhead.axis_maximum.z %}
	{action_raise_error(
	"HEIGHT[%.3f] must be below maximum Z height[%.3f].")
	| format(HEIGHT, printer.toolhead.axis_maximum.z)}
	{% endif %}
	{% set key = HEIGHT %}
	
	{% else %}
	{action_raise_error("No HEIGHT or LAYER argument provided.")}
	{% endif %}
	
	{% set commands = printer["gcode_macro _km_layer_run"][cmd_container] %}
	{% if key not in commands and not CANCEL %}
	{% set dummy = commands.__setitem__(key, []) %}
	{% endif %}
	
	{% if CANCEL %}
	{% if key in commands %}
	{% set pos = ("%i"|format(key)) if key is integer else
	("%.3fmm"|format(key)) %}
	{% if COMMAND %}
	{% set dummy = commands[key].remove(COMMAND) %}
	{% if commands[key]|length == 0 %}
	{% set dummy = commands.__delitem__(key) %}
	{% endif %}
	{action_respond_info("Cancelled %s %s:\n* %s" |
	format("layer" if k is integer else "height",
	pos, COMMAND))}
	{% else %}
	{% set dummy = commands.__delitem__(key) %}
	{action_respond_info("Cancelled all commands at %s %s." |
	format("layer" if k is integer else "height",
	pos))}
	{% endif %}
	{% endif %}
	{% elif not COMMAND %}
	{action_raise_error("No COMMAND argument provided.")}
	{% elif COMMAND in commands[key] %}
	{action_raise_error("Duplicate command previously scheduled.")}
	{% else %}
	{% set dummy = commands[key].append(COMMAND) %}
	{% set pos = ("%i"|format(key)) if key is integer else
	("%.3fmm"|format(key)) %}
	{action_respond_info("%s %s:\n* %s" |
	format("layer" if key is integer else "height",
	pos, COMMAND))}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE={cmd_container} VALUE="{
	commands|replace('\"','\\\"')}"
	_UPDATE_LAYER_COMPAT
	
	
	{% else %}
	{% set output = [] %}
	{% set commands = printer["gcode_macro _km_layer_run"].commands_layer %}
	{% for key in commands|list|sort %}
	{% set dummy = output.append("layer %i:" | format(key)) %}
	{% for c in commands[key] %}
	{% set dummy = output.append("* %s" | format(c)) %}
	{% endfor %}
	{% endfor %}
	{% set commands = printer["gcode_macro _km_layer_run"].commands_height %}
	{% for key in commands|list|sort %}
	{% set dummy = output.append("height %.3fmm:" | format(key)) %}
	{% for c in commands[key] %}
	{% set dummy = output.append("* %s" | format(c)) %}
	{% endfor %}
	{% endfor %}
	{action_respond_info(output|join('\n'))}
	{% endif %}

[gcode_macro _km_layer_run]
description = Runs pending commands for the current layer change.
	Usage: _KM_LAYER_RUN
variable_cur_height = 0.0
variable_clearance_z = 0.0
variable_commands_layer = {}
variable_commands_height = {}
gcode = 
	{% set cur_layer = printer.print_stats.info.current_layer %}
	{% for key in commands_layer | select("<=", cur_layer) | sort %}
	{action_respond_info("Executing scheduled commands at layer %d:\n%s" |
	format(key, commands_layer[key]|join('\n')))}
	{% for c in commands_layer[key] %}
	{c}
	{% endfor %}
	{% set dummy = commands_layer.__delitem__(key) %}
	{% endfor %}
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{
	commands_layer|replace('\"','\\\"')}"
	{% for key in commands_height | select("<=", cur_height) | sort %}
	{action_respond_info("Executing scheduled commands at height %.3f:\n%s" |
	format(key, commands_height[key]|join('\n')))}
	{% for c in commands_height[key] %}
	{c}
	{% endfor %}
	{% set dummy = commands_height.__delitem__(key) %}
	{% endfor %}
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{
	commands_height|replace('\"','\\\"')}"
	_UPDATE_LAYER_COMPAT

[gcode_macro init_layer_gcode]
description = Clears scheduled gcode commands and state for all layers.
	Usage: INIT_LAYER_GCODE LAYERS=<num>
gcode = 
	SET_PRINT_STATS_INFO TOTAL_LAYER="{params.LAYERS|int + 1}" CURRENT_LAYER="{0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"
	_UPDATE_LAYER_COMPAT

[gcode_macro _reset_layer_gcode]
description = Clears scheduled gcode commands and state for all layers.
	Usage: _RESET_LAYER_GCODE
gcode = 
	SET_PRINT_STATS_INFO TOTAL_LAYER="{0}" CURRENT_LAYER="{0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"
	_UPDATE_LAYER_COMPAT

[gcode_macro cancel_all_layer_gcode]
description = Clears all scheduled gcode commands.
	Usage: CANCEL_ALL_LAYER_GCODE
gcode = 
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"
	_UPDATE_LAYER_COMPAT

[gcode_macro _update_layer_compat]
gcode = 
	{% set next_layer = printer.print_stats.info.current_layer|int + 1 %}
	{% set commands_layer = printer["gcode_macro _km_layer_run"].commands_layer %}
	{% set keys = commands_layer | sort(reverse=True) %}
	
	{% set pause_next_layer = {'enable': False, 'call':
	printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer.call} %}
	{% if pause_next_layer.call in commands_layer[next_layer] | default([]) %}
	{% set dummy = pause_next_layer.__setitem__('enable', True) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{
	pause_next_layer|replace('\"','\\\"') }"
	
	
	{% set pause_at_layer = {'enable': False, 'layer': 0, 'call':
	printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer.call} %}
	{% if pause_next_layer.enable and
	pause_next_layer.call == pause_at_layer.call %}
	{% set keys = keys | reject("==", next_layer) %}
	{% endif %}
	
	
	
	
	{% for key in keys %}
	{% if pause_at_layer.call in commands_layer[key] %}
	{% set dummy = pause_at_layer.__setitem__('enable', True) %}
	{% set dummy = pause_at_layer.__setitem__('layer', key) %}
	{% endif %}
	{% endfor %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{
	pause_at_layer|replace('\"','\\\"') }"

[gcode_macro pause_next_layer]
description = Convenience macro to schedule the current print to pause at the
	next layer change. See PAUSE for additional arguments.
	Usage: PAUSE_NEXT_LAYER ...
gcode = 
	_CHECK_KINEMATIC_LIMITS{% for k in params%}{' ' ~k~ '=' ~ params[k]
	}{% endfor %}
	GCODE_AT_LAYER LAYER=NEXT COMMAND="PAUSE{% for k in params %}{
	' ' ~ k ~ '=' ~ params[k]}{% endfor %}"

[gcode_macro pause_at_layer]
description = Convenience macro to schedule the current print to pause at the
	specified layer change. LAYER=next will cause the command to run at the next
	layer change. See PAUSE for additional arguments.
	Usage: PAUSE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...
gcode = 
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	" %}
	{% set filtered_params = params|reject('in',['HEIGHT','LAYER'])|list|sort %}
	_CHECK_KINEMATIC_LIMITS{% for k in filtered_params%}{' ' ~k~ '=' ~ params[k]
	}{% endfor %}
	GCODE_AT_LAYER {% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor
	%} COMMAND="PAUSE{% for k in filtered_params %}{
	' ' ~ k ~ '=' ~ params[k]}{% endfor %}"

[gcode_macro speed_at_layer]
description = Convenience macro to schedule a feedrate adjustment at the
	specified layer change. LAYER=next will cause the command to run at the next
	layer change. (SPEED parameter behaves the same as the M220 S parameter.)
	Usage: SPEED_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } SPEED=<percentage>
gcode = 
	{% set SPEED = params.SPEED|default(0)|int %}
	{% if SPEED < 1 or SPEED > 500 %}
	{action_raise_error("SPEED[%i] parameter between 1 and 500 is required."
	% SPEED)}
	{% endif %}
	GCODE_AT_LAYER {% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor %} COMMAND="M220 S{SPEED|int}"
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	{% set dummy = params.SPEED|default(percentage)|int %}
	" %}

[gcode_macro flow_at_layer]
description = Convenience macro to schedule a flow percentage adjustment at the
	specified layer change. LAYER=next will cause the command to run at the next
	layer change. (FLOW parameter behaves the same as the M221 S parameter.)
	Usage: FLOW_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } FLOW=<percentage>
gcode = 
	{% set FLOW = params.FLOW|default(0)|int %}
	{% if FLOW < 1 or FLOW > 500 %}
	{action_raise_error("FLOW[%i] parameter between 1 and 500 is required."
	% FLOW)}
	{% endif %}
	GCODE_AT_LAYER {% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor %} COMMAND="M221 S{FLOW|int}"
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	{% set dummy = params.FLOW|default(percentage)|int %}
	" %}

[gcode_macro fan_at_layer]
description = Convenience macro to schedule a fan adjustment at the specified
	layer change. LAYER=next will cause the command to run at the next layer
	change. See SET_FAN_SCALING for additional arguments.
	Usage: FAN_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...
gcode = 
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	{% set dummy = params.SCALE|default(1.0)|float %}
	{% set dummy = params.BUMP|default(0)|int %}
	{% set dummy = params.MAXIMUM|default(0)|int %}
	{% set dummy = params.MINIMUM|default(255)|int %}
	{% set dummy = params.SPEED|default(current speed)|int %}
	" %}
	{% set filtered_params = params|reject('in',['HEIGHT','LAYER'])|list|sort %}
	{% if filtered_params|length == 0 %}
	{action_raise_error("No fan parameters provided.")}
	{% endif %}
	_CHECK_FAN_PARAMS{% for k in filtered_params %}{' '~k~'='~params[k]
	}{% endfor %}
	GCODE_AT_LAYER {% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor
	%} COMMAND="SET_FAN_SCALING{% for k in filtered_params %}{
	' ' ~ k ~ '=' ~ params[k]}{% endfor %}"

[gcode_macro heater_at_layer]
description = Convenience macro to schedule a heater adjustment at the specified
	layer change. LAYER=next will cause the command to run at the next layer
	change. See SET_HEATER_SCALING for additional arguments.
	Usage: HEATER_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...
gcode = 
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	{% set dummy = params.HEATER|default(e.g. extruder) %}
	{% set dummy = params.SCALE|default(1.0)|float %}
	{% set dummy = params.BUMP|default(0.0)|float %}
	{% set dummy = params.MAXIMUM|default(max_temp)|float %}
	{% set dummy = params.MINIMUM|default(min_temp)|float %}
	{% set dummy = params.TARGET|default(current target)|float %}
	" %}
	{% set filtered_params = params|reject('in',['HEIGHT','LAYER'])|list|sort %}
	_CHECK_HEATER_PARAMS{% for k in filtered_params%}{' ' ~ k ~ '=' ~ params[k]
	}{% endfor %}
	GCODE_AT_LAYER{% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor
	%} COMMAND="SET_HEATER_SCALING{% for k in filtered_params %}{
	' ' ~ k ~ '=\\\"' ~ params[k]|replace('\\','\\\\')|replace('\'','\\\'')
	|replace('\"','\\\"') ~ '\\\"'
	}{% endfor %}"

[gcode_macro park]
description = Park the toolhead
	Usage: PARK [P=<0|1|2>] [X=<pos>] [Y=<pos>] [Z=<pos>] [LAZY=<1|0>]
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set LAZY = params.LAZY|default(1)|int %}
	{% if printer.toolhead.homed_axes != "xyz" %}
	{% if LAZY %}
	LAZY_HOME
	{% else %}
	{action_raise_error("Must home axes first.")}
	{% endif %}
	{% endif %}
	
	
	{% set P = (params.P|default(2))|int %}
	{% set X = params.X|default(km.park_x)|float %}
	{% set Y = params.Y|default(km.park_y)|float %}
	{% set Z = params.Z|default(km.park_z)|float %}
	
	M400
	_CHECK_KINEMATIC_LIMITS X="{X}" Y="{Y}" Z="{Z}"
	_PARK_INNER X="{X}" Y="{Y}" Z="{Z}" P="{P}" LAZY="{LAZY}"
	
	{% set dummy = None if True else "
	{% set dummy = params.P|default(mode=<0|1|2>)|int %}
	{% set dummy = params.X|default(X position)|int %}
	{% set dummy = params.Y|default(Y position)|int %}
	{% set dummy = params.Z|default(Z position)|int %}
	" %}

[gcode_macro _park_inner]
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set travel_speed_xy = km.travel_speed_xy %}
	{% set travel_speed_z = km.travel_speed_z %}
	
	{% set position = printer.gcode_move.gcode_position %}
	{% set origin = printer.gcode_move.homing_origin%}
	
	
	
	{% set clearance_z = (printer["gcode_macro _km_layer_run"].clearance_z,
	position.z) | max %}
	{% set P = params.P|int %}
	{% set X = params.X|float - origin.x %}
	{% set Y = params.Y|float - origin.y %}
	{% set Z = params.Z|float %}
	{% set LAZY = params.LAZY|int %}
	
	
	{% if P == 0 %}
	{% if clearance_z > Z %}
	{% set Z = clearance_z %}
	{% endif %}
	{% elif P == 1 %}
	{% set Z = Z - origin.z %}
	{% elif P == 2 %}
	{% set Z = Z + clearance_z %}
	{% else %}
	{action_raise_error("Invalid parameter P=%i. Value must be 0, 1, or 2." |
	format(P)) }
	{% endif %}
	
	
	{% set Z = ((Z, printer.toolhead.axis_maximum.z - origin.z)|min,
	printer.toolhead.axis_minimum.z - origin.z)|max %}
	
	
	{% if (not LAZY) or P != 2 or X != position.x or Y != position.y
	or Z < clearance_z %}
	SAVE_GCODE_STATE NAME=_KM_PARK
	G90
	G0 Z{Z} F{travel_speed_z}
	G0 X{X} Y{Y} F{travel_speed_xy}
	RESTORE_GCODE_STATE NAME=_KM_PARK MOVE=0
	{% endif %}

[gcode_macro g27]
description = Parks the toolhead.
	Usage: G27 [P=<0|1|2>]
gcode = 
	
	PARK P={params.P|default(0)} {% for k in params|reject("in", "GP") %}{
	' '~k~'="'~params[k]~'"'
	}{% endfor %}

[gcode_macro pause]
description = Pauses the current print.
	Usage: PAUSE [X=<pos>] [Y=<pos>] [Z=<pos>] [E=<retract_length>] [B=<beeps>]
rename_existing = _KM_PAUSE_BASE
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% set E = (params.E|default(5))|float %}
	
	{% set B = params.B|default(10)|int if "output_pin beeper" in printer else 0
	%}
	
	{% if printer.pause_resume.is_paused %}
	{ action_respond_info("Print already paused") }
	{% elif printer.idle_timeout.state | string == "Printing" or
	(printer.virtual_sdcard|default({})).is_active|default(False) %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pausing RESET_STACK=1
	{% set position = printer.gcode_move.gcode_position %}
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_x VALUE="{position.x}"
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_y VALUE="{position.y}"
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_z VALUE="{position.z}"
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{E}"
	SAVE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE
	_KM_PAUSE_BASE
	M83
	{% if printer.extruder.can_extrude %}
	G1 E{'%.4f' % -E} F{km.load_speed}
	{% endif %}
	PARK P=2{% for k in params|select("in", "XYZ") %}{
	' '~k~'="'~params[k]~'"'}{% endfor %}
	
	{% for i in range(B) %}
	M300 P100
	G4 P200
	{% endfor %}
	{% else %}
	{ action_respond_info("Print not in progress") }
	{% endif %}

[gcode_macro m600]
description = Pauses the current print.
	Usage: M600 [B<beeps>] [E<pos>] [L<pos>] [R<temp>] [U<pos>] [X<pos>] [Y<pos>]
	[Z<pos>]
gcode = 
	PAUSE B="{0}" P=2{% for k in params|select("in", "EXYZ") %}{
	' '~k~'="'~params[k]~'"'}{% endfor %}
	UNLOAD_FILAMENT{% if 'U' in params %} LENGTH={params.U}{% endif
	%} BEEPS="{params.B|default(10)|int}"
	{% if 'R' in params %}M109 S{params.R}{% endif %}

[gcode_macro m601]
description = Pauses the current print.
	Usage: M601
gcode = 
	PAUSE

[gcode_macro m602]
description = Resumes the currently paused print.
	Usage: M602
gcode = 
	RESUME

[gcode_macro m24]
rename_existing = M24.6245197
gcode = 
	{% if printer.pause_resume.is_paused %}
	RESUME
	{% else %}
	M24.6245197
	{% endif %}

[gcode_macro m25]
rename_existing = M25.6245197
gcode = 
	PAUSE

[gcode_macro resume]
description = Resumes the currently paused print.
	Usage: RESUME [E<pos>]
rename_existing = _KM_RESUME_BASE
variable_saved_extruder_temp = 0
variable_saved_x = 0.0
variable_saved_y = 0.0
variable_saved_z = 0.0
variable_saved_e = 0.0
gcode = 
	{% if printer.pause_resume.is_paused %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% set extruder = printer[printer.toolhead.extruder] %}
	{% if extruder.target <= printer.configfile.settings[
	printer.toolhead.extruder].min_temp
	| float + 0.5 %}
	M109 S{saved_extruder_temp}
	{% endif %}
	
	
	
	{% if 'E' not in params and not saved_e %}
	{% set saved_e = 5.0 %}
	G1 E{'%.4f' % -saved_e } F{km.load_speed}
	{% endif %}
	
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"
	G90
	
	G0 X{saved_x} Y{saved_y} F{km.travel_speed_xy}
	G0 Z{saved_z} F{km.travel_speed_z}
	G91
	
	G1 E{'%.4f' % (params.E|default(saved_e))} F{km.load_speed}
	RESTORE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE MOVE=1
	_KM_RESUME_BASE
	{% else %}
	{ action_respond_info("Printer is not paused.") }
	{% endif %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=printing RESET_STACK=1

[gcode_macro clear_pause]
description = Clears the current pause state.
	Usage: CLEAR_PAUSE
rename_existing = _KM_CLEAR_PAUSE
gcode = 
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"
	_KM_CLEAR_PAUSE

[gcode_macro print_start]
description = Inserted by slicer at start of print. Rather than using this macro
	directly you should configure your slicer as instructed in the readme.
	Usage: PRINT_START BED=<temp> EXTRUDER=<temp> [CHAMBER=<temp>]
	[MESH_MIN=<x,y>] [MESH_MAX=<x,y>] [LAYERS=<num>]
	[NOZZLE_SIZE=<mm>]
gcode = 
	{action_respond_info(
	"This file is using an old The PRINT_START format. This print will run "
	"fine, but you should update your slicer config to take advantage of the "
	"phased PRINT_START macros. The slicer documentation is here:\n"
	"https://github.com/jschuh/klipper-macros\x23slicer-configuration"
	)}
	
	_PRINT_START_PHASE_INIT {rawparams}
	_PRINT_START_PHASE_PREHEAT
	_PRINT_START_PHASE_PROBING
	_PRINT_START_PHASE_EXTRUDER
	_PRINT_START_PHASE_PURGE

[gcode_macro _print_start_phase_init]
description = Inserted by slicer at start of print. Initializes PRINT_START
	phases.
	Usage: See PRINT_START.
gcode = 
	CHECK_KM_CONFIG
	SET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{False}"
	_KM_APPLY_PRINT_OFFSET RESET=1
	_PRINT_START_PHASE_CHECK PHASE=none
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% if not params.BED %}
	{% set dummy = params.__setitem__('BED', params.BED_TEMP|int) %}
	{% endif %}
	{% if not params.EXTRUDER %}
	{% set dummy = params.__setitem__('EXTRUDER', params.EXTRUDER_TEMP|int) %}
	{% endif %}
	
	
	PRINT_START_SET PRINT_START_PHASE="init" {% for k in params %}{' %s=\"%s\"' %
	(k,params[k]|replace('\\','\\\\')|replace('\'','\\\'')|replace('\"','\\\"'))
	}{% endfor %}
	
	
	_km_check_and_set_print_bounds
	
	M107
	CLEAR_PAUSE
	
	M140 S{params.BED}
	{% if params.CHAMBER %}M141 S{params.CHAMBER|int}{% endif %}
	{% if printer.bed_mesh %}BED_MESH_CLEAR{% endif %}
	
	{% if km.start_try_saved_surface_mesh and printer.bed_mesh %}
	LOAD_SURFACE_MESH
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="preheat"

[gcode_macro _print_start_phase_preheat]
description = Inserted by slicer at start of print. Handles the bed and chamber
	heating phases and ends when both are stabilized at their target temperatures.
	Usage: See PRINT_START.
gcode = 
	_PRINT_START_PHASE_CHECK PHASE=preheat
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set BED = print.BED|int %}
	{% set EXTRUDER = print.EXTRUDER|int %}
	{% set CHAMBER = print.CHAMBER|default(0)|int %}
	{% set LAYERS = print.LAYERS|default(0)|int %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% set bed_at_target = (BED + 0.4 - printer.heater_bed.temperature) |
	abs <= 0.6 %}
	PRINT_START_SET BED_AT_TARGET={1 if bed_at_target else 0}
	{% set start_level_bed_at_temp = km.start_level_bed_at_temp and
	not printer.bed_mesh.profile_name %}
	{% set actions_at_temp = start_level_bed_at_temp or
	km.start_quad_gantry_level_at_temp or
	km.start_z_tilt_adjust_at_temp or
	(km.start_home_z_at_temp and not bed_at_target) %}
	{% set bed_overshoot = (BED + (km.start_bed_heat_overshoot if
	(BED and not bed_at_target) else 0.0),
	printer.configfile.settings.heater_bed.max_temp ) | min %}
	
	INIT_LAYER_GCODE LAYERS="{LAYERS}"
	{% if CHAMBER > 0.0 %}
	M141 S{CHAMBER}
	{% endif %}
	
	M140 S{bed_overshoot}
	{% if actions_at_temp %}
	
	
	M104 S{km.start_extruder_probing_temp if km.start_extruder_probing_temp > 0
	else (km.start_extruder_preheat_scale * EXTRUDER)|round(0,'ceil')|int}
	{% else %}
	M104 S{EXTRUDER}
	{% endif %}
	
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing RESET_STACK=1
	G28
	G90
	{% if BED > 0.0 %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=bed_heating RESET_STACK=1
	
	{% if not bed_at_target %}
	PARK
	
	M190 S{bed_overshoot}
	G4 P{km.start_bed_heat_delay / 2}
	M190 R{BED}
	G4 P{km.start_bed_heat_delay / 2}
	{% endif %}
	{% endif %}
	
	{% if CHAMBER > 0.0 %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=chamber_heating RESET_STACK=1
	_KM_PARK_IF_NEEDED HEATER="chamber" RANGE=ABOVE
	M191 S{CHAMBER}
	{% endif %}
	
	{% if BED > 0.0 and bed_at_target%}
	M190 R{BED}
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="probing"

[gcode_macro _print_start_phase_probing]
description = Inserted by slicer at start of print. Performs probing (including
	mesh bed level) and other operations that should be run when the bed and
	chamber are stabilized at their target temps.
	Usage: See PRINT_START.
gcode = 
	_PRINT_START_PHASE_CHECK PHASE=probing
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set MESH_MIN = print.MESH_MIN|default(None) %}
	{% set MESH_MAX = print.MESH_MAX|default(None) %}
	
	{% if km.start_random_placement_max > 0 and print.PRINT_MIN and MESH_MIN %}
	{% set PRINT_MIN = print.PRINT_MIN.split(",")|map('float')|list %}
	{% set PRINT_MAX = print.PRINT_MAX.split(",")|map('float')|list %}
	{% set x_offset = (((km.print_max[0] - km.print_min[0] - PRINT_MAX[0] +
	PRINT_MIN[0] - 2 * km.start_random_placement_padding)|int,
	km.start_random_placement_max * 2)|min, 0)|max %}
	{% set y_offset = (((km.print_max[1] - km.print_min[1] - PRINT_MAX[1] +
	PRINT_MIN[1] - 2 * km.start_random_placement_padding)|int,
	km.start_random_placement_max * 2)|min, 0)|max %}
	{% if x_offset > 0 %}
	{% set x_offset = range(x_offset)|random + km.print_min[0] -
	PRINT_MIN[0] + km.start_random_placement_padding %}
	{% endif %}
	{% if y_offset > 0 %}
	{% set y_offset = range(y_offset)|random + km.print_min[1] -
	PRINT_MIN[1] + km.start_random_placement_padding %}
	{% endif %}
	
	
	{% set MESH_MIN = MESH_MIN.split(",")|map('float')|list %}
	{% set MESH_MAX = MESH_MAX.split(",")|map('float')|list %}
	{% set MESH_MIN_NEW = (MESH_MIN[0] + x_offset, MESH_MIN[1] + y_offset) %}
	{% set MESH_MAX_NEW = (MESH_MAX[0] + x_offset, MESH_MAX[1] + y_offset) %}
	{action_respond_info(
	"Relocating print origin from (%.3f,%.3f) "|format(*MESH_MIN) +
	"to (%.3f,%.3f)"|format(*MESH_MIN_NEW))}
	{% set MESH_MIN = (MESH_MIN_NEW[0], MESH_MIN_NEW[1])|join(',') %}
	{% set MESH_MAX = (MESH_MAX_NEW[0], MESH_MAX_NEW[1])|join(',') %}
	PRINT_START_SET PRINT_OFFSET={"%d,%d" % (x_offset,y_offset)}
	{% endif %}
	
	{% set EXTRUDER = print.EXTRUDER|int %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set start_level_bed_at_temp = km.start_level_bed_at_temp and
	not printer.bed_mesh.profile_name %}
	{% set start_home_z_at_temp = km.start_home_z_at_temp and
	not print.BED_AT_TARGET|int %}
	{% set actions_at_temp = start_level_bed_at_temp or
	km.start_quad_gantry_level_at_temp or
	km.start_z_tilt_adjust_at_temp or
	start_home_z_at_temp %}
	{% if actions_at_temp %}
	{% if km.start_extruder_probing_temp > 0 %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating RESET_STACK=1
	_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=2
	M109 R{km.start_extruder_probing_temp}
	{% else %}
	M104 S{EXTRUDER}
	{% endif %}
	{% if start_home_z_at_temp %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing RESET_STACK=1
	G28 Z
	{% endif %}
	{% if km.start_z_tilt_adjust_at_temp %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=calibrating_z RESET_STACK=1
	Z_TILT_ADJUST
	{% endif %}
	{% if km.start_quad_gantry_level_at_temp %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=leveling_gantry RESET_STACK=1
	QUAD_GANTRY_LEVEL
	{% endif %}
	{% if start_level_bed_at_temp %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=meshing RESET_STACK=1
	_km_mesh_if_needed {% if MESH_MIN %} MESH_MIN={MESH_MIN}{% endif
	%}{% if MESH_MAX %} MESH_MAX={MESH_MAX}{% endif %}
	{% endif %}
	{% if km.start_extruder_probing_temp > 0 %}
	M104 S{EXTRUDER}
	{% endif %}
	G4
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="extruder"

[gcode_macro _print_start_phase_extruder]
description = Inserted by slicer at start of print. Preheats the extruder.
	Usage: See PRINT_START.
gcode = 
	_PRINT_START_PHASE_CHECK PHASE=extruder
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set EXTRUDER = print.EXTRUDER|default(print.EXTRUDER_TEMP)|float %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	
	{% if EXTRUDER > 0 %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating RESET_STACK=1
	_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=ABOVE
	M109 S{EXTRUDER}
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="purge"

[gcode_macro _print_start_phase_purge]
description = Inserted by slicer at start of print. Generates purge lines.
	Usage: See PRINT_START.
gcode = 
	_PRINT_START_PHASE_CHECK PHASE=purge
	
	_KM_APPLY_PRINT_OFFSET
	
	_APPLY_BED_SURFACE_OFFSET
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set MESH_MIN = print.MESH_MIN|default(None) %}
	{% set MESH_MAX = print.MESH_MAX|default(None) %}
	{% set NOZZLE_SIZE = print.NOZZLE_SIZE|default(print.NOZZLE_SIZE)|
	default(printer.configfile.settings.extruder.nozzle_diameter)|float %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% if km.start_purge_length > 0.0 and printer.extruder.can_extrude %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=purging RESET_STACK=1
	DRAW_PURGE_LINE WIDTH="{NOZZLE_SIZE * 1.25}" HEIGHT="{NOZZLE_SIZE * 0.625
	}"{% if MESH_MIN %} PRINT_MIN={MESH_MIN}{% endif
	%}{% if MESH_MAX %} PRINT_MAX={MESH_MAX}{% endif %}
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="printing"
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=printing RESET_STACK=1

[gcode_macro _km_park_if_needed]
description = Parks the extruder if the current temperature of the supplied
	heater is not within the specified target range.
	Usage: _KM_PARK_IF_NEEDED HEATER=<heater> RANGE=[<percentage>|ABOVE|BELOW]
gcode = 
	
	{% set HEATER = params.HEATER if params.HEATER in
	printer.heaters.available_heaters else
	("heater_generic " ~ params.HEATER) %}
	{% set RANGE = (params.RANGE|default(1))|string|upper %}
	
	{% if printer[HEATER].target %}
	{% if RANGE == "ABOVE" %}
	{% if printer[HEATER].temperature < printer[HEATER].target %}
	PARK
	{% endif %}
	{% elif RANGE == "BELOW" %}
	{% if printer[HEATER].temperature > printer[HEATER].target %}
	PARK
	{% endif %}
	{% elif (printer[HEATER].temperature - printer[HEATER].target)|abs >
	(printer[HEATER].target * RANGE|float * 0.01)|abs %}
	PARK
	{% endif %}
	{% endif %}

[gcode_macro _km_apply_print_offset]
variable_offset = []
gcode = 
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% if params.RESET|default(0)|int and offset and
	not printer["gcode_macro _km_save_state"].is_ephemeral%}
	{% set PRINT_OFFSET = [offset.pop(0) * -1, offset.pop() * -1] %}
	{% elif print.PRINT_OFFSET and not offset and
	not printer["gcode_macro _km_save_state"].is_ephemeral %}
	{% set PRINT_OFFSET = print.PRINT_OFFSET.split(",")|map('float')|list %}
	{% set dummy = offset.extend(PRINT_OFFSET) %}
	{% endif %}
	
	{% if PRINT_OFFSET %}
	_KM_SET_GCODE_OFFSET_BASE {"X_ADJUST=%.2f Y_ADJUST=%.2f"|
	format(*PRINT_OFFSET)}
	{% endif %}

[gcode_macro _km_mesh_if_needed]
gcode = 
	
	
	
	{% if not printer.bed_mesh.profile_name %}
	BED_MESH_CALIBRATE_FAST {rawparams}
	{% endif %}

[gcode_macro print_start_set]
description = Inserted by slicer to set values used by PRINT_START.
	Usage: PRINT_START_SET <VARIABLE>=<value>
variable_print = {}
gcode = 
	{%for k in params %}
	{% set dummy = print.__setitem__(k|upper, params[k]) %}
	{% endfor %}

[gcode_macro _print_start_phase_check]
gcode = 
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set PRINT_START_PHASE = print.PRINT_START_PHASE|default("none") %}
	{% if PRINT_START_PHASE != params.PHASE %}
	
	SET_GCODE_VARIABLE MACRO=print_start_set VARIABLE=print VALUE="{{}}"
	{% if params.PHASE != 'none' %}
	{% set error = "PRINT_START phase error. Expected '%s' but found '%s'" %
	(params.PHASE, PRINT_START_PHASE) %}
	
	{% if not 'virtual_sdcard' in printer or
	not printer.virtual_sdcard.is_active or 'CANCEL_PRINT' not in
	printer.configfile.settings.virtual_sdcard.on_error_gcode|
	default("")|upper %}
	{action_respond_info(error)}
	CANCEL_PRINT
	{% else %}
	{action_raise_error(error)}
	{% endif %}
	{% else %}
	{ action_respond_info("Expected phase '%s' but found '%s'. Resetting."
	% (params.PHASE, PRINT_START_PHASE)) }
	{% endif %}
	{% endif %}

[gcode_macro print_end]
description = Inserted by slicer at end of print.
	Usage: PRINT_END
gcode = 
	_KM_CHECK_IS_PRINTING
	M400
	_PRINT_END_INNER
	
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% if km.start_clear_adjustments_at_end != 0 %}
	RESET_HEATER_SCALING
	RESET_FAN_SCALING
	M220 S100
	M221 S100
	{% endif %}
	_RESET_LAYER_GCODE
	_RESET_VELOCITY_LIMITS
	TURN_OFF_HEATERS
	M107; turn off fan
	{% if printer.bed_mesh %}BED_MESH_CLEAR{% endif %}
	
	{% if printer.toolhead.homed_axes|lower == "xyz" %}
	PARK Y="{km.start_end_park_y}"
	{% endif %}
	M84
	CLEAR_PAUSE
	SET_GCODE_VARIABLE MACRO=print_start_set VARIABLE=print VALUE="{{}}"
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready RESET_STACK=1

[gcode_macro _print_end_inner]
variable_cancelled = False
gcode = 
	SET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{False}"
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set toolhead = printer.toolhead %}
	{% set origin = printer.gcode_move.homing_origin%}
	{% set max_x = km.print_max[0] - origin.x %}
	{% set max_y = km.print_max[1] - origin.y %}
	{% set max_z = toolhead.axis_maximum.z - origin.z %}
	
	{% if not cancelled %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=completing
	{% endif %}
	
	{% if printer.extruder.can_extrude %}
	
	{% if not printer.pause_resume.is_paused and not cancelled and
	toolhead.homed_axes|lower == "xyz" %}
	{% set x_safe = (max_x - toolhead.position.x, 2.0)|min %}
	{% set y_safe = (max_y - toolhead.position.y, 2.0)|min %}
	{% set z_safe = (max_z - toolhead.position.z, 2.0)|min %}
	G91
	G0 Z{z_safe} E-1.0 F{km.travel_speed_z * 2}
	G0 X{x_safe} Y{y_safe} E-1.0 F{km.travel_speed_xy}
	
	_KM_APPLY_PRINT_OFFSET RESET=1
	{% endif %}
	
	
	G92 E0
	G1 E-5.0 F3600
	M400
	{% endif %}

[gcode_macro _km_check_is_printing]
variable_debug_state = False
description = Throws an error if print is not currently in progress.
gcode = 
	{% if not debug_state and
	printer.idle_timeout.state|string != "Printing" and
	not (printer.virtual_sdcard|default({})).is_active|default(False) and
	not printer.pause_resume.is_paused %}
	{ action_raise_error("No active print.") }
	{% endif %}

[gcode_macro _km_check_and_set_print_bounds]
description = Validates all print bounds and caches their values.
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set print = printer["gcode_macro print_start_set"].print %}
	
	
	{% if print.MESH_MIN %}
	{% set MESH_MIN = print.MESH_MIN.split(",")|map('float')|list %}
	{% set MESH_MAX = print.MESH_MAX.split(",")|map('float')|list %}
	{%if MESH_MIN[0] < km.print_min[0] or MESH_MIN[1] < km.print_min[1] %}
	{action_raise_error("MESH_MIN %s is outside the printable bounds" %
	(MESH_MIN|string, km.print_min|string))}
	{%elif MESH_MAX[0] > km.print_max[0] or MESH_MAX[1] > km.print_max[1] %}
	{action_raise_error("MESH_MAX %s is outside the printable bounds %s" %
	(MESH_MAX|string, km.print_max|string))}
	{% endif %}
	{% endif %}
	
	
	{% set points = [] %}
	{% if print.MODEL_MIN or print.MODEL_MAX %}
	{% set MODEL_MIN = print.MODEL_MIN.split(",")|map('float')|list %}
	{% set MODEL_MAX = print.MODEL_MAX.split(",")|map('float')|list %}
	{% set points = [MODEL_MIN, MODEL_MAX] %}
	{% endif %}
	{% if (printer.exclude_object|default({})).objects %}
	{% set points = printer.exclude_object.objects|selectattr('polygon')|
	map(attribute='polygon')|sum(start=points) %}
	{% set points_len = points|length %}
	{% if points_len >= 2 %}
	{% set x_coords = (points|map(attribute=0)|sort|list)[0::points_len-1] %}
	{% set y_coords = (points|map(attribute=1)|sort|list)[0::points_len-1] %}
	{% set MODEL_MIN = (x_coords[0],y_coords[0])|map('float')|list %}
	{% set MODEL_MAX = (x_coords[1],y_coords[1])|map('float')|list %}
	PRINT_START_SET MODEL_MIN="{MODEL_MIN|join(',')
	}" MODEL_MAX="{MODEL_MAX|join(',')}"
	{% endif %}
	{% endif %}
	
	{% if MODEL_MIN %}
	
	{% if MODEL_MIN[0] < km.print_min[0] or MODEL_MIN[1] < km.print_min[1] %}
	{action_raise_error("MODEL_MIN %s is outside the printable bounds" %
	(MODEL_MIN|string, km.print_min|string))}
	{% elif MODEL_MAX[0] > km.print_max[0] or MODEL_MAX[1] > km.print_max[1] %}
	{action_raise_error("MODEL_MAX %s is outside the printable bounds %s" %
	(MODEL_MAX|string, km.print_max|string))}
	{% endif %}
	{% endif %}
	
	
	{% if MESH_MIN and MODEL_MIN %}
	PRINT_START_SET PRINT_MIN="{((MODEL_MIN[0],MESH_MIN[0])|min,
	(MODEL_MIN[1],MESH_MIN[1])|min)|join(',')
	}" PRINT_MAX="{((MODEL_MAX[0],MESH_MAX[0])|max,
	(MODEL_MAX[1],MESH_MAX[1])|max)|join(',')}"
	{% else %}
	PRINT_START_SET PRINT_MIN="{km.print_min|join(',')
	}" PRINT_MAX="{km.print_max|join(',')}"
	{% endif %}

[gcode_macro _km_save_state]
description = Tracks gcode state.
variable_state_set = {}
variable_is_ephemeral = 0
gcode = 
	{% if params.SAVE|int %}
	{% set dummy = state_set.__setitem__(params.NAME, None) %}
	{% else %}
	{% set dummy = state_set.__delitem__(params.NAME) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=_km_save_state VARIABLE=is_ephemeral VALUE="{
	1 if state_set|length > 0 else 0 }"

[gcode_macro save_gcode_state]
description = Wraps SAVE_GCODE_STATE to track persistence state.
	Usage: See Klipper documentation
rename_existing = _KM_SAVE_GCODE_STATE
gcode = 
	_KM_SAVE_GCODE_STATE {rawparams}
	{% set NAME = params.NAME|default("default") %}
	_km_save_state NAME={NAME} SAVE=1

[gcode_macro restore_gcode_state]
description = Wraps RESTORE_GCODE_STATE to track persistence state.
	Usage: See Klipper documentation
rename_existing = _KM_RESTORE_GCODE_STATE
gcode = 
	_KM_RESTORE_GCODE_STATE {rawparams}
	{% set NAME = params.NAME|default("default") %}
	_km_save_state NAME={NAME} SAVE=0

[gcode_macro _abort_on_gcode_state]
gcode = 
	{% set save_state = printer["gcode_macro _km_save_state"] %}
	{% if save_state.is_ephemeral %}
	{action_raise_error("Encountered unexpected save state " +
	save_state.state_set|list|sort|string)}
	{% endif %}

[gcode_macro _km_print_status]
variable_last_status = 'none'
variable_status_stack = []
variable_command_list = {}
variable_status_list = [
	'ready',
	'filament_load',
	'filament_unload',
	'bed_heating',
	'chamber_heating',
	'homing',
	'leveling_gantry',
	'calibrating_z',
	'meshing',
	'extruder_heating',
	'purging',
	'printing',
	'pausing',
	'cancelling',
	'completing',
	]
gcode = 
	{% set ACTION = params.ACTION|trim|upper %}
	{% set STATUS = params.STATUS|default("")|trim|lower %}
	
	
	{% if ACTION == "ADD_EVENT" %}
	{% set COMMAND = params.COMMAND %}
	{% set ARGS = params.ARGS|default(0)|int != 0 %}
	{% set TYPE = params.TYPE|default('ENTER')|trim|upper %}
	{% set WHEN = params.WHEN|default('PRINTING')|trim|upper %}
	{% set FILTER_ENTER =
	(params.FILTER_ENTER|default("")|trim|lower).split(',')|
	select()|unique|list %}
	{% set FILTER_LEAVE =
	(params.FILTER_LEAVE|default("")|trim|lower).split(',')|
	select()|unique|list %}
	
	{% set STATUSES = STATUS.split(',')|map('trim')|list %}
	{% for s in (STATUSES if STATUSES[0] != 'all' else status_list) %}
	{% if not s in command_list %}
	{% set dummy = command_list.__setitem__(s,[]) %}
	{% endif %}
	{% set dummy = command_list[s].append({'cmd':COMMAND, 'args':ARGS,
	'type':TYPE, 'when':WHEN,
	'filt_e':FILTER_ENTER,
	'filt_l':FILTER_LEAVE}) %}
	{% endfor %}
	
	
	{% elif ACTION == "CHANGE" %}
	{% if params.RESET_STACK|default(0)|int %}
	{% for dummy in range(status_stack|length) %}
	{% set dummy = status_stack.pop() %}
	{% endfor %}
	
	
	{% elif STATUS == "pop_status" %}
	{% set STATUS = (status_stack|default(['ready'], True)).pop() %}
	{% endif %}
	
	{% if STATUS not in status_list %}
	{action_raise_error("Status '%s' not valid."|format(STATUS))}
	{% endif %}
	
	{% if STATUS != last_status %}
	{% set is_printing =
	printer["gcode_macro print_start_set"].print.PRINT_START_PHASE|
	default("")|length != 0 %}
	{% set print_states = ('ALWAYS', 'PRINTING' if is_printing else 'IDLE') %}
	
	{% for c in command_list[last_status]|default([]) %}
	{% if c.type in ('BOTH','LEAVE') and c.when in print_states and
	(not c.filt_l or STATUS in c.filt_l) %}
	M400
	{c.cmd}{% if c.args %} TYPE=LEAVE WHEN={print_states[1]
	} LAST_STATUS={last_status} NEXT_STATUS={STATUS}{% endif %}
	{% endif %}
	{% endfor %}
	
	{% for c in command_list[STATUS]|default([]) %}
	{% if c.type in ('BOTH','ENTER') and c.when in print_states and
	(not c.filt_e or STATUS in c.filt_e) %}
	M400
	{c.cmd}{% if c.args %} TYPE=ENTER WHEN={print_states[1]
	} LAST_STATUS={last_status} NEXT_STATUS={STATUS}{% endif %}
	{% endif %}
	{% endfor %}
	SET_GCODE_VARIABLE MACRO=_km_print_status VARIABLE=last_status VALUE="'{
	STATUS}'"
	{% endif %}
	
	
	{% elif ACTION == "PUSH_STATUS" %}
	{% set dummy = status_stack.append(last_status) %}
	
	
	{% else %}
	{action_raise_error("Action '%s' not valid."|format(ACTION))}
	{% endif %}

[gcode_macro gcode_on_print_status]
description = Adds a gcode command for a status event.
	Usage: GCODE_ON_PRINT_STATUS STATUS=<status> COMMAND=<gcode> [ARGS=<1|0>]
	[WHEN=<PRINTING|IDLE|ALWAYS>]
	[TYPE=<ENTER|LEAVE|BOTH>]
	[FILTER_ENTER=<status list>]
	[FILTER_LEAVE=<status list>]
gcode = 
	{% set STATUS = (params.STATUS|lower).split(',')|map('trim')|list %}
	{% set TYPE = params.TYPE|default('ENTER')|trim|upper %}
	{% set WHEN = params.WHEN|default('PRINTING')|trim|upper %}
	{% set FILTER_ENTER =
	(params.FILTER_ENTER|default("")|trim|lower).split(',')|select()|list %}
	{% set FILTER_LEAVE =
	(params.FILTER_LEAVE|default("")|trim|lower).split(',')|select()|list %}
	
	
	{% set status_list = printer["gcode_macro _km_print_status"].status_list %}
	{% for s in STATUS %}
	{% if not (s in status_list or s == 'all' and STATUS|length == 1) %}
	{action_raise_error("STATUS parameter '%s' not valid."|format(s))}
	{% endif %}
	{% endfor %}
	
	{% if TYPE not in ('ENTER', 'LEAVE', 'BOTH') %}
	{action_raise_error("TYPE paramater '%s' not valid."|format(TYPE))}
	{% elif WHEN not in ('PRINTING', 'IDLE', 'ALWAYS') %}
	{action_raise_error("WHEN parameter '%s' not valid."|format(WHEN))}
	{% elif TYPE == 'ENTER' and FILTER_LEAVE %}
	{action_raise_error("FILTER_LEAVE not valid with TYPE=ENTER.")}
	{% elif TYPE == 'LEAVE' and FILTER_ENTER %}
	{action_raise_error("FILTER_ENTER not valid with TYPE=LEAVE.")}
	{% endif %}
	{% for f in FILTER_ENTER %}
	{% if f not in status_list %}
	{action_raise_error("FILTER_ENTER parameter '%s' not valid."|format(f))}
	{% endif %}
	{% endfor %}
	{% for f in FILTER_LEAVE %}
	{% if f not in status_list %}
	{action_raise_error("FILTER_LEAVE parameter '%s' not valid."|format(f))}
	{% endif %}
	{% endfor %}
	
	
	_KM_PRINT_STATUS ACTION=ADD_EVENT {rawparams}

[gcode_macro m201]
description = Sets maximum accelleration.
	Usage: M201 [X<accel>] [Y<accel>]
variable_max_accel = 1.7976931348623157e+308
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% if 'X' in params or 'Y' in params %}
	{% set accel = (params.X|default(params.Y)|float,
	params.Y|default(params.X)|float)|min %}
	SET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{accel}"
	{% else %}
	SET_VELOCITY_LIMIT
	{% endif %}

[gcode_macro m203]
description = Sets maximum velocity.
	Usage: M203 [X<velocity>] [Y<velocity>]
gcode = 
	{% if 'X' in params or 'Y' in params %}
	{% set velocity = (params.X|default(params.Y)|float,
	params.Y|default(params.X)|float)|min %}
	SET_VELOCITY_LIMIT VELOCITY="{velocity}"
	{% else %}
	SET_VELOCITY_LIMIT
	{% endif %}

[gcode_macro m205]
description = Sets square corner velocity.
	Usage: M203 [X<velocity>] [Y<velocity>]
gcode = 
	{% if 'X' in params or 'Y' in params %}
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY="{
	(params.X|default(0)|float, params.Y|default(0)|float)|min}"
	{% else %}
	SET_VELOCITY_LIMIT
	{% endif %}

[gcode_macro m900]
description = Sets pressure advance.
	Usage: M900 [K<advance>] [T<extruder_index>]
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% if km.pressure_advance_scale > 0.0 %}
	{% set extruder = "extruder" ~ params.T|replace('0', '')
	if "T" in params else printer.toolhead.extruder %}
	{% if 'K' in params %}
	SET_PRESSURE_ADVANCE EXTRUDER="{extruder}" ADVANCE="{
	params.K|float * km.pressure_advance_scale}"
	{% endif %}
	{% endif %}

[gcode_macro _reset_velocity_limits]
description = Sets maximum accelleration.
	Usage: M204 [S<accel>] [P<accel> T<accel>]
gcode = 
	SET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{1.7976931348623157e+308}"

[gcode_macro bed_mesh_calibrate]
rename_existing = _KM_BED_MESH_CALIBRATE_BASE
description = Wraps BED_MESH_CALIBRATE, scaling probe count to specified area.
	Usage: See Klipper documentation.
gcode = 
	BED_MESH_CALIBRATE_FAST{%for k in params%}{' '~k~'="'~params[k]~'"'}{%endfor%}

[gcode_macro g29]
gcode = 
	BED_MESH_CALIBRATE

[idle_timeout]
gcode = 
	_KM_IDLE_TIMEOUT

[respond]

[gcode_macro PRINT_START]
rename_existing = KM_PRINT_START
gcode = 
	
	STATUS_HOMING
	KM_PRINT_START {rawparams}
	STATUS_PRINTING

[save_variables]
filename = ~/printer_data/variables.cfg

[board_pins EBB36_G0B1_v1.2]
mcu = ebbcan
aliases = 
aliases_step = 
	EXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15
aliases_limitsw = 
	LIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6
aliases_bltouch = 
	PROBE_1=PB9,PROBE_2=PB8
aliases_fans = 
	FAN0=PA1,FAN1=PA0
aliases_thermistors = 
	TH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7
aliases_heaters = 
	HE0=PB13
aliases_rgb = 
	RGBLED=PD3
aliases_adxl = 
	ADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11
aliases_i2c = 
	AUX0=PB3,AUX1=PB4

[mcu CB1]
serial = /tmp/klipper_host_mcu

[mcu]
canbus_uuid = f94e10a9add8

[mcu ebbcan]
canbus_uuid = 57244ec148c0

[printer]
kinematics = corexy
max_velocity = 600
max_accel = 10000
max_accel_to_decel = 5000
max_z_velocity = 5
max_z_accel = 100

[stepper_x]
step_pin = PE2
dir_pin = !PB4
enable_pin = !PC11
microsteps = 16
rotation_distance = 40
endstop_pin = !ebbcan:LIMIT_2
position_endstop = 220
position_min = -4
position_max = 220
homing_speed = 50

[tmc2209 stepper_x]
uart_pin = PC10
diag_pin = PF3
run_current = 1.1

[tmc2209 stepper_y]
uart_pin = PF13
diag_pin = PF4
run_current = 1.1

[tmc2209 stepper_z]
uart_pin = PF9
diag_pin = PF5
run_current = 0.650

[tmc2209 extruder]
uart_pin = ebbcan:EXT_UART
diag_pin = ebbcan:LIMIT_3
run_current = 0.650

[stepper_y]
step_pin = PF12
dir_pin = !PF11
enable_pin = !PB3
microsteps = 16
rotation_distance = 40
endstop_pin = ^PF3
position_endstop = 220
position_min = -4
position_max = 220
homing_speed = 50

[stepper_z]
step_pin = PD7
dir_pin = !PD6
enable_pin = !PF10
microsteps = 16
rotation_distance = 8
endstop_pin = probe:z_virtual_endstop
position_max = 300
position_min = -3

[heater_bed]
heater_pin = PB7
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PA0
min_temp = 0
max_temp = 130
control = pid
pid_kp = 63.528
pid_ki = 0.875
pid_kd = 1153.041

[temperature_sensor raspberry_pi]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor mcu_temp]
sensor_type = temperature_mcu
min_temp = 0
max_temp = 100

[controller_fan MCU_Fan]
pin = PE6
heater = extruder
fan_speed = 1

[heater_fan heatbreak_cooling_fan]
pin = ebbcan:FAN0
kick_start_time = 0.25
heater = extruder
heater_temp = 50.0
fan_speed = 1

[fan]
pin = ebbcan:FAN1

[safe_z_home]
home_xy_position = 140, 140
speed = 100
z_hop = 10
z_hop_speed = 20

[extruder]
step_pin = ebbcan:EXT_STEP
dir_pin = ebbcan:EXT_DIR
enable_pin = !ebbcan:EXT_EN
microsteps = 16
rotation_distance = 4.71
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.750
max_extrude_only_distance = 101.0
heater_pin = ebbcan:HE0
sensor_type = ATC Semitec 104NT-4-R025H42G
sensor_pin = ebbcan:TH0
min_temp = 0
max_temp = 300
max_extrude_cross_section = 5
pressure_advance = 0.02
control = pid
pid_kp = 20.603
pid_ki = 0.988
pid_kd = 107.392

[bltouch]
sensor_pin = ebbcan:PROBE_2
control_pin = ebbcan:PROBE_1
x_offset = -40
y_offset = -17
samples = 2
samples_tolerance = 0.015
samples_tolerance_retries = 5
z_offset = 2.849

[bed_mesh]
speed = 100
horizontal_move_z = 5
mesh_min = 10, 27
mesh_max = 173, 200
probe_count = 5, 5
algorithm = bicubic
fade_start = 1
fade_end = 10

[bed_screws]
screw1 = 55,55
screw2 = 200,55
screw3 = 200,205
screw4 = 55,205

[screws_tilt_adjust]
screw1 = 65,55
screw1_name = front left screw
screw2 = 218,55
screw2_name = front right screw
screw3 = 218,215
screw3_name = rear right screw
screw4 = 65,215
screw4_name = rear left screw
horizontal_move_z = 10
speed = 50
screw_thread = CW-M4

[display]
lcd_type = st7920
cs_pin = PB12
sclk_pin = PB13
sid_pin = PB15
encoder_pins = ^PB14, ^PB10
click_pin = ^!PB2

[exclude_object]

[firmware_retraction]
retract_length = 0.4
retract_speed = 20
unretract_extra_length = 0
unretract_speed = 10

[input_shaper]
shaper_type_x = 2hump_ei
shaper_freq_x = 86.2
shaper_type_y = zv
shaper_freq_y = 44.8

[gcode_arcs]
resolution = 1.0

[adxl345]
cs_pin = ebbcan:ADXL_CS
spi_software_sclk_pin = ebbcan:ADXL_SCLK
spi_software_mosi_pin = ebbcan:ADXL_MOSI
spi_software_miso_pin = ebbcan:ADXL_MISO

[resonance_tester]
accel_chip = adxl345
probe_points = 
	120,120,20

[bed_mesh default]
version = 1
points = 
	0.027500, 0.058750, 0.091250, 0.182500
	-0.003750, 0.061250, 0.072500, 0.125000
	0.021250, 0.016250, 0.013750, 0.033750
	-0.023750, -0.018750, -0.036250, -0.037500
x_count = 4
y_count = 4
mesh_x_pps = 2
mesh_y_pps = 2
algo = bicubic
tension = 0.2
min_x = 48.75
max_x = 171.24
min_y = 48.75
max_y = 171.24
=======================
Loaded MCU 'ebbcan' 109 commands (v0.11.0-241-gffb5105b / gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2)
MCU 'ebbcan' config: ADC_MAX=4095 BUS_PINS_i2c1_PA9_PA10=PA9,PA10 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_i2c2_PB13_PB14=PB13,PB14 BUS_PINS_i2c3_PB3_PB4=PB3,PB4 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3=PB4,PB5,PB3 CANBUS_FREQUENCY=1000000 CLOCK_FREQ=64000000 MCU=stm32g0b1xx PWM_MAX=255 RECEIVE_WINDOW=192 RESERVE_PINS_CAN=PB0,PB1 RESERVE_PINS_crystal=PF0,PF1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
Configured MCU 'ebbcan' (1024 moves)
Loaded MCU 'mcu' 109 commands (v0.11.0-241-gffb5105b / gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2)
MCU 'mcu' config: ADC_MAX=4095 BUS_PINS_i2c1_PA9_PA10=PA9,PA10 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_i2c2_PB13_PB14=PB13,PB14 BUS_PINS_i2c3_PB3_PB4=PB3,PB4 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3=PB4,PB5,PB3 CANBUS_BRIDGE=1 CLOCK_FREQ=64000000 MCU=stm32g0b1xx PWM_MAX=255 RECEIVE_WINDOW=192 RESERVE_PINS_CAN=PD12,PD13 RESERVE_PINS_USB=PA11,PA12 RESERVE_PINS_crystal=PF0,PF1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
Configured MCU 'mcu' (1024 moves)
Args: ['/home/biqu/klipper/klippy/klippy.py', '/home/biqu/printer_data/config/printer.cfg', '-I', '/home/biqu/printer_data/comms/klippy.serial', '-l', '/home/biqu/printer_data/logs/klippy.log', '-a', '/home/biqu/printer_data/comms/klippy.sock']
Git version: 'v0.11.0-241-gffb5105b'
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ?
Python: '3.9.2 (default, Feb 28 2021, 17:03:44) \n[GCC 10.2.1 20210110]'
webhooks client 281472977388112: {'program': 'Moonraker', 'version': 'v0.8.0-92-g504a3a7'}
=============== Log rollover at Mon Aug 21 00:26:45 2023 ===============
Stats 330.6: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=6807 bytes_read=36025 bytes_retransmit=0 bytes_invalid=0 send_seq=544 receive_seq=544 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001170 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=2403 bytes_read=9521 bytes_retransmit=0 bytes_invalid=0 send_seq=376 receive_seq=376 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999994 adj=49999146 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=3047 bytes_read=22666 bytes_retransmit=0 bytes_invalid=0 send_seq=420 receive_seq=420 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000356 adj=63999255  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=52.6 mcu_temp: temp=34.8 sysload=0.17 cputime=24.225 memavail=697296 print_time=333.409 buffer_time=0.049 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
Attempting MCU 'CB1' config_reset command
b'Got EOF when reading from device'
Attempting MCU 'ebbcan' reset command
Attempting MCU 'mcu' reset command
webhooks client 281472977388112: Disconnected
Restarting printer
Start printer at Mon Aug 21 00:26:46 2023 (1692577606.9 332.0)
===== Config file =====
[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancels the current print.
	Usage: CANCEL_PRINT
rename_existing = _KM_CANCEL_PRINT_BASE
gcode = 
	_KM_CHECK_IS_PRINTING
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=cancelling RESET_STACK=1
	SET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{True}"
	PRINT_END
	_KM_CANCEL_PRINT_BASE
	{% if printer.pause_resume.is_paused %}
	RESTORE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE MOVE=0
	{% endif %}
	CLEAR_PAUSE
	_KM_APPLY_PRINT_OFFSET RESET=1
	{% if 'virtual_sdcard' in printer and not printer.virtual_sdcard.is_active %}
	SDCARD_RESET_FILE
	{% endif %}

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
variable_restore_idle_timeout = 0
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set idle_timeout = client.idle_timeout|default(0) %}
	
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE={printer[printer.toolhead.extruder].target}
	
	{% if idle_timeout > 0 %}
	SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
	SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
	{% endif %}
	PAUSE_BASE
	_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
variable_last_extruder_temp = 0
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move = client.speed_move|default(velocity) %}
	
	
	{% if printer['gcode_macro PAUSE'].restore_idle_timeout > 0 %}
	SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro PAUSE'].restore_idle_timeout}
	{% endif %}
	M109 S{last_extruder_temp}
	_CLIENT_EXTRUDE
	RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	_KM_CHECK_IS_PRINTING
	{% set pause_next_layer =
	printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE | default(1) | int != 0 %}
	{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VALUE="{
	{ 'enable': False, 'call': MACRO }}" VARIABLE=pause_next_layer
	GCODE_AT_LAYER COMMAND="{MACRO|replace('\"','\\\"')
	}" CANCEL="{0 if ENABLE else 1}" LAYER="next"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	_KM_CHECK_IS_PRINTING
	{% set pause_at_layer =
	printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	
	{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined else
	params.LAYER is defined %}
	{% set LAYER = params.LAYER |
	default((pause_at_layer.layer|int,
	printer.print_stats.info.current_layer|int + 1)|max)%}
	{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}
	
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{
	{ 'enable': False, 'layer': 0, 'call': MACRO }}"
	{% if ENABLE and pause_at_layer.enable %}
	
	GCODE_AT_LAYER COMMAND="{pause_at_layer.call|replace('\"','\\\"')
	}" CANCEL="{1}" LAYER="{pause_at_layer.layer}"
	{% endif %}
	
	GCODE_AT_LAYER COMMAND="{MACRO|replace('\"','\\\"')
	}" CANCEL="{0 if ENABLE else 1}" LAYER="{LAYER}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = _KM_SET_PRINT_STATS_INFO
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	_KM_SET_PRINT_STATS_INFO {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.extruder.can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[gcode_macro _km_options]
variable_load_length = 90.0
variable_menu_temperature = [
	{'name' : 'PLA',  'extruder' : 200.0, 'bed' : 60.0},
	{'name' : 'PETG', 'extruder' : 230.0, 'bed' : 85.0},
	{'name' : 'ABS',  'extruder' : 245.0, 'bed' : 110.0, 'chamber' : 60}]
variable_start_purge_length = 50
variable_start_extruder_probing_temp = 150
variable_park_x = 200.0
variable_park_y = 200.0
gcode = 

[gcode_macro bed_mesh_calibrate_fast]
description = Wraps BED_MESH_CALIBRATE, scaling probe count to specified area.
	Usage: See Klipper documentation.
gcode = 
	
	BED_MESH_CHECK ABORT=1
	
	
	{% set calibrate_cmd =
	(printer["gcode_macro list_macros"].macros.bed_mesh_calibrate|
	default(["bed_mesh_calibrate"],True))[-1] %}
	
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set probe_mesh_padding = km.probe_mesh_padding %}
	{% set probe_min_count = km.probe_min_count %}
	{% set probe_count_scale = km.probe_count_scale %}
	{% set bed_mesh = printer.configfile.settings.bed_mesh %}
	
	
	{%if "mesh_radius" not in bed_mesh and
	"MESH_RADIUS" not in params %}
	{% set safe_min_x = bed_mesh.mesh_min[0] %}
	{% set safe_min_y = bed_mesh.mesh_min[1] %}
	{% set safe_max_x = bed_mesh.mesh_max[0] %}
	{% set safe_max_y = bed_mesh.mesh_max[1] %}
	
	
	{% if "MESH_MIN" in params %}
	{% set mesh_min_x = (params.MESH_MIN.split(",")[0]|float -
	probe_mesh_padding, safe_min_x)|max %}
	{% set mesh_min_y = (params.MESH_MIN.split(",")[1]|float -
	probe_mesh_padding, safe_min_y)|max %}
	{% else %}
	{% set mesh_min_x = safe_min_x %}
	{% set mesh_min_y = safe_min_y %}
	{% endif %}
	{% if "MESH_MAX" in params %}
	{% set mesh_max_x = (params.MESH_MAX.split(",")[0]|float +
	probe_mesh_padding, safe_max_x)|min %}
	{% set mesh_max_y = (params.MESH_MAX.split(",")[1]|float +
	probe_mesh_padding, safe_max_y)|min %}
	{% else %}
	{% set mesh_max_x = safe_max_x %}
	{% set mesh_max_y = safe_max_y %}
	{% endif %}
	
	{% set probe_count = bed_mesh.probe_count if not params.PROBE_COUNT else
	params.PROBE_COUNT.split(",")|map('int')|list %}
	
	{% if "PROBE_COUNT" not in params %}
	{% set max_x_probes = probe_count[0] %}
	{% set max_y_probes = probe_count[-1] %}
	
	{% set x_probes = (max_x_probes * (mesh_max_x - mesh_min_x) /
	(safe_max_x - safe_min_x) * probe_count_scale)
	| round(0) | int %}
	{% set x_probes = ((x_probes, probe_min_count)|max, max_x_probes)|min %}
	
	{% set y_probes = (max_y_probes * (mesh_max_y - mesh_min_y ) /
	(safe_max_y - safe_min_y) * probe_count_scale )
	| round(0) | int %}
	{% set y_probes = ((y_probes, probe_min_count)|max, max_y_probes)|min %}
	
	{% if x_probes > 6 and y_probes < 4 %}
	{% set y_probes = 4 %}
	{% elif y_probes > 6 and x_probes < 4 %}
	{% set x_probes = 4 %}
	{% endif %}
	{% set probe_count = [x_probes,y_probes] %}
	{% elif probe_count|length == 1 %}
	{% set dummy = probe_count.append(probe_count[0]) %}
	{% endif %}
	
	
	
	
	
	
	
	{% if "relative_reference_index" in bed_mesh %}
	{% set row = (bed_mesh.relative_reference_index / bed_mesh.probe_count[0]
	)|int%}
	{% set rrf_x = (((safe_max_x - safe_min_x) /
	(bed_mesh.probe_count[0] - 1))|round(2, 'floor')) *
	(bed_mesh.relative_reference_index %
	bed_mesh.probe_count[-1]) %}
	{% if row % 2 %}
	{% set rrf_x = safe_max_x - rrf_x %}
	{% else %}
	{% set rrf_x = safe_min_x + rrf_x %}
	{% endif %}
	{% set rrf_y = (((safe_max_y - safe_min_y) /
	(bed_mesh.probe_count[-1] - 1))|round(2, 'floor')) *
	row + safe_min_x %}
	{% set x_dist = (mesh_max_x - mesh_min_x) / (probe_count[0] - 1) %}
	{% set y_dist = (mesh_max_y - mesh_min_y) / (probe_count[1] - 1) %}
	{% set rrf = {'x':0, 'y':0, 'dist':safe_max_x**2+safe_max_y**2,'pos':0} %}
	{% for row in range(probe_count[1])%}
	{% for col in range(probe_count[0])%}
	{% if row % 2 %}
	{% set x = mesh_max_x - col * x_dist %}
	{% else %}
	{% set x = mesh_min_x + col * x_dist %}
	{% endif %}
	{% set y = mesh_min_y + row * y_dist %}
	{% set dist = ((x - rrf_x)**2 + (y - rrf_y)**2)**0.5 %}
	{% if dist < rrf.dist %}
	{% set dummy = rrf.__setitem__("dist", dist) %}
	{% set dummy = rrf.__setitem__("x", x) %}
	{% set dummy = rrf.__setitem__("y", y) %}
	{% set dummy = rrf.__setitem__("pos", row * probe_count[1] + col) %}
	{% endif %}
	{% endfor %}
	{% endfor %}
	{% if rrf.x != rrf_x or rrf.y != rrf_y %}
	{action_respond_info("relative_reference_index remapped to"
	" %d (%.2f,%.2f) from %d (%.2f,%.2f)" %
	(rrf.pos, rrf.x, rrf.y,
	bed_mesh.relative_reference_index, rrf_x, rrf_y))}
	{% endif %}
	{% set dummy = params.__setitem__("RELATIVE_REFERENCE_INDEX", rrf.pos) %}
	{% endif %}
	
	{% set dummy = params.__setitem__("MESH_MIN", mesh_min_x~","~mesh_min_y) %}
	{% set dummy = params.__setitem__("MESH_MAX", mesh_max_x~","~mesh_max_y) %}
	{% set dummy = params.__setitem__("PROBE_COUNT", probe_count|join(',')) %}
	
	{% if probe_count[0] > 6 or probe_count[1]|default(0) > 6 %}
	{% set dummy = params.__setitem__("ALGORITHM", "bicubic") %}
	{% endif %}
	
	{% if "MESH_MIN" in params or "MESH_MAX" in params %}
	BED_MESH_CHECK {rawparams}
	{% endif %}
	{% else %}
	
	{% set dummy = params.__delitem__("MESH_MIN") %}
	{% set dummy = params.__delitem__("MESH_MAX") %}
	{% endif %}
	
	{% if "MESH_MIN" in params or "MESH_MAX" in params %}
	BED_MESH_CHECK ABORT=1{%for k in params%}{' '~k~'="'~params[k]~'"'}{%
	endfor%}
	{% endif %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=meshing
	{calibrate_cmd}{%for k in params%}{' '~k~'="'~params[k]~'"'}{%endfor%}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro bed_mesh_check]
description = Warns if bed_mesh config may generate an invalid mesh.
	Usage: BED_MESH_CHECK [MESH_MIN=<x,y>] [MESH_MAX=<x,y>] [ABORT=<0|1>]
gcode = 
	{% if printer.bed_mesh is defined %}
	{% set action = action_respond_info if params.ABORT|default(0)|int == 0 else
	action_raise_error %}
	{% set settings = printer.configfile.settings %}
	{% set x_min = settings.stepper_x.position_min %}
	{% set y_min = settings.stepper_y.position_min %}
	{% set x_max = settings.stepper_x.position_max %}
	{% set y_max = settings.stepper_y.position_max %}
	
	{% set label = "[bed_mesh] config" %}
	{% if "MESH_MIN" in params %}
	{% set label = "BED_MESH_CALIBRATE params" %}
	{% set mesh_min_x = params.MESH_MIN.split(",")[0]|float %}
	{% set mesh_min_y = params.MESH_MIN.split(",")[1]|float %}
	{% else %}
	{% set mesh_min_x = settings.bed_mesh.mesh_min[0] %}
	{% set mesh_min_y = settings.bed_mesh.mesh_min[1] %}
	{% endif %}
	{% if "MESH_MAX" in params %}
	{% set label = "BED_MESH_CALIBRATE params" %}
	{% set mesh_max_x = params.MESH_MAX.split(",")[0]|float %}
	{% set mesh_max_y = params.MESH_MAX.split(",")[1]|float %}
	{% else %}
	{% set mesh_max_x = settings.bed_mesh.mesh_max[0] %}
	{% set mesh_max_y = settings.bed_mesh.mesh_max[1] %}
	{% endif %}
	
	{% if "bltouch" in settings %}
	{% set x_offset = settings.bltouch.x_offset %}
	{% set y_offset = settings.bltouch.y_offset %}
	{% set probe = "bltouch" %}
	{% elif "probe" in settings %}
	{% set x_offset = settings.probe.x_offset %}
	{% set y_offset = settings.probe.y_offset %}
	{% set probe = "probe" %}
	{% else %}
	{% set x_offset = 0.0 %}
	{% set y_offset = 0.0 %}
	{% endif %}
	
	{% set output = [] %}
	{% set warn =
	"* mesh_%s (%f, %f) adjusted by " ~ probe ~
	".%s_offset (%f) can move out of range for "
	"stepper_%s.position_%s (%f)." %}
	{% if x_offset > 0 and (mesh_min_x - x_offset) < x_min %}
	{% set dummy = output.append(warn % ('min', mesh_min_x, mesh_min_y,
	'x', x_offset, 'x', 'min', x_min)) %}
	{% elif x_offset < 0 and (mesh_max_x - x_offset) > x_max %}
	{% set dummy = output.append(warn % ('max', mesh_max_x, mesh_max_y,
	'x', x_offset, 'x', 'max', x_max)) %}
	{% endif %}
	{% if y_offset > 0 and (mesh_min_y - y_offset) < y_min %}
	{% set dummy = output.append(warn % ('min', mesh_min_x, mesh_min_y,
	'y', y_offset, 'y', 'min', y_min)) %}
	{% elif y_offset < 0 and (mesh_max_y - y_offset) > y_max %}
	{% set dummy = output.append(warn % ('max', mesh_max_x, mesh_max_y,
	'y', y_offset, 'y', 'max', y_max)) %}
	{% endif %}
	
	{% if output %}
	{ action(
	"Warning: The following issue(s) were detected in your " ~ label ~
	":\n" ~ output|join("\n")) }
	{% endif %}
	{% endif %}

[gcode_macro _apply_bed_surface_offset]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% if surfaces.active %}
	SET_SURFACE_ACTIVE SURFACE={surfaces.active}
	{% endif %}

[gcode_macro _init_surfaces]
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% if "bed_surfaces" in printer.save_variables.variables %}
	{% set old_surfaces = printer.save_variables.variables.bed_surfaces %}
	{% else %}
	{% set old_surfaces = { 'active' : '', 'available' : {} } %}
	{% endif %}
	{% set settings = printer.configfile.settings %}
	{% set new_probe_z = (settings.probe | default(settings.bltouch) |
	default(settings.smart_effector) | default({})
	).z_offset|default(0.0)|float %}
	{% set new_endstop_z = (settings.stepper_z | default({})).position_endstop |
	default(0.0)|float %}
	{% if 'endstop_z' not in old_surfaces %}
	{% set dummy = old_surfaces.__setitem__('endstop_z', new_endstop_z) %}
	{% endif %}
	{% if 'probe_z' not in old_surfaces %}
	{% set dummy = old_surfaces.__setitem__('probe_z', new_probe_z) %}
	{% endif %}
	{% set surfaces = { 'active' : '', 'available' : {},
	'endstop_z' : old_surfaces.endstop_z,
	'probe_z' : old_surfaces.probe_z } %}
	{% for s in km.bed_surfaces %}
	{% set s = s.split()|join(' ')|lower %}
	{% if s|length > km.bed_surface_max_name_length or
	s|list|select("in", " \r\n\"\'")|list %}
	{action_raise_error('Invalid surface name "%s". Name must be %d or fewer '
	'characters and must not include space or quotation characters'
	| format(s, km.bed_surface_max_name_length))}
	{% endif %}
	{% if s in old_surfaces.available %}
	{% set dummy = surfaces.available.__setitem__(s,
	old_surfaces.available[s]) %}
	{% else %}
	{% set dummy = surfaces.available.__setitem__(s, {'offset' : 0.0}) %}
	{% endif %}
	{% endfor %}
	{% if old_surfaces.active in surfaces.available %}
	{% set dummy = surfaces.__setitem__('active', old_surfaces.active) %}
	{% elif km.bed_surfaces %}
	{% set dummy = surfaces.__setitem__('active', km.bed_surfaces[0]|lower) %}
	{% endif %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	_APPLY_BED_SURFACE_OFFSET
	{% if new_probe_z != surfaces.probe_z or
	new_endstop_z != surfaces.endstop_z %}
	{ action_respond_info(
	'Z probe offset or endstop position changed. Run ADJUST_SURFACE_OFFSETS '
	'to adjust the offset for all saved surfaces by the change differential, '
	'or run ADJUST_SURFACE_OFFSETS IGNORE=1 to hide this message without '
	'making changes.') }
	{% endif %}

[gcode_macro adjust_surface_offsets]
description = Adjusts surface offsets to account for changes in the Z endstop
	position or probe Z offset.
	Usage: ADJUST_SURFACE_OFFSETS [IGNORE]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% set settings = printer.configfile.settings %}
	{% set new_probe_z = (settings.probe | default(settings.bltouch) |
	default(settings.smart_effector) | default({})
	).z_offset|default(0.0)|float %}
	{% set new_endstop_z = (settings.stepper_z | default({})).position_endstop |
	default(0.0)|float %}
	{% set diff = (surfaces.probe_z - new_probe_z +
	surfaces.endstop_z - new_endstop_z)|round(6) %}
	{% if not params.IGNORE|default(0)|int %}
	{% for s in surfaces.available %}
	{% set offset = (surfaces.available[s].offset - diff)|round(6) %}
	{% set dummy = surfaces.available.__setitem__(s, {'offset' : offset}) %}
	{% endfor %}
	{ action_respond_info("All bed surfaces now adjusted by %1.4f"|
	format(diff))}
	{% elif diff != 0 %}
	{ action_respond_info("Status cleared without adjustment") }
	{% endif %}
	{% set dummy = surfaces.__setitem__('endstop_z', new_endstop_z| round(6)) %}
	{% set dummy = surfaces.__setitem__('probe_z', new_probe_z|round(6)) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"

[gcode_macro set_surface_offset]
description = Sets the offset for a surface and moves the toolhead (if homed).
	Usage: SET_SURFACE_OFFSET [OFFSET=<offset>] [SURFACE=<surface>]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}
	{% if SURFACE not in surfaces.available %}
	{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }
	{% endif %}
	{% set active = surfaces.available[SURFACE] %}
	
	{% set OFFSET = params.OFFSET|default(active.offset)|float %}
	{% if OFFSET != active.offset %}
	{% set dummy = surfaces.available[SURFACE].__setitem__("offset", OFFSET) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	{% if SURFACE == surfaces.active %}
	_km_set_gcode_offset_base Z="{OFFSET}" MOVE={
	1 if printer.toolhead.homed_axes == 'xyz' else 0}
	{% endif %}
	{% endif %}
	{ action_respond_info("Bed surface: %s Offset: %.3f"
	| format(SURFACE, OFFSET)) }
	
	{% set dummy = None if True else "
	{% set dummy = params.SURFACE|default(active surface) %}
	{% set dummy = params.OFFSET|default(none)|float %}
	" %}

[gcode_macro set_surface_active]
description = Sets the active bed surface and moves the toolhead (if homed). If
	no SURFACE argument is present the available surfaces are listed and the
	active one is preceded by a "*".
	Usage: SET_SURFACE_ACTIVE [SURFACE=<surface>]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% if "SURFACE" in params %}
	{% set SURFACE = params.SURFACE|lower %}
	{% if SURFACE not in surfaces.available %}
	{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }
	{% endif %}
	{% if SURFACE != surfaces.active %}
	{% set dummy = surfaces.__setitem__("active", SURFACE) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	{% endif %}
	{% if surfaces.available[SURFACE].offset !=
	printer.gcode_move.homing_origin.z %}
	_km_set_gcode_offset_base Z="{surfaces.available[SURFACE].offset
	}" MOVE={1 if printer.toolhead.homed_axes == 'xyz' else 0}
	{% endif %}
	{action_respond_info("Active bed surface: %s; offset: %.3f"
	| format(SURFACE, surfaces.available[SURFACE].offset))}
	{% else %}
	{% set output = [] %}
	{% for s in surfaces.available|list|sort %}
	{% set dummy = output.append("%s&nbsp;%s - offset: %.3f"
	| format("*" if s == surfaces.active else "&nbsp;",
	s, surfaces.available[s].offset)) %}
	{% endfor %}
	{action_respond_info(output|join('\n'))}
	{% endif %}
	
	{% set dummy = None if True else "
	{% set dummy = params.SURFACE|default(none) %}
	" %}

[gcode_macro set_gcode_offset]
description = Wraps SET_GCODE_OFFSET to update the current bed sheet offset.
	Usage: SET_GCODE_OFFSET [X=<pos>|X_ADJUST=<adjust>]
	[Y=<pos>|Y_ADJUST=<adjust>]
	[Z=<pos>|Z_ADJUST=<adjust>]
	[MOVE=1 [MOVE_SPEED=<speed>]]
rename_existing = _KM_SET_GCODE_OFFSET_BASE
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% if surfaces.active and
	not printer["gcode_macro _km_save_state"].is_ephemeral %}
	{% set Z = params.Z|default(0.0)|float|round(6) %}
	{% set Z_ADJUST = params.Z_ADJUST|default(0.0)|float %}
	{% if 'Z' in params and
	Z != surfaces.available[surfaces.active].offset %}
	{% set dummy = surfaces.available[surfaces.active].__setitem__("offset",
	Z) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	{% elif Z_ADJUST != 0.0 %}
	{% set dummy = surfaces.available[surfaces.active].__setitem__(
	"offset", (Z_ADJUST + printer.gcode_move.homing_origin.z)|round(6)) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	{% endif %}
	{% endif %}
	_km_set_gcode_offset_base{% for k in params%}{' '~k~'="'~params[k]~'"'
	}{% endfor %}

[gcode_macro make_surface_mesh]
description = Generates and saves a mesh to automatically load in PRINT_START.
	Usage: MAKE_SURFACE_MESH [SURFACE=<surface>] [BED=<probing temperature>]
	[EXTRUDER=<probing temperature>]
	[MESH_MULTIPLIER=<integer multiple of mesh density>]
	[bed_mesh_calibrate parameters]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}
	{% if SURFACE not in surfaces.available %}
	{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }
	{% endif %}
	{% set dummy = params.__setitem__('PROFILE', SURFACE) %}
	{% set BED = params.BED|default(70) | int %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set EXTRUDER = params.EXTRUDER|default(km.start_extruder_probing_temp) |
	int %}
	{% set MESH_MULTIPLIER = (params.MESH_MULTIPLIER|default(2)|int, 1)|max %}
	
	M104 S{EXTRUDER}
	M140 S{BED}
	G28
	
	
	{% if surfaces.available[SURFACE].offset !=
	printer.gcode_move.homing_origin.z %}
	_km_set_gcode_offset_base Z="{surfaces.available[SURFACE].offset
	}" MOVE=1
	{% endif %}
	
	
	{% if BED > 0 %}
	{action_respond_info("Stabilizing bed at %iC" | format(BED,))}
	_KM_PARK_IF_NEEDED HEATER=heater_bed RANGE=0.5
	{% if BED < (printer.heater_bed.temperature - 0.2) %}
	M190 R{BED}
	G4 P{((km.start_bed_heat_delay * 10, 30000)|min,
	km.start_bed_heat_delay)|max}
	{% else %}
	G4 P{km.start_bed_heat_delay}
	{% endif %}
	M190 R{BED}
	{% endif %}
	
	{% if EXTRUDER > 0 %}
	_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=2
	M109 R{km.start_extruder_probing_temp}
	{% endif %}
	
	{% if km.start_home_z_at_temp and not bed_at_target %}
	G28 Z
	{% endif %}
	
	
	
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count
	if not params.PROBE_COUNT else
	params.PROBE_COUNT.split(",")|map('int')|list %}
	{% set dummy = params.__setitem__('PROBE_COUNT',(
	MESH_MULTIPLIER * (probe_count[0] - 1) + 1,
	MESH_MULTIPLIER * (probe_count[-1] - 1) + 1,)|join(',')) %}
	
	BED_MESH_CLEAR
	BED_MESH_CALIBRATE_FAST {%
	for k in params|reject('in',['BED','SURFACE'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor %}
	SAVE_CONFIG
	
	
	{% set dummy = None if True else "
	{% set dummy = params.MESH_MULTIPLIER|default(2) %}
	{% set dummy = params.SURFACE|default(active surface) %}
	" %}

[gcode_macro load_surface_mesh]
description = Attempts to load a mesh associated with the specified surface.
	Usage: LOAD_SURFACE_MESH [SURFACE=<surface>]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}
	{% if SURFACE != surfaces.active %}
	SET_SURFACE_ACTIVE SURFACE={SURFACE}
	{% endif %}
	
	{% if SURFACE in printer.bed_mesh.profiles %}
	{% set mesh = printer.bed_mesh.profiles[SURFACE].mesh_params %}
	{% set default = printer.configfile.settings.bed_mesh %}
	
	{% if mesh.min_x <= (default.mesh_min[0] + 0.5) and
	mesh.min_y <= (default.mesh_min[1] + 0.5) and
	mesh.max_x >= (default.mesh_max[0] - 0.5) and
	mesh.max_y >= (default.mesh_max[1] - 0.5) and
	mesh.x_count >= default.probe_count[0] and
	mesh.y_count >= default.probe_count[-1] %}
	
	BED_MESH_PROFILE LOAD={SURFACE}
	{action_respond_info("Loaded mesh: %s" | format(SURFACE,))}
	{% endif %}
	{% endif %}

[gcode_macro m300]
description = Emits and audible beep.
	Usage: M300 [P<duration>] [S<frequency>]
gcode = 
	{% set settings = printer.configfile.settings %}
	{% if "output_pin beeper" in printer %}
	{% set P = (params.P|default(100)|int, 0)|max %}
	{% set S = (params.S|default(1000)|int, 1)|max %}
	SET_PIN PIN=beeper VALUE={% if settings["output_pin beeper"].pwm %}{
	settings["output_pin beeper"].scale|default(1.0) * 0.5
	} CYCLE_TIME={ 1.0 / S }{% else %}1{% endif %}
	G4 P{P}
	SET_PIN PIN=beeper VALUE=0
	{% else %}
	{action_respond_info(
	"M300 is disabled. To enable create an [output_pin beeper] config.")}
	{% endif %}

[gcode_macro set_draw_params]
description = Sets the default parameters used by DRAW_LINE_TO.
	Usage: SET_DRAW_PARAMS [HEIGHT=<mm>] [WIDTH=<mm>] [FEEDRATE=<mm/m>]
variable_height = 0.2
variable_width = 0.0
variable_feedrate = 1200
gcode = 
	{% set dparams = printer["gcode_macro set_draw_params"] %}
	{% for k in params %}
	{% set kl = k|lower %}
	{% if kl in dparams %}
	{% if dparams[kl] is float %}
	{% set v = params[k]|float %}
	{% elif dparams[kl] is integer %}
	{% set v = params[k]|int %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=set_draw_params VARIABLE={kl} VALUE="{v}"
	{% endif %}
	{% endfor %}

[gcode_macro draw_line_to]
description = Extrudes a line of filament at the specified height and width from
	the current coordinate to the supplied XY coordinate. (The height is used only
	to calculate the extrusion volume.)
	Usage: DRAW_LINE_TO [X=<pos>] [Y=<pos>] [HEIGHT=<mm>] [WIDTH=<mm>]
	[FEEDRATE=<mm/m>]
gcode = 
	{% set dparams = printer["gcode_macro set_draw_params"] %}
	{% set position = printer.gcode_move.gcode_position %}
	{% set X = params.X|default(position.x)|float %}
	{% set Y = params.Y|default(position.y)|float %}
	{% set HEIGHT = params.HEIGHT|default(dparams.height)|float %}
	{% set WIDTH = params.WIDTH|default(dparams.width)|float %}
	{% set FEEDRATE = params.FEEDRATE|default(dparams.feedrate)|int %}
	
	{% set distance = ((X - position.x) ** 2 + (Y - position.y) ** 2) ** 0.5 %}
	
	{% set filament_area = 3.14159 *
	(printer.configfile.settings[
	printer.toolhead.extruder].filament_diameter ** 2) / 4 %}
	{% set E = distance * ((WIDTH * HEIGHT) / filament_area) %}
	
	
	_KM_SAVE_GCODE_STATE NAME=_KM_PURGE
	G90
	G92 E0.0
	G1 X{"%.3f" % X} Y{"%.3f" % Y} E{"%.5f" % E} F{FEEDRATE}
	_KM_RESTORE_GCODE_STATE NAME=_KM_PURGE MOVE=0

[gcode_macro draw_purge_line]
description = Purges the specified length of filament as a line (or rows of
	lines) in front of the supplied print area. If no print area is specified the
	purge lines are drawn at the front edge of the maximum printable area. If no
	printable area is set it defaults to the XY axis limits.
	Usage: DRAW_PURGE_LINE [PRINT_MIN=<X,Y>] [PRINT_MAX=<X,Y>] [HEIGHT=<mm>]
	[WIDTH=<mm>] [LENGTH=<mm>]
gcode = 
	
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set origin = printer.gcode_move.homing_origin %}
	{% set dummy = km.__setitem__('print_min', (km.print_min[0] - origin.x,
	km.print_min[1] - origin.y)) %}
	{% set dummy = km.__setitem__('print_max', (km.print_max[0] - origin.x,
	km.print_max[1] - origin.y)) %}
	
	{% if "PRINT_MIN" in params %}
	{% set PRINT_MIN = (
	(params.PRINT_MIN.split(",")[0]|float, km.print_min[0])|max,
	(params.PRINT_MIN.split(",")[1]|float, km.print_min[1])|max
	) %}
	{% else %}
	{% set PRINT_MIN = km.print_min %}
	{% endif %}
	{% if "PRINT_MAX" in params %}
	{% set PRINT_MAX = (
	(params.PRINT_MAX.split(",")[0]|float, km.print_max[0])|min,
	(params.PRINT_MAX.split(",")[1]|float, km.print_max[1])|min
	) %}
	{% else %}
	{% set PRINT_MAX = km.print_max %}
	{% endif %}
	{% set extruder = printer.toolhead.extruder|string %}
	{% set HEIGHT = params.HEIGHT|default(
	printer.configfile.settings[extruder].nozzle_diameter * 0.625)|float %}
	{% set WIDTH = params.WIDTH|default(
	printer.configfile.settings[extruder].nozzle_diameter * 1.25)|float %}
	{% set LENGTH = params.LENGTH|default(km.start_purge_length)|float %}
	
	{% set dparams = printer["gcode_macro set_draw_params"] %}
	{% set filament_area = 3.14159 *
	(printer.configfile.settings[extruder].filament_diameter ** 2) / 4 %}
	{% set purge_length = (LENGTH * filament_area) / (WIDTH * HEIGHT) %}
	{% set printable_length = PRINT_MAX[0] - PRINT_MIN[0] %}
	{% set purge_rows = (purge_length / printable_length)|round(0,'ceil')|int %}
	{% set printable_inset = (printable_length - purge_length / purge_rows) / 2 %}
	{% set PRINT_MIN = (PRINT_MIN[0] + printable_inset, PRINT_MIN[1]) %}
	{% set PRINT_MAX = (PRINT_MAX[0] - printable_inset, PRINT_MAX[1]) %}
	
	{% set y_start = (km.print_min[1], PRINT_MIN[1] - km.start_purge_clearance -
	(purge_rows + 0.5) * WIDTH )|max %}
	G90
	
	G1 X{"%.3f" % (PRINT_MIN[0] - 30, km.print_min[0])|max} Y{
	"%.3f" % (y_start - 10, km.print_min[1])|max} F{km.travel_speed_xy}
	
	G1 X{"%.3f" % (PRINT_MIN[0] - 2, km.print_min[0])|max} Y{"%.3f" % y_start} Z{
	"%.4f" % HEIGHT} F{km.travel_speed_xy}
	
	G92 E0.0
	G1 E{"%.3f" % km.start_purge_prime_length} F{km.load_priming_speed}
	G92 E0.0
	
	G1 X{"%.3f" % PRINT_MIN[0]} F{km.travel_speed_xy}
	{% for n in range(purge_rows - 1) %}
	{% set x_pos = PRINT_MIN[0] if n % 2 else PRINT_MAX[0] %}
	DRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{
	WIDTH * n + y_start}"
	DRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{
	WIDTH * (n + 1) + y_start}"
	{% endfor %}
	{% set x_pos = PRINT_MAX[0] if purge_rows % 2 else PRINT_MIN[0] %}
	DRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{
	WIDTH * (purge_rows - 1) + y_start}"
	G92 E0.0

[gcode_macro _check_fan_params]
gcode = 
	{% set MAXIMUM = params.MAXIMUM|default(
	printer["gcode_macro set_fan_scaling"].maximum)|int %}
	{% set MINIMUM = params.MINIMUM|default(
	printer["gcode_macro set_fan_scaling"].minimum)|int %}
	
	{% if params.SCALE and params.SCALE|float <= 0 %}
	{ action_raise_error("SCALE must be a positive value.") }
	{% elif MINIMUM < 0 or MINIMUM > 255 %}
	{ action_raise_error("MINIMUM must be between 0 and 255.") }
	{% elif MAXIMUM < 0 or MAXIMUM > 255 %}
	{ action_raise_error("MAXIMUM must be between 0 and 255.") }
	{% elif params.SPEED and (params.SPEED|int < 0 or params.SPEED|int > 255) %}
	{ action_raise_error("SPEED must be between 0 and 255.") }
	{% elif params.BOOST and (params.BOOST|int < 0 or params.BOOST|int > 255) %}
	{ action_raise_error("BOOST must be between 0 and 255.") }
	{% elif MINIMUM > MAXIMUM %}
	{ action_raise_error("MINIMUM must be less than or equal to MAXIMUM.") }
	{% endif %}

[gcode_macro set_fan_scaling]
description = Sets fan scaling factors applied to M106 command. If a speed is
	provided it will be adjusted according to the scaling parameters.
	Usage: SET_FAN_SCALING [SCALE=<scale>] [BOOST=<boost>] [MAXIMUM=<max>]
	[MINIMUM=<min>] [SPEED=<speed>]
variable_scale = 1.0
variable_boost = 0
variable_minimum = 0
variable_maximum = 255
variable_real_speed = 0
gcode = 
	_CHECK_FAN_PARAMS{% for k in params %}{' '~k~'='~params[k]}{% endfor %}
	{% set SCALE = params.SCALE|default(scale)|float %}
	{% set BOOST = params.BOOST|default(boost)|float %}
	{% set MAXIMUM = params.MAXIMUM|default(maximum)|int %}
	{% set MINIMUM = params.MINIMUM|default(minimum)|int %}
	{% set SPEED = params.SPEED|default(real_speed)|int %}
	
	{% if SCALE != 1.0 or BOOST != 0 or MAXIMUM != 255 or MINIMUM != 0 %}
	{action_respond_info("Fan: Scale: %.2f Minimum:%i Maximum: %i Speed: %i"|
	format(SCALE, MINIMUM, MAXIMUM, SPEED))}
	{% endif %}
	
	
	{% if params|length > 0 %}
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=scale VALUE="{SCALE}"
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=boost VALUE="{BOOST}"
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=minimum VALUE="{MINIMUM}"
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=maximum VALUE="{MAXIMUM}"
	
	M106 S{SPEED}
	{% endif %}
	
	{% set dummy = None if True else "
	{% set dummy = params.SCALE|default(1.0)|float %}
	{% set dummy = params.BUMP|default(0)|int %}
	{% set dummy = params.MAXIMUM|default(255)|int %}
	{% set dummy = params.MINIMUM|default(0)|int %}
	{% set dummy = params.SPEED|default(current speed)|int %}
	" %}

[gcode_macro reset_fan_scaling]
description = Clears all fan scaling factors.
	Usage: RESET_FAN_SCALING
gcode = 
	SET_FAN_SCALING SCALE=1.0 BOOST=0 MAXIMUM=255 MINIMUM=0

[gcode_macro m106]
description = Wraps M106 to implement scaling overrides.
rename_existing = M106.6245197
gcode = 
	{% set S = params.S|default(255)|int %}
	{% set scale = printer["gcode_macro set_fan_scaling"] %}
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=real_speed VALUE="{S}"
	M106.6245197 S{((((S + scale.boost) * scale.scale) | round | int,
	scale.minimum) | max, scale.maximum) | min}

[gcode_macro _load_unload]
gcode = 
	{% set saved_extruder = printer.toolhead.extruder %}
	{% set EXTRUDER = params.EXTRUDER|default(saved_extruder)|lower %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% set BEEPS = params.BEEPS|default(8)|int if "output_pin beeper" in printer
	else 0 %}
	{% set default_minimum = km.load_min_temp if km.load_min_temp else
	(printer.configfile.settings[EXTRUDER].min_extrude_temp + 5) %}
	{% if 'MINIMUM' in params %}
	{% set MINIMUM = params.MINIMUM|int %}
	
	{% elif printer.pause_resume.is_paused and printer[EXTRUDER].target == 0 and
	printer["gcode_macro resume"].saved_extruder_temp %}
	{% set MINIMUM = printer["gcode_macro resume"].saved_extruder_temp %}
	
	{% elif printer[EXTRUDER].target > default_minimum %}
	{% set MINIMUM = printer[EXTRUDER].target %}
	{% else %}
	{% set MINIMUM = default_minimum %}
	{% endif %}
	{% if MINIMUM < printer.configfile.settings[EXTRUDER].min_extrude_temp %}
	{ action_raise_error("Extrude below minimum temp.") }
	{% elif printer.pause_resume.is_paused %}
	
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"
	{% endif %}
	{% set SPEED = params.SPEED|default(km.load_speed)|int %}
	{% set priming_length = km.load_priming_length %}
	{% set LENGTH = params.LENGTH|default(km.load_length)|float - priming_length%}
	{% if LENGTH < 0 %}
	{% set priming_length = (priming_length + LENGTH, 0)|max %}
	{% set LENGTH = 0 %}
	{% endif %}
	SAVE_GCODE_STATE NAME=_KM_LOAD_UNLOAD
	{% if EXTRUDER != saved_extruder%}
	ACTIVATE_EXTRUDER EXTRUDER={EXTRUDER}
	{% endif %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	{% if not printer.extruder.can_extrude or
	printer[EXTRUDER].target < default_minimum %}
	{action_respond_info("Preheating %s to %d" | format(EXTRUDER, MINIMUM))}
	M109 S{MINIMUM}
	{% endif %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS={"filament_load"
	if params.LOAD|int else "filament_unload"}
	M83
	{% set priming_speed = (km.load_priming_speed, SPEED)|min %}
	{% if params.LOAD|int %}
	G0 E{LENGTH} F{SPEED}
	G0 E{priming_length} F{priming_speed}
	G0 E{'%.4f' % -printer["gcode_macro resume"].saved_e} F{km.load_speed}
	{% else %}
	{% set pre_prime_distance = 5.0 %}
	{% set shaping_moves = 5 %}
	{% set shaping_distance = (shaping_moves * (1 + shaping_moves)/20) %}
	
	G0 E{pre_prime_distance} F{SPEED}
	G4 P500
	G0 E{'%.4f' % -(priming_length - shaping_distance)} F{SPEED}
	
	
	{% for i in range(1, shaping_moves + 1) %}
	G0 E2 F{priming_speed}
	G0 E-{2 + (0.1 * i)} F{priming_speed}
	{% endfor %}
	
	G0 E{'%.4f' % -(LENGTH + pre_prime_distance)} F{SPEED}
	{% endif %}
	RESTORE_GCODE_STATE NAME=_KM_LOAD_UNLOAD
	
	
	{% for i in range(BEEPS) %}
	M300 P100
	G4 P200
	{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro LOAD_FILAMENT]
description = Loads filament to the extruder.
	Usage: LOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]
	[EXTRUDER=<extruder>] [MINIMUM=<temperature>]
	[BEEPS=<beep count on completion>]
gcode = 
	_LOAD_UNLOAD LOAD=1{% for k in params
	%}{' '~k~'="'~params[k]~'"'}{% endfor %}
	
	
	{% set dummy = None if True else "
	M109
	{% set dummy = params.LENGTH|default(variable_load_length)|float %}
	{% set dummy = params.SPEED|default(variable_load_speed)|float %}
	{% set dummy = params.EXTRUDER|default(current extruder) %}
	{% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}
	{% set dummy = params.BEEPS|default(10)|int %}
	" %}

[gcode_macro UNLOAD_FILAMENT]
description = Unloads filament from the extruder.
	Usage: UNLOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]
	[EXTRUDER=<extruder>] [MINIMUM=<temperature>]
	[BEEPS=<beep count on completion>]
gcode = 
	_LOAD_UNLOAD LOAD=0{% for k in params
	%}{' '~k~'="'~params[k]~'"'}{% endfor %}
	
	
	{% set dummy = None if True else "
	M109
	{% set dummy = params.LENGTH|default(variable_load_length)|float %}
	{% set dummy = params.SPEED|default(variable_load_speed)|float %}
	{% set dummy = params.EXTRUDER|default(default extruder) %}
	{% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}
	{% set dummy = params.BEEPS|default(10)|int %}
	" %}

[gcode_macro _pause_inner_m700]
gcode = 
	{% set extruder = "extruder" ~ params.T|replace('0', '')
	if "T" in params else printer.toolhead.extruder %}
	{% if extruder != printer.toolhead.extruder%}
	ACTIVATE_EXTRUDER EXTRUDER={extruder}
	{% endif %}
	
	{% set z_param = (' Z="%f"' % params.Z) if 'Z' in params else "" %}
	
	{% if printer.idle_timeout.state|string == "Printing" %}
	PAUSE B="{0}" P=2{z_param}
	{% elif not printer.pause_resume.is_paused%}
	PARK B="{0}" P=2{z_param}
	{% endif %}

[gcode_macro m701]
description = Pauses/parks the toolhead then loads filament to the extruder.
	Usage: M701 [L<distance>] [Z<pos>] [T<extruder>]
gcode = 
	{% if 'U' in params %}
	{% if not 'L' in params %}
	RESPOND TYPE=error MSG="Argument \"U\" substituted for missing \"L\"."
	{% set dummy = params.__setitem__("L", params.U) %}
	{% else %}
	RESPOND TYPE=error MSG="Invalid argument \"U\" ignored."
	{% endif %}
	{% endif %}
	
	_PAUSE_INNER_M700 {% for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	LOAD_FILAMENT BEEPS="{10}" LENGTH={
	params.L|default(printer["gcode_macro _km_globals"].load_length)|float}

[gcode_macro m702]
description = Pauses/parks the toolhead then unloads filament from the extruder.
	Usage: M702 [U<distance>] [Z<pos>] [T<extruder>]
gcode = 
	{% if 'L' in params %}
	{% if not 'U' in params %}
	RESPOND TYPE=error MSG="Argument \"L\" substituted for missing \"U\"."
	{% set dummy = params.__setitem__("U", params.L) %}
	{% else %}
	RESPOND TYPE=error MSG="Invalid argument \"L\" ignored."
	{% endif %}
	{% endif %}
	
	_PAUSE_INNER_M700 {% for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	UNLOAD_FILAMENT BEEPS="{10}" LENGTH={
	params.U|default(printer["gcode_macro _km_globals"].load_length)|float}

[gcode_macro _km_globals]
variable_bed_surface_max_name_length = 10
variable_bed_surfaces = ['default']
variable_load_length = 90.0
variable_load_min_temp = 0
variable_load_priming_length = 20.0
variable_load_priming_speed = 200
variable_load_speed = 1200
variable_menu_show_octoprint = True
variable_menu_show_sdcard = True
variable_menu_temperature = [
	{'name' : 'PLA',  'extruder' : 200, 'bed' : 60},
	{'name' : 'PETG', 'extruder' : 230, 'bed' : 85},
	{'name' : 'ABS',  'extruder' : 245, 'bed' : 110}]
variable_park_x = 0.0
variable_park_y = 0.0
variable_park_z = 20.0
variable_print_min = ()
variable_print_max = ()
variable_pressure_advance_scale = -1.0
variable_probe_mesh_padding = 5.0
variable_probe_min_count = 3
variable_probe_count_scale = 1.0
variable_start_bed_heat_delay = 2000
variable_start_bed_heat_overshoot = 2.0
variable_start_clear_adjustments_at_end = True
variable_start_end_park_y = 0.0
variable_start_extruder_preheat_scale = 0.5
variable_start_extruder_probing_temp = 0
variable_start_home_z_at_temp = True
variable_start_level_bed_at_temp = True
variable_start_purge_clearance = 2.0
variable_start_purge_length = 0.0
variable_start_purge_prime_length = 12.0
variable_start_quad_gantry_level_at_temp = True
variable_start_random_placement_max = 0
variable_start_random_placement_padding = 10.0
variable_start_try_saved_surface_mesh = False
variable_start_z_tilt_adjust_at_temp = True
variable_travel_speed_xy = 3000
variable_travel_speed_z = 600
description = Initializes our globals, including any _km_options overrides.
gcode = 
	
	
	
	
	
	
	
	
	{% set required_sections = {"heater_bed" : None,
	"extruder" : None,
	"gcode_macro _km_options" : None,
	"idle_timeout" : ("gcode", "_KM_IDLE_TIMEOUT"),
	"pause_resume" : None,
	"respond" : None,
	"save_variables" : None,
	"virtual_sdcard" :
	("on_error_gcode", "CANCEL_PRINT")
	} %}
	{% set warn_removed = {
	"start_extruder_set_target_before_level" :
	"The start_extruder_set_target_before_level option has been removed. "
	"Use the start_extruder_probing_temp option instead to set a fixed "
	"probing temperature.",
	"start_gcode_before_print" :
	"The start_gcode_before_print option has been removed. The same effect "
	"can now be achieved by inserting custom gcode before the "
	"_PRINT_START_PHASE_PURGE line in your slicer's start gcode, or by "
	"wrapping the _PRINT_START_PHASE_PURGE macro. See the Slicer "
	"Configuration section in the readme for more information.",
	"velocity_decel_scale" :
	"The velocity_decel_scale option has been removed. Klipper's input "
	"shaping provides a superior mechanism for improving print quality "
	"at higher speeds.",
	} %}
	{% set output = [] %}
	{% for s in required_sections %}
	{% set f = required_sections[s][0] if required_sections[s] else None %}
	{% set v = required_sections[s][1] if required_sections[s] else None %}
	{% if s not in printer.configfile.config %}
	{% set dummy = output.append("Missing [%s] section.\n" | format(s)) %}
	{% elif f and
	(v not in printer.configfile.config[s][f]|default("")|upper) %}
	{% set dummy = output.append("Missing %s in %s for [%s] section.\n"
	| format(v, f, s)) %}
	{% endif %}
	{% endfor %}
	{% if output %}
	{ action_emergency_stop((
	"required printer.cfg section(s) missing:\n"
	~ output | join("\n")) ~
	"See readme: https://github.com/jschuh/klipper-macros\x23klipper-setup")
	}
	{% endif %}
	
	
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_level_bed_at_temp VALUE="{
	1 if printer.bed_mesh is defined else 0}"
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_quad_gantry_level_at_temp VALUE="{
	1 if printer.quad_gantry_level is defined else 0}"
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_z_tilt_adjust_at_temp VALUE="{
	1 if printer.z_tilt is defined else 0}"
	{% set toolhead = printer.toolhead %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=print_min VALUE="{
	(toolhead.axis_minimum.x, toolhead.axis_minimum.y)}"
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=print_max VALUE="{
	(toolhead.axis_maximum.x, toolhead.axis_maximum.y)}"
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_end_park_y VALUE="{
	toolhead.axis_maximum.y}"
	{% set settings = printer.configfile.settings %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_home_z_at_temp VALUE="{
	1 if ("stepper_z" in settings and
	settings.stepper_z.endstop_pin.split()|join("")|lower ==
	"probe:z_virtual_endstop") else 0}"
	
	{% set options = printer["gcode_macro _km_options"] %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	
	{% if options.park_x|default("")|string|lower == "min" %}
	{% set dummy = options.__setitem__("park_x",
	printer.configfile.settings.stepper_x.position_min) %}
	{% elif options.park_x|default("")|string|lower == "max" %}
	{% set dummy = options.__setitem__("park_x",
	printer.configfile.settings.stepper_x.position_max) %}
	{% endif %}
	{% if options.park_y|default("")|string|lower == "min" %}
	{% set dummy = options.__setitem__("park_y",
	printer.configfile.settings.stepper_y.position_min) %}
	{% elif options.park_y|default("")|string|lower == "max" %}
	{% set dummy = options.__setitem__("park_y",
	printer.configfile.settings.stepper_y.position_max) %}
	{% endif %}
	{% if options.start_end_park_y|default("")|string|lower == "min" %}
	{% set dummy = options.__setitem__("start_end_park_y",
	printer.configfile.settings.stepper_y.position_min) %}
	{% elif options.start_end_park_y|default("")|string|lower == "max" %}
	{% set dummy = options.__setitem__("start_end_park_y",
	printer.configfile.settings.stepper_y.position_max) %}
	{% endif %}
	{% if options.park_z|default("")|string|lower == "min" %}
	{% set dummy = options.__setitem__("park_z",
	printer.configfile.settings.stepper_z.position_min) %}
	{% elif options.park_z|default("")|string|lower == "max" %}
	{% set dummy = options.__setitem__("park_z",
	printer.configfile.settings.stepper_z.position_max) %}
	{% endif %}
	
	
	{% for k in options %}
	{% if k not in km %}
	{% if k in warn_removed %}
	{action_respond_info(warn_removed[k])}
	{% else %}
	{% set dummy = output.append("%s is not valid for _KM_OPTIONS." |
	format(k)) %}
	{% endif %}
	{% elif km[k] is string %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k
	} VALUE="'{options[k]|replace('\\','\\\\')|replace('\'','\\\'')
	|replace('\"','\\\"')}'"
	{% elif km[k] is float %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k
	} VALUE="{options[k]|float}"
	{% elif km[k] is integer or km[k] is boolean %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k} VALUE="{options[k]|int}"
	{% elif km[k] is mapping %}
	{% if options[k] is not mapping %}
	{% set dummy = output.append("%s requires a mapping type." |
	format(k)) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k
	} VALUE="{options[k]|replace('\"','\\\"')}"
	{% elif km[k] is sequence %}
	{% if options[k] is not sequence %}
	{% set dummy = output.append("%s requires a sequence type." |
	format(k)) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k
	} VALUE="{options[k]|replace('\"','\\\"')}"
	{% else %}
	{% set dummy = output.append("%s is not a valid type for _KM_OPTIONS." |
	format(k)) %}
	{% endif %}
	{% endfor %}
	
	{% if "homing_override" in printer.configfile.config %}
	{% for l in printer.configfile.config.homing_override.gcode.split("\n") %}
	{% if " g28 " in (" " ~ l.split("\x23")[0].split(";")[0]|lower ~ " ") %}
	{% set dummy = output.append(
	"G28 in [homing_override] gcode. Replace with G28.6245197 to "
	"fix recursive macro call.\n"
	"See readme: https://github.com/jschuh/klipper-macros\x23g28") %}
	{% endif %}
	{% endfor %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=check_km_config VARIABLE=load_errors VALUE="{
	output|replace('\"','\\\"')}"
	M400

[delayed_gcode INIT_GLOBALS]
initial_duration = 1
gcode = 
	LIST_MACROS SILENT=1
	_KM_GLOBALS
	
	CHECK_KM_CONFIG
	_INIT_SURFACES
	BED_MESH_CHECK
	
	SET_DRAW_PARAMS WIDTH="{printer.configfile.settings.extruder.nozzle_diameter}"
	
	_KM_OPTIONS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready

[gcode_macro check_km_config]
variable_load_errors = []
description = Checks global variables and throws an error on any invalid values.
	Does nothing if the config has no errors.
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set toolhead = printer.toolhead %}
	{% set output = load_errors %}
	{% if km.park_x > toolhead.axis_maximum.x or
	km.park_x < toolhead.axis_minimum.x %}
	{% set dummy = output.append("park_x is invalid.") %}
	{% endif %}
	{% if km.park_y > toolhead.axis_maximum.y or
	km.park_y < toolhead.axis_minimum.y %}
	{% set dummy = output.append("park_y is invalid.") %}
	{% endif %}
	{% if km.park_z > toolhead.axis_maximum.z or
	km.park_z < toolhead.axis_minimum.z %}
	{% set dummy = output.append("park_z is invalid.") %}
	{% endif %}
	{% if km.print_max[0] > toolhead.axis_maximum.x or
	km.print_max[1] > toolhead.axis_maximum.y %}
	{% set dummy = output.append("print_max is invalid.") %}
	{% endif %}
	{% if km.print_min[0] < toolhead.axis_minimum.x or
	km.print_min[1] < toolhead.axis_minimum.y %}
	{% set dummy = output.append("print_min is invalid.") %}
	{% endif %}
	{% if km.start_extruder_preheat_scale > 1.0 or
	km.start_extruder_preheat_scale < 0.0 %}
	{% set dummy = output.append("extruder_preheat_scale is invalid.") %}
	{% endif %}
	{% if km.load_length >
	printer.configfile.settings["extruder"].max_extrude_only_distance %}
	{% set dummy = output.append(
	"load_length exceeds max_extrude_only_distance.") %}
	{% endif %}
	{% if km.load_length < km.load_priming_length %}
	{% set dummy = output.append(
	"load_length is shorter than load_priming_length.") %}
	{% endif %}
	{% if km.load_length < 0.0 %}
	{% set dummy = output.append("load_length is negative.") %}
	{% endif %}
	{% if km.load_priming_length < 0.0 %}
	{% set dummy = output.append("load_priming_length is negative.") %}
	{% endif %}
	
	
	{% if output %}
	{ action_raise_error(output|sort|join('\nError: ')) }
	{% endif %}
	M400

[gcode_macro kmvars]
description = Lists global variables used by klipper-macros.
	Usage: KMVARS [SEARCH=<search_string>]
gcode = 
	{% set SEARCH = params.SEARCH|default(params.S|default(""))|lower %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set output = [] %}
	{% for k in km %}
	{% if SEARCH in k %}
	{% set dummy = output.append(k ~ ": " ~ km[k]) %}
	{% endif %}
	{% endfor %}
	{ action_respond_info(output|sort|join('\n')) }

[gcode_macro check_macro_docs]
description = Lists macros lacking proper documentation.
	Usage: CHECK_MACRO_DOCS [USAGE=<0|1>] [HIDDEN=<1|0>] [RENAMED=<1|0>]
gcode = 
	{% set USAGE = params.USAGE|default(0)|int %}
	{% set HIDDEN = params.HIDDEN|default(0)|int %}
	{% set RENAMED = params.RENAMED|default(0)|int %}
	{% set output = [] %}
	{%set config = printer.configfile.config %}
	{% for k in config|sort %}
	{% if k.startswith("gcode_macro") %}
	{% set name = k.split()[1] %}
	{% set desc = config[k].description|default("") %}
	{% set is_renamed = config[k].rename_existing|default("") %}
	{% if (not desc or (USAGE and not "Usage: "~name.upper() in desc)) and
	(HIDDEN or not name.startswith('_')) and (RENAMED or is_renamed) %}
	{% set dummy = output.append("%s&nbsp;%s: missing %s."
	| format("*" if is_renamed else "&nbsp;", name,
	"description" if not desc else "usage")) %}
	{% endif %}
	{% endif %}
	{% endfor %}
	{action_respond_info(output|join("\n"))}

[gcode_macro listvars]
description = Lists per-macro variables with a name containing SEARCH. This is
	useful for debugging macros by allowing you to probe printer state. Be very
	careful, however, as an overly broad SEARCH parameter can take a long time
	to process and potentially hang or crash klipper.
	Usage: LISTVARS SEARCH=<search_string>
gcode = 
	
	{% if 'SEARCH' not in params and 'S' not in params %}
	{ action_raise_error("Must provide a SEARCH parameter.") }
	{% endif %}
	{% set SEARCH = params.SEARCH|default(params.S)|lower %}
	{% set ns = namespace() %}
	{% set output = [] %}
	{% for item in printer %}
	{% if item is not string %}
	{% set ns.path = ['printer', "[%s]" % (item|string), ''] %}
	{% elif ' ' in item %}
	{% set ns.path = ['printer', "['%s']" % (item), ''] %}
	{% else %}
	{% set ns.path = ['printer.', item, ''] %}
	{% endif %}
	
	{% if SEARCH in ns.path|lower %}
	{% set dummy = output.append(ns.path|join) %}
	{% endif %}
	
	{% if printer[item].items() %}
	{% for childkey, child in printer[item].items() recursive %}
	{% set ns.path = ns.path[:loop.depth|int + 1] %}
	{% if childkey is not string %}
	{% set null = ns.path.append("[%s]" % (childkey|string)) %}
	{% elif ' ' in childkey %}
	{% set null = ns.path.append("['%s']" % (childkey)) %}
	{% else %}
	{% set null = ns.path.append(".%s" % (childkey)) %}
	{% endif %}
	
	{% if child is mapping  %}
	{loop(child.items())}
	{% else %}
	{% if SEARCH in ns.path|lower %}
	{% set dummy = output.append("%s : %s" % (ns.path|join, child)) %}
	{% endif %}
	{% endif %}
	{% endfor %}
	{% endif %}
	{% endfor %}
	{ action_respond_info(output|join("\n")) }

[gcode_macro list_macros]
description = Lists registered macros (and optionally show variable state).
	Usage: LISTVARS SEARCH=<search_string> VARS=<0|1> SILENT=<0|1>
variable_macros = {}
gcode = 
	
	{% if not macros %}
	{% set renames = {} %}
	{% for k in printer.configfile.config %}
	{% if k.lower().startswith("gcode_macro") and
	printer.configfile.config[k].rename_existing %}
	{% set name = k.split(None, 1)[1] | lower %}
	{% set dummy = renames.__setitem__(name,
	[printer.configfile.config[k].rename_existing|lower] +
	renames[name]|default([])) %}
	{% endif %}
	{% endfor %}
	{% for k in printer %}
	{% if k.lower().startswith("gcode_macro") %}
	{% set name = k.split(None, 1)[1] | lower %}
	{% set dummy = macros.__setitem__(name, renames[name]|default([])) %}
	{% endif %}
	{% endfor %}
	{% endif %}
	
	{% if params.SILENT|default(0)|int == 0 %}
	_LIST_MACROS_DISPLAY {rawparams}
	{% endif %}

[gcode_macro _list_macros_display]
gcode = 
	{% set SEARCH = params.SEARCH | default(params.S) | default("") | lower %}
	{% set VARS = params.VARS | default(params.V) | default(0) | int != 0 %}
	
	{% set macros = printer["gcode_macro list_macros"].macros %}
	{% set output = [] %}
	{% for k in macros %}
	{% if SEARCH in k | lower %}
	{% set line = k ~ ((" (renames: %s)" % (macros[k]|join(","))) if macros[k]
	else "") %}
	{% set outvars = [] %}
	{% if VARS %}
	{% for v in printer["gcode_macro " ~ k] | sort %}
	{% set dummy = outvars.append("\n* %s: %s" %
	(v, printer["gcode_macro " ~ k][v]|string)) %}
	{% endfor %}
	{% endif %}
	{% set dummy = output.append(line + outvars | join("")) %}
	{% endif %}
	{% endfor %}
	{ action_respond_info(output | sort | join("\n")) }

[gcode_macro set_heater_temperature_scaled]
gcode = 
	{% set HEATER = params.HEATER.lower() %}
	{% set TARGET = params.TARGET|default(0.0)|float %}
	{% set scaled_heaters =
	printer["gcode_macro set_heater_scaling"].scaled_heaters %}
	{% if HEATER in scaled_heaters %}
	{% set scales = scaled_heaters[HEATER] %}
	{% set dummy = scales.__setitem__("real_target", TARGET) %}
	{%if TARGET > 0.0 %}
	{% set TARGET = (((TARGET + scales.bump) * scales.scale, scales.minimum)
	| max, scales.maximum)|min %}
	{% endif %}
	{% endif %}
	SET_HEATER_TEMPERATURE HEATER="{HEATER}" TARGET={TARGET}

[gcode_macro temperature_wait_scaled]
gcode = 
	{% set SENSOR = params.SENSOR.lower() %}
	{% set heater = SENSOR if not SENSOR.startswith("heater_generic") else
	SENSOR.split()[1] %}
	{% set scaled_heaters =
	printer["gcode_macro set_heater_scaling"].scaled_heaters %}
	{% if heater in scaled_heaters %}
	{% set scales = scaled_heaters[heater] %}
	{% if "MINIMUM" in params and MINIMUM > 0.0 %}
	{% set MINIMUM = (((MINIMUM + scales.bump) * scales.scale, scales.minimum)
	| max, scales.maximum)|min %}
	{% endif %}
	{% if "MAXIMUM" in params and MAXIMUM > 0.0 %}
	{% set MAXIMUM = (((MAXIMUM + scales.bump) * scales.scale, scales.minimum)
	| max, scales.maximum)|min %}
	{% endif %}
	{% else %}
	{% set settings = printer.configfile.settings[SENSOR] %}
	{% set MINIMUM = params.MINIMUM|default(settings.min_temp) %}
	{% set MAXIMUM = params.MAXIMUM|default(settings.max_temp) %}
	{% endif %}
	{% if printer[sensor].temperature < MINIMUM or
	printer[sensor].temperature > MAXIMUM %}
	TEMPERATURE_WAIT SENSOR="{SENSOR}" MINIMUM={MINIMUM} MAXIMUM={MAXIMUM}
	{% endif %}

[gcode_macro _gcode_wait_wrapper_inner]
gcode = 
	
	
	{% set sensor = params.HEATER if params.HEATER in
	printer.heaters.available_heaters
	else ("heater_generic " ~ params.HEATER) %}
	{% set target = printer[sensor].target %}
	{% if 'R' in params and target > 0.0 %}
	{% set T = params.T|default("") %}
	M{params.M}.6245197 S{target} { (" T"~T) if T else "" }
	{% elif printer[sensor].temperature < target %}
	TEMPERATURE_WAIT SENSOR="{sensor}" MINIMUM={target}
	{% endif %}

[gcode_macro _gcode_wait_wrapper]
gcode = 
	{% set target = params.S | default(params.R | default(0))| float %}
	SET_HEATER_TEMPERATURE_SCALED HEATER="{params.HEATER}" TARGET={target}
	_GCODE_WAIT_WRAPPER_INNER{%
	for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}

[gcode_macro m109]
rename_existing = M109.6245197
gcode = 
	{% set extruder = "extruder" ~ params.T|replace('0', '')
	if "T" in params else printer.toolhead.extruder %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating
	_GCODE_WAIT_WRAPPER HEATER={extruder}{%
	for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro m190]
rename_existing = M190.6245197
gcode = 
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=bed_heating
	_GCODE_WAIT_WRAPPER HEATER=heater_bed {%
	for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro m191]
description = Sets chamber temperature (with wait for heating).
	Usage: M191 [S<temp>]
gcode = 
	
	{% if "R" in params %}
	{% set dummy = params.__setitem__("S", params.R) %}
	{% endif %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=chamber_heating
	_GCODE_WAIT_WRAPPER HEATER=chamber {%
	for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro m104]
rename_existing = M104.6245197
gcode = 
	{% set extruder = "extruder" ~ params.T|replace('0', '')
	if "T" in params else printer.toolhead.extruder %}
	SET_HEATER_TEMPERATURE_SCALED HEATER={extruder} TARGET={params.S|default(0)}

[gcode_macro m140]
rename_existing = M140.6245197
gcode = 
	SET_HEATER_TEMPERATURE_SCALED HEATER=heater_bed TARGET={params.S|default(0)}

[gcode_macro m141]
description = Sets chamber temperature.
	Usage: M141 [S<temp>]
gcode = 
	SET_HEATER_TEMPERATURE_SCALED HEATER=chamber TARGET={params.S|default(0)}

[gcode_macro _check_heater_params]
gcode = 
	{% set HEATER = params.HEATER|lower %}
	{% set sensor = params.HEATER %}
	{% if HEATER not in printer.heaters.available_heaters %}
	{% set sensor = "heater_generic " ~ HEATER %}
	{% if sensor not in printer.heaters.available_heaters %}
	{ action_raise_error("The value '%s' is not valid for HEATER"
	| format(HEATER)) }
	{% endif %}
	{% endif %}
	{% set settings = printer.configfile.settings[sensor] %}
	{% set scaled_heaters =
	printer["gcode_macro set_heater_scaling"].scaled_heaters %}
	{% if HEATER is in scaled_heaters %}
	{% set scales = scaled_heaters[HEATER] %}
	{% else %}
	{% set scales = { "scale": 1.0, "bump": 0.0, "minimum": settings.min_temp,
	"maximum": settings.max_temp,
	"real_target": printer[sensor].target} %}
	{% endif %}
	{% set SCALE = params.SCALE|default(scales.scale)|float %}
	{% set BUMP = params.BUMP|default(scales.bump)|float %}
	{% set MINIMUM = params.MINIMUM|default(scales.minimum)|float %}
	{% set MAXIMUM = params.MAXIMUM|default(scales.maximum)|float %}
	
	{% if SCALE <= 0 %}
	{ action_raise_error("SCALE must be a positive value.") }
	{% elif MINIMUM < settings.min_temp or MINIMUM > settings.max_temp %}
	{ action_raise_error("MINIMUM must be between %.1f and %.1f" |
	format(settings.min_temp, settings.max_temp)) }
	{% elif MAXIMUM < settings.min_temp or MAXIMUM > settings.max_temp %}
	{ action_raise_error("MAXIMUM must be between %.1f and %.1f" |
	format(settings.min_temp, settings.max_temp)) }
	{% elif MINIMUM >= MAXIMUM %}
	{ action_raise_error("MINIMUM must be less than MAXIMUM.") }
	{% elif "TARGET" in params and (params.TARGET|float < MINIMUM or
	params.TARGET|float > MAXIMUM) %}
	{ action_raise_error("TARGET must be between %.1f and %.1f" |
	format(settings.min_temp, settings.max_temp)) }
	{% endif %}

[gcode_macro set_heater_scaling]
description = Sets scaling parameters for heater. If a new target temperature is
	passed it will be adjusted to the scaling parameters.
	Usage: SET_HEATER_SCALING [HEATER=<heater>] [SCALE=<scale_factor>]
	[BUMP=<degrees>] [MAXIMUM=<degrees>]
	[MINIMUM=<degrees>] [TARGET=<temp>]
variable_scaled_heaters = {}
gcode = 
	
	{% if "HEATER" is not in params %}
	{% set output = [] %}
	{% for h in scaled_heaters %}
	{% set dummy = output.append(
	"%s: Scale: %.2f Bump: %.1f Minimum:%.1f Maximum: %.1f"
	| format(h, scaled_heaters[h].scale, scaled_heaters[h].bump,
	scaled_heaters[h].minimum, scaled_heaters[h].maximum)) %}
	{% endfor %}
	{% if output %}}{action_respond_info(output|join('\n'))}{% endif %}
	{% else %}
	
	{% set HEATER = params.HEATER.lower() %}
	{% set settings = printer.configfile.settings[HEATER] %}
	{% if HEATER is not in scaled_heaters %}
	{% set dummy = scaled_heaters.__setitem__(HEATER, {"scale": 1.0,
	"bump": 0.0, "minimum": settings.min_temp,
	"maximum": settings.max_temp,
	"real_target": printer[HEATER].target}) %}
	{% endif %}
	_CHECK_HEATER_PARAMS{% for k in params %}{' '~k~'='~params[k]}{% endfor %}
	{% set scales = scaled_heaters[HEATER] %}
	{% set SCALE = params.SCALE|default(scales.scale)|float %}
	{% set BUMP = params.BUMP|default(scales.bump)|float %}
	{% set MAXIMUM = params.MAXIMUM|default(scales.maximum)|float %}
	{% set MINIMUM = params.MINIMUM|default(scales.minimum)|float %}
	{% set TARGET = params.TARGET|default(scales.real_target)|float %}
	{% set dummy = scales.__setitem__("scale", SCALE) %}
	{% set dummy = scales.__setitem__("bump", BUMP) %}
	{% set dummy = scales.__setitem__("maximum", MAXIMUM) %}
	{% set dummy = scales.__setitem__("minimum", MINIMUM) %}
	{% set dummy = scales.__setitem__("real_target", TARGET) %}
	
	{% set settings = printer.configfile.settings[HEATER] %}
	{% if SCALE != 1.0 or BUMP != 0.0 or MINIMUM != settings.min_temp or
	MAXIMUM != settings.max_temp %}
	{% set dummy = scaled_heaters.__setitem__(HEATER, scales) %}
	{% else %}
	{% set dummy = scaled_heaters.__delitem__(HEATER) %}
	{% endif %}
	SET_HEATER_TEMPERATURE_SCALED HEATER={HEATER} TARGET={TARGET}
	{action_respond_info(
	"%s: Scale: %.2f Bump: %.1f Minimum:%.1f Maximum: %.1f Target: %.1f"
	| format(HEATER, SCALE, BUMP, MINIMUM, MAXIMUM, TARGET))}
	{% endif %}
	
	{% set dummy = None if True else "
	{% set dummy = params.HEATER|default(e.g. extruder) %}
	{% set dummy = params.SCALE|default(1.0)|float %}
	{% set dummy = params.BUMP|default(0.0)|float %}
	{% set dummy = params.MAXIMUM|default(max_temp)|float %}
	{% set dummy = params.MINIMUM|default(min_temp)|float %}
	{% set dummy = params.TARGET|default(current target)|float %}
	" %}

[gcode_macro reset_heater_scaling]
description = Clears scaling for heater (or all heaters if none specified).
	Usage: RESET_HEATER_SCALING [HEATER=<heater>]
gcode = 
	{% if "HEATER" in params %}
	{% set HEATER = params.HEATER.lower() %}
	{% if HEATER not in printer.heaters.available_heaters %}
	{ action_raise_error("The value '%s' is not valid for HEATER"
	| format(HEATER)) }
	{% endif %}
	{% set settings = printer.configfile.settings[HEATER] %}
	SET_HEATER_SCALING HEATER={HEATER
	} SCALE=1.0 BUMP=0.0 MINIMUM={settings.min_temp
	} MAXIMUM={settings.max_temp}
	{% else %}
	
	SET_GCODE_VARIABLE MACRO=set_heater_scaling VARIABLE=scaled_heaters VALUE={
	"{}"}
	{% endif %}

[gcode_macro _km_idle_timeout]
gcode = 
	{% if printer.pause_resume.is_paused %}
	{action_respond_info("Extruder powered down on idle timeout.")}
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{
	printer[printer.toolhead.extruder].target}"
	M104; Turn off extruder but leave the bed on.
	{% else %}
	TURN_OFF_HEATERS
	M107; turn off fan
	M84
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready
	{% endif %}

[gcode_macro _check_kinematic_limits]
gcode = 
	{% set toolhead = printer.toolhead %}
	{% if params.X and (params.X|float < toolhead.axis_minimum.x or
	params.X|float > toolhead.axis_maximum.x) %}
	{action_raise_error("X[%.3f] must be between %.3f and %.3f."
	| format(params.X|float, toolhead.axis_minimum.x,
	toolhead.axis_maximum.x))}
	{% elif params.Y and (params.Y|float < toolhead.axis_minimum.y or
	params.Y|float > toolhead.axis_maximum.y) %}
	{action_raise_error("Y[%.3f] must be between %.3f and %.3f."
	| format(params.Y|float, toolhead.axis_minimum.y,
	toolhead.axis_maximum.y))}
	{% elif params.Z and (params.Z|float < toolhead.axis_minimum.z or
	params.Z|float > toolhead.axis_maximum.z) %}
	{action_raise_error("Z[%.3f] must be between %.3f and %.3f."
	| format(params.Z|float, toolhead.axis_minimum.z,
	toolhead.axis_maximum.z))}
	{% elif params.E and (params.E|float|abs > printer.configfile.settings[
	"extruder"].max_extrude_only_distance) %}
	{action_raise_error("E[%.4f] exceeds max_extrude_only_distance[%.4f]."
	| format(params.E|float|abs, printer.configfile.settings[
	"extruder"].max_extrude_only_distance))}
	{% endif %}

[gcode_macro lazy_home]
description = Homes the specified axes. If lazy is true, already homed axes
	are skipped.
	Usage: LAZY_HOME [LAZY=<1|0>] [AXES=<axes_string>]
gcode = 
	
	LIST_MACROS SILENT=1
	_LAZY_HOME_INNER {rawparams}

[gcode_macro _lazy_home_inner]
gcode = 
	
	{% set G28 = (printer["gcode_macro list_macros"].macros.g28|
	default(["g28"],True))[-1] %}
	{% set axes = 'XYZ'|select('in', params.AXES|default("XYZ")|upper|list) %}
	{% if not axes %}
	{% set axes = 'XYZ' %}
	{% endif %}
	{% if params.LAZY|default(1)|int %}
	{% set axes = axes|reject('in', printer.toolhead.homed_axes|upper)|join() %}
	{% endif %}
	
	{% if axes %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing
	{G28}{% for k in axes %}{' ' ~ k}{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status
	{% endif %}

[gcode_macro g28]
description = Wraps the G28 command to add the Marlin "O" parameter so that
	already homed axes will not be homed again. See the Klipper documentation on
	G28 for the behavior of the other parameters.
	Usage: G28 [O] ...
rename_existing = G28.6245197
gcode = 
	{% set axes = 'XYZ'|select('in', params)|join() %}
	LAZY_HOME LAZY={('O' in params)|int}{%if axes%} AXES={axes}{%endif%}

[gcode_macro before_layer_change]
description = Add this to the "before layer change" input box in the slicer.
	Usage: BEFORE_LAYER_CHANGE HEIGHT=<current_height> LAYER=<current_layer>
gcode = 
	{% set height = params.HEIGHT|default(printer.toolhead.position.z)|float %}
	{% set layer = params.LAYER|default(-1)|int + 1 %}
	{% if height >= 0.0 and layer >= 0 %}
	SET_PRINT_STATS_INFO CURRENT_LAYER="{layer}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{height}"
	{% if printer["gcode_macro _km_layer_run"].clearance_z < height %}
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{
	height}"
	{% endif %}
	{% endif %}

[gcode_macro after_layer_change]
description = Add this to the "after layer change" input box in the slicer.
	Usage: AFTER_LAYER_CHANGE
gcode = 
	_KM_LAYER_RUN

[gcode_macro gcode_at_layer]
description = Schedules the specified g-code command to be run at the specified
	layer. LAYER=next will cause the command to run at the next layer change.
	Usage: GCODE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } COMMAND=<gcode>
	[CANCEL=<0|1>]
gcode = 
	{% set tot_layers = printer.print_stats.info.total_layer %}
	{% if params|length > 0 %}
	_KM_CHECK_IS_PRINTING
	
	{% set CANCEL = params.CANCEL|default(0)|int != 0 %}
	{% set COMMAND = params.COMMAND|default(None) %}
	{% if COMMAND %}
	{% set COMMAND = COMMAND.lstrip().split(None, 1) %}
	{% set COMMAND = " ".join([COMMAND[0]|upper] + COMMAND[1:]) %}
	{% endif %}
	
	{% if "LAYER" in params %}
	{% set cmd_container = "commands_layer" %}
	{% set cur_layer = printer.print_stats.info.current_layer|int %}
	{% if "HEIGHT" in params %}
	{action_raise_error("Conflicting HEIGHT and LAYER arguments provided.")}
	{% elif params.LAYER|string|lower == "next" %}
	{% set LAYER = cur_layer + 1 %}
	{% else %}
	{% set LAYER = params.LAYER|int %}
	{% endif %}
	{% if LAYER <= cur_layer %}
	{action_raise_error("LAYER[%i] must be above current print layer[%i]."
	| format(LAYER, cur_layer))}
	{% elif tot_layers and LAYER > tot_layers %}
	{action_raise_error("LAYER[%i] must not be above top layer[%i]."
	| format(LAYER, tot_layers))}
	{% endif %}
	{% set key = LAYER %}
	
	{% elif "HEIGHT" in params %}
	{% set cmd_container = "commands_height" %}
	{% set HEIGHT = params.HEIGHT|float %}
	{% set cur_height = printer["gcode_macro _km_layer_run"].cur_height %}
	{% if HEIGHT <= cur_height %}
	{action_raise_error(
	"HEIGHT[%.3f] must be above current print height[%.3f].")
	| format(HEIGHT, cur_height)}
	{% elif HEIGHT >= printer.toolhead.axis_maximum.z %}
	{action_raise_error(
	"HEIGHT[%.3f] must be below maximum Z height[%.3f].")
	| format(HEIGHT, printer.toolhead.axis_maximum.z)}
	{% endif %}
	{% set key = HEIGHT %}
	
	{% else %}
	{action_raise_error("No HEIGHT or LAYER argument provided.")}
	{% endif %}
	
	{% set commands = printer["gcode_macro _km_layer_run"][cmd_container] %}
	{% if key not in commands and not CANCEL %}
	{% set dummy = commands.__setitem__(key, []) %}
	{% endif %}
	
	{% if CANCEL %}
	{% if key in commands %}
	{% set pos = ("%i"|format(key)) if key is integer else
	("%.3fmm"|format(key)) %}
	{% if COMMAND %}
	{% set dummy = commands[key].remove(COMMAND) %}
	{% if commands[key]|length == 0 %}
	{% set dummy = commands.__delitem__(key) %}
	{% endif %}
	{action_respond_info("Cancelled %s %s:\n* %s" |
	format("layer" if k is integer else "height",
	pos, COMMAND))}
	{% else %}
	{% set dummy = commands.__delitem__(key) %}
	{action_respond_info("Cancelled all commands at %s %s." |
	format("layer" if k is integer else "height",
	pos))}
	{% endif %}
	{% endif %}
	{% elif not COMMAND %}
	{action_raise_error("No COMMAND argument provided.")}
	{% elif COMMAND in commands[key] %}
	{action_raise_error("Duplicate command previously scheduled.")}
	{% else %}
	{% set dummy = commands[key].append(COMMAND) %}
	{% set pos = ("%i"|format(key)) if key is integer else
	("%.3fmm"|format(key)) %}
	{action_respond_info("%s %s:\n* %s" |
	format("layer" if key is integer else "height",
	pos, COMMAND))}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE={cmd_container} VALUE="{
	commands|replace('\"','\\\"')}"
	_UPDATE_LAYER_COMPAT
	
	
	{% else %}
	{% set output = [] %}
	{% set commands = printer["gcode_macro _km_layer_run"].commands_layer %}
	{% for key in commands|list|sort %}
	{% set dummy = output.append("layer %i:" | format(key)) %}
	{% for c in commands[key] %}
	{% set dummy = output.append("* %s" | format(c)) %}
	{% endfor %}
	{% endfor %}
	{% set commands = printer["gcode_macro _km_layer_run"].commands_height %}
	{% for key in commands|list|sort %}
	{% set dummy = output.append("height %.3fmm:" | format(key)) %}
	{% for c in commands[key] %}
	{% set dummy = output.append("* %s" | format(c)) %}
	{% endfor %}
	{% endfor %}
	{action_respond_info(output|join('\n'))}
	{% endif %}

[gcode_macro _km_layer_run]
description = Runs pending commands for the current layer change.
	Usage: _KM_LAYER_RUN
variable_cur_height = 0.0
variable_clearance_z = 0.0
variable_commands_layer = {}
variable_commands_height = {}
gcode = 
	{% set cur_layer = printer.print_stats.info.current_layer %}
	{% for key in commands_layer | select("<=", cur_layer) | sort %}
	{action_respond_info("Executing scheduled commands at layer %d:\n%s" |
	format(key, commands_layer[key]|join('\n')))}
	{% for c in commands_layer[key] %}
	{c}
	{% endfor %}
	{% set dummy = commands_layer.__delitem__(key) %}
	{% endfor %}
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{
	commands_layer|replace('\"','\\\"')}"
	{% for key in commands_height | select("<=", cur_height) | sort %}
	{action_respond_info("Executing scheduled commands at height %.3f:\n%s" |
	format(key, commands_height[key]|join('\n')))}
	{% for c in commands_height[key] %}
	{c}
	{% endfor %}
	{% set dummy = commands_height.__delitem__(key) %}
	{% endfor %}
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{
	commands_height|replace('\"','\\\"')}"
	_UPDATE_LAYER_COMPAT

[gcode_macro init_layer_gcode]
description = Clears scheduled gcode commands and state for all layers.
	Usage: INIT_LAYER_GCODE LAYERS=<num>
gcode = 
	SET_PRINT_STATS_INFO TOTAL_LAYER="{params.LAYERS|int + 1}" CURRENT_LAYER="{0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"
	_UPDATE_LAYER_COMPAT

[gcode_macro _reset_layer_gcode]
description = Clears scheduled gcode commands and state for all layers.
	Usage: _RESET_LAYER_GCODE
gcode = 
	SET_PRINT_STATS_INFO TOTAL_LAYER="{0}" CURRENT_LAYER="{0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"
	_UPDATE_LAYER_COMPAT

[gcode_macro cancel_all_layer_gcode]
description = Clears all scheduled gcode commands.
	Usage: CANCEL_ALL_LAYER_GCODE
gcode = 
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"
	_UPDATE_LAYER_COMPAT

[gcode_macro _update_layer_compat]
gcode = 
	{% set next_layer = printer.print_stats.info.current_layer|int + 1 %}
	{% set commands_layer = printer["gcode_macro _km_layer_run"].commands_layer %}
	{% set keys = commands_layer | sort(reverse=True) %}
	
	{% set pause_next_layer = {'enable': False, 'call':
	printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer.call} %}
	{% if pause_next_layer.call in commands_layer[next_layer] | default([]) %}
	{% set dummy = pause_next_layer.__setitem__('enable', True) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{
	pause_next_layer|replace('\"','\\\"') }"
	
	
	{% set pause_at_layer = {'enable': False, 'layer': 0, 'call':
	printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer.call} %}
	{% if pause_next_layer.enable and
	pause_next_layer.call == pause_at_layer.call %}
	{% set keys = keys | reject("==", next_layer) %}
	{% endif %}
	
	
	
	
	{% for key in keys %}
	{% if pause_at_layer.call in commands_layer[key] %}
	{% set dummy = pause_at_layer.__setitem__('enable', True) %}
	{% set dummy = pause_at_layer.__setitem__('layer', key) %}
	{% endif %}
	{% endfor %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{
	pause_at_layer|replace('\"','\\\"') }"

[gcode_macro pause_next_layer]
description = Convenience macro to schedule the current print to pause at the
	next layer change. See PAUSE for additional arguments.
	Usage: PAUSE_NEXT_LAYER ...
gcode = 
	_CHECK_KINEMATIC_LIMITS{% for k in params%}{' ' ~k~ '=' ~ params[k]
	}{% endfor %}
	GCODE_AT_LAYER LAYER=NEXT COMMAND="PAUSE{% for k in params %}{
	' ' ~ k ~ '=' ~ params[k]}{% endfor %}"

[gcode_macro pause_at_layer]
description = Convenience macro to schedule the current print to pause at the
	specified layer change. LAYER=next will cause the command to run at the next
	layer change. See PAUSE for additional arguments.
	Usage: PAUSE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...
gcode = 
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	" %}
	{% set filtered_params = params|reject('in',['HEIGHT','LAYER'])|list|sort %}
	_CHECK_KINEMATIC_LIMITS{% for k in filtered_params%}{' ' ~k~ '=' ~ params[k]
	}{% endfor %}
	GCODE_AT_LAYER {% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor
	%} COMMAND="PAUSE{% for k in filtered_params %}{
	' ' ~ k ~ '=' ~ params[k]}{% endfor %}"

[gcode_macro speed_at_layer]
description = Convenience macro to schedule a feedrate adjustment at the
	specified layer change. LAYER=next will cause the command to run at the next
	layer change. (SPEED parameter behaves the same as the M220 S parameter.)
	Usage: SPEED_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } SPEED=<percentage>
gcode = 
	{% set SPEED = params.SPEED|default(0)|int %}
	{% if SPEED < 1 or SPEED > 500 %}
	{action_raise_error("SPEED[%i] parameter between 1 and 500 is required."
	% SPEED)}
	{% endif %}
	GCODE_AT_LAYER {% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor %} COMMAND="M220 S{SPEED|int}"
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	{% set dummy = params.SPEED|default(percentage)|int %}
	" %}

[gcode_macro flow_at_layer]
description = Convenience macro to schedule a flow percentage adjustment at the
	specified layer change. LAYER=next will cause the command to run at the next
	layer change. (FLOW parameter behaves the same as the M221 S parameter.)
	Usage: FLOW_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } FLOW=<percentage>
gcode = 
	{% set FLOW = params.FLOW|default(0)|int %}
	{% if FLOW < 1 or FLOW > 500 %}
	{action_raise_error("FLOW[%i] parameter between 1 and 500 is required."
	% FLOW)}
	{% endif %}
	GCODE_AT_LAYER {% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor %} COMMAND="M221 S{FLOW|int}"
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	{% set dummy = params.FLOW|default(percentage)|int %}
	" %}

[gcode_macro fan_at_layer]
description = Convenience macro to schedule a fan adjustment at the specified
	layer change. LAYER=next will cause the command to run at the next layer
	change. See SET_FAN_SCALING for additional arguments.
	Usage: FAN_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...
gcode = 
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	{% set dummy = params.SCALE|default(1.0)|float %}
	{% set dummy = params.BUMP|default(0)|int %}
	{% set dummy = params.MAXIMUM|default(0)|int %}
	{% set dummy = params.MINIMUM|default(255)|int %}
	{% set dummy = params.SPEED|default(current speed)|int %}
	" %}
	{% set filtered_params = params|reject('in',['HEIGHT','LAYER'])|list|sort %}
	{% if filtered_params|length == 0 %}
	{action_raise_error("No fan parameters provided.")}
	{% endif %}
	_CHECK_FAN_PARAMS{% for k in filtered_params %}{' '~k~'='~params[k]
	}{% endfor %}
	GCODE_AT_LAYER {% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor
	%} COMMAND="SET_FAN_SCALING{% for k in filtered_params %}{
	' ' ~ k ~ '=' ~ params[k]}{% endfor %}"

[gcode_macro heater_at_layer]
description = Convenience macro to schedule a heater adjustment at the specified
	layer change. LAYER=next will cause the command to run at the next layer
	change. See SET_HEATER_SCALING for additional arguments.
	Usage: HEATER_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...
gcode = 
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	{% set dummy = params.HEATER|default(e.g. extruder) %}
	{% set dummy = params.SCALE|default(1.0)|float %}
	{% set dummy = params.BUMP|default(0.0)|float %}
	{% set dummy = params.MAXIMUM|default(max_temp)|float %}
	{% set dummy = params.MINIMUM|default(min_temp)|float %}
	{% set dummy = params.TARGET|default(current target)|float %}
	" %}
	{% set filtered_params = params|reject('in',['HEIGHT','LAYER'])|list|sort %}
	_CHECK_HEATER_PARAMS{% for k in filtered_params%}{' ' ~ k ~ '=' ~ params[k]
	}{% endfor %}
	GCODE_AT_LAYER{% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor
	%} COMMAND="SET_HEATER_SCALING{% for k in filtered_params %}{
	' ' ~ k ~ '=\\\"' ~ params[k]|replace('\\','\\\\')|replace('\'','\\\'')
	|replace('\"','\\\"') ~ '\\\"'
	}{% endfor %}"

[gcode_macro park]
description = Park the toolhead
	Usage: PARK [P=<0|1|2>] [X=<pos>] [Y=<pos>] [Z=<pos>] [LAZY=<1|0>]
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set LAZY = params.LAZY|default(1)|int %}
	{% if printer.toolhead.homed_axes != "xyz" %}
	{% if LAZY %}
	LAZY_HOME
	{% else %}
	{action_raise_error("Must home axes first.")}
	{% endif %}
	{% endif %}
	
	
	{% set P = (params.P|default(2))|int %}
	{% set X = params.X|default(km.park_x)|float %}
	{% set Y = params.Y|default(km.park_y)|float %}
	{% set Z = params.Z|default(km.park_z)|float %}
	
	M400
	_CHECK_KINEMATIC_LIMITS X="{X}" Y="{Y}" Z="{Z}"
	_PARK_INNER X="{X}" Y="{Y}" Z="{Z}" P="{P}" LAZY="{LAZY}"
	
	{% set dummy = None if True else "
	{% set dummy = params.P|default(mode=<0|1|2>)|int %}
	{% set dummy = params.X|default(X position)|int %}
	{% set dummy = params.Y|default(Y position)|int %}
	{% set dummy = params.Z|default(Z position)|int %}
	" %}

[gcode_macro _park_inner]
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set travel_speed_xy = km.travel_speed_xy %}
	{% set travel_speed_z = km.travel_speed_z %}
	
	{% set position = printer.gcode_move.gcode_position %}
	{% set origin = printer.gcode_move.homing_origin%}
	
	
	
	{% set clearance_z = (printer["gcode_macro _km_layer_run"].clearance_z,
	position.z) | max %}
	{% set P = params.P|int %}
	{% set X = params.X|float - origin.x %}
	{% set Y = params.Y|float - origin.y %}
	{% set Z = params.Z|float %}
	{% set LAZY = params.LAZY|int %}
	
	
	{% if P == 0 %}
	{% if clearance_z > Z %}
	{% set Z = clearance_z %}
	{% endif %}
	{% elif P == 1 %}
	{% set Z = Z - origin.z %}
	{% elif P == 2 %}
	{% set Z = Z + clearance_z %}
	{% else %}
	{action_raise_error("Invalid parameter P=%i. Value must be 0, 1, or 2." |
	format(P)) }
	{% endif %}
	
	
	{% set Z = ((Z, printer.toolhead.axis_maximum.z - origin.z)|min,
	printer.toolhead.axis_minimum.z - origin.z)|max %}
	
	
	{% if (not LAZY) or P != 2 or X != position.x or Y != position.y
	or Z < clearance_z %}
	SAVE_GCODE_STATE NAME=_KM_PARK
	G90
	G0 Z{Z} F{travel_speed_z}
	G0 X{X} Y{Y} F{travel_speed_xy}
	RESTORE_GCODE_STATE NAME=_KM_PARK MOVE=0
	{% endif %}

[gcode_macro g27]
description = Parks the toolhead.
	Usage: G27 [P=<0|1|2>]
gcode = 
	
	PARK P={params.P|default(0)} {% for k in params|reject("in", "GP") %}{
	' '~k~'="'~params[k]~'"'
	}{% endfor %}

[gcode_macro pause]
description = Pauses the current print.
	Usage: PAUSE [X=<pos>] [Y=<pos>] [Z=<pos>] [E=<retract_length>] [B=<beeps>]
rename_existing = _KM_PAUSE_BASE
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% set E = (params.E|default(5))|float %}
	
	{% set B = params.B|default(10)|int if "output_pin beeper" in printer else 0
	%}
	
	{% if printer.pause_resume.is_paused %}
	{ action_respond_info("Print already paused") }
	{% elif printer.idle_timeout.state | string == "Printing" or
	(printer.virtual_sdcard|default({})).is_active|default(False) %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pausing RESET_STACK=1
	{% set position = printer.gcode_move.gcode_position %}
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_x VALUE="{position.x}"
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_y VALUE="{position.y}"
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_z VALUE="{position.z}"
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{E}"
	SAVE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE
	_KM_PAUSE_BASE
	M83
	{% if printer.extruder.can_extrude %}
	G1 E{'%.4f' % -E} F{km.load_speed}
	{% endif %}
	PARK P=2{% for k in params|select("in", "XYZ") %}{
	' '~k~'="'~params[k]~'"'}{% endfor %}
	
	{% for i in range(B) %}
	M300 P100
	G4 P200
	{% endfor %}
	{% else %}
	{ action_respond_info("Print not in progress") }
	{% endif %}

[gcode_macro m600]
description = Pauses the current print.
	Usage: M600 [B<beeps>] [E<pos>] [L<pos>] [R<temp>] [U<pos>] [X<pos>] [Y<pos>]
	[Z<pos>]
gcode = 
	PAUSE B="{0}" P=2{% for k in params|select("in", "EXYZ") %}{
	' '~k~'="'~params[k]~'"'}{% endfor %}
	UNLOAD_FILAMENT{% if 'U' in params %} LENGTH={params.U}{% endif
	%} BEEPS="{params.B|default(10)|int}"
	{% if 'R' in params %}M109 S{params.R}{% endif %}

[gcode_macro m601]
description = Pauses the current print.
	Usage: M601
gcode = 
	PAUSE

[gcode_macro m602]
description = Resumes the currently paused print.
	Usage: M602
gcode = 
	RESUME

[gcode_macro m24]
rename_existing = M24.6245197
gcode = 
	{% if printer.pause_resume.is_paused %}
	RESUME
	{% else %}
	M24.6245197
	{% endif %}

[gcode_macro m25]
rename_existing = M25.6245197
gcode = 
	PAUSE

[gcode_macro resume]
description = Resumes the currently paused print.
	Usage: RESUME [E<pos>]
rename_existing = _KM_RESUME_BASE
variable_saved_extruder_temp = 0
variable_saved_x = 0.0
variable_saved_y = 0.0
variable_saved_z = 0.0
variable_saved_e = 0.0
gcode = 
	{% if printer.pause_resume.is_paused %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% set extruder = printer[printer.toolhead.extruder] %}
	{% if extruder.target <= printer.configfile.settings[
	printer.toolhead.extruder].min_temp
	| float + 0.5 %}
	M109 S{saved_extruder_temp}
	{% endif %}
	
	
	
	{% if 'E' not in params and not saved_e %}
	{% set saved_e = 5.0 %}
	G1 E{'%.4f' % -saved_e } F{km.load_speed}
	{% endif %}
	
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"
	G90
	
	G0 X{saved_x} Y{saved_y} F{km.travel_speed_xy}
	G0 Z{saved_z} F{km.travel_speed_z}
	G91
	
	G1 E{'%.4f' % (params.E|default(saved_e))} F{km.load_speed}
	RESTORE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE MOVE=1
	_KM_RESUME_BASE
	{% else %}
	{ action_respond_info("Printer is not paused.") }
	{% endif %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=printing RESET_STACK=1

[gcode_macro clear_pause]
description = Clears the current pause state.
	Usage: CLEAR_PAUSE
rename_existing = _KM_CLEAR_PAUSE
gcode = 
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"
	_KM_CLEAR_PAUSE

[gcode_macro print_start]
description = Inserted by slicer at start of print. Rather than using this macro
	directly you should configure your slicer as instructed in the readme.
	Usage: PRINT_START BED=<temp> EXTRUDER=<temp> [CHAMBER=<temp>]
	[MESH_MIN=<x,y>] [MESH_MAX=<x,y>] [LAYERS=<num>]
	[NOZZLE_SIZE=<mm>]
gcode = 
	{action_respond_info(
	"This file is using an old The PRINT_START format. This print will run "
	"fine, but you should update your slicer config to take advantage of the "
	"phased PRINT_START macros. The slicer documentation is here:\n"
	"https://github.com/jschuh/klipper-macros\x23slicer-configuration"
	)}
	
	_PRINT_START_PHASE_INIT {rawparams}
	_PRINT_START_PHASE_PREHEAT
	_PRINT_START_PHASE_PROBING
	_PRINT_START_PHASE_EXTRUDER
	_PRINT_START_PHASE_PURGE

[gcode_macro _print_start_phase_init]
description = Inserted by slicer at start of print. Initializes PRINT_START
	phases.
	Usage: See PRINT_START.
gcode = 
	CHECK_KM_CONFIG
	SET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{False}"
	_KM_APPLY_PRINT_OFFSET RESET=1
	_PRINT_START_PHASE_CHECK PHASE=none
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% if not params.BED %}
	{% set dummy = params.__setitem__('BED', params.BED_TEMP|int) %}
	{% endif %}
	{% if not params.EXTRUDER %}
	{% set dummy = params.__setitem__('EXTRUDER', params.EXTRUDER_TEMP|int) %}
	{% endif %}
	
	
	PRINT_START_SET PRINT_START_PHASE="init" {% for k in params %}{' %s=\"%s\"' %
	(k,params[k]|replace('\\','\\\\')|replace('\'','\\\'')|replace('\"','\\\"'))
	}{% endfor %}
	
	
	_km_check_and_set_print_bounds
	
	M107
	CLEAR_PAUSE
	
	M140 S{params.BED}
	{% if params.CHAMBER %}M141 S{params.CHAMBER|int}{% endif %}
	{% if printer.bed_mesh %}BED_MESH_CLEAR{% endif %}
	
	{% if km.start_try_saved_surface_mesh and printer.bed_mesh %}
	LOAD_SURFACE_MESH
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="preheat"

[gcode_macro _print_start_phase_preheat]
description = Inserted by slicer at start of print. Handles the bed and chamber
	heating phases and ends when both are stabilized at their target temperatures.
	Usage: See PRINT_START.
gcode = 
	_PRINT_START_PHASE_CHECK PHASE=preheat
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set BED = print.BED|int %}
	{% set EXTRUDER = print.EXTRUDER|int %}
	{% set CHAMBER = print.CHAMBER|default(0)|int %}
	{% set LAYERS = print.LAYERS|default(0)|int %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% set bed_at_target = (BED + 0.4 - printer.heater_bed.temperature) |
	abs <= 0.6 %}
	PRINT_START_SET BED_AT_TARGET={1 if bed_at_target else 0}
	{% set start_level_bed_at_temp = km.start_level_bed_at_temp and
	not printer.bed_mesh.profile_name %}
	{% set actions_at_temp = start_level_bed_at_temp or
	km.start_quad_gantry_level_at_temp or
	km.start_z_tilt_adjust_at_temp or
	(km.start_home_z_at_temp and not bed_at_target) %}
	{% set bed_overshoot = (BED + (km.start_bed_heat_overshoot if
	(BED and not bed_at_target) else 0.0),
	printer.configfile.settings.heater_bed.max_temp ) | min %}
	
	INIT_LAYER_GCODE LAYERS="{LAYERS}"
	{% if CHAMBER > 0.0 %}
	M141 S{CHAMBER}
	{% endif %}
	
	M140 S{bed_overshoot}
	{% if actions_at_temp %}
	
	
	M104 S{km.start_extruder_probing_temp if km.start_extruder_probing_temp > 0
	else (km.start_extruder_preheat_scale * EXTRUDER)|round(0,'ceil')|int}
	{% else %}
	M104 S{EXTRUDER}
	{% endif %}
	
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing RESET_STACK=1
	G28
	G90
	{% if BED > 0.0 %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=bed_heating RESET_STACK=1
	
	{% if not bed_at_target %}
	PARK
	
	M190 S{bed_overshoot}
	G4 P{km.start_bed_heat_delay / 2}
	M190 R{BED}
	G4 P{km.start_bed_heat_delay / 2}
	{% endif %}
	{% endif %}
	
	{% if CHAMBER > 0.0 %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=chamber_heating RESET_STACK=1
	_KM_PARK_IF_NEEDED HEATER="chamber" RANGE=ABOVE
	M191 S{CHAMBER}
	{% endif %}
	
	{% if BED > 0.0 and bed_at_target%}
	M190 R{BED}
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="probing"

[gcode_macro _print_start_phase_probing]
description = Inserted by slicer at start of print. Performs probing (including
	mesh bed level) and other operations that should be run when the bed and
	chamber are stabilized at their target temps.
	Usage: See PRINT_START.
gcode = 
	_PRINT_START_PHASE_CHECK PHASE=probing
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set MESH_MIN = print.MESH_MIN|default(None) %}
	{% set MESH_MAX = print.MESH_MAX|default(None) %}
	
	{% if km.start_random_placement_max > 0 and print.PRINT_MIN and MESH_MIN %}
	{% set PRINT_MIN = print.PRINT_MIN.split(",")|map('float')|list %}
	{% set PRINT_MAX = print.PRINT_MAX.split(",")|map('float')|list %}
	{% set x_offset = (((km.print_max[0] - km.print_min[0] - PRINT_MAX[0] +
	PRINT_MIN[0] - 2 * km.start_random_placement_padding)|int,
	km.start_random_placement_max * 2)|min, 0)|max %}
	{% set y_offset = (((km.print_max[1] - km.print_min[1] - PRINT_MAX[1] +
	PRINT_MIN[1] - 2 * km.start_random_placement_padding)|int,
	km.start_random_placement_max * 2)|min, 0)|max %}
	{% if x_offset > 0 %}
	{% set x_offset = range(x_offset)|random + km.print_min[0] -
	PRINT_MIN[0] + km.start_random_placement_padding %}
	{% endif %}
	{% if y_offset > 0 %}
	{% set y_offset = range(y_offset)|random + km.print_min[1] -
	PRINT_MIN[1] + km.start_random_placement_padding %}
	{% endif %}
	
	
	{% set MESH_MIN = MESH_MIN.split(",")|map('float')|list %}
	{% set MESH_MAX = MESH_MAX.split(",")|map('float')|list %}
	{% set MESH_MIN_NEW = (MESH_MIN[0] + x_offset, MESH_MIN[1] + y_offset) %}
	{% set MESH_MAX_NEW = (MESH_MAX[0] + x_offset, MESH_MAX[1] + y_offset) %}
	{action_respond_info(
	"Relocating print origin from (%.3f,%.3f) "|format(*MESH_MIN) +
	"to (%.3f,%.3f)"|format(*MESH_MIN_NEW))}
	{% set MESH_MIN = (MESH_MIN_NEW[0], MESH_MIN_NEW[1])|join(',') %}
	{% set MESH_MAX = (MESH_MAX_NEW[0], MESH_MAX_NEW[1])|join(',') %}
	PRINT_START_SET PRINT_OFFSET={"%d,%d" % (x_offset,y_offset)}
	{% endif %}
	
	{% set EXTRUDER = print.EXTRUDER|int %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set start_level_bed_at_temp = km.start_level_bed_at_temp and
	not printer.bed_mesh.profile_name %}
	{% set start_home_z_at_temp = km.start_home_z_at_temp and
	not print.BED_AT_TARGET|int %}
	{% set actions_at_temp = start_level_bed_at_temp or
	km.start_quad_gantry_level_at_temp or
	km.start_z_tilt_adjust_at_temp or
	start_home_z_at_temp %}
	{% if actions_at_temp %}
	{% if km.start_extruder_probing_temp > 0 %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating RESET_STACK=1
	_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=2
	M109 R{km.start_extruder_probing_temp}
	{% else %}
	M104 S{EXTRUDER}
	{% endif %}
	{% if start_home_z_at_temp %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing RESET_STACK=1
	G28 Z
	{% endif %}
	{% if km.start_z_tilt_adjust_at_temp %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=calibrating_z RESET_STACK=1
	Z_TILT_ADJUST
	{% endif %}
	{% if km.start_quad_gantry_level_at_temp %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=leveling_gantry RESET_STACK=1
	QUAD_GANTRY_LEVEL
	{% endif %}
	{% if start_level_bed_at_temp %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=meshing RESET_STACK=1
	_km_mesh_if_needed {% if MESH_MIN %} MESH_MIN={MESH_MIN}{% endif
	%}{% if MESH_MAX %} MESH_MAX={MESH_MAX}{% endif %}
	{% endif %}
	{% if km.start_extruder_probing_temp > 0 %}
	M104 S{EXTRUDER}
	{% endif %}
	G4
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="extruder"

[gcode_macro _print_start_phase_extruder]
description = Inserted by slicer at start of print. Preheats the extruder.
	Usage: See PRINT_START.
gcode = 
	_PRINT_START_PHASE_CHECK PHASE=extruder
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set EXTRUDER = print.EXTRUDER|default(print.EXTRUDER_TEMP)|float %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	
	{% if EXTRUDER > 0 %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating RESET_STACK=1
	_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=ABOVE
	M109 S{EXTRUDER}
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="purge"

[gcode_macro _print_start_phase_purge]
description = Inserted by slicer at start of print. Generates purge lines.
	Usage: See PRINT_START.
gcode = 
	_PRINT_START_PHASE_CHECK PHASE=purge
	
	_KM_APPLY_PRINT_OFFSET
	
	_APPLY_BED_SURFACE_OFFSET
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set MESH_MIN = print.MESH_MIN|default(None) %}
	{% set MESH_MAX = print.MESH_MAX|default(None) %}
	{% set NOZZLE_SIZE = print.NOZZLE_SIZE|default(print.NOZZLE_SIZE)|
	default(printer.configfile.settings.extruder.nozzle_diameter)|float %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% if km.start_purge_length > 0.0 and printer.extruder.can_extrude %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=purging RESET_STACK=1
	DRAW_PURGE_LINE WIDTH="{NOZZLE_SIZE * 1.25}" HEIGHT="{NOZZLE_SIZE * 0.625
	}"{% if MESH_MIN %} PRINT_MIN={MESH_MIN}{% endif
	%}{% if MESH_MAX %} PRINT_MAX={MESH_MAX}{% endif %}
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="printing"
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=printing RESET_STACK=1

[gcode_macro _km_park_if_needed]
description = Parks the extruder if the current temperature of the supplied
	heater is not within the specified target range.
	Usage: _KM_PARK_IF_NEEDED HEATER=<heater> RANGE=[<percentage>|ABOVE|BELOW]
gcode = 
	
	{% set HEATER = params.HEATER if params.HEATER in
	printer.heaters.available_heaters else
	("heater_generic " ~ params.HEATER) %}
	{% set RANGE = (params.RANGE|default(1))|string|upper %}
	
	{% if printer[HEATER].target %}
	{% if RANGE == "ABOVE" %}
	{% if printer[HEATER].temperature < printer[HEATER].target %}
	PARK
	{% endif %}
	{% elif RANGE == "BELOW" %}
	{% if printer[HEATER].temperature > printer[HEATER].target %}
	PARK
	{% endif %}
	{% elif (printer[HEATER].temperature - printer[HEATER].target)|abs >
	(printer[HEATER].target * RANGE|float * 0.01)|abs %}
	PARK
	{% endif %}
	{% endif %}

[gcode_macro _km_apply_print_offset]
variable_offset = []
gcode = 
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% if params.RESET|default(0)|int and offset and
	not printer["gcode_macro _km_save_state"].is_ephemeral%}
	{% set PRINT_OFFSET = [offset.pop(0) * -1, offset.pop() * -1] %}
	{% elif print.PRINT_OFFSET and not offset and
	not printer["gcode_macro _km_save_state"].is_ephemeral %}
	{% set PRINT_OFFSET = print.PRINT_OFFSET.split(",")|map('float')|list %}
	{% set dummy = offset.extend(PRINT_OFFSET) %}
	{% endif %}
	
	{% if PRINT_OFFSET %}
	_KM_SET_GCODE_OFFSET_BASE {"X_ADJUST=%.2f Y_ADJUST=%.2f"|
	format(*PRINT_OFFSET)}
	{% endif %}

[gcode_macro _km_mesh_if_needed]
gcode = 
	
	
	
	{% if not printer.bed_mesh.profile_name %}
	BED_MESH_CALIBRATE_FAST {rawparams}
	{% endif %}

[gcode_macro print_start_set]
description = Inserted by slicer to set values used by PRINT_START.
	Usage: PRINT_START_SET <VARIABLE>=<value>
variable_print = {}
gcode = 
	{%for k in params %}
	{% set dummy = print.__setitem__(k|upper, params[k]) %}
	{% endfor %}

[gcode_macro _print_start_phase_check]
gcode = 
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set PRINT_START_PHASE = print.PRINT_START_PHASE|default("none") %}
	{% if PRINT_START_PHASE != params.PHASE %}
	
	SET_GCODE_VARIABLE MACRO=print_start_set VARIABLE=print VALUE="{{}}"
	{% if params.PHASE != 'none' %}
	{% set error = "PRINT_START phase error. Expected '%s' but found '%s'" %
	(params.PHASE, PRINT_START_PHASE) %}
	
	{% if not 'virtual_sdcard' in printer or
	not printer.virtual_sdcard.is_active or 'CANCEL_PRINT' not in
	printer.configfile.settings.virtual_sdcard.on_error_gcode|
	default("")|upper %}
	{action_respond_info(error)}
	CANCEL_PRINT
	{% else %}
	{action_raise_error(error)}
	{% endif %}
	{% else %}
	{ action_respond_info("Expected phase '%s' but found '%s'. Resetting."
	% (params.PHASE, PRINT_START_PHASE)) }
	{% endif %}
	{% endif %}

[gcode_macro print_end]
description = Inserted by slicer at end of print.
	Usage: PRINT_END
gcode = 
	_KM_CHECK_IS_PRINTING
	M400
	_PRINT_END_INNER
	
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% if km.start_clear_adjustments_at_end != 0 %}
	RESET_HEATER_SCALING
	RESET_FAN_SCALING
	M220 S100
	M221 S100
	{% endif %}
	_RESET_LAYER_GCODE
	_RESET_VELOCITY_LIMITS
	TURN_OFF_HEATERS
	M107; turn off fan
	{% if printer.bed_mesh %}BED_MESH_CLEAR{% endif %}
	
	{% if printer.toolhead.homed_axes|lower == "xyz" %}
	PARK Y="{km.start_end_park_y}"
	{% endif %}
	M84
	CLEAR_PAUSE
	SET_GCODE_VARIABLE MACRO=print_start_set VARIABLE=print VALUE="{{}}"
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready RESET_STACK=1

[gcode_macro _print_end_inner]
variable_cancelled = False
gcode = 
	SET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{False}"
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set toolhead = printer.toolhead %}
	{% set origin = printer.gcode_move.homing_origin%}
	{% set max_x = km.print_max[0] - origin.x %}
	{% set max_y = km.print_max[1] - origin.y %}
	{% set max_z = toolhead.axis_maximum.z - origin.z %}
	
	{% if not cancelled %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=completing
	{% endif %}
	
	{% if printer.extruder.can_extrude %}
	
	{% if not printer.pause_resume.is_paused and not cancelled and
	toolhead.homed_axes|lower == "xyz" %}
	{% set x_safe = (max_x - toolhead.position.x, 2.0)|min %}
	{% set y_safe = (max_y - toolhead.position.y, 2.0)|min %}
	{% set z_safe = (max_z - toolhead.position.z, 2.0)|min %}
	G91
	G0 Z{z_safe} E-1.0 F{km.travel_speed_z * 2}
	G0 X{x_safe} Y{y_safe} E-1.0 F{km.travel_speed_xy}
	
	_KM_APPLY_PRINT_OFFSET RESET=1
	{% endif %}
	
	
	G92 E0
	G1 E-5.0 F3600
	M400
	{% endif %}

[gcode_macro _km_check_is_printing]
variable_debug_state = False
description = Throws an error if print is not currently in progress.
gcode = 
	{% if not debug_state and
	printer.idle_timeout.state|string != "Printing" and
	not (printer.virtual_sdcard|default({})).is_active|default(False) and
	not printer.pause_resume.is_paused %}
	{ action_raise_error("No active print.") }
	{% endif %}

[gcode_macro _km_check_and_set_print_bounds]
description = Validates all print bounds and caches their values.
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set print = printer["gcode_macro print_start_set"].print %}
	
	
	{% if print.MESH_MIN %}
	{% set MESH_MIN = print.MESH_MIN.split(",")|map('float')|list %}
	{% set MESH_MAX = print.MESH_MAX.split(",")|map('float')|list %}
	{%if MESH_MIN[0] < km.print_min[0] or MESH_MIN[1] < km.print_min[1] %}
	{action_raise_error("MESH_MIN %s is outside the printable bounds" %
	(MESH_MIN|string, km.print_min|string))}
	{%elif MESH_MAX[0] > km.print_max[0] or MESH_MAX[1] > km.print_max[1] %}
	{action_raise_error("MESH_MAX %s is outside the printable bounds %s" %
	(MESH_MAX|string, km.print_max|string))}
	{% endif %}
	{% endif %}
	
	
	{% set points = [] %}
	{% if print.MODEL_MIN or print.MODEL_MAX %}
	{% set MODEL_MIN = print.MODEL_MIN.split(",")|map('float')|list %}
	{% set MODEL_MAX = print.MODEL_MAX.split(",")|map('float')|list %}
	{% set points = [MODEL_MIN, MODEL_MAX] %}
	{% endif %}
	{% if (printer.exclude_object|default({})).objects %}
	{% set points = printer.exclude_object.objects|selectattr('polygon')|
	map(attribute='polygon')|sum(start=points) %}
	{% set points_len = points|length %}
	{% if points_len >= 2 %}
	{% set x_coords = (points|map(attribute=0)|sort|list)[0::points_len-1] %}
	{% set y_coords = (points|map(attribute=1)|sort|list)[0::points_len-1] %}
	{% set MODEL_MIN = (x_coords[0],y_coords[0])|map('float')|list %}
	{% set MODEL_MAX = (x_coords[1],y_coords[1])|map('float')|list %}
	PRINT_START_SET MODEL_MIN="{MODEL_MIN|join(',')
	}" MODEL_MAX="{MODEL_MAX|join(',')}"
	{% endif %}
	{% endif %}
	
	{% if MODEL_MIN %}
	
	{% if MODEL_MIN[0] < km.print_min[0] or MODEL_MIN[1] < km.print_min[1] %}
	{action_raise_error("MODEL_MIN %s is outside the printable bounds" %
	(MODEL_MIN|string, km.print_min|string))}
	{% elif MODEL_MAX[0] > km.print_max[0] or MODEL_MAX[1] > km.print_max[1] %}
	{action_raise_error("MODEL_MAX %s is outside the printable bounds %s" %
	(MODEL_MAX|string, km.print_max|string))}
	{% endif %}
	{% endif %}
	
	
	{% if MESH_MIN and MODEL_MIN %}
	PRINT_START_SET PRINT_MIN="{((MODEL_MIN[0],MESH_MIN[0])|min,
	(MODEL_MIN[1],MESH_MIN[1])|min)|join(',')
	}" PRINT_MAX="{((MODEL_MAX[0],MESH_MAX[0])|max,
	(MODEL_MAX[1],MESH_MAX[1])|max)|join(',')}"
	{% else %}
	PRINT_START_SET PRINT_MIN="{km.print_min|join(',')
	}" PRINT_MAX="{km.print_max|join(',')}"
	{% endif %}

[gcode_macro _km_save_state]
description = Tracks gcode state.
variable_state_set = {}
variable_is_ephemeral = 0
gcode = 
	{% if params.SAVE|int %}
	{% set dummy = state_set.__setitem__(params.NAME, None) %}
	{% else %}
	{% set dummy = state_set.__delitem__(params.NAME) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=_km_save_state VARIABLE=is_ephemeral VALUE="{
	1 if state_set|length > 0 else 0 }"

[gcode_macro save_gcode_state]
description = Wraps SAVE_GCODE_STATE to track persistence state.
	Usage: See Klipper documentation
rename_existing = _KM_SAVE_GCODE_STATE
gcode = 
	_KM_SAVE_GCODE_STATE {rawparams}
	{% set NAME = params.NAME|default("default") %}
	_km_save_state NAME={NAME} SAVE=1

[gcode_macro restore_gcode_state]
description = Wraps RESTORE_GCODE_STATE to track persistence state.
	Usage: See Klipper documentation
rename_existing = _KM_RESTORE_GCODE_STATE
gcode = 
	_KM_RESTORE_GCODE_STATE {rawparams}
	{% set NAME = params.NAME|default("default") %}
	_km_save_state NAME={NAME} SAVE=0

[gcode_macro _abort_on_gcode_state]
gcode = 
	{% set save_state = printer["gcode_macro _km_save_state"] %}
	{% if save_state.is_ephemeral %}
	{action_raise_error("Encountered unexpected save state " +
	save_state.state_set|list|sort|string)}
	{% endif %}

[gcode_macro _km_print_status]
variable_last_status = 'none'
variable_status_stack = []
variable_command_list = {}
variable_status_list = [
	'ready',
	'filament_load',
	'filament_unload',
	'bed_heating',
	'chamber_heating',
	'homing',
	'leveling_gantry',
	'calibrating_z',
	'meshing',
	'extruder_heating',
	'purging',
	'printing',
	'pausing',
	'cancelling',
	'completing',
	]
gcode = 
	{% set ACTION = params.ACTION|trim|upper %}
	{% set STATUS = params.STATUS|default("")|trim|lower %}
	
	
	{% if ACTION == "ADD_EVENT" %}
	{% set COMMAND = params.COMMAND %}
	{% set ARGS = params.ARGS|default(0)|int != 0 %}
	{% set TYPE = params.TYPE|default('ENTER')|trim|upper %}
	{% set WHEN = params.WHEN|default('PRINTING')|trim|upper %}
	{% set FILTER_ENTER =
	(params.FILTER_ENTER|default("")|trim|lower).split(',')|
	select()|unique|list %}
	{% set FILTER_LEAVE =
	(params.FILTER_LEAVE|default("")|trim|lower).split(',')|
	select()|unique|list %}
	
	{% set STATUSES = STATUS.split(',')|map('trim')|list %}
	{% for s in (STATUSES if STATUSES[0] != 'all' else status_list) %}
	{% if not s in command_list %}
	{% set dummy = command_list.__setitem__(s,[]) %}
	{% endif %}
	{% set dummy = command_list[s].append({'cmd':COMMAND, 'args':ARGS,
	'type':TYPE, 'when':WHEN,
	'filt_e':FILTER_ENTER,
	'filt_l':FILTER_LEAVE}) %}
	{% endfor %}
	
	
	{% elif ACTION == "CHANGE" %}
	{% if params.RESET_STACK|default(0)|int %}
	{% for dummy in range(status_stack|length) %}
	{% set dummy = status_stack.pop() %}
	{% endfor %}
	
	
	{% elif STATUS == "pop_status" %}
	{% set STATUS = (status_stack|default(['ready'], True)).pop() %}
	{% endif %}
	
	{% if STATUS not in status_list %}
	{action_raise_error("Status '%s' not valid."|format(STATUS))}
	{% endif %}
	
	{% if STATUS != last_status %}
	{% set is_printing =
	printer["gcode_macro print_start_set"].print.PRINT_START_PHASE|
	default("")|length != 0 %}
	{% set print_states = ('ALWAYS', 'PRINTING' if is_printing else 'IDLE') %}
	
	{% for c in command_list[last_status]|default([]) %}
	{% if c.type in ('BOTH','LEAVE') and c.when in print_states and
	(not c.filt_l or STATUS in c.filt_l) %}
	M400
	{c.cmd}{% if c.args %} TYPE=LEAVE WHEN={print_states[1]
	} LAST_STATUS={last_status} NEXT_STATUS={STATUS}{% endif %}
	{% endif %}
	{% endfor %}
	
	{% for c in command_list[STATUS]|default([]) %}
	{% if c.type in ('BOTH','ENTER') and c.when in print_states and
	(not c.filt_e or STATUS in c.filt_e) %}
	M400
	{c.cmd}{% if c.args %} TYPE=ENTER WHEN={print_states[1]
	} LAST_STATUS={last_status} NEXT_STATUS={STATUS}{% endif %}
	{% endif %}
	{% endfor %}
	SET_GCODE_VARIABLE MACRO=_km_print_status VARIABLE=last_status VALUE="'{
	STATUS}'"
	{% endif %}
	
	
	{% elif ACTION == "PUSH_STATUS" %}
	{% set dummy = status_stack.append(last_status) %}
	
	
	{% else %}
	{action_raise_error("Action '%s' not valid."|format(ACTION))}
	{% endif %}

[gcode_macro gcode_on_print_status]
description = Adds a gcode command for a status event.
	Usage: GCODE_ON_PRINT_STATUS STATUS=<status> COMMAND=<gcode> [ARGS=<1|0>]
	[WHEN=<PRINTING|IDLE|ALWAYS>]
	[TYPE=<ENTER|LEAVE|BOTH>]
	[FILTER_ENTER=<status list>]
	[FILTER_LEAVE=<status list>]
gcode = 
	{% set STATUS = (params.STATUS|lower).split(',')|map('trim')|list %}
	{% set TYPE = params.TYPE|default('ENTER')|trim|upper %}
	{% set WHEN = params.WHEN|default('PRINTING')|trim|upper %}
	{% set FILTER_ENTER =
	(params.FILTER_ENTER|default("")|trim|lower).split(',')|select()|list %}
	{% set FILTER_LEAVE =
	(params.FILTER_LEAVE|default("")|trim|lower).split(',')|select()|list %}
	
	
	{% set status_list = printer["gcode_macro _km_print_status"].status_list %}
	{% for s in STATUS %}
	{% if not (s in status_list or s == 'all' and STATUS|length == 1) %}
	{action_raise_error("STATUS parameter '%s' not valid."|format(s))}
	{% endif %}
	{% endfor %}
	
	{% if TYPE not in ('ENTER', 'LEAVE', 'BOTH') %}
	{action_raise_error("TYPE paramater '%s' not valid."|format(TYPE))}
	{% elif WHEN not in ('PRINTING', 'IDLE', 'ALWAYS') %}
	{action_raise_error("WHEN parameter '%s' not valid."|format(WHEN))}
	{% elif TYPE == 'ENTER' and FILTER_LEAVE %}
	{action_raise_error("FILTER_LEAVE not valid with TYPE=ENTER.")}
	{% elif TYPE == 'LEAVE' and FILTER_ENTER %}
	{action_raise_error("FILTER_ENTER not valid with TYPE=LEAVE.")}
	{% endif %}
	{% for f in FILTER_ENTER %}
	{% if f not in status_list %}
	{action_raise_error("FILTER_ENTER parameter '%s' not valid."|format(f))}
	{% endif %}
	{% endfor %}
	{% for f in FILTER_LEAVE %}
	{% if f not in status_list %}
	{action_raise_error("FILTER_LEAVE parameter '%s' not valid."|format(f))}
	{% endif %}
	{% endfor %}
	
	
	_KM_PRINT_STATUS ACTION=ADD_EVENT {rawparams}

[gcode_macro m201]
description = Sets maximum accelleration.
	Usage: M201 [X<accel>] [Y<accel>]
variable_max_accel = 1.7976931348623157e+308
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% if 'X' in params or 'Y' in params %}
	{% set accel = (params.X|default(params.Y)|float,
	params.Y|default(params.X)|float)|min %}
	SET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{accel}"
	{% else %}
	SET_VELOCITY_LIMIT
	{% endif %}

[gcode_macro m203]
description = Sets maximum velocity.
	Usage: M203 [X<velocity>] [Y<velocity>]
gcode = 
	{% if 'X' in params or 'Y' in params %}
	{% set velocity = (params.X|default(params.Y)|float,
	params.Y|default(params.X)|float)|min %}
	SET_VELOCITY_LIMIT VELOCITY="{velocity}"
	{% else %}
	SET_VELOCITY_LIMIT
	{% endif %}

[gcode_macro m205]
description = Sets square corner velocity.
	Usage: M203 [X<velocity>] [Y<velocity>]
gcode = 
	{% if 'X' in params or 'Y' in params %}
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY="{
	(params.X|default(0)|float, params.Y|default(0)|float)|min}"
	{% else %}
	SET_VELOCITY_LIMIT
	{% endif %}

[gcode_macro m900]
description = Sets pressure advance.
	Usage: M900 [K<advance>] [T<extruder_index>]
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% if km.pressure_advance_scale > 0.0 %}
	{% set extruder = "extruder" ~ params.T|replace('0', '')
	if "T" in params else printer.toolhead.extruder %}
	{% if 'K' in params %}
	SET_PRESSURE_ADVANCE EXTRUDER="{extruder}" ADVANCE="{
	params.K|float * km.pressure_advance_scale}"
	{% endif %}
	{% endif %}

[gcode_macro _reset_velocity_limits]
description = Sets maximum accelleration.
	Usage: M204 [S<accel>] [P<accel> T<accel>]
gcode = 
	SET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{1.7976931348623157e+308}"

[gcode_macro bed_mesh_calibrate]
rename_existing = _KM_BED_MESH_CALIBRATE_BASE
description = Wraps BED_MESH_CALIBRATE, scaling probe count to specified area.
	Usage: See Klipper documentation.
gcode = 
	BED_MESH_CALIBRATE_FAST{%for k in params%}{' '~k~'="'~params[k]~'"'}{%endfor%}

[gcode_macro g29]
gcode = 
	BED_MESH_CALIBRATE

[idle_timeout]
gcode = 
	_KM_IDLE_TIMEOUT

[respond]

[gcode_macro PRINT_START]
rename_existing = KM_PRINT_START
gcode = 
	
	STATUS_HOMING
	KM_PRINT_START {rawparams}
	STATUS_PRINTING

[board_pins EBB36_G0B1_v1.2]
mcu = ebbcan
aliases = 
aliases_step = 
	EXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15
aliases_limitsw = 
	LIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6
aliases_bltouch = 
	PROBE_1=PB9,PROBE_2=PB8
aliases_fans = 
	FAN0=PA1,FAN1=PA0
aliases_thermistors = 
	TH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7
aliases_heaters = 
	HE0=PB13
aliases_rgb = 
	RGBLED=PD3
aliases_adxl = 
	ADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11
aliases_i2c = 
	AUX0=PB3,AUX1=PB4

[neopixel sb_leds]
pin = ebbcan:RGBLED
chain_count = 3
color_order = GRB
initial_red = 0.0
initial_green = 0.0
initial_blue = 0.0
initial_white = 1.0

[save_variables]
filename = ~/printer_data/variables.cfg

[mcu CB1]
serial = /tmp/klipper_host_mcu

[mcu]
canbus_uuid = f94e10a9add8

[mcu ebbcan]
canbus_uuid = 57244ec148c0

[printer]
kinematics = corexy
max_velocity = 600
max_accel = 10000
max_accel_to_decel = 5000
max_z_velocity = 5
max_z_accel = 100

[stepper_x]
step_pin = PE2
dir_pin = !PB4
enable_pin = !PC11
microsteps = 16
rotation_distance = 40
endstop_pin = !ebbcan:LIMIT_2
position_endstop = 220
position_min = -4
position_max = 220
homing_speed = 50

[tmc2209 stepper_x]
uart_pin = PC10
diag_pin = PF3
run_current = 1.1

[tmc2209 stepper_y]
uart_pin = PF13
diag_pin = PF4
run_current = 1.1

[tmc2209 stepper_z]
uart_pin = PF9
diag_pin = PF5
run_current = 0.650

[tmc2209 extruder]
uart_pin = ebbcan:EXT_UART
diag_pin = ebbcan:LIMIT_3
run_current = 0.650

[stepper_y]
step_pin = PF12
dir_pin = !PF11
enable_pin = !PB3
microsteps = 16
rotation_distance = 40
endstop_pin = ^PF3
position_endstop = 220
position_min = -4
position_max = 220
homing_speed = 50

[stepper_z]
step_pin = PD7
dir_pin = !PD6
enable_pin = !PF10
microsteps = 16
rotation_distance = 8
endstop_pin = probe:z_virtual_endstop
position_max = 300
position_min = -3

[heater_bed]
heater_pin = PB7
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PA0
min_temp = 0
max_temp = 130
control = pid
pid_kp = 63.528
pid_ki = 0.875
pid_kd = 1153.041

[temperature_sensor raspberry_pi]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor mcu_temp]
sensor_type = temperature_mcu
min_temp = 0
max_temp = 100

[controller_fan MCU_Fan]
pin = PE6
heater = extruder
fan_speed = 1

[heater_fan heatbreak_cooling_fan]
pin = ebbcan:FAN0
kick_start_time = 0.25
heater = extruder
heater_temp = 50.0
fan_speed = 1

[fan]
pin = ebbcan:FAN1

[safe_z_home]
home_xy_position = 140, 140
speed = 100
z_hop = 10
z_hop_speed = 20

[extruder]
step_pin = ebbcan:EXT_STEP
dir_pin = ebbcan:EXT_DIR
enable_pin = !ebbcan:EXT_EN
microsteps = 16
rotation_distance = 4.71
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.750
max_extrude_only_distance = 101.0
heater_pin = ebbcan:HE0
sensor_type = ATC Semitec 104NT-4-R025H42G
sensor_pin = ebbcan:TH0
min_temp = 0
max_temp = 300
max_extrude_cross_section = 5
pressure_advance = 0.02
control = pid
pid_kp = 20.603
pid_ki = 0.988
pid_kd = 107.392

[bltouch]
sensor_pin = ebbcan:PROBE_2
control_pin = ebbcan:PROBE_1
x_offset = -40
y_offset = -17
samples = 2
samples_tolerance = 0.015
samples_tolerance_retries = 5
z_offset = 2.849

[bed_mesh]
speed = 100
horizontal_move_z = 5
mesh_min = 10, 27
mesh_max = 173, 200
probe_count = 5, 5
algorithm = bicubic
fade_start = 1
fade_end = 10

[bed_screws]
screw1 = 55,55
screw2 = 200,55
screw3 = 200,205
screw4 = 55,205

[screws_tilt_adjust]
screw1 = 65,55
screw1_name = front left screw
screw2 = 218,55
screw2_name = front right screw
screw3 = 218,215
screw3_name = rear right screw
screw4 = 65,215
screw4_name = rear left screw
horizontal_move_z = 10
speed = 50
screw_thread = CW-M4

[display]
lcd_type = st7920
cs_pin = PB12
sclk_pin = PB13
sid_pin = PB15
encoder_pins = ^PB14, ^PB10
click_pin = ^!PB2

[exclude_object]

[firmware_retraction]
retract_length = 0.4
retract_speed = 20
unretract_extra_length = 0
unretract_speed = 10

[input_shaper]
shaper_type_x = 2hump_ei
shaper_freq_x = 86.2
shaper_type_y = zv
shaper_freq_y = 44.8

[gcode_arcs]
resolution = 1.0

[adxl345]
cs_pin = ebbcan:ADXL_CS
spi_software_sclk_pin = ebbcan:ADXL_SCLK
spi_software_mosi_pin = ebbcan:ADXL_MOSI
spi_software_miso_pin = ebbcan:ADXL_MISO

[resonance_tester]
accel_chip = adxl345
probe_points = 
	120,120,20

[bed_mesh default]
version = 1
points = 
	0.027500, 0.058750, 0.091250, 0.182500
	-0.003750, 0.061250, 0.072500, 0.125000
	0.021250, 0.016250, 0.013750, 0.033750
	-0.023750, -0.018750, -0.036250, -0.037500
x_count = 4
y_count = 4
mesh_x_pps = 2
mesh_y_pps = 2
algo = bicubic
tension = 0.2
min_x = 48.75
max_x = 171.24
min_y = 48.75
max_y = 171.24
=======================
Extruder max_extrude_ratio=2.078758
mcu 'mcu': Starting CAN connect
Created a socket
webhooks client 281472996760400: New connection
webhooks client 281472996760400: Client info {'program': 'Moonraker', 'version': 'v0.8.0-92-g504a3a7'}
Loaded MCU 'mcu' 109 commands (v0.11.0-241-gffb5105b / gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2)
MCU 'mcu' config: ADC_MAX=4095 BUS_PINS_i2c1_PA9_PA10=PA9,PA10 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_i2c2_PB13_PB14=PB13,PB14 BUS_PINS_i2c3_PB3_PB4=PB3,PB4 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3=PB4,PB5,PB3 CANBUS_BRIDGE=1 CLOCK_FREQ=64000000 MCU=stm32g0b1xx PWM_MAX=255 RECEIVE_WINDOW=192 RESERVE_PINS_CAN=PD12,PD13 RESERVE_PINS_USB=PA11,PA12 RESERVE_PINS_crystal=PF0,PF1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
mcu 'CB1': Starting connect
Loaded MCU 'CB1' 113 commands (v0.11.0-241-gffb5105b / gcc: (Debian 10.2.1-6) 10.2.1 20210110 binutils: (GNU Binutils for Debian) 2.35.2)
MCU 'CB1' config: ADC_MAX=4095 CLOCK_FREQ=50000000 MCU=linux PCA9685_MAX=4096 PWM_MAX=32768 STATS_SUMSQ_BASE=256
mcu 'ebbcan': Starting CAN connect
Created a socket
mcu 'ebbcan': got {'count': 507, 'sum': 590315, 'sumsq': 5589498, '#name': 'stats', '#sent_time': 340.774541995, '#receive_time': 340.775379203}
Loaded MCU 'ebbcan' 109 commands (v0.11.0-241-gffb5105b / gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2)
MCU 'ebbcan' config: ADC_MAX=4095 BUS_PINS_i2c1_PA9_PA10=PA9,PA10 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_i2c2_PB13_PB14=PB13,PB14 BUS_PINS_i2c3_PB3_PB4=PB3,PB4 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3=PB4,PB5,PB3 CANBUS_FREQUENCY=1000000 CLOCK_FREQ=64000000 MCU=stm32g0b1xx PWM_MAX=255 RECEIVE_WINDOW=192 RESERVE_PINS_CAN=PB0,PB1 RESERVE_PINS_crystal=PF0,PF1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
mcu_temperature 'mcu' nominal base=-268.847262 slope=1298.126801
Sending MCU 'mcu' printer configuration...
Configured MCU 'mcu' (1024 moves)
Sending MCU 'CB1' printer configuration...
Configured MCU 'CB1' (1024 moves)
Sending MCU 'ebbcan' printer configuration...
Configured MCU 'ebbcan' (1024 moves)
Starting heater checks for heater_bed
bed_mesh: generated points
Index |  Tool Adjusted  |   Probe
  0   | (50.0, 44.0)    | (10.0, 27.0)
  1   | (90.8, 44.0)    | (50.8, 27.0)
  2   | (131.5, 44.0)   | (91.5, 27.0)
  3   | (172.2, 44.0)   | (132.2, 27.0)
  4   | (213.0, 44.0)   | (173.0, 27.0)
  5   | (213.0, 87.2)   | (173.0, 70.2)
  6   | (172.2, 87.2)   | (132.2, 70.2)
  7   | (131.5, 87.2)   | (91.5, 70.2)
  8   | (90.8, 87.2)    | (50.8, 70.2)
  9   | (50.0, 87.2)    | (10.0, 70.2)
  10  | (50.0, 130.5)   | (10.0, 113.5)
  11  | (90.8, 130.5)   | (50.8, 113.5)
  12  | (131.5, 130.5)  | (91.5, 113.5)
  13  | (172.2, 130.5)  | (132.2, 113.5)
  14  | (213.0, 130.5)  | (173.0, 113.5)
  15  | (213.0, 173.8)  | (173.0, 156.8)
  16  | (172.2, 173.8)  | (132.2, 156.8)
  17  | (131.5, 173.8)  | (91.5, 156.8)
  18  | (90.8, 173.8)   | (50.8, 156.8)
  19  | (50.0, 173.8)   | (10.0, 156.8)
  20  | (50.0, 217.0)   | (10.0, 200.0)
  21  | (90.8, 217.0)   | (50.8, 200.0)
  22  | (131.5, 217.0)  | (91.5, 200.0)
  23  | (172.2, 217.0)  | (132.2, 200.0)
  24  | (213.0, 217.0)  | (173.0, 200.0)
Starting heater checks for extruder
Stats 342.5: gcodein=0  mcu: mcu_awake=0.043 mcu_task_avg=0.000014 mcu_task_stddev=0.000009 bytes_write=2877 bytes_read=5701 bytes_retransmit=0 bytes_invalid=0 send_seq=217 receive_seq=214 retransmit_seq=0 srtt=0.002 rttvar=0.002 rto=0.025 ready_bytes=1738 upcoming_bytes=149 freq=64005565 CB1: mcu_awake=0.003 mcu_task_avg=0.000024 mcu_task_stddev=0.000018 bytes_write=819 bytes_read=4523 bytes_retransmit=0 bytes_invalid=0 send_seq=112 receive_seq=112 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49997919 adj=49988857 ebbcan: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=1434 bytes_read=4769 bytes_retransmit=0 bytes_invalid=0 send_seq=147 receive_seq=147 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000677 adj=63998516  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=55.9 mcu_temp: temp=34.3 sysload=0.22 cputime=32.510 memavail=694012 print_time=0.010 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
webhooks: registering remote method 'shutdown_machine' for connection id: 281472996760400
webhooks: registering remote method 'reboot_machine' for connection id: 281472996760400
webhooks: registering remote method 'pause_job_queue' for connection id: 281472996760400
webhooks: registering remote method 'start_job_queue' for connection id: 281472996760400
Active bed surface: default; offset: -0.050
Stats 343.7: gcodein=0  mcu: mcu_awake=0.043 mcu_task_avg=0.000014 mcu_task_stddev=0.000009 bytes_write=4960 bytes_read=6023 bytes_retransmit=0 bytes_invalid=0 send_seq=256 receive_seq=256 retransmit_seq=0 srtt=0.004 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64003624 CB1: mcu_awake=0.003 mcu_task_avg=0.000024 mcu_task_stddev=0.000018 bytes_write=825 bytes_read=4539 bytes_retransmit=0 bytes_invalid=0 send_seq=113 receive_seq=113 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49998500 adj=49996321 ebbcan: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=1440 bytes_read=4845 bytes_retransmit=0 bytes_invalid=0 send_seq=148 receive_seq=148 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001538 adj=63992632  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=57.7 mcu_temp: temp=34.4 sysload=0.22 cputime=32.782 memavail=688628 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
Stats 344.7: gcodein=0  mcu: mcu_awake=0.043 mcu_task_avg=0.000014 mcu_task_stddev=0.000009 bytes_write=4966 bytes_read=6155 bytes_retransmit=0 bytes_invalid=0 send_seq=257 receive_seq=257 retransmit_seq=0 srtt=0.003 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64002687 CB1: mcu_awake=0.003 mcu_task_avg=0.000024 mcu_task_stddev=0.000018 bytes_write=831 bytes_read=4555 bytes_retransmit=0 bytes_invalid=0 send_seq=114 receive_seq=114 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49998745 adj=49999683 ebbcan: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=1446 bytes_read=4921 bytes_retransmit=0 bytes_invalid=0 send_seq=149 receive_seq=149 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000722 adj=63998758  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=56.5 mcu_temp: temp=34.4 sysload=0.22 cputime=32.860 memavail=688628 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 345.7: gcodein=0  mcu: mcu_awake=0.043 mcu_task_avg=0.000014 mcu_task_stddev=0.000009 bytes_write=4972 bytes_read=6258 bytes_retransmit=0 bytes_invalid=0 send_seq=258 receive_seq=258 retransmit_seq=0 srtt=0.003 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64002052 CB1: mcu_awake=0.003 mcu_task_avg=0.000024 mcu_task_stddev=0.000018 bytes_write=837 bytes_read=4571 bytes_retransmit=0 bytes_invalid=0 send_seq=115 receive_seq=115 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999168 adj=50000852 ebbcan: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=1452 bytes_read=4982 bytes_retransmit=0 bytes_invalid=0 send_seq=150 receive_seq=150 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000530 adj=63999060  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=55.1 mcu_temp: temp=34.7 sysload=0.28 cputime=32.900 memavail=688632 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.8 pwm=0.000
Stats 346.7: gcodein=0  mcu: mcu_awake=0.110 mcu_task_avg=0.000038 mcu_task_stddev=0.000167 bytes_write=4978 bytes_read=6378 bytes_retransmit=0 bytes_invalid=0 send_seq=259 receive_seq=259 retransmit_seq=0 srtt=0.002 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001823 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000015 bytes_write=843 bytes_read=4600 bytes_retransmit=0 bytes_invalid=0 send_seq=116 receive_seq=116 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999395 adj=50002035 ebbcan: mcu_awake=0.006 mcu_task_avg=0.000016 mcu_task_stddev=0.000033 bytes_write=1458 bytes_read=5058 bytes_retransmit=0 bytes_invalid=0 send_seq=151 receive_seq=151 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000560 adj=63999967  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=54.3 mcu_temp: temp=34.5 sysload=0.28 cputime=32.955 memavail=690152 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
Stats 347.7: gcodein=0  mcu: mcu_awake=0.110 mcu_task_avg=0.000038 mcu_task_stddev=0.000167 bytes_write=4984 bytes_read=6510 bytes_retransmit=0 bytes_invalid=0 send_seq=260 receive_seq=260 retransmit_seq=0 srtt=0.002 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001721 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000015 bytes_write=849 bytes_read=4616 bytes_retransmit=0 bytes_invalid=0 send_seq=117 receive_seq=117 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999663 adj=50001993 ebbcan: mcu_awake=0.006 mcu_task_avg=0.000016 mcu_task_stddev=0.000033 bytes_write=1464 bytes_read=5134 bytes_retransmit=0 bytes_invalid=0 send_seq=152 receive_seq=152 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000629 adj=64000292  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=53.6 mcu_temp: temp=34.6 sysload=0.28 cputime=33.022 memavail=689904 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
Stats 348.7: gcodein=0  mcu: mcu_awake=0.110 mcu_task_avg=0.000038 mcu_task_stddev=0.000167 bytes_write=4990 bytes_read=6613 bytes_retransmit=0 bytes_invalid=0 send_seq=261 receive_seq=261 retransmit_seq=0 srtt=0.002 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001651 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000015 bytes_write=855 bytes_read=4632 bytes_retransmit=0 bytes_invalid=0 send_seq=118 receive_seq=118 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999648 adj=50001978 ebbcan: mcu_awake=0.006 mcu_task_avg=0.000016 mcu_task_stddev=0.000033 bytes_write=1470 bytes_read=5195 bytes_retransmit=0 bytes_invalid=0 send_seq=153 receive_seq=153 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000495 adj=64000391  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=54.4 mcu_temp: temp=34.7 sysload=0.28 cputime=33.071 memavail=689456 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
Stats 349.7: gcodein=0  mcu: mcu_awake=0.110 mcu_task_avg=0.000038 mcu_task_stddev=0.000167 bytes_write=4996 bytes_read=6716 bytes_retransmit=0 bytes_invalid=0 send_seq=262 receive_seq=262 retransmit_seq=0 srtt=0.002 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001521 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000015 bytes_write=861 bytes_read=4648 bytes_retransmit=0 bytes_invalid=0 send_seq=119 receive_seq=119 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999620 adj=50001190 ebbcan: mcu_awake=0.006 mcu_task_avg=0.000016 mcu_task_stddev=0.000033 bytes_write=1476 bytes_read=5256 bytes_retransmit=0 bytes_invalid=0 send_seq=154 receive_seq=154 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000411 adj=63999852  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=54.7 mcu_temp: temp=34.6 sysload=0.28 cputime=33.106 memavail=689456 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 350.7: gcodein=0  mcu: mcu_awake=0.110 mcu_task_avg=0.000038 mcu_task_stddev=0.000167 bytes_write=5002 bytes_read=6848 bytes_retransmit=0 bytes_invalid=0 send_seq=263 receive_seq=263 retransmit_seq=0 srtt=0.002 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001432 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000015 bytes_write=867 bytes_read=4664 bytes_retransmit=0 bytes_invalid=0 send_seq=120 receive_seq=120 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999621 adj=50000737 ebbcan: mcu_awake=0.006 mcu_task_avg=0.000016 mcu_task_stddev=0.000033 bytes_write=1482 bytes_read=5332 bytes_retransmit=0 bytes_invalid=0 send_seq=155 receive_seq=155 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000453 adj=63999780  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=54.3 mcu_temp: temp=34.6 sysload=0.26 cputime=33.158 memavail=689740 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
Stats 351.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5008 bytes_read=6966 bytes_retransmit=0 bytes_invalid=0 send_seq=264 receive_seq=264 retransmit_seq=0 srtt=0.001 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001389 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000015 bytes_write=873 bytes_read=4693 bytes_retransmit=0 bytes_invalid=0 send_seq=121 receive_seq=121 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999643 adj=50000417 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1488 bytes_read=5407 bytes_retransmit=0 bytes_invalid=0 send_seq=156 receive_seq=156 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000527 adj=64000023  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=54.7 mcu_temp: temp=34.5 sysload=0.26 cputime=33.196 memavail=690488 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
Stats 352.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5014 bytes_read=7069 bytes_retransmit=0 bytes_invalid=0 send_seq=265 receive_seq=265 retransmit_seq=0 srtt=0.001 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001353 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000015 bytes_write=879 bytes_read=4709 bytes_retransmit=0 bytes_invalid=0 send_seq=122 receive_seq=122 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999713 adj=50000151 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1494 bytes_read=5468 bytes_retransmit=0 bytes_invalid=0 send_seq=157 receive_seq=157 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000466 adj=64000206  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=55.3 mcu_temp: temp=34.7 sysload=0.26 cputime=33.239 memavail=690600 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
Stats 353.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5026 bytes_read=7217 bytes_retransmit=0 bytes_invalid=0 send_seq=267 receive_seq=267 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001291 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000015 bytes_write=885 bytes_read=4725 bytes_retransmit=0 bytes_invalid=0 send_seq=123 receive_seq=123 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999732 adj=50000142 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1525 bytes_read=5562 bytes_retransmit=0 bytes_invalid=0 send_seq=160 receive_seq=160 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000434 adj=63999943  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=55.1 mcu_temp: temp=34.7 sysload=0.26 cputime=33.284 memavail=691244 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
Stats 354.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5032 bytes_read=7320 bytes_retransmit=0 bytes_invalid=0 send_seq=268 receive_seq=268 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001303 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000015 bytes_write=891 bytes_read=4741 bytes_retransmit=0 bytes_invalid=0 send_seq=124 receive_seq=124 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999744 adj=50000027 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1531 bytes_read=5623 bytes_retransmit=0 bytes_invalid=0 send_seq=161 receive_seq=161 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000398 adj=63999835  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=55.1 mcu_temp: temp=34.7 sysload=0.26 cputime=33.323 memavail=691460 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
Stats 355.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5038 bytes_read=7423 bytes_retransmit=0 bytes_invalid=0 send_seq=269 receive_seq=269 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001303 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000015 bytes_write=897 bytes_read=4757 bytes_retransmit=0 bytes_invalid=0 send_seq=125 receive_seq=125 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999794 adj=49999714 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1561 bytes_read=5702 bytes_retransmit=0 bytes_invalid=0 send_seq=164 receive_seq=164 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000397 adj=63999455  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=54.0 mcu_temp: temp=34.8 sysload=0.24 cputime=33.390 memavail=691788 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
Stats 356.7: gcodein=0  mcu: mcu_awake=0.006 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5044 bytes_read=7570 bytes_retransmit=0 bytes_invalid=0 send_seq=270 receive_seq=270 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001282 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000013 bytes_write=903 bytes_read=4786 bytes_retransmit=0 bytes_invalid=0 send_seq=126 receive_seq=126 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999805 adj=49999694 ebbcan: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000019 bytes_write=1567 bytes_read=5792 bytes_retransmit=0 bytes_invalid=0 send_seq=165 receive_seq=165 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000385 adj=63999363  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=54.3 mcu_temp: temp=34.7 sysload=0.24 cputime=33.434 memavail=692296 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
Stats 357.7: gcodein=0  mcu: mcu_awake=0.006 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5050 bytes_read=7673 bytes_retransmit=0 bytes_invalid=0 send_seq=271 receive_seq=271 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001265 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000013 bytes_write=909 bytes_read=4802 bytes_retransmit=0 bytes_invalid=0 send_seq=127 receive_seq=127 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999836 adj=49999599 ebbcan: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000019 bytes_write=1573 bytes_read=5853 bytes_retransmit=0 bytes_invalid=0 send_seq=166 receive_seq=166 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000369 adj=63999343  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=55.0 mcu_temp: temp=34.8 sysload=0.24 cputime=33.470 memavail=692420 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
Stats 358.7: gcodein=0  mcu: mcu_awake=0.006 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5056 bytes_read=7776 bytes_retransmit=0 bytes_invalid=0 send_seq=272 receive_seq=272 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001248 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000013 bytes_write=915 bytes_read=4818 bytes_retransmit=0 bytes_invalid=0 send_seq=128 receive_seq=128 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999848 adj=49999622 ebbcan: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000019 bytes_write=1579 bytes_read=5914 bytes_retransmit=0 bytes_invalid=0 send_seq=167 receive_seq=167 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000398 adj=63999291  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=54.7 mcu_temp: temp=34.8 sysload=0.24 cputime=33.515 memavail=691932 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
Stats 359.7: gcodein=0  mcu: mcu_awake=0.006 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5062 bytes_read=7908 bytes_retransmit=0 bytes_invalid=0 send_seq=273 receive_seq=273 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001238 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000013 bytes_write=921 bytes_read=4834 bytes_retransmit=0 bytes_invalid=0 send_seq=129 receive_seq=129 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999847 adj=49999559 ebbcan: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000019 bytes_write=1585 bytes_read=5990 bytes_retransmit=0 bytes_invalid=0 send_seq=168 receive_seq=168 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000386 adj=63999481  heater_bed: target=0 temp=25.5 pwm=0.000 raspberry_pi: temp=55.5 mcu_temp: temp=34.8 sysload=0.24 cputime=33.554 memavail=692296 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
Stats 360.7: gcodein=0  mcu: mcu_awake=0.006 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5068 bytes_read=8011 bytes_retransmit=0 bytes_invalid=0 send_seq=274 receive_seq=274 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001242 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000013 bytes_write=927 bytes_read=4850 bytes_retransmit=0 bytes_invalid=0 send_seq=130 receive_seq=130 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999876 adj=49999424 ebbcan: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000019 bytes_write=1591 bytes_read=6051 bytes_retransmit=0 bytes_invalid=0 send_seq=169 receive_seq=169 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000374 adj=63999387  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=54.7 mcu_temp: temp=34.7 sysload=0.38 cputime=33.605 memavail=692296 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
Stats 361.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5074 bytes_read=8129 bytes_retransmit=0 bytes_invalid=0 send_seq=275 receive_seq=275 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001231 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000012 bytes_write=933 bytes_read=4879 bytes_retransmit=0 bytes_invalid=0 send_seq=131 receive_seq=131 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999873 adj=49999435 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1597 bytes_read=6126 bytes_retransmit=0 bytes_invalid=0 send_seq=170 receive_seq=170 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000383 adj=63999246  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=54.2 mcu_temp: temp=34.8 sysload=0.38 cputime=33.653 memavail=692576 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
Stats 362.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5080 bytes_read=8261 bytes_retransmit=0 bytes_invalid=0 send_seq=276 receive_seq=276 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001223 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000012 bytes_write=939 bytes_read=4895 bytes_retransmit=0 bytes_invalid=0 send_seq=132 receive_seq=132 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999874 adj=49999336 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1603 bytes_read=6202 bytes_retransmit=0 bytes_invalid=0 send_seq=171 receive_seq=171 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000404 adj=63999331  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=55.1 mcu_temp: temp=35.0 sysload=0.38 cputime=33.691 memavail=692640 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
Stats 363.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5086 bytes_read=8364 bytes_retransmit=0 bytes_invalid=0 send_seq=277 receive_seq=277 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001216 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000012 bytes_write=945 bytes_read=4911 bytes_retransmit=0 bytes_invalid=0 send_seq=133 receive_seq=133 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999898 adj=49999275 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1609 bytes_read=6263 bytes_retransmit=0 bytes_invalid=0 send_seq=172 receive_seq=172 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000402 adj=63999454  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=54.8 mcu_temp: temp=34.9 sysload=0.38 cputime=33.731 memavail=693288 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.8 pwm=0.000
Stats 364.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5092 bytes_read=8467 bytes_retransmit=0 bytes_invalid=0 send_seq=278 receive_seq=278 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001213 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000012 bytes_write=951 bytes_read=4927 bytes_retransmit=0 bytes_invalid=0 send_seq=134 receive_seq=134 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999895 adj=49999363 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1615 bytes_read=6324 bytes_retransmit=0 bytes_invalid=0 send_seq=173 receive_seq=173 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000401 adj=63999419  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=55.3 mcu_temp: temp=34.9 sysload=0.38 cputime=33.767 memavail=693556 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
Stats 365.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5098 bytes_read=8599 bytes_retransmit=0 bytes_invalid=0 send_seq=279 receive_seq=279 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001225 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000012 bytes_write=957 bytes_read=4943 bytes_retransmit=0 bytes_invalid=0 send_seq=135 receive_seq=135 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999898 adj=49999258 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1621 bytes_read=6400 bytes_retransmit=0 bytes_invalid=0 send_seq=174 receive_seq=174 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000391 adj=63999369  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=55.1 mcu_temp: temp=34.8 sysload=0.43 cputime=33.817 memavail=693640 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
Stats 366.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5104 bytes_read=8717 bytes_retransmit=0 bytes_invalid=0 send_seq=280 receive_seq=280 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001220 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000010 bytes_write=963 bytes_read=4972 bytes_retransmit=0 bytes_invalid=0 send_seq=136 receive_seq=136 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999900 adj=49999136 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1627 bytes_read=6475 bytes_retransmit=0 bytes_invalid=0 send_seq=175 receive_seq=175 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000395 adj=63999186  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=54.3 mcu_temp: temp=34.8 sysload=0.43 cputime=33.865 memavail=693756 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
Stats 367.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5110 bytes_read=8820 bytes_retransmit=0 bytes_invalid=0 send_seq=281 receive_seq=281 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001213 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000010 bytes_write=969 bytes_read=4988 bytes_retransmit=0 bytes_invalid=0 send_seq=137 receive_seq=137 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999901 adj=49999129 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1633 bytes_read=6536 bytes_retransmit=0 bytes_invalid=0 send_seq=176 receive_seq=176 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000386 adj=63999241  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=55.0 mcu_temp: temp=34.9 sysload=0.43 cputime=33.901 memavail=693296 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
Stats 368.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5116 bytes_read=8952 bytes_retransmit=0 bytes_invalid=0 send_seq=282 receive_seq=282 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001225 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000010 bytes_write=975 bytes_read=5004 bytes_retransmit=0 bytes_invalid=0 send_seq=138 receive_seq=138 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999917 adj=49999127 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1645 bytes_read=6628 bytes_retransmit=0 bytes_invalid=0 send_seq=178 receive_seq=178 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000379 adj=63999215  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=55.6 mcu_temp: temp=34.9 sysload=0.43 cputime=33.943 memavail=693848 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.8 pwm=0.000
Stats 369.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5122 bytes_read=9055 bytes_retransmit=0 bytes_invalid=0 send_seq=283 receive_seq=283 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001221 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000010 bytes_write=981 bytes_read=5020 bytes_retransmit=0 bytes_invalid=0 send_seq=139 receive_seq=139 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999919 adj=49999128 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1651 bytes_read=6689 bytes_retransmit=0 bytes_invalid=0 send_seq=179 receive_seq=179 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000374 adj=63999063  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=55.6 mcu_temp: temp=35.0 sysload=0.43 cputime=33.981 memavail=693628 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
Stats 370.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5128 bytes_read=9158 bytes_retransmit=0 bytes_invalid=0 send_seq=284 receive_seq=284 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001225 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000010 bytes_write=987 bytes_read=5036 bytes_retransmit=0 bytes_invalid=0 send_seq=140 receive_seq=140 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999939 adj=49999119 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1657 bytes_read=6750 bytes_retransmit=0 bytes_invalid=0 send_seq=180 receive_seq=180 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000382 adj=63999082  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=55.4 mcu_temp: temp=35.1 sysload=0.40 cputime=34.033 memavail=694296 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.8 pwm=0.000
Stats 371.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5134 bytes_read=9305 bytes_retransmit=0 bytes_invalid=0 send_seq=285 receive_seq=285 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001225 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000018 bytes_write=993 bytes_read=5065 bytes_retransmit=0 bytes_invalid=0 send_seq=141 receive_seq=141 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999962 adj=49999203 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1663 bytes_read=6840 bytes_retransmit=0 bytes_invalid=0 send_seq=181 receive_seq=181 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000375 adj=63999123  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=54.5 mcu_temp: temp=35.0 sysload=0.40 cputime=34.093 memavail=694304 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
Stats 372.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5140 bytes_read=9408 bytes_retransmit=0 bytes_invalid=0 send_seq=286 receive_seq=286 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001220 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000018 bytes_write=999 bytes_read=5081 bytes_retransmit=0 bytes_invalid=0 send_seq=142 receive_seq=142 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999959 adj=49999328 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1669 bytes_read=6901 bytes_retransmit=0 bytes_invalid=0 send_seq=182 receive_seq=182 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000370 adj=63999083  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=55.5 mcu_temp: temp=35.0 sysload=0.40 cputime=34.129 memavail=694868 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
Stats 373.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5146 bytes_read=9511 bytes_retransmit=0 bytes_invalid=0 send_seq=287 receive_seq=287 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001225 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000018 bytes_write=1005 bytes_read=5097 bytes_retransmit=0 bytes_invalid=0 send_seq=143 receive_seq=143 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999954 adj=49999249 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1675 bytes_read=6962 bytes_retransmit=0 bytes_invalid=0 send_seq=183 receive_seq=183 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000380 adj=63999102  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=55.7 mcu_temp: temp=34.9 sysload=0.40 cputime=34.172 memavail=694904 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
Stats 374.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5152 bytes_read=9643 bytes_retransmit=0 bytes_invalid=0 send_seq=288 receive_seq=288 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001227 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000018 bytes_write=1011 bytes_read=5113 bytes_retransmit=0 bytes_invalid=0 send_seq=144 receive_seq=144 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999952 adj=49999118 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1681 bytes_read=7038 bytes_retransmit=0 bytes_invalid=0 send_seq=184 receive_seq=184 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000386 adj=63999147  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=53.5 mcu_temp: temp=35.1 sysload=0.40 cputime=34.236 memavail=694908 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.8 pwm=0.000
Stats 375.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5158 bytes_read=9746 bytes_retransmit=0 bytes_invalid=0 send_seq=289 receive_seq=289 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001229 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000018 bytes_write=1017 bytes_read=5129 bytes_retransmit=0 bytes_invalid=0 send_seq=145 receive_seq=145 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999956 adj=49999065 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1687 bytes_read=7099 bytes_retransmit=0 bytes_invalid=0 send_seq=185 receive_seq=185 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000390 adj=63999181  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=53.7 mcu_temp: temp=35.1 sysload=0.36 cputime=34.297 memavail=694984 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
Stats 376.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5164 bytes_read=9864 bytes_retransmit=0 bytes_invalid=0 send_seq=290 receive_seq=290 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001231 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=1023 bytes_read=5158 bytes_retransmit=0 bytes_invalid=0 send_seq=146 receive_seq=146 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999960 adj=49999063 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1693 bytes_read=7174 bytes_retransmit=0 bytes_invalid=0 send_seq=186 receive_seq=186 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000388 adj=63999198  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=53.3 mcu_temp: temp=35.0 sysload=0.36 cputime=34.358 memavail=694848 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
Stats 377.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5170 bytes_read=9996 bytes_retransmit=0 bytes_invalid=0 send_seq=291 receive_seq=291 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001258 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=1029 bytes_read=5174 bytes_retransmit=0 bytes_invalid=0 send_seq=147 receive_seq=147 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999953 adj=49999068 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1699 bytes_read=7250 bytes_retransmit=0 bytes_invalid=0 send_seq=187 receive_seq=187 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000385 adj=63999154  heater_bed: target=0 temp=25.5 pwm=0.000 raspberry_pi: temp=54.2 mcu_temp: temp=35.0 sysload=0.36 cputime=34.394 memavail=695560 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.8 pwm=0.000
Stats 378.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5176 bytes_read=10099 bytes_retransmit=0 bytes_invalid=0 send_seq=292 receive_seq=292 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001252 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=1035 bytes_read=5190 bytes_retransmit=0 bytes_invalid=0 send_seq=148 receive_seq=148 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999951 adj=49998808 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1705 bytes_read=7311 bytes_retransmit=0 bytes_invalid=0 send_seq=188 receive_seq=188 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000379 adj=63998894  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=54.8 mcu_temp: temp=35.0 sysload=0.36 cputime=34.433 memavail=695616 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.8 pwm=0.000
Stats 379.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5182 bytes_read=10202 bytes_retransmit=0 bytes_invalid=0 send_seq=293 receive_seq=293 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001255 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=1041 bytes_read=5206 bytes_retransmit=0 bytes_invalid=0 send_seq=149 receive_seq=149 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999958 adj=49998874 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1711 bytes_read=7372 bytes_retransmit=0 bytes_invalid=0 send_seq=189 receive_seq=189 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000382 adj=63998960  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=54.1 mcu_temp: temp=35.2 sysload=0.36 cputime=34.492 memavail=695616 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.8 pwm=0.000
Stats 380.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5188 bytes_read=10334 bytes_retransmit=0 bytes_invalid=0 send_seq=294 receive_seq=294 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001263 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=1047 bytes_read=5222 bytes_retransmit=0 bytes_invalid=0 send_seq=150 receive_seq=150 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999968 adj=49998935 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1717 bytes_read=7448 bytes_retransmit=0 bytes_invalid=0 send_seq=190 receive_seq=190 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000383 adj=63998992  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=53.5 mcu_temp: temp=35.2 sysload=0.33 cputime=34.556 memavail=695368 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
Stats 381.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5194 bytes_read=10452 bytes_retransmit=0 bytes_invalid=0 send_seq=295 receive_seq=295 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001258 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000015 bytes_write=1053 bytes_read=5251 bytes_retransmit=0 bytes_invalid=0 send_seq=151 receive_seq=151 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999971 adj=49998987 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1723 bytes_read=7523 bytes_retransmit=0 bytes_invalid=0 send_seq=191 receive_seq=191 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000385 adj=63998963  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=53.0 mcu_temp: temp=35.0 sysload=0.33 cputime=34.619 memavail=695344 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.8 pwm=0.000
Stats 382.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5200 bytes_read=10555 bytes_retransmit=0 bytes_invalid=0 send_seq=296 receive_seq=296 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001253 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000015 bytes_write=1059 bytes_read=5267 bytes_retransmit=0 bytes_invalid=0 send_seq=152 receive_seq=152 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999967 adj=49999047 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1729 bytes_read=7584 bytes_retransmit=0 bytes_invalid=0 send_seq=192 receive_seq=192 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000380 adj=63999073  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=53.8 mcu_temp: temp=35.2 sysload=0.33 cputime=34.660 memavail=695160 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.8 pwm=0.000
Stats 383.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5206 bytes_read=10687 bytes_retransmit=0 bytes_invalid=0 send_seq=297 receive_seq=297 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001245 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000015 bytes_write=1065 bytes_read=5283 bytes_retransmit=0 bytes_invalid=0 send_seq=153 receive_seq=153 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999962 adj=49999030 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1735 bytes_read=7660 bytes_retransmit=0 bytes_invalid=0 send_seq=193 receive_seq=193 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000377 adj=63999086  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=54.7 mcu_temp: temp=35.1 sysload=0.33 cputime=34.696 memavail=695720 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.8 pwm=0.000
Stats 384.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5212 bytes_read=10790 bytes_retransmit=0 bytes_invalid=0 send_seq=298 receive_seq=298 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001242 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000015 bytes_write=1071 bytes_read=5299 bytes_retransmit=0 bytes_invalid=0 send_seq=154 receive_seq=154 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999982 adj=49999037 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1741 bytes_read=7721 bytes_retransmit=0 bytes_invalid=0 send_seq=194 receive_seq=194 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000379 adj=63999142  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=54.3 mcu_temp: temp=35.2 sysload=0.33 cputime=34.751 memavail=695932 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
Stats 385.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5218 bytes_read=10893 bytes_retransmit=0 bytes_invalid=0 send_seq=299 receive_seq=299 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001239 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000015 bytes_write=1077 bytes_read=5315 bytes_retransmit=0 bytes_invalid=0 send_seq=155 receive_seq=155 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999985 adj=49999230 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1747 bytes_read=7782 bytes_retransmit=0 bytes_invalid=0 send_seq=195 receive_seq=195 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000383 adj=63999189  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=53.7 mcu_temp: temp=35.1 sysload=0.39 cputime=34.812 memavail=696000 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.8 pwm=0.000
Stats 386.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5224 bytes_read=11040 bytes_retransmit=0 bytes_invalid=0 send_seq=300 receive_seq=300 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001240 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000016 bytes_write=1083 bytes_read=5344 bytes_retransmit=0 bytes_invalid=0 send_seq=156 receive_seq=156 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999990 adj=49999233 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1753 bytes_read=7872 bytes_retransmit=0 bytes_invalid=0 send_seq=196 receive_seq=196 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000387 adj=63999239  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=53.8 mcu_temp: temp=35.1 sysload=0.39 cputime=34.879 memavail=696700 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
Stats 387.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5230 bytes_read=11143 bytes_retransmit=0 bytes_invalid=0 send_seq=301 receive_seq=301 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001242 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000016 bytes_write=1089 bytes_read=5360 bytes_retransmit=0 bytes_invalid=0 send_seq=157 receive_seq=157 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999995 adj=49999220 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1759 bytes_read=7933 bytes_retransmit=0 bytes_invalid=0 send_seq=197 receive_seq=197 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000382 adj=63999254  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=53.7 mcu_temp: temp=35.2 sysload=0.39 cputime=34.929 memavail=696040 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.8 pwm=0.000
Stats 388.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5236 bytes_read=11246 bytes_retransmit=0 bytes_invalid=0 send_seq=302 receive_seq=302 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001241 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000016 bytes_write=1095 bytes_read=5376 bytes_retransmit=0 bytes_invalid=0 send_seq=158 receive_seq=158 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999988 adj=49999199 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1765 bytes_read=7994 bytes_retransmit=0 bytes_invalid=0 send_seq=198 receive_seq=198 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000378 adj=63999153  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=54.7 mcu_temp: temp=35.2 sysload=0.39 cputime=34.964 memavail=696508 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.8 pwm=0.000
Stats 389.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5242 bytes_read=11378 bytes_retransmit=0 bytes_invalid=0 send_seq=303 receive_seq=303 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001233 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000016 bytes_write=1101 bytes_read=5392 bytes_retransmit=0 bytes_invalid=0 send_seq=159 receive_seq=159 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999984 adj=49999102 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1771 bytes_read=8070 bytes_retransmit=0 bytes_invalid=0 send_seq=199 receive_seq=199 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000387 adj=63999124  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=55.0 mcu_temp: temp=35.2 sysload=0.39 cputime=35.013 memavail=696552 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.8 pwm=0.000
Stats 390.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5248 bytes_read=11481 bytes_retransmit=0 bytes_invalid=0 send_seq=304 receive_seq=304 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001231 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000016 bytes_write=1113 bytes_read=5424 bytes_retransmit=0 bytes_invalid=0 send_seq=161 receive_seq=161 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999988 adj=49999098 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1777 bytes_read=8131 bytes_retransmit=0 bytes_invalid=0 send_seq=200 receive_seq=200 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000389 adj=63999293  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=53.5 mcu_temp: temp=35.1 sysload=0.52 cputime=35.076 memavail=696556 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.8 pwm=0.000
Starting Klippy...
Args: ['/home/biqu/klipper/klippy/klippy.py', '/home/biqu/printer_data/config/printer.cfg', '-I', '/home/biqu/printer_data/comms/klippy.serial', '-l', '/home/biqu/printer_data/logs/klippy.log', '-a', '/home/biqu/printer_data/comms/klippy.sock']
Git version: 'v0.11.0-241-gffb5105b'
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ?
Python: '3.9.2 (default, Feb 28 2021, 17:03:44) \n[GCC 10.2.1 20210110]'
Start printer at Sun Aug 20 17:10:44 2023 (1692551444.8 44.2)
===== Config file =====
[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancels the current print.
	Usage: CANCEL_PRINT
rename_existing = _KM_CANCEL_PRINT_BASE
gcode = 
	_KM_CHECK_IS_PRINTING
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=cancelling RESET_STACK=1
	SET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{True}"
	PRINT_END
	_KM_CANCEL_PRINT_BASE
	{% if printer.pause_resume.is_paused %}
	RESTORE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE MOVE=0
	{% endif %}
	CLEAR_PAUSE
	_KM_APPLY_PRINT_OFFSET RESET=1
	{% if 'virtual_sdcard' in printer and not printer.virtual_sdcard.is_active %}
	SDCARD_RESET_FILE
	{% endif %}

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
variable_restore_idle_timeout = 0
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set idle_timeout = client.idle_timeout|default(0) %}
	
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE={printer[printer.toolhead.extruder].target}
	
	{% if idle_timeout > 0 %}
	SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
	SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
	{% endif %}
	PAUSE_BASE
	_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
variable_last_extruder_temp = 0
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move = client.speed_move|default(velocity) %}
	
	
	{% if printer['gcode_macro PAUSE'].restore_idle_timeout > 0 %}
	SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro PAUSE'].restore_idle_timeout}
	{% endif %}
	M109 S{last_extruder_temp}
	_CLIENT_EXTRUDE
	RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	_KM_CHECK_IS_PRINTING
	{% set pause_next_layer =
	printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE | default(1) | int != 0 %}
	{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VALUE="{
	{ 'enable': False, 'call': MACRO }}" VARIABLE=pause_next_layer
	GCODE_AT_LAYER COMMAND="{MACRO|replace('\"','\\\"')
	}" CANCEL="{0 if ENABLE else 1}" LAYER="next"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	_KM_CHECK_IS_PRINTING
	{% set pause_at_layer =
	printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	
	{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined else
	params.LAYER is defined %}
	{% set LAYER = params.LAYER |
	default((pause_at_layer.layer|int,
	printer.print_stats.info.current_layer|int + 1)|max)%}
	{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}
	
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{
	{ 'enable': False, 'layer': 0, 'call': MACRO }}"
	{% if ENABLE and pause_at_layer.enable %}
	
	GCODE_AT_LAYER COMMAND="{pause_at_layer.call|replace('\"','\\\"')
	}" CANCEL="{1}" LAYER="{pause_at_layer.layer}"
	{% endif %}
	
	GCODE_AT_LAYER COMMAND="{MACRO|replace('\"','\\\"')
	}" CANCEL="{0 if ENABLE else 1}" LAYER="{LAYER}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = _KM_SET_PRINT_STATS_INFO
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	_KM_SET_PRINT_STATS_INFO {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.extruder.can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[gcode_macro _km_options]
variable_load_length = 90.0
variable_menu_temperature = [
	{'name' : 'PLA',  'extruder' : 200.0, 'bed' : 60.0},
	{'name' : 'PETG', 'extruder' : 230.0, 'bed' : 85.0},
	{'name' : 'ABS',  'extruder' : 245.0, 'bed' : 110.0, 'chamber' : 60}]
variable_start_purge_length = 50
variable_start_extruder_probing_temp = 150
variable_park_x = 200.0
variable_park_y = 200.0
gcode = 

[gcode_macro bed_mesh_calibrate_fast]
description = Wraps BED_MESH_CALIBRATE, scaling probe count to specified area.
	Usage: See Klipper documentation.
gcode = 
	
	BED_MESH_CHECK ABORT=1
	
	
	{% set calibrate_cmd =
	(printer["gcode_macro list_macros"].macros.bed_mesh_calibrate|
	default(["bed_mesh_calibrate"],True))[-1] %}
	
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set probe_mesh_padding = km.probe_mesh_padding %}
	{% set probe_min_count = km.probe_min_count %}
	{% set probe_count_scale = km.probe_count_scale %}
	{% set bed_mesh = printer.configfile.settings.bed_mesh %}
	
	
	{%if "mesh_radius" not in bed_mesh and
	"MESH_RADIUS" not in params %}
	{% set safe_min_x = bed_mesh.mesh_min[0] %}
	{% set safe_min_y = bed_mesh.mesh_min[1] %}
	{% set safe_max_x = bed_mesh.mesh_max[0] %}
	{% set safe_max_y = bed_mesh.mesh_max[1] %}
	
	
	{% if "MESH_MIN" in params %}
	{% set mesh_min_x = (params.MESH_MIN.split(",")[0]|float -
	probe_mesh_padding, safe_min_x)|max %}
	{% set mesh_min_y = (params.MESH_MIN.split(",")[1]|float -
	probe_mesh_padding, safe_min_y)|max %}
	{% else %}
	{% set mesh_min_x = safe_min_x %}
	{% set mesh_min_y = safe_min_y %}
	{% endif %}
	{% if "MESH_MAX" in params %}
	{% set mesh_max_x = (params.MESH_MAX.split(",")[0]|float +
	probe_mesh_padding, safe_max_x)|min %}
	{% set mesh_max_y = (params.MESH_MAX.split(",")[1]|float +
	probe_mesh_padding, safe_max_y)|min %}
	{% else %}
	{% set mesh_max_x = safe_max_x %}
	{% set mesh_max_y = safe_max_y %}
	{% endif %}
	
	{% set probe_count = bed_mesh.probe_count if not params.PROBE_COUNT else
	params.PROBE_COUNT.split(",")|map('int')|list %}
	
	{% if "PROBE_COUNT" not in params %}
	{% set max_x_probes = probe_count[0] %}
	{% set max_y_probes = probe_count[-1] %}
	
	{% set x_probes = (max_x_probes * (mesh_max_x - mesh_min_x) /
	(safe_max_x - safe_min_x) * probe_count_scale)
	| round(0) | int %}
	{% set x_probes = ((x_probes, probe_min_count)|max, max_x_probes)|min %}
	
	{% set y_probes = (max_y_probes * (mesh_max_y - mesh_min_y ) /
	(safe_max_y - safe_min_y) * probe_count_scale )
	| round(0) | int %}
	{% set y_probes = ((y_probes, probe_min_count)|max, max_y_probes)|min %}
	
	{% if x_probes > 6 and y_probes < 4 %}
	{% set y_probes = 4 %}
	{% elif y_probes > 6 and x_probes < 4 %}
	{% set x_probes = 4 %}
	{% endif %}
	{% set probe_count = [x_probes,y_probes] %}
	{% elif probe_count|length == 1 %}
	{% set dummy = probe_count.append(probe_count[0]) %}
	{% endif %}
	
	
	
	
	
	
	
	{% if "relative_reference_index" in bed_mesh %}
	{% set row = (bed_mesh.relative_reference_index / bed_mesh.probe_count[0]
	)|int%}
	{% set rrf_x = (((safe_max_x - safe_min_x) /
	(bed_mesh.probe_count[0] - 1))|round(2, 'floor')) *
	(bed_mesh.relative_reference_index %
	bed_mesh.probe_count[-1]) %}
	{% if row % 2 %}
	{% set rrf_x = safe_max_x - rrf_x %}
	{% else %}
	{% set rrf_x = safe_min_x + rrf_x %}
	{% endif %}
	{% set rrf_y = (((safe_max_y - safe_min_y) /
	(bed_mesh.probe_count[-1] - 1))|round(2, 'floor')) *
	row + safe_min_x %}
	{% set x_dist = (mesh_max_x - mesh_min_x) / (probe_count[0] - 1) %}
	{% set y_dist = (mesh_max_y - mesh_min_y) / (probe_count[1] - 1) %}
	{% set rrf = {'x':0, 'y':0, 'dist':safe_max_x**2+safe_max_y**2,'pos':0} %}
	{% for row in range(probe_count[1])%}
	{% for col in range(probe_count[0])%}
	{% if row % 2 %}
	{% set x = mesh_max_x - col * x_dist %}
	{% else %}
	{% set x = mesh_min_x + col * x_dist %}
	{% endif %}
	{% set y = mesh_min_y + row * y_dist %}
	{% set dist = ((x - rrf_x)**2 + (y - rrf_y)**2)**0.5 %}
	{% if dist < rrf.dist %}
	{% set dummy = rrf.__setitem__("dist", dist) %}
	{% set dummy = rrf.__setitem__("x", x) %}
	{% set dummy = rrf.__setitem__("y", y) %}
	{% set dummy = rrf.__setitem__("pos", row * probe_count[1] + col) %}
	{% endif %}
	{% endfor %}
	{% endfor %}
	{% if rrf.x != rrf_x or rrf.y != rrf_y %}
	{action_respond_info("relative_reference_index remapped to"
	" %d (%.2f,%.2f) from %d (%.2f,%.2f)" %
	(rrf.pos, rrf.x, rrf.y,
	bed_mesh.relative_reference_index, rrf_x, rrf_y))}
	{% endif %}
	{% set dummy = params.__setitem__("RELATIVE_REFERENCE_INDEX", rrf.pos) %}
	{% endif %}
	
	{% set dummy = params.__setitem__("MESH_MIN", mesh_min_x~","~mesh_min_y) %}
	{% set dummy = params.__setitem__("MESH_MAX", mesh_max_x~","~mesh_max_y) %}
	{% set dummy = params.__setitem__("PROBE_COUNT", probe_count|join(',')) %}
	
	{% if probe_count[0] > 6 or probe_count[1]|default(0) > 6 %}
	{% set dummy = params.__setitem__("ALGORITHM", "bicubic") %}
	{% endif %}
	
	{% if "MESH_MIN" in params or "MESH_MAX" in params %}
	BED_MESH_CHECK {rawparams}
	{% endif %}
	{% else %}
	
	{% set dummy = params.__delitem__("MESH_MIN") %}
	{% set dummy = params.__delitem__("MESH_MAX") %}
	{% endif %}
	
	{% if "MESH_MIN" in params or "MESH_MAX" in params %}
	BED_MESH_CHECK ABORT=1{%for k in params%}{' '~k~'="'~params[k]~'"'}{%
	endfor%}
	{% endif %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=meshing
	{calibrate_cmd}{%for k in params%}{' '~k~'="'~params[k]~'"'}{%endfor%}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro bed_mesh_check]
description = Warns if bed_mesh config may generate an invalid mesh.
	Usage: BED_MESH_CHECK [MESH_MIN=<x,y>] [MESH_MAX=<x,y>] [ABORT=<0|1>]
gcode = 
	{% if printer.bed_mesh is defined %}
	{% set action = action_respond_info if params.ABORT|default(0)|int == 0 else
	action_raise_error %}
	{% set settings = printer.configfile.settings %}
	{% set x_min = settings.stepper_x.position_min %}
	{% set y_min = settings.stepper_y.position_min %}
	{% set x_max = settings.stepper_x.position_max %}
	{% set y_max = settings.stepper_y.position_max %}
	
	{% set label = "[bed_mesh] config" %}
	{% if "MESH_MIN" in params %}
	{% set label = "BED_MESH_CALIBRATE params" %}
	{% set mesh_min_x = params.MESH_MIN.split(",")[0]|float %}
	{% set mesh_min_y = params.MESH_MIN.split(",")[1]|float %}
	{% else %}
	{% set mesh_min_x = settings.bed_mesh.mesh_min[0] %}
	{% set mesh_min_y = settings.bed_mesh.mesh_min[1] %}
	{% endif %}
	{% if "MESH_MAX" in params %}
	{% set label = "BED_MESH_CALIBRATE params" %}
	{% set mesh_max_x = params.MESH_MAX.split(",")[0]|float %}
	{% set mesh_max_y = params.MESH_MAX.split(",")[1]|float %}
	{% else %}
	{% set mesh_max_x = settings.bed_mesh.mesh_max[0] %}
	{% set mesh_max_y = settings.bed_mesh.mesh_max[1] %}
	{% endif %}
	
	{% if "bltouch" in settings %}
	{% set x_offset = settings.bltouch.x_offset %}
	{% set y_offset = settings.bltouch.y_offset %}
	{% set probe = "bltouch" %}
	{% elif "probe" in settings %}
	{% set x_offset = settings.probe.x_offset %}
	{% set y_offset = settings.probe.y_offset %}
	{% set probe = "probe" %}
	{% else %}
	{% set x_offset = 0.0 %}
	{% set y_offset = 0.0 %}
	{% endif %}
	
	{% set output = [] %}
	{% set warn =
	"* mesh_%s (%f, %f) adjusted by " ~ probe ~
	".%s_offset (%f) can move out of range for "
	"stepper_%s.position_%s (%f)." %}
	{% if x_offset > 0 and (mesh_min_x - x_offset) < x_min %}
	{% set dummy = output.append(warn % ('min', mesh_min_x, mesh_min_y,
	'x', x_offset, 'x', 'min', x_min)) %}
	{% elif x_offset < 0 and (mesh_max_x - x_offset) > x_max %}
	{% set dummy = output.append(warn % ('max', mesh_max_x, mesh_max_y,
	'x', x_offset, 'x', 'max', x_max)) %}
	{% endif %}
	{% if y_offset > 0 and (mesh_min_y - y_offset) < y_min %}
	{% set dummy = output.append(warn % ('min', mesh_min_x, mesh_min_y,
	'y', y_offset, 'y', 'min', y_min)) %}
	{% elif y_offset < 0 and (mesh_max_y - y_offset) > y_max %}
	{% set dummy = output.append(warn % ('max', mesh_max_x, mesh_max_y,
	'y', y_offset, 'y', 'max', y_max)) %}
	{% endif %}
	
	{% if output %}
	{ action(
	"Warning: The following issue(s) were detected in your " ~ label ~
	":\n" ~ output|join("\n")) }
	{% endif %}
	{% endif %}

[gcode_macro _apply_bed_surface_offset]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% if surfaces.active %}
	SET_SURFACE_ACTIVE SURFACE={surfaces.active}
	{% endif %}

[gcode_macro _init_surfaces]
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% if "bed_surfaces" in printer.save_variables.variables %}
	{% set old_surfaces = printer.save_variables.variables.bed_surfaces %}
	{% else %}
	{% set old_surfaces = { 'active' : '', 'available' : {} } %}
	{% endif %}
	{% set settings = printer.configfile.settings %}
	{% set new_probe_z = (settings.probe | default(settings.bltouch) |
	default(settings.smart_effector) | default({})
	).z_offset|default(0.0)|float %}
	{% set new_endstop_z = (settings.stepper_z | default({})).position_endstop |
	default(0.0)|float %}
	{% if 'endstop_z' not in old_surfaces %}
	{% set dummy = old_surfaces.__setitem__('endstop_z', new_endstop_z) %}
	{% endif %}
	{% if 'probe_z' not in old_surfaces %}
	{% set dummy = old_surfaces.__setitem__('probe_z', new_probe_z) %}
	{% endif %}
	{% set surfaces = { 'active' : '', 'available' : {},
	'endstop_z' : old_surfaces.endstop_z,
	'probe_z' : old_surfaces.probe_z } %}
	{% for s in km.bed_surfaces %}
	{% set s = s.split()|join(' ')|lower %}
	{% if s|length > km.bed_surface_max_name_length or
	s|list|select("in", " \r\n\"\'")|list %}
	{action_raise_error('Invalid surface name "%s". Name must be %d or fewer '
	'characters and must not include space or quotation characters'
	| format(s, km.bed_surface_max_name_length))}
	{% endif %}
	{% if s in old_surfaces.available %}
	{% set dummy = surfaces.available.__setitem__(s,
	old_surfaces.available[s]) %}
	{% else %}
	{% set dummy = surfaces.available.__setitem__(s, {'offset' : 0.0}) %}
	{% endif %}
	{% endfor %}
	{% if old_surfaces.active in surfaces.available %}
	{% set dummy = surfaces.__setitem__('active', old_surfaces.active) %}
	{% elif km.bed_surfaces %}
	{% set dummy = surfaces.__setitem__('active', km.bed_surfaces[0]|lower) %}
	{% endif %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	_APPLY_BED_SURFACE_OFFSET
	{% if new_probe_z != surfaces.probe_z or
	new_endstop_z != surfaces.endstop_z %}
	{ action_respond_info(
	'Z probe offset or endstop position changed. Run ADJUST_SURFACE_OFFSETS '
	'to adjust the offset for all saved surfaces by the change differential, '
	'or run ADJUST_SURFACE_OFFSETS IGNORE=1 to hide this message without '
	'making changes.') }
	{% endif %}

[gcode_macro adjust_surface_offsets]
description = Adjusts surface offsets to account for changes in the Z endstop
	position or probe Z offset.
	Usage: ADJUST_SURFACE_OFFSETS [IGNORE]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% set settings = printer.configfile.settings %}
	{% set new_probe_z = (settings.probe | default(settings.bltouch) |
	default(settings.smart_effector) | default({})
	).z_offset|default(0.0)|float %}
	{% set new_endstop_z = (settings.stepper_z | default({})).position_endstop |
	default(0.0)|float %}
	{% set diff = (surfaces.probe_z - new_probe_z +
	surfaces.endstop_z - new_endstop_z)|round(6) %}
	{% if not params.IGNORE|default(0)|int %}
	{% for s in surfaces.available %}
	{% set offset = (surfaces.available[s].offset - diff)|round(6) %}
	{% set dummy = surfaces.available.__setitem__(s, {'offset' : offset}) %}
	{% endfor %}
	{ action_respond_info("All bed surfaces now adjusted by %1.4f"|
	format(diff))}
	{% elif diff != 0 %}
	{ action_respond_info("Status cleared without adjustment") }
	{% endif %}
	{% set dummy = surfaces.__setitem__('endstop_z', new_endstop_z| round(6)) %}
	{% set dummy = surfaces.__setitem__('probe_z', new_probe_z|round(6)) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"

[gcode_macro set_surface_offset]
description = Sets the offset for a surface and moves the toolhead (if homed).
	Usage: SET_SURFACE_OFFSET [OFFSET=<offset>] [SURFACE=<surface>]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}
	{% if SURFACE not in surfaces.available %}
	{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }
	{% endif %}
	{% set active = surfaces.available[SURFACE] %}
	
	{% set OFFSET = params.OFFSET|default(active.offset)|float %}
	{% if OFFSET != active.offset %}
	{% set dummy = surfaces.available[SURFACE].__setitem__("offset", OFFSET) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	{% if SURFACE == surfaces.active %}
	_km_set_gcode_offset_base Z="{OFFSET}" MOVE={
	1 if printer.toolhead.homed_axes == 'xyz' else 0}
	{% endif %}
	{% endif %}
	{ action_respond_info("Bed surface: %s Offset: %.3f"
	| format(SURFACE, OFFSET)) }
	
	{% set dummy = None if True else "
	{% set dummy = params.SURFACE|default(active surface) %}
	{% set dummy = params.OFFSET|default(none)|float %}
	" %}

[gcode_macro set_surface_active]
description = Sets the active bed surface and moves the toolhead (if homed). If
	no SURFACE argument is present the available surfaces are listed and the
	active one is preceded by a "*".
	Usage: SET_SURFACE_ACTIVE [SURFACE=<surface>]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% if "SURFACE" in params %}
	{% set SURFACE = params.SURFACE|lower %}
	{% if SURFACE not in surfaces.available %}
	{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }
	{% endif %}
	{% if SURFACE != surfaces.active %}
	{% set dummy = surfaces.__setitem__("active", SURFACE) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	{% endif %}
	{% if surfaces.available[SURFACE].offset !=
	printer.gcode_move.homing_origin.z %}
	_km_set_gcode_offset_base Z="{surfaces.available[SURFACE].offset
	}" MOVE={1 if printer.toolhead.homed_axes == 'xyz' else 0}
	{% endif %}
	{action_respond_info("Active bed surface: %s; offset: %.3f"
	| format(SURFACE, surfaces.available[SURFACE].offset))}
	{% else %}
	{% set output = [] %}
	{% for s in surfaces.available|list|sort %}
	{% set dummy = output.append("%s&nbsp;%s - offset: %.3f"
	| format("*" if s == surfaces.active else "&nbsp;",
	s, surfaces.available[s].offset)) %}
	{% endfor %}
	{action_respond_info(output|join('\n'))}
	{% endif %}
	
	{% set dummy = None if True else "
	{% set dummy = params.SURFACE|default(none) %}
	" %}

[gcode_macro set_gcode_offset]
description = Wraps SET_GCODE_OFFSET to update the current bed sheet offset.
	Usage: SET_GCODE_OFFSET [X=<pos>|X_ADJUST=<adjust>]
	[Y=<pos>|Y_ADJUST=<adjust>]
	[Z=<pos>|Z_ADJUST=<adjust>]
	[MOVE=1 [MOVE_SPEED=<speed>]]
rename_existing = _KM_SET_GCODE_OFFSET_BASE
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% if surfaces.active and
	not printer["gcode_macro _km_save_state"].is_ephemeral %}
	{% set Z = params.Z|default(0.0)|float|round(6) %}
	{% set Z_ADJUST = params.Z_ADJUST|default(0.0)|float %}
	{% if 'Z' in params and
	Z != surfaces.available[surfaces.active].offset %}
	{% set dummy = surfaces.available[surfaces.active].__setitem__("offset",
	Z) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	{% elif Z_ADJUST != 0.0 %}
	{% set dummy = surfaces.available[surfaces.active].__setitem__(
	"offset", (Z_ADJUST + printer.gcode_move.homing_origin.z)|round(6)) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	{% endif %}
	{% endif %}
	_km_set_gcode_offset_base{% for k in params%}{' '~k~'="'~params[k]~'"'
	}{% endfor %}

[gcode_macro make_surface_mesh]
description = Generates and saves a mesh to automatically load in PRINT_START.
	Usage: MAKE_SURFACE_MESH [SURFACE=<surface>] [BED=<probing temperature>]
	[EXTRUDER=<probing temperature>]
	[MESH_MULTIPLIER=<integer multiple of mesh density>]
	[bed_mesh_calibrate parameters]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}
	{% if SURFACE not in surfaces.available %}
	{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }
	{% endif %}
	{% set dummy = params.__setitem__('PROFILE', SURFACE) %}
	{% set BED = params.BED|default(70) | int %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set EXTRUDER = params.EXTRUDER|default(km.start_extruder_probing_temp) |
	int %}
	{% set MESH_MULTIPLIER = (params.MESH_MULTIPLIER|default(2)|int, 1)|max %}
	
	M104 S{EXTRUDER}
	M140 S{BED}
	G28
	
	
	{% if surfaces.available[SURFACE].offset !=
	printer.gcode_move.homing_origin.z %}
	_km_set_gcode_offset_base Z="{surfaces.available[SURFACE].offset
	}" MOVE=1
	{% endif %}
	
	
	{% if BED > 0 %}
	{action_respond_info("Stabilizing bed at %iC" | format(BED,))}
	_KM_PARK_IF_NEEDED HEATER=heater_bed RANGE=0.5
	{% if BED < (printer.heater_bed.temperature - 0.2) %}
	M190 R{BED}
	G4 P{((km.start_bed_heat_delay * 10, 30000)|min,
	km.start_bed_heat_delay)|max}
	{% else %}
	G4 P{km.start_bed_heat_delay}
	{% endif %}
	M190 R{BED}
	{% endif %}
	
	{% if EXTRUDER > 0 %}
	_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=2
	M109 R{km.start_extruder_probing_temp}
	{% endif %}
	
	{% if km.start_home_z_at_temp and not bed_at_target %}
	G28 Z
	{% endif %}
	
	
	
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count
	if not params.PROBE_COUNT else
	params.PROBE_COUNT.split(",")|map('int')|list %}
	{% set dummy = params.__setitem__('PROBE_COUNT',(
	MESH_MULTIPLIER * (probe_count[0] - 1) + 1,
	MESH_MULTIPLIER * (probe_count[-1] - 1) + 1,)|join(',')) %}
	
	BED_MESH_CLEAR
	BED_MESH_CALIBRATE_FAST {%
	for k in params|reject('in',['BED','SURFACE'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor %}
	SAVE_CONFIG
	
	
	{% set dummy = None if True else "
	{% set dummy = params.MESH_MULTIPLIER|default(2) %}
	{% set dummy = params.SURFACE|default(active surface) %}
	" %}

[gcode_macro load_surface_mesh]
description = Attempts to load a mesh associated with the specified surface.
	Usage: LOAD_SURFACE_MESH [SURFACE=<surface>]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}
	{% if SURFACE != surfaces.active %}
	SET_SURFACE_ACTIVE SURFACE={SURFACE}
	{% endif %}
	
	{% if SURFACE in printer.bed_mesh.profiles %}
	{% set mesh = printer.bed_mesh.profiles[SURFACE].mesh_params %}
	{% set default = printer.configfile.settings.bed_mesh %}
	
	{% if mesh.min_x <= (default.mesh_min[0] + 0.5) and
	mesh.min_y <= (default.mesh_min[1] + 0.5) and
	mesh.max_x >= (default.mesh_max[0] - 0.5) and
	mesh.max_y >= (default.mesh_max[1] - 0.5) and
	mesh.x_count >= default.probe_count[0] and
	mesh.y_count >= default.probe_count[-1] %}
	
	BED_MESH_PROFILE LOAD={SURFACE}
	{action_respond_info("Loaded mesh: %s" | format(SURFACE,))}
	{% endif %}
	{% endif %}

[gcode_macro m300]
description = Emits and audible beep.
	Usage: M300 [P<duration>] [S<frequency>]
gcode = 
	{% set settings = printer.configfile.settings %}
	{% if "output_pin beeper" in printer %}
	{% set P = (params.P|default(100)|int, 0)|max %}
	{% set S = (params.S|default(1000)|int, 1)|max %}
	SET_PIN PIN=beeper VALUE={% if settings["output_pin beeper"].pwm %}{
	settings["output_pin beeper"].scale|default(1.0) * 0.5
	} CYCLE_TIME={ 1.0 / S }{% else %}1{% endif %}
	G4 P{P}
	SET_PIN PIN=beeper VALUE=0
	{% else %}
	{action_respond_info(
	"M300 is disabled. To enable create an [output_pin beeper] config.")}
	{% endif %}

[gcode_macro set_draw_params]
description = Sets the default parameters used by DRAW_LINE_TO.
	Usage: SET_DRAW_PARAMS [HEIGHT=<mm>] [WIDTH=<mm>] [FEEDRATE=<mm/m>]
variable_height = 0.2
variable_width = 0.0
variable_feedrate = 1200
gcode = 
	{% set dparams = printer["gcode_macro set_draw_params"] %}
	{% for k in params %}
	{% set kl = k|lower %}
	{% if kl in dparams %}
	{% if dparams[kl] is float %}
	{% set v = params[k]|float %}
	{% elif dparams[kl] is integer %}
	{% set v = params[k]|int %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=set_draw_params VARIABLE={kl} VALUE="{v}"
	{% endif %}
	{% endfor %}

[gcode_macro draw_line_to]
description = Extrudes a line of filament at the specified height and width from
	the current coordinate to the supplied XY coordinate. (The height is used only
	to calculate the extrusion volume.)
	Usage: DRAW_LINE_TO [X=<pos>] [Y=<pos>] [HEIGHT=<mm>] [WIDTH=<mm>]
	[FEEDRATE=<mm/m>]
gcode = 
	{% set dparams = printer["gcode_macro set_draw_params"] %}
	{% set position = printer.gcode_move.gcode_position %}
	{% set X = params.X|default(position.x)|float %}
	{% set Y = params.Y|default(position.y)|float %}
	{% set HEIGHT = params.HEIGHT|default(dparams.height)|float %}
	{% set WIDTH = params.WIDTH|default(dparams.width)|float %}
	{% set FEEDRATE = params.FEEDRATE|default(dparams.feedrate)|int %}
	
	{% set distance = ((X - position.x) ** 2 + (Y - position.y) ** 2) ** 0.5 %}
	
	{% set filament_area = 3.14159 *
	(printer.configfile.settings[
	printer.toolhead.extruder].filament_diameter ** 2) / 4 %}
	{% set E = distance * ((WIDTH * HEIGHT) / filament_area) %}
	
	
	_KM_SAVE_GCODE_STATE NAME=_KM_PURGE
	G90
	G92 E0.0
	G1 X{"%.3f" % X} Y{"%.3f" % Y} E{"%.5f" % E} F{FEEDRATE}
	_KM_RESTORE_GCODE_STATE NAME=_KM_PURGE MOVE=0

[gcode_macro draw_purge_line]
description = Purges the specified length of filament as a line (or rows of
	lines) in front of the supplied print area. If no print area is specified the
	purge lines are drawn at the front edge of the maximum printable area. If no
	printable area is set it defaults to the XY axis limits.
	Usage: DRAW_PURGE_LINE [PRINT_MIN=<X,Y>] [PRINT_MAX=<X,Y>] [HEIGHT=<mm>]
	[WIDTH=<mm>] [LENGTH=<mm>]
gcode = 
	
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set origin = printer.gcode_move.homing_origin %}
	{% set dummy = km.__setitem__('print_min', (km.print_min[0] - origin.x,
	km.print_min[1] - origin.y)) %}
	{% set dummy = km.__setitem__('print_max', (km.print_max[0] - origin.x,
	km.print_max[1] - origin.y)) %}
	
	{% if "PRINT_MIN" in params %}
	{% set PRINT_MIN = (
	(params.PRINT_MIN.split(",")[0]|float, km.print_min[0])|max,
	(params.PRINT_MIN.split(",")[1]|float, km.print_min[1])|max
	) %}
	{% else %}
	{% set PRINT_MIN = km.print_min %}
	{% endif %}
	{% if "PRINT_MAX" in params %}
	{% set PRINT_MAX = (
	(params.PRINT_MAX.split(",")[0]|float, km.print_max[0])|min,
	(params.PRINT_MAX.split(",")[1]|float, km.print_max[1])|min
	) %}
	{% else %}
	{% set PRINT_MAX = km.print_max %}
	{% endif %}
	{% set extruder = printer.toolhead.extruder|string %}
	{% set HEIGHT = params.HEIGHT|default(
	printer.configfile.settings[extruder].nozzle_diameter * 0.625)|float %}
	{% set WIDTH = params.WIDTH|default(
	printer.configfile.settings[extruder].nozzle_diameter * 1.25)|float %}
	{% set LENGTH = params.LENGTH|default(km.start_purge_length)|float %}
	
	{% set dparams = printer["gcode_macro set_draw_params"] %}
	{% set filament_area = 3.14159 *
	(printer.configfile.settings[extruder].filament_diameter ** 2) / 4 %}
	{% set purge_length = (LENGTH * filament_area) / (WIDTH * HEIGHT) %}
	{% set printable_length = PRINT_MAX[0] - PRINT_MIN[0] %}
	{% set purge_rows = (purge_length / printable_length)|round(0,'ceil')|int %}
	{% set printable_inset = (printable_length - purge_length / purge_rows) / 2 %}
	{% set PRINT_MIN = (PRINT_MIN[0] + printable_inset, PRINT_MIN[1]) %}
	{% set PRINT_MAX = (PRINT_MAX[0] - printable_inset, PRINT_MAX[1]) %}
	
	{% set y_start = (km.print_min[1], PRINT_MIN[1] - km.start_purge_clearance -
	(purge_rows + 0.5) * WIDTH )|max %}
	G90
	
	G1 X{"%.3f" % (PRINT_MIN[0] - 30, km.print_min[0])|max} Y{
	"%.3f" % (y_start - 10, km.print_min[1])|max} F{km.travel_speed_xy}
	
	G1 X{"%.3f" % (PRINT_MIN[0] - 2, km.print_min[0])|max} Y{"%.3f" % y_start} Z{
	"%.4f" % HEIGHT} F{km.travel_speed_xy}
	
	G92 E0.0
	G1 E{"%.3f" % km.start_purge_prime_length} F{km.load_priming_speed}
	G92 E0.0
	
	G1 X{"%.3f" % PRINT_MIN[0]} F{km.travel_speed_xy}
	{% for n in range(purge_rows - 1) %}
	{% set x_pos = PRINT_MIN[0] if n % 2 else PRINT_MAX[0] %}
	DRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{
	WIDTH * n + y_start}"
	DRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{
	WIDTH * (n + 1) + y_start}"
	{% endfor %}
	{% set x_pos = PRINT_MAX[0] if purge_rows % 2 else PRINT_MIN[0] %}
	DRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{
	WIDTH * (purge_rows - 1) + y_start}"
	G92 E0.0

[gcode_macro _check_fan_params]
gcode = 
	{% set MAXIMUM = params.MAXIMUM|default(
	printer["gcode_macro set_fan_scaling"].maximum)|int %}
	{% set MINIMUM = params.MINIMUM|default(
	printer["gcode_macro set_fan_scaling"].minimum)|int %}
	
	{% if params.SCALE and params.SCALE|float <= 0 %}
	{ action_raise_error("SCALE must be a positive value.") }
	{% elif MINIMUM < 0 or MINIMUM > 255 %}
	{ action_raise_error("MINIMUM must be between 0 and 255.") }
	{% elif MAXIMUM < 0 or MAXIMUM > 255 %}
	{ action_raise_error("MAXIMUM must be between 0 and 255.") }
	{% elif params.SPEED and (params.SPEED|int < 0 or params.SPEED|int > 255) %}
	{ action_raise_error("SPEED must be between 0 and 255.") }
	{% elif params.BOOST and (params.BOOST|int < 0 or params.BOOST|int > 255) %}
	{ action_raise_error("BOOST must be between 0 and 255.") }
	{% elif MINIMUM > MAXIMUM %}
	{ action_raise_error("MINIMUM must be less than or equal to MAXIMUM.") }
	{% endif %}

[gcode_macro set_fan_scaling]
description = Sets fan scaling factors applied to M106 command. If a speed is
	provided it will be adjusted according to the scaling parameters.
	Usage: SET_FAN_SCALING [SCALE=<scale>] [BOOST=<boost>] [MAXIMUM=<max>]
	[MINIMUM=<min>] [SPEED=<speed>]
variable_scale = 1.0
variable_boost = 0
variable_minimum = 0
variable_maximum = 255
variable_real_speed = 0
gcode = 
	_CHECK_FAN_PARAMS{% for k in params %}{' '~k~'='~params[k]}{% endfor %}
	{% set SCALE = params.SCALE|default(scale)|float %}
	{% set BOOST = params.BOOST|default(boost)|float %}
	{% set MAXIMUM = params.MAXIMUM|default(maximum)|int %}
	{% set MINIMUM = params.MINIMUM|default(minimum)|int %}
	{% set SPEED = params.SPEED|default(real_speed)|int %}
	
	{% if SCALE != 1.0 or BOOST != 0 or MAXIMUM != 255 or MINIMUM != 0 %}
	{action_respond_info("Fan: Scale: %.2f Minimum:%i Maximum: %i Speed: %i"|
	format(SCALE, MINIMUM, MAXIMUM, SPEED))}
	{% endif %}
	
	
	{% if params|length > 0 %}
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=scale VALUE="{SCALE}"
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=boost VALUE="{BOOST}"
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=minimum VALUE="{MINIMUM}"
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=maximum VALUE="{MAXIMUM}"
	
	M106 S{SPEED}
	{% endif %}
	
	{% set dummy = None if True else "
	{% set dummy = params.SCALE|default(1.0)|float %}
	{% set dummy = params.BUMP|default(0)|int %}
	{% set dummy = params.MAXIMUM|default(255)|int %}
	{% set dummy = params.MINIMUM|default(0)|int %}
	{% set dummy = params.SPEED|default(current speed)|int %}
	" %}

[gcode_macro reset_fan_scaling]
description = Clears all fan scaling factors.
	Usage: RESET_FAN_SCALING
gcode = 
	SET_FAN_SCALING SCALE=1.0 BOOST=0 MAXIMUM=255 MINIMUM=0

[gcode_macro m106]
description = Wraps M106 to implement scaling overrides.
rename_existing = M106.6245197
gcode = 
	{% set S = params.S|default(255)|int %}
	{% set scale = printer["gcode_macro set_fan_scaling"] %}
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=real_speed VALUE="{S}"
	M106.6245197 S{((((S + scale.boost) * scale.scale) | round | int,
	scale.minimum) | max, scale.maximum) | min}

[gcode_macro _load_unload]
gcode = 
	{% set saved_extruder = printer.toolhead.extruder %}
	{% set EXTRUDER = params.EXTRUDER|default(saved_extruder)|lower %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% set BEEPS = params.BEEPS|default(8)|int if "output_pin beeper" in printer
	else 0 %}
	{% set default_minimum = km.load_min_temp if km.load_min_temp else
	(printer.configfile.settings[EXTRUDER].min_extrude_temp + 5) %}
	{% if 'MINIMUM' in params %}
	{% set MINIMUM = params.MINIMUM|int %}
	
	{% elif printer.pause_resume.is_paused and printer[EXTRUDER].target == 0 and
	printer["gcode_macro resume"].saved_extruder_temp %}
	{% set MINIMUM = printer["gcode_macro resume"].saved_extruder_temp %}
	
	{% elif printer[EXTRUDER].target > default_minimum %}
	{% set MINIMUM = printer[EXTRUDER].target %}
	{% else %}
	{% set MINIMUM = default_minimum %}
	{% endif %}
	{% if MINIMUM < printer.configfile.settings[EXTRUDER].min_extrude_temp %}
	{ action_raise_error("Extrude below minimum temp.") }
	{% elif printer.pause_resume.is_paused %}
	
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"
	{% endif %}
	{% set SPEED = params.SPEED|default(km.load_speed)|int %}
	{% set priming_length = km.load_priming_length %}
	{% set LENGTH = params.LENGTH|default(km.load_length)|float - priming_length%}
	{% if LENGTH < 0 %}
	{% set priming_length = (priming_length + LENGTH, 0)|max %}
	{% set LENGTH = 0 %}
	{% endif %}
	SAVE_GCODE_STATE NAME=_KM_LOAD_UNLOAD
	{% if EXTRUDER != saved_extruder%}
	ACTIVATE_EXTRUDER EXTRUDER={EXTRUDER}
	{% endif %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	{% if not printer.extruder.can_extrude or
	printer[EXTRUDER].target < default_minimum %}
	{action_respond_info("Preheating %s to %d" | format(EXTRUDER, MINIMUM))}
	M109 S{MINIMUM}
	{% endif %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS={"filament_load"
	if params.LOAD|int else "filament_unload"}
	M83
	{% set priming_speed = (km.load_priming_speed, SPEED)|min %}
	{% if params.LOAD|int %}
	G0 E{LENGTH} F{SPEED}
	G0 E{priming_length} F{priming_speed}
	G0 E{'%.4f' % -printer["gcode_macro resume"].saved_e} F{km.load_speed}
	{% else %}
	{% set pre_prime_distance = 5.0 %}
	{% set shaping_moves = 5 %}
	{% set shaping_distance = (shaping_moves * (1 + shaping_moves)/20) %}
	
	G0 E{pre_prime_distance} F{SPEED}
	G4 P500
	G0 E{'%.4f' % -(priming_length - shaping_distance)} F{SPEED}
	
	
	{% for i in range(1, shaping_moves + 1) %}
	G0 E2 F{priming_speed}
	G0 E-{2 + (0.1 * i)} F{priming_speed}
	{% endfor %}
	
	G0 E{'%.4f' % -(LENGTH + pre_prime_distance)} F{SPEED}
	{% endif %}
	RESTORE_GCODE_STATE NAME=_KM_LOAD_UNLOAD
	
	
	{% for i in range(BEEPS) %}
	M300 P100
	G4 P200
	{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro LOAD_FILAMENT]
description = Loads filament to the extruder.
	Usage: LOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]
	[EXTRUDER=<extruder>] [MINIMUM=<temperature>]
	[BEEPS=<beep count on completion>]
gcode = 
	_LOAD_UNLOAD LOAD=1{% for k in params
	%}{' '~k~'="'~params[k]~'"'}{% endfor %}
	
	
	{% set dummy = None if True else "
	M109
	{% set dummy = params.LENGTH|default(variable_load_length)|float %}
	{% set dummy = params.SPEED|default(variable_load_speed)|float %}
	{% set dummy = params.EXTRUDER|default(current extruder) %}
	{% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}
	{% set dummy = params.BEEPS|default(10)|int %}
	" %}

[gcode_macro UNLOAD_FILAMENT]
description = Unloads filament from the extruder.
	Usage: UNLOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]
	[EXTRUDER=<extruder>] [MINIMUM=<temperature>]
	[BEEPS=<beep count on completion>]
gcode = 
	_LOAD_UNLOAD LOAD=0{% for k in params
	%}{' '~k~'="'~params[k]~'"'}{% endfor %}
	
	
	{% set dummy = None if True else "
	M109
	{% set dummy = params.LENGTH|default(variable_load_length)|float %}
	{% set dummy = params.SPEED|default(variable_load_speed)|float %}
	{% set dummy = params.EXTRUDER|default(default extruder) %}
	{% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}
	{% set dummy = params.BEEPS|default(10)|int %}
	" %}

[gcode_macro _pause_inner_m700]
gcode = 
	{% set extruder = "extruder" ~ params.T|replace('0', '')
	if "T" in params else printer.toolhead.extruder %}
	{% if extruder != printer.toolhead.extruder%}
	ACTIVATE_EXTRUDER EXTRUDER={extruder}
	{% endif %}
	
	{% set z_param = (' Z="%f"' % params.Z) if 'Z' in params else "" %}
	
	{% if printer.idle_timeout.state|string == "Printing" %}
	PAUSE B="{0}" P=2{z_param}
	{% elif not printer.pause_resume.is_paused%}
	PARK B="{0}" P=2{z_param}
	{% endif %}

[gcode_macro m701]
description = Pauses/parks the toolhead then loads filament to the extruder.
	Usage: M701 [L<distance>] [Z<pos>] [T<extruder>]
gcode = 
	{% if 'U' in params %}
	{% if not 'L' in params %}
	RESPOND TYPE=error MSG="Argument \"U\" substituted for missing \"L\"."
	{% set dummy = params.__setitem__("L", params.U) %}
	{% else %}
	RESPOND TYPE=error MSG="Invalid argument \"U\" ignored."
	{% endif %}
	{% endif %}
	
	_PAUSE_INNER_M700 {% for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	LOAD_FILAMENT BEEPS="{10}" LENGTH={
	params.L|default(printer["gcode_macro _km_globals"].load_length)|float}

[gcode_macro m702]
description = Pauses/parks the toolhead then unloads filament from the extruder.
	Usage: M702 [U<distance>] [Z<pos>] [T<extruder>]
gcode = 
	{% if 'L' in params %}
	{% if not 'U' in params %}
	RESPOND TYPE=error MSG="Argument \"L\" substituted for missing \"U\"."
	{% set dummy = params.__setitem__("U", params.L) %}
	{% else %}
	RESPOND TYPE=error MSG="Invalid argument \"L\" ignored."
	{% endif %}
	{% endif %}
	
	_PAUSE_INNER_M700 {% for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	UNLOAD_FILAMENT BEEPS="{10}" LENGTH={
	params.U|default(printer["gcode_macro _km_globals"].load_length)|float}

[gcode_macro _km_globals]
variable_bed_surface_max_name_length = 10
variable_bed_surfaces = ['default']
variable_load_length = 90.0
variable_load_min_temp = 0
variable_load_priming_length = 20.0
variable_load_priming_speed = 200
variable_load_speed = 1200
variable_menu_show_octoprint = True
variable_menu_show_sdcard = True
variable_menu_temperature = [
	{'name' : 'PLA',  'extruder' : 200, 'bed' : 60},
	{'name' : 'PETG', 'extruder' : 230, 'bed' : 85},
	{'name' : 'ABS',  'extruder' : 245, 'bed' : 110}]
variable_park_x = 0.0
variable_park_y = 0.0
variable_park_z = 20.0
variable_print_min = ()
variable_print_max = ()
variable_pressure_advance_scale = -1.0
variable_probe_mesh_padding = 5.0
variable_probe_min_count = 3
variable_probe_count_scale = 1.0
variable_start_bed_heat_delay = 2000
variable_start_bed_heat_overshoot = 2.0
variable_start_clear_adjustments_at_end = True
variable_start_end_park_y = 0.0
variable_start_extruder_preheat_scale = 0.5
variable_start_extruder_probing_temp = 0
variable_start_home_z_at_temp = True
variable_start_level_bed_at_temp = True
variable_start_purge_clearance = 2.0
variable_start_purge_length = 0.0
variable_start_purge_prime_length = 12.0
variable_start_quad_gantry_level_at_temp = True
variable_start_random_placement_max = 0
variable_start_random_placement_padding = 10.0
variable_start_try_saved_surface_mesh = False
variable_start_z_tilt_adjust_at_temp = True
variable_travel_speed_xy = 3000
variable_travel_speed_z = 600
description = Initializes our globals, including any _km_options overrides.
gcode = 
	
	
	
	
	
	
	
	
	{% set required_sections = {"heater_bed" : None,
	"extruder" : None,
	"gcode_macro _km_options" : None,
	"idle_timeout" : ("gcode", "_KM_IDLE_TIMEOUT"),
	"pause_resume" : None,
	"respond" : None,
	"save_variables" : None,
	"virtual_sdcard" :
	("on_error_gcode", "CANCEL_PRINT")
	} %}
	{% set warn_removed = {
	"start_extruder_set_target_before_level" :
	"The start_extruder_set_target_before_level option has been removed. "
	"Use the start_extruder_probing_temp option instead to set a fixed "
	"probing temperature.",
	"start_gcode_before_print" :
	"The start_gcode_before_print option has been removed. The same effect "
	"can now be achieved by inserting custom gcode before the "
	"_PRINT_START_PHASE_PURGE line in your slicer's start gcode, or by "
	"wrapping the _PRINT_START_PHASE_PURGE macro. See the Slicer "
	"Configuration section in the readme for more information.",
	"velocity_decel_scale" :
	"The velocity_decel_scale option has been removed. Klipper's input "
	"shaping provides a superior mechanism for improving print quality "
	"at higher speeds.",
	} %}
	{% set output = [] %}
	{% for s in required_sections %}
	{% set f = required_sections[s][0] if required_sections[s] else None %}
	{% set v = required_sections[s][1] if required_sections[s] else None %}
	{% if s not in printer.configfile.config %}
	{% set dummy = output.append("Missing [%s] section.\n" | format(s)) %}
	{% elif f and
	(v not in printer.configfile.config[s][f]|default("")|upper) %}
	{% set dummy = output.append("Missing %s in %s for [%s] section.\n"
	| format(v, f, s)) %}
	{% endif %}
	{% endfor %}
	{% if output %}
	{ action_emergency_stop((
	"required printer.cfg section(s) missing:\n"
	~ output | join("\n")) ~
	"See readme: https://github.com/jschuh/klipper-macros\x23klipper-setup")
	}
	{% endif %}
	
	
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_level_bed_at_temp VALUE="{
	1 if printer.bed_mesh is defined else 0}"
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_quad_gantry_level_at_temp VALUE="{
	1 if printer.quad_gantry_level is defined else 0}"
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_z_tilt_adjust_at_temp VALUE="{
	1 if printer.z_tilt is defined else 0}"
	{% set toolhead = printer.toolhead %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=print_min VALUE="{
	(toolhead.axis_minimum.x, toolhead.axis_minimum.y)}"
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=print_max VALUE="{
	(toolhead.axis_maximum.x, toolhead.axis_maximum.y)}"
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_end_park_y VALUE="{
	toolhead.axis_maximum.y}"
	{% set settings = printer.configfile.settings %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_home_z_at_temp VALUE="{
	1 if ("stepper_z" in settings and
	settings.stepper_z.endstop_pin.split()|join("")|lower ==
	"probe:z_virtual_endstop") else 0}"
	
	{% set options = printer["gcode_macro _km_options"] %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	
	{% if options.park_x|default("")|string|lower == "min" %}
	{% set dummy = options.__setitem__("park_x",
	printer.configfile.settings.stepper_x.position_min) %}
	{% elif options.park_x|default("")|string|lower == "max" %}
	{% set dummy = options.__setitem__("park_x",
	printer.configfile.settings.stepper_x.position_max) %}
	{% endif %}
	{% if options.park_y|default("")|string|lower == "min" %}
	{% set dummy = options.__setitem__("park_y",
	printer.configfile.settings.stepper_y.position_min) %}
	{% elif options.park_y|default("")|string|lower == "max" %}
	{% set dummy = options.__setitem__("park_y",
	printer.configfile.settings.stepper_y.position_max) %}
	{% endif %}
	{% if options.start_end_park_y|default("")|string|lower == "min" %}
	{% set dummy = options.__setitem__("start_end_park_y",
	printer.configfile.settings.stepper_y.position_min) %}
	{% elif options.start_end_park_y|default("")|string|lower == "max" %}
	{% set dummy = options.__setitem__("start_end_park_y",
	printer.configfile.settings.stepper_y.position_max) %}
	{% endif %}
	{% if options.park_z|default("")|string|lower == "min" %}
	{% set dummy = options.__setitem__("park_z",
	printer.configfile.settings.stepper_z.position_min) %}
	{% elif options.park_z|default("")|string|lower == "max" %}
	{% set dummy = options.__setitem__("park_z",
	printer.configfile.settings.stepper_z.position_max) %}
	{% endif %}
	
	
	{% for k in options %}
	{% if k not in km %}
	{% if k in warn_removed %}
	{action_respond_info(warn_removed[k])}
	{% else %}
	{% set dummy = output.append("%s is not valid for _KM_OPTIONS." |
	format(k)) %}
	{% endif %}
	{% elif km[k] is string %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k
	} VALUE="'{options[k]|replace('\\','\\\\')|replace('\'','\\\'')
	|replace('\"','\\\"')}'"
	{% elif km[k] is float %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k
	} VALUE="{options[k]|float}"
	{% elif km[k] is integer or km[k] is boolean %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k} VALUE="{options[k]|int}"
	{% elif km[k] is mapping %}
	{% if options[k] is not mapping %}
	{% set dummy = output.append("%s requires a mapping type." |
	format(k)) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k
	} VALUE="{options[k]|replace('\"','\\\"')}"
	{% elif km[k] is sequence %}
	{% if options[k] is not sequence %}
	{% set dummy = output.append("%s requires a sequence type." |
	format(k)) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k
	} VALUE="{options[k]|replace('\"','\\\"')}"
	{% else %}
	{% set dummy = output.append("%s is not a valid type for _KM_OPTIONS." |
	format(k)) %}
	{% endif %}
	{% endfor %}
	
	{% if "homing_override" in printer.configfile.config %}
	{% for l in printer.configfile.config.homing_override.gcode.split("\n") %}
	{% if " g28 " in (" " ~ l.split("\x23")[0].split(";")[0]|lower ~ " ") %}
	{% set dummy = output.append(
	"G28 in [homing_override] gcode. Replace with G28.6245197 to "
	"fix recursive macro call.\n"
	"See readme: https://github.com/jschuh/klipper-macros\x23g28") %}
	{% endif %}
	{% endfor %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=check_km_config VARIABLE=load_errors VALUE="{
	output|replace('\"','\\\"')}"
	M400

[delayed_gcode INIT_GLOBALS]
initial_duration = 1
gcode = 
	LIST_MACROS SILENT=1
	_KM_GLOBALS
	
	CHECK_KM_CONFIG
	_INIT_SURFACES
	BED_MESH_CHECK
	
	SET_DRAW_PARAMS WIDTH="{printer.configfile.settings.extruder.nozzle_diameter}"
	
	_KM_OPTIONS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready

[gcode_macro check_km_config]
variable_load_errors = []
description = Checks global variables and throws an error on any invalid values.
	Does nothing if the config has no errors.
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set toolhead = printer.toolhead %}
	{% set output = load_errors %}
	{% if km.park_x > toolhead.axis_maximum.x or
	km.park_x < toolhead.axis_minimum.x %}
	{% set dummy = output.append("park_x is invalid.") %}
	{% endif %}
	{% if km.park_y > toolhead.axis_maximum.y or
	km.park_y < toolhead.axis_minimum.y %}
	{% set dummy = output.append("park_y is invalid.") %}
	{% endif %}
	{% if km.park_z > toolhead.axis_maximum.z or
	km.park_z < toolhead.axis_minimum.z %}
	{% set dummy = output.append("park_z is invalid.") %}
	{% endif %}
	{% if km.print_max[0] > toolhead.axis_maximum.x or
	km.print_max[1] > toolhead.axis_maximum.y %}
	{% set dummy = output.append("print_max is invalid.") %}
	{% endif %}
	{% if km.print_min[0] < toolhead.axis_minimum.x or
	km.print_min[1] < toolhead.axis_minimum.y %}
	{% set dummy = output.append("print_min is invalid.") %}
	{% endif %}
	{% if km.start_extruder_preheat_scale > 1.0 or
	km.start_extruder_preheat_scale < 0.0 %}
	{% set dummy = output.append("extruder_preheat_scale is invalid.") %}
	{% endif %}
	{% if km.load_length >
	printer.configfile.settings["extruder"].max_extrude_only_distance %}
	{% set dummy = output.append(
	"load_length exceeds max_extrude_only_distance.") %}
	{% endif %}
	{% if km.load_length < km.load_priming_length %}
	{% set dummy = output.append(
	"load_length is shorter than load_priming_length.") %}
	{% endif %}
	{% if km.load_length < 0.0 %}
	{% set dummy = output.append("load_length is negative.") %}
	{% endif %}
	{% if km.load_priming_length < 0.0 %}
	{% set dummy = output.append("load_priming_length is negative.") %}
	{% endif %}
	
	
	{% if output %}
	{ action_raise_error(output|sort|join('\nError: ')) }
	{% endif %}
	M400

[gcode_macro kmvars]
description = Lists global variables used by klipper-macros.
	Usage: KMVARS [SEARCH=<search_string>]
gcode = 
	{% set SEARCH = params.SEARCH|default(params.S|default(""))|lower %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set output = [] %}
	{% for k in km %}
	{% if SEARCH in k %}
	{% set dummy = output.append(k ~ ": " ~ km[k]) %}
	{% endif %}
	{% endfor %}
	{ action_respond_info(output|sort|join('\n')) }

[gcode_macro check_macro_docs]
description = Lists macros lacking proper documentation.
	Usage: CHECK_MACRO_DOCS [USAGE=<0|1>] [HIDDEN=<1|0>] [RENAMED=<1|0>]
gcode = 
	{% set USAGE = params.USAGE|default(0)|int %}
	{% set HIDDEN = params.HIDDEN|default(0)|int %}
	{% set RENAMED = params.RENAMED|default(0)|int %}
	{% set output = [] %}
	{%set config = printer.configfile.config %}
	{% for k in config|sort %}
	{% if k.startswith("gcode_macro") %}
	{% set name = k.split()[1] %}
	{% set desc = config[k].description|default("") %}
	{% set is_renamed = config[k].rename_existing|default("") %}
	{% if (not desc or (USAGE and not "Usage: "~name.upper() in desc)) and
	(HIDDEN or not name.startswith('_')) and (RENAMED or is_renamed) %}
	{% set dummy = output.append("%s&nbsp;%s: missing %s."
	| format("*" if is_renamed else "&nbsp;", name,
	"description" if not desc else "usage")) %}
	{% endif %}
	{% endif %}
	{% endfor %}
	{action_respond_info(output|join("\n"))}

[gcode_macro listvars]
description = Lists per-macro variables with a name containing SEARCH. This is
	useful for debugging macros by allowing you to probe printer state. Be very
	careful, however, as an overly broad SEARCH parameter can take a long time
	to process and potentially hang or crash klipper.
	Usage: LISTVARS SEARCH=<search_string>
gcode = 
	
	{% if 'SEARCH' not in params and 'S' not in params %}
	{ action_raise_error("Must provide a SEARCH parameter.") }
	{% endif %}
	{% set SEARCH = params.SEARCH|default(params.S)|lower %}
	{% set ns = namespace() %}
	{% set output = [] %}
	{% for item in printer %}
	{% if item is not string %}
	{% set ns.path = ['printer', "[%s]" % (item|string), ''] %}
	{% elif ' ' in item %}
	{% set ns.path = ['printer', "['%s']" % (item), ''] %}
	{% else %}
	{% set ns.path = ['printer.', item, ''] %}
	{% endif %}
	
	{% if SEARCH in ns.path|lower %}
	{% set dummy = output.append(ns.path|join) %}
	{% endif %}
	
	{% if printer[item].items() %}
	{% for childkey, child in printer[item].items() recursive %}
	{% set ns.path = ns.path[:loop.depth|int + 1] %}
	{% if childkey is not string %}
	{% set null = ns.path.append("[%s]" % (childkey|string)) %}
	{% elif ' ' in childkey %}
	{% set null = ns.path.append("['%s']" % (childkey)) %}
	{% else %}
	{% set null = ns.path.append(".%s" % (childkey)) %}
	{% endif %}
	
	{% if child is mapping  %}
	{loop(child.items())}
	{% else %}
	{% if SEARCH in ns.path|lower %}
	{% set dummy = output.append("%s : %s" % (ns.path|join, child)) %}
	{% endif %}
	{% endif %}
	{% endfor %}
	{% endif %}
	{% endfor %}
	{ action_respond_info(output|join("\n")) }

[gcode_macro list_macros]
description = Lists registered macros (and optionally show variable state).
	Usage: LISTVARS SEARCH=<search_string> VARS=<0|1> SILENT=<0|1>
variable_macros = {}
gcode = 
	
	{% if not macros %}
	{% set renames = {} %}
	{% for k in printer.configfile.config %}
	{% if k.lower().startswith("gcode_macro") and
	printer.configfile.config[k].rename_existing %}
	{% set name = k.split(None, 1)[1] | lower %}
	{% set dummy = renames.__setitem__(name,
	[printer.configfile.config[k].rename_existing|lower] +
	renames[name]|default([])) %}
	{% endif %}
	{% endfor %}
	{% for k in printer %}
	{% if k.lower().startswith("gcode_macro") %}
	{% set name = k.split(None, 1)[1] | lower %}
	{% set dummy = macros.__setitem__(name, renames[name]|default([])) %}
	{% endif %}
	{% endfor %}
	{% endif %}
	
	{% if params.SILENT|default(0)|int == 0 %}
	_LIST_MACROS_DISPLAY {rawparams}
	{% endif %}

[gcode_macro _list_macros_display]
gcode = 
	{% set SEARCH = params.SEARCH | default(params.S) | default("") | lower %}
	{% set VARS = params.VARS | default(params.V) | default(0) | int != 0 %}
	
	{% set macros = printer["gcode_macro list_macros"].macros %}
	{% set output = [] %}
	{% for k in macros %}
	{% if SEARCH in k | lower %}
	{% set line = k ~ ((" (renames: %s)" % (macros[k]|join(","))) if macros[k]
	else "") %}
	{% set outvars = [] %}
	{% if VARS %}
	{% for v in printer["gcode_macro " ~ k] | sort %}
	{% set dummy = outvars.append("\n* %s: %s" %
	(v, printer["gcode_macro " ~ k][v]|string)) %}
	{% endfor %}
	{% endif %}
	{% set dummy = output.append(line + outvars | join("")) %}
	{% endif %}
	{% endfor %}
	{ action_respond_info(output | sort | join("\n")) }

[gcode_macro set_heater_temperature_scaled]
gcode = 
	{% set HEATER = params.HEATER.lower() %}
	{% set TARGET = params.TARGET|default(0.0)|float %}
	{% set scaled_heaters =
	printer["gcode_macro set_heater_scaling"].scaled_heaters %}
	{% if HEATER in scaled_heaters %}
	{% set scales = scaled_heaters[HEATER] %}
	{% set dummy = scales.__setitem__("real_target", TARGET) %}
	{%if TARGET > 0.0 %}
	{% set TARGET = (((TARGET + scales.bump) * scales.scale, scales.minimum)
	| max, scales.maximum)|min %}
	{% endif %}
	{% endif %}
	SET_HEATER_TEMPERATURE HEATER="{HEATER}" TARGET={TARGET}

[gcode_macro temperature_wait_scaled]
gcode = 
	{% set SENSOR = params.SENSOR.lower() %}
	{% set heater = SENSOR if not SENSOR.startswith("heater_generic") else
	SENSOR.split()[1] %}
	{% set scaled_heaters =
	printer["gcode_macro set_heater_scaling"].scaled_heaters %}
	{% if heater in scaled_heaters %}
	{% set scales = scaled_heaters[heater] %}
	{% if "MINIMUM" in params and MINIMUM > 0.0 %}
	{% set MINIMUM = (((MINIMUM + scales.bump) * scales.scale, scales.minimum)
	| max, scales.maximum)|min %}
	{% endif %}
	{% if "MAXIMUM" in params and MAXIMUM > 0.0 %}
	{% set MAXIMUM = (((MAXIMUM + scales.bump) * scales.scale, scales.minimum)
	| max, scales.maximum)|min %}
	{% endif %}
	{% else %}
	{% set settings = printer.configfile.settings[SENSOR] %}
	{% set MINIMUM = params.MINIMUM|default(settings.min_temp) %}
	{% set MAXIMUM = params.MAXIMUM|default(settings.max_temp) %}
	{% endif %}
	{% if printer[sensor].temperature < MINIMUM or
	printer[sensor].temperature > MAXIMUM %}
	TEMPERATURE_WAIT SENSOR="{SENSOR}" MINIMUM={MINIMUM} MAXIMUM={MAXIMUM}
	{% endif %}

[gcode_macro _gcode_wait_wrapper_inner]
gcode = 
	
	
	{% set sensor = params.HEATER if params.HEATER in
	printer.heaters.available_heaters
	else ("heater_generic " ~ params.HEATER) %}
	{% set target = printer[sensor].target %}
	{% if 'R' in params and target > 0.0 %}
	{% set T = params.T|default("") %}
	M{params.M}.6245197 S{target} { (" T"~T) if T else "" }
	{% elif printer[sensor].temperature < target %}
	TEMPERATURE_WAIT SENSOR="{sensor}" MINIMUM={target}
	{% endif %}

[gcode_macro _gcode_wait_wrapper]
gcode = 
	{% set target = params.S | default(params.R | default(0))| float %}
	SET_HEATER_TEMPERATURE_SCALED HEATER="{params.HEATER}" TARGET={target}
	_GCODE_WAIT_WRAPPER_INNER{%
	for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}

[gcode_macro m109]
rename_existing = M109.6245197
gcode = 
	{% set extruder = "extruder" ~ params.T|replace('0', '')
	if "T" in params else printer.toolhead.extruder %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating
	_GCODE_WAIT_WRAPPER HEATER={extruder}{%
	for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro m190]
rename_existing = M190.6245197
gcode = 
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=bed_heating
	_GCODE_WAIT_WRAPPER HEATER=heater_bed {%
	for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro m191]
description = Sets chamber temperature (with wait for heating).
	Usage: M191 [S<temp>]
gcode = 
	
	{% if "R" in params %}
	{% set dummy = params.__setitem__("S", params.R) %}
	{% endif %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=chamber_heating
	_GCODE_WAIT_WRAPPER HEATER=chamber {%
	for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro m104]
rename_existing = M104.6245197
gcode = 
	{% set extruder = "extruder" ~ params.T|replace('0', '')
	if "T" in params else printer.toolhead.extruder %}
	SET_HEATER_TEMPERATURE_SCALED HEATER={extruder} TARGET={params.S|default(0)}

[gcode_macro m140]
rename_existing = M140.6245197
gcode = 
	SET_HEATER_TEMPERATURE_SCALED HEATER=heater_bed TARGET={params.S|default(0)}

[gcode_macro m141]
description = Sets chamber temperature.
	Usage: M141 [S<temp>]
gcode = 
	SET_HEATER_TEMPERATURE_SCALED HEATER=chamber TARGET={params.S|default(0)}

[gcode_macro _check_heater_params]
gcode = 
	{% set HEATER = params.HEATER|lower %}
	{% set sensor = params.HEATER %}
	{% if HEATER not in printer.heaters.available_heaters %}
	{% set sensor = "heater_generic " ~ HEATER %}
	{% if sensor not in printer.heaters.available_heaters %}
	{ action_raise_error("The value '%s' is not valid for HEATER"
	| format(HEATER)) }
	{% endif %}
	{% endif %}
	{% set settings = printer.configfile.settings[sensor] %}
	{% set scaled_heaters =
	printer["gcode_macro set_heater_scaling"].scaled_heaters %}
	{% if HEATER is in scaled_heaters %}
	{% set scales = scaled_heaters[HEATER] %}
	{% else %}
	{% set scales = { "scale": 1.0, "bump": 0.0, "minimum": settings.min_temp,
	"maximum": settings.max_temp,
	"real_target": printer[sensor].target} %}
	{% endif %}
	{% set SCALE = params.SCALE|default(scales.scale)|float %}
	{% set BUMP = params.BUMP|default(scales.bump)|float %}
	{% set MINIMUM = params.MINIMUM|default(scales.minimum)|float %}
	{% set MAXIMUM = params.MAXIMUM|default(scales.maximum)|float %}
	
	{% if SCALE <= 0 %}
	{ action_raise_error("SCALE must be a positive value.") }
	{% elif MINIMUM < settings.min_temp or MINIMUM > settings.max_temp %}
	{ action_raise_error("MINIMUM must be between %.1f and %.1f" |
	format(settings.min_temp, settings.max_temp)) }
	{% elif MAXIMUM < settings.min_temp or MAXIMUM > settings.max_temp %}
	{ action_raise_error("MAXIMUM must be between %.1f and %.1f" |
	format(settings.min_temp, settings.max_temp)) }
	{% elif MINIMUM >= MAXIMUM %}
	{ action_raise_error("MINIMUM must be less than MAXIMUM.") }
	{% elif "TARGET" in params and (params.TARGET|float < MINIMUM or
	params.TARGET|float > MAXIMUM) %}
	{ action_raise_error("TARGET must be between %.1f and %.1f" |
	format(settings.min_temp, settings.max_temp)) }
	{% endif %}

[gcode_macro set_heater_scaling]
description = Sets scaling parameters for heater. If a new target temperature is
	passed it will be adjusted to the scaling parameters.
	Usage: SET_HEATER_SCALING [HEATER=<heater>] [SCALE=<scale_factor>]
	[BUMP=<degrees>] [MAXIMUM=<degrees>]
	[MINIMUM=<degrees>] [TARGET=<temp>]
variable_scaled_heaters = {}
gcode = 
	
	{% if "HEATER" is not in params %}
	{% set output = [] %}
	{% for h in scaled_heaters %}
	{% set dummy = output.append(
	"%s: Scale: %.2f Bump: %.1f Minimum:%.1f Maximum: %.1f"
	| format(h, scaled_heaters[h].scale, scaled_heaters[h].bump,
	scaled_heaters[h].minimum, scaled_heaters[h].maximum)) %}
	{% endfor %}
	{% if output %}}{action_respond_info(output|join('\n'))}{% endif %}
	{% else %}
	
	{% set HEATER = params.HEATER.lower() %}
	{% set settings = printer.configfile.settings[HEATER] %}
	{% if HEATER is not in scaled_heaters %}
	{% set dummy = scaled_heaters.__setitem__(HEATER, {"scale": 1.0,
	"bump": 0.0, "minimum": settings.min_temp,
	"maximum": settings.max_temp,
	"real_target": printer[HEATER].target}) %}
	{% endif %}
	_CHECK_HEATER_PARAMS{% for k in params %}{' '~k~'='~params[k]}{% endfor %}
	{% set scales = scaled_heaters[HEATER] %}
	{% set SCALE = params.SCALE|default(scales.scale)|float %}
	{% set BUMP = params.BUMP|default(scales.bump)|float %}
	{% set MAXIMUM = params.MAXIMUM|default(scales.maximum)|float %}
	{% set MINIMUM = params.MINIMUM|default(scales.minimum)|float %}
	{% set TARGET = params.TARGET|default(scales.real_target)|float %}
	{% set dummy = scales.__setitem__("scale", SCALE) %}
	{% set dummy = scales.__setitem__("bump", BUMP) %}
	{% set dummy = scales.__setitem__("maximum", MAXIMUM) %}
	{% set dummy = scales.__setitem__("minimum", MINIMUM) %}
	{% set dummy = scales.__setitem__("real_target", TARGET) %}
	
	{% set settings = printer.configfile.settings[HEATER] %}
	{% if SCALE != 1.0 or BUMP != 0.0 or MINIMUM != settings.min_temp or
	MAXIMUM != settings.max_temp %}
	{% set dummy = scaled_heaters.__setitem__(HEATER, scales) %}
	{% else %}
	{% set dummy = scaled_heaters.__delitem__(HEATER) %}
	{% endif %}
	SET_HEATER_TEMPERATURE_SCALED HEATER={HEATER} TARGET={TARGET}
	{action_respond_info(
	"%s: Scale: %.2f Bump: %.1f Minimum:%.1f Maximum: %.1f Target: %.1f"
	| format(HEATER, SCALE, BUMP, MINIMUM, MAXIMUM, TARGET))}
	{% endif %}
	
	{% set dummy = None if True else "
	{% set dummy = params.HEATER|default(e.g. extruder) %}
	{% set dummy = params.SCALE|default(1.0)|float %}
	{% set dummy = params.BUMP|default(0.0)|float %}
	{% set dummy = params.MAXIMUM|default(max_temp)|float %}
	{% set dummy = params.MINIMUM|default(min_temp)|float %}
	{% set dummy = params.TARGET|default(current target)|float %}
	" %}

[gcode_macro reset_heater_scaling]
description = Clears scaling for heater (or all heaters if none specified).
	Usage: RESET_HEATER_SCALING [HEATER=<heater>]
gcode = 
	{% if "HEATER" in params %}
	{% set HEATER = params.HEATER.lower() %}
	{% if HEATER not in printer.heaters.available_heaters %}
	{ action_raise_error("The value '%s' is not valid for HEATER"
	| format(HEATER)) }
	{% endif %}
	{% set settings = printer.configfile.settings[HEATER] %}
	SET_HEATER_SCALING HEATER={HEATER
	} SCALE=1.0 BUMP=0.0 MINIMUM={settings.min_temp
	} MAXIMUM={settings.max_temp}
	{% else %}
	
	SET_GCODE_VARIABLE MACRO=set_heater_scaling VARIABLE=scaled_heaters VALUE={
	"{}"}
	{% endif %}

[gcode_macro _km_idle_timeout]
gcode = 
	{% if printer.pause_resume.is_paused %}
	{action_respond_info("Extruder powered down on idle timeout.")}
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{
	printer[printer.toolhead.extruder].target}"
	M104; Turn off extruder but leave the bed on.
	{% else %}
	TURN_OFF_HEATERS
	M107; turn off fan
	M84
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready
	{% endif %}

[gcode_macro _check_kinematic_limits]
gcode = 
	{% set toolhead = printer.toolhead %}
	{% if params.X and (params.X|float < toolhead.axis_minimum.x or
	params.X|float > toolhead.axis_maximum.x) %}
	{action_raise_error("X[%.3f] must be between %.3f and %.3f."
	| format(params.X|float, toolhead.axis_minimum.x,
	toolhead.axis_maximum.x))}
	{% elif params.Y and (params.Y|float < toolhead.axis_minimum.y or
	params.Y|float > toolhead.axis_maximum.y) %}
	{action_raise_error("Y[%.3f] must be between %.3f and %.3f."
	| format(params.Y|float, toolhead.axis_minimum.y,
	toolhead.axis_maximum.y))}
	{% elif params.Z and (params.Z|float < toolhead.axis_minimum.z or
	params.Z|float > toolhead.axis_maximum.z) %}
	{action_raise_error("Z[%.3f] must be between %.3f and %.3f."
	| format(params.Z|float, toolhead.axis_minimum.z,
	toolhead.axis_maximum.z))}
	{% elif params.E and (params.E|float|abs > printer.configfile.settings[
	"extruder"].max_extrude_only_distance) %}
	{action_raise_error("E[%.4f] exceeds max_extrude_only_distance[%.4f]."
	| format(params.E|float|abs, printer.configfile.settings[
	"extruder"].max_extrude_only_distance))}
	{% endif %}

[gcode_macro lazy_home]
description = Homes the specified axes. If lazy is true, already homed axes
	are skipped.
	Usage: LAZY_HOME [LAZY=<1|0>] [AXES=<axes_string>]
gcode = 
	
	LIST_MACROS SILENT=1
	_LAZY_HOME_INNER {rawparams}

[gcode_macro _lazy_home_inner]
gcode = 
	
	{% set G28 = (printer["gcode_macro list_macros"].macros.g28|
	default(["g28"],True))[-1] %}
	{% set axes = 'XYZ'|select('in', params.AXES|default("XYZ")|upper|list) %}
	{% if not axes %}
	{% set axes = 'XYZ' %}
	{% endif %}
	{% if params.LAZY|default(1)|int %}
	{% set axes = axes|reject('in', printer.toolhead.homed_axes|upper)|join() %}
	{% endif %}
	
	{% if axes %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing
	{G28}{% for k in axes %}{' ' ~ k}{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status
	{% endif %}

[gcode_macro g28]
description = Wraps the G28 command to add the Marlin "O" parameter so that
	already homed axes will not be homed again. See the Klipper documentation on
	G28 for the behavior of the other parameters.
	Usage: G28 [O] ...
rename_existing = G28.6245197
gcode = 
	{% set axes = 'XYZ'|select('in', params)|join() %}
	LAZY_HOME LAZY={('O' in params)|int}{%if axes%} AXES={axes}{%endif%}

[gcode_macro before_layer_change]
description = Add this to the "before layer change" input box in the slicer.
	Usage: BEFORE_LAYER_CHANGE HEIGHT=<current_height> LAYER=<current_layer>
gcode = 
	{% set height = params.HEIGHT|default(printer.toolhead.position.z)|float %}
	{% set layer = params.LAYER|default(-1)|int + 1 %}
	{% if height >= 0.0 and layer >= 0 %}
	SET_PRINT_STATS_INFO CURRENT_LAYER="{layer}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{height}"
	{% if printer["gcode_macro _km_layer_run"].clearance_z < height %}
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{
	height}"
	{% endif %}
	{% endif %}

[gcode_macro after_layer_change]
description = Add this to the "after layer change" input box in the slicer.
	Usage: AFTER_LAYER_CHANGE
gcode = 
	_KM_LAYER_RUN

[gcode_macro gcode_at_layer]
description = Schedules the specified g-code command to be run at the specified
	layer. LAYER=next will cause the command to run at the next layer change.
	Usage: GCODE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } COMMAND=<gcode>
	[CANCEL=<0|1>]
gcode = 
	{% set tot_layers = printer.print_stats.info.total_layer %}
	{% if params|length > 0 %}
	_KM_CHECK_IS_PRINTING
	
	{% set CANCEL = params.CANCEL|default(0)|int != 0 %}
	{% set COMMAND = params.COMMAND|default(None) %}
	{% if COMMAND %}
	{% set COMMAND = COMMAND.lstrip().split(None, 1) %}
	{% set COMMAND = " ".join([COMMAND[0]|upper] + COMMAND[1:]) %}
	{% endif %}
	
	{% if "LAYER" in params %}
	{% set cmd_container = "commands_layer" %}
	{% set cur_layer = printer.print_stats.info.current_layer|int %}
	{% if "HEIGHT" in params %}
	{action_raise_error("Conflicting HEIGHT and LAYER arguments provided.")}
	{% elif params.LAYER|string|lower == "next" %}
	{% set LAYER = cur_layer + 1 %}
	{% else %}
	{% set LAYER = params.LAYER|int %}
	{% endif %}
	{% if LAYER <= cur_layer %}
	{action_raise_error("LAYER[%i] must be above current print layer[%i]."
	| format(LAYER, cur_layer))}
	{% elif tot_layers and LAYER > tot_layers %}
	{action_raise_error("LAYER[%i] must not be above top layer[%i]."
	| format(LAYER, tot_layers))}
	{% endif %}
	{% set key = LAYER %}
	
	{% elif "HEIGHT" in params %}
	{% set cmd_container = "commands_height" %}
	{% set HEIGHT = params.HEIGHT|float %}
	{% set cur_height = printer["gcode_macro _km_layer_run"].cur_height %}
	{% if HEIGHT <= cur_height %}
	{action_raise_error(
	"HEIGHT[%.3f] must be above current print height[%.3f].")
	| format(HEIGHT, cur_height)}
	{% elif HEIGHT >= printer.toolhead.axis_maximum.z %}
	{action_raise_error(
	"HEIGHT[%.3f] must be below maximum Z height[%.3f].")
	| format(HEIGHT, printer.toolhead.axis_maximum.z)}
	{% endif %}
	{% set key = HEIGHT %}
	
	{% else %}
	{action_raise_error("No HEIGHT or LAYER argument provided.")}
	{% endif %}
	
	{% set commands = printer["gcode_macro _km_layer_run"][cmd_container] %}
	{% if key not in commands and not CANCEL %}
	{% set dummy = commands.__setitem__(key, []) %}
	{% endif %}
	
	{% if CANCEL %}
	{% if key in commands %}
	{% set pos = ("%i"|format(key)) if key is integer else
	("%.3fmm"|format(key)) %}
	{% if COMMAND %}
	{% set dummy = commands[key].remove(COMMAND) %}
	{% if commands[key]|length == 0 %}
	{% set dummy = commands.__delitem__(key) %}
	{% endif %}
	{action_respond_info("Cancelled %s %s:\n* %s" |
	format("layer" if k is integer else "height",
	pos, COMMAND))}
	{% else %}
	{% set dummy = commands.__delitem__(key) %}
	{action_respond_info("Cancelled all commands at %s %s." |
	format("layer" if k is integer else "height",
	pos))}
	{% endif %}
	{% endif %}
	{% elif not COMMAND %}
	{action_raise_error("No COMMAND argument provided.")}
	{% elif COMMAND in commands[key] %}
	{action_raise_error("Duplicate command previously scheduled.")}
	{% else %}
	{% set dummy = commands[key].append(COMMAND) %}
	{% set pos = ("%i"|format(key)) if key is integer else
	("%.3fmm"|format(key)) %}
	{action_respond_info("%s %s:\n* %s" |
	format("layer" if key is integer else "height",
	pos, COMMAND))}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE={cmd_container} VALUE="{
	commands|replace('\"','\\\"')}"
	_UPDATE_LAYER_COMPAT
	
	
	{% else %}
	{% set output = [] %}
	{% set commands = printer["gcode_macro _km_layer_run"].commands_layer %}
	{% for key in commands|list|sort %}
	{% set dummy = output.append("layer %i:" | format(key)) %}
	{% for c in commands[key] %}
	{% set dummy = output.append("* %s" | format(c)) %}
	{% endfor %}
	{% endfor %}
	{% set commands = printer["gcode_macro _km_layer_run"].commands_height %}
	{% for key in commands|list|sort %}
	{% set dummy = output.append("height %.3fmm:" | format(key)) %}
	{% for c in commands[key] %}
	{% set dummy = output.append("* %s" | format(c)) %}
	{% endfor %}
	{% endfor %}
	{action_respond_info(output|join('\n'))}
	{% endif %}

[gcode_macro _km_layer_run]
description = Runs pending commands for the current layer change.
	Usage: _KM_LAYER_RUN
variable_cur_height = 0.0
variable_clearance_z = 0.0
variable_commands_layer = {}
variable_commands_height = {}
gcode = 
	{% set cur_layer = printer.print_stats.info.current_layer %}
	{% for key in commands_layer | select("<=", cur_layer) | sort %}
	{action_respond_info("Executing scheduled commands at layer %d:\n%s" |
	format(key, commands_layer[key]|join('\n')))}
	{% for c in commands_layer[key] %}
	{c}
	{% endfor %}
	{% set dummy = commands_layer.__delitem__(key) %}
	{% endfor %}
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{
	commands_layer|replace('\"','\\\"')}"
	{% for key in commands_height | select("<=", cur_height) | sort %}
	{action_respond_info("Executing scheduled commands at height %.3f:\n%s" |
	format(key, commands_height[key]|join('\n')))}
	{% for c in commands_height[key] %}
	{c}
	{% endfor %}
	{% set dummy = commands_height.__delitem__(key) %}
	{% endfor %}
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{
	commands_height|replace('\"','\\\"')}"
	_UPDATE_LAYER_COMPAT

[gcode_macro init_layer_gcode]
description = Clears scheduled gcode commands and state for all layers.
	Usage: INIT_LAYER_GCODE LAYERS=<num>
gcode = 
	SET_PRINT_STATS_INFO TOTAL_LAYER="{params.LAYERS|int + 1}" CURRENT_LAYER="{0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"
	_UPDATE_LAYER_COMPAT

[gcode_macro _reset_layer_gcode]
description = Clears scheduled gcode commands and state for all layers.
	Usage: _RESET_LAYER_GCODE
gcode = 
	SET_PRINT_STATS_INFO TOTAL_LAYER="{0}" CURRENT_LAYER="{0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"
	_UPDATE_LAYER_COMPAT

[gcode_macro cancel_all_layer_gcode]
description = Clears all scheduled gcode commands.
	Usage: CANCEL_ALL_LAYER_GCODE
gcode = 
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"
	_UPDATE_LAYER_COMPAT

[gcode_macro _update_layer_compat]
gcode = 
	{% set next_layer = printer.print_stats.info.current_layer|int + 1 %}
	{% set commands_layer = printer["gcode_macro _km_layer_run"].commands_layer %}
	{% set keys = commands_layer | sort(reverse=True) %}
	
	{% set pause_next_layer = {'enable': False, 'call':
	printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer.call} %}
	{% if pause_next_layer.call in commands_layer[next_layer] | default([]) %}
	{% set dummy = pause_next_layer.__setitem__('enable', True) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{
	pause_next_layer|replace('\"','\\\"') }"
	
	
	{% set pause_at_layer = {'enable': False, 'layer': 0, 'call':
	printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer.call} %}
	{% if pause_next_layer.enable and
	pause_next_layer.call == pause_at_layer.call %}
	{% set keys = keys | reject("==", next_layer) %}
	{% endif %}
	
	
	
	
	{% for key in keys %}
	{% if pause_at_layer.call in commands_layer[key] %}
	{% set dummy = pause_at_layer.__setitem__('enable', True) %}
	{% set dummy = pause_at_layer.__setitem__('layer', key) %}
	{% endif %}
	{% endfor %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{
	pause_at_layer|replace('\"','\\\"') }"

[gcode_macro pause_next_layer]
description = Convenience macro to schedule the current print to pause at the
	next layer change. See PAUSE for additional arguments.
	Usage: PAUSE_NEXT_LAYER ...
gcode = 
	_CHECK_KINEMATIC_LIMITS{% for k in params%}{' ' ~k~ '=' ~ params[k]
	}{% endfor %}
	GCODE_AT_LAYER LAYER=NEXT COMMAND="PAUSE{% for k in params %}{
	' ' ~ k ~ '=' ~ params[k]}{% endfor %}"

[gcode_macro pause_at_layer]
description = Convenience macro to schedule the current print to pause at the
	specified layer change. LAYER=next will cause the command to run at the next
	layer change. See PAUSE for additional arguments.
	Usage: PAUSE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...
gcode = 
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	" %}
	{% set filtered_params = params|reject('in',['HEIGHT','LAYER'])|list|sort %}
	_CHECK_KINEMATIC_LIMITS{% for k in filtered_params%}{' ' ~k~ '=' ~ params[k]
	}{% endfor %}
	GCODE_AT_LAYER {% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor
	%} COMMAND="PAUSE{% for k in filtered_params %}{
	' ' ~ k ~ '=' ~ params[k]}{% endfor %}"

[gcode_macro speed_at_layer]
description = Convenience macro to schedule a feedrate adjustment at the
	specified layer change. LAYER=next will cause the command to run at the next
	layer change. (SPEED parameter behaves the same as the M220 S parameter.)
	Usage: SPEED_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } SPEED=<percentage>
gcode = 
	{% set SPEED = params.SPEED|default(0)|int %}
	{% if SPEED < 1 or SPEED > 500 %}
	{action_raise_error("SPEED[%i] parameter between 1 and 500 is required."
	% SPEED)}
	{% endif %}
	GCODE_AT_LAYER {% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor %} COMMAND="M220 S{SPEED|int}"
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	{% set dummy = params.SPEED|default(percentage)|int %}
	" %}

[gcode_macro flow_at_layer]
description = Convenience macro to schedule a flow percentage adjustment at the
	specified layer change. LAYER=next will cause the command to run at the next
	layer change. (FLOW parameter behaves the same as the M221 S parameter.)
	Usage: FLOW_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } FLOW=<percentage>
gcode = 
	{% set FLOW = params.FLOW|default(0)|int %}
	{% if FLOW < 1 or FLOW > 500 %}
	{action_raise_error("FLOW[%i] parameter between 1 and 500 is required."
	% FLOW)}
	{% endif %}
	GCODE_AT_LAYER {% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor %} COMMAND="M221 S{FLOW|int}"
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	{% set dummy = params.FLOW|default(percentage)|int %}
	" %}

[gcode_macro fan_at_layer]
description = Convenience macro to schedule a fan adjustment at the specified
	layer change. LAYER=next will cause the command to run at the next layer
	change. See SET_FAN_SCALING for additional arguments.
	Usage: FAN_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...
gcode = 
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	{% set dummy = params.SCALE|default(1.0)|float %}
	{% set dummy = params.BUMP|default(0)|int %}
	{% set dummy = params.MAXIMUM|default(0)|int %}
	{% set dummy = params.MINIMUM|default(255)|int %}
	{% set dummy = params.SPEED|default(current speed)|int %}
	" %}
	{% set filtered_params = params|reject('in',['HEIGHT','LAYER'])|list|sort %}
	{% if filtered_params|length == 0 %}
	{action_raise_error("No fan parameters provided.")}
	{% endif %}
	_CHECK_FAN_PARAMS{% for k in filtered_params %}{' '~k~'='~params[k]
	}{% endfor %}
	GCODE_AT_LAYER {% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor
	%} COMMAND="SET_FAN_SCALING{% for k in filtered_params %}{
	' ' ~ k ~ '=' ~ params[k]}{% endfor %}"

[gcode_macro heater_at_layer]
description = Convenience macro to schedule a heater adjustment at the specified
	layer change. LAYER=next will cause the command to run at the next layer
	change. See SET_HEATER_SCALING for additional arguments.
	Usage: HEATER_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...
gcode = 
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	{% set dummy = params.HEATER|default(e.g. extruder) %}
	{% set dummy = params.SCALE|default(1.0)|float %}
	{% set dummy = params.BUMP|default(0.0)|float %}
	{% set dummy = params.MAXIMUM|default(max_temp)|float %}
	{% set dummy = params.MINIMUM|default(min_temp)|float %}
	{% set dummy = params.TARGET|default(current target)|float %}
	" %}
	{% set filtered_params = params|reject('in',['HEIGHT','LAYER'])|list|sort %}
	_CHECK_HEATER_PARAMS{% for k in filtered_params%}{' ' ~ k ~ '=' ~ params[k]
	}{% endfor %}
	GCODE_AT_LAYER{% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor
	%} COMMAND="SET_HEATER_SCALING{% for k in filtered_params %}{
	' ' ~ k ~ '=\\\"' ~ params[k]|replace('\\','\\\\')|replace('\'','\\\'')
	|replace('\"','\\\"') ~ '\\\"'
	}{% endfor %}"

[gcode_macro park]
description = Park the toolhead
	Usage: PARK [P=<0|1|2>] [X=<pos>] [Y=<pos>] [Z=<pos>] [LAZY=<1|0>]
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set LAZY = params.LAZY|default(1)|int %}
	{% if printer.toolhead.homed_axes != "xyz" %}
	{% if LAZY %}
	LAZY_HOME
	{% else %}
	{action_raise_error("Must home axes first.")}
	{% endif %}
	{% endif %}
	
	
	{% set P = (params.P|default(2))|int %}
	{% set X = params.X|default(km.park_x)|float %}
	{% set Y = params.Y|default(km.park_y)|float %}
	{% set Z = params.Z|default(km.park_z)|float %}
	
	M400
	_CHECK_KINEMATIC_LIMITS X="{X}" Y="{Y}" Z="{Z}"
	_PARK_INNER X="{X}" Y="{Y}" Z="{Z}" P="{P}" LAZY="{LAZY}"
	
	{% set dummy = None if True else "
	{% set dummy = params.P|default(mode=<0|1|2>)|int %}
	{% set dummy = params.X|default(X position)|int %}
	{% set dummy = params.Y|default(Y position)|int %}
	{% set dummy = params.Z|default(Z position)|int %}
	" %}

[gcode_macro _park_inner]
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set travel_speed_xy = km.travel_speed_xy %}
	{% set travel_speed_z = km.travel_speed_z %}
	
	{% set position = printer.gcode_move.gcode_position %}
	{% set origin = printer.gcode_move.homing_origin%}
	
	
	
	{% set clearance_z = (printer["gcode_macro _km_layer_run"].clearance_z,
	position.z) | max %}
	{% set P = params.P|int %}
	{% set X = params.X|float - origin.x %}
	{% set Y = params.Y|float - origin.y %}
	{% set Z = params.Z|float %}
	{% set LAZY = params.LAZY|int %}
	
	
	{% if P == 0 %}
	{% if clearance_z > Z %}
	{% set Z = clearance_z %}
	{% endif %}
	{% elif P == 1 %}
	{% set Z = Z - origin.z %}
	{% elif P == 2 %}
	{% set Z = Z + clearance_z %}
	{% else %}
	{action_raise_error("Invalid parameter P=%i. Value must be 0, 1, or 2." |
	format(P)) }
	{% endif %}
	
	
	{% set Z = ((Z, printer.toolhead.axis_maximum.z - origin.z)|min,
	printer.toolhead.axis_minimum.z - origin.z)|max %}
	
	
	{% if (not LAZY) or P != 2 or X != position.x or Y != position.y
	or Z < clearance_z %}
	SAVE_GCODE_STATE NAME=_KM_PARK
	G90
	G0 Z{Z} F{travel_speed_z}
	G0 X{X} Y{Y} F{travel_speed_xy}
	RESTORE_GCODE_STATE NAME=_KM_PARK MOVE=0
	{% endif %}

[gcode_macro g27]
description = Parks the toolhead.
	Usage: G27 [P=<0|1|2>]
gcode = 
	
	PARK P={params.P|default(0)} {% for k in params|reject("in", "GP") %}{
	' '~k~'="'~params[k]~'"'
	}{% endfor %}

[gcode_macro pause]
description = Pauses the current print.
	Usage: PAUSE [X=<pos>] [Y=<pos>] [Z=<pos>] [E=<retract_length>] [B=<beeps>]
rename_existing = _KM_PAUSE_BASE
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% set E = (params.E|default(5))|float %}
	
	{% set B = params.B|default(10)|int if "output_pin beeper" in printer else 0
	%}
	
	{% if printer.pause_resume.is_paused %}
	{ action_respond_info("Print already paused") }
	{% elif printer.idle_timeout.state | string == "Printing" or
	(printer.virtual_sdcard|default({})).is_active|default(False) %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pausing RESET_STACK=1
	{% set position = printer.gcode_move.gcode_position %}
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_x VALUE="{position.x}"
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_y VALUE="{position.y}"
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_z VALUE="{position.z}"
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{E}"
	SAVE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE
	_KM_PAUSE_BASE
	M83
	{% if printer.extruder.can_extrude %}
	G1 E{'%.4f' % -E} F{km.load_speed}
	{% endif %}
	PARK P=2{% for k in params|select("in", "XYZ") %}{
	' '~k~'="'~params[k]~'"'}{% endfor %}
	
	{% for i in range(B) %}
	M300 P100
	G4 P200
	{% endfor %}
	{% else %}
	{ action_respond_info("Print not in progress") }
	{% endif %}

[gcode_macro m600]
description = Pauses the current print.
	Usage: M600 [B<beeps>] [E<pos>] [L<pos>] [R<temp>] [U<pos>] [X<pos>] [Y<pos>]
	[Z<pos>]
gcode = 
	PAUSE B="{0}" P=2{% for k in params|select("in", "EXYZ") %}{
	' '~k~'="'~params[k]~'"'}{% endfor %}
	UNLOAD_FILAMENT{% if 'U' in params %} LENGTH={params.U}{% endif
	%} BEEPS="{params.B|default(10)|int}"
	{% if 'R' in params %}M109 S{params.R}{% endif %}

[gcode_macro m601]
description = Pauses the current print.
	Usage: M601
gcode = 
	PAUSE

[gcode_macro m602]
description = Resumes the currently paused print.
	Usage: M602
gcode = 
	RESUME

[gcode_macro m24]
rename_existing = M24.6245197
gcode = 
	{% if printer.pause_resume.is_paused %}
	RESUME
	{% else %}
	M24.6245197
	{% endif %}

[gcode_macro m25]
rename_existing = M25.6245197
gcode = 
	PAUSE

[gcode_macro resume]
description = Resumes the currently paused print.
	Usage: RESUME [E<pos>]
rename_existing = _KM_RESUME_BASE
variable_saved_extruder_temp = 0
variable_saved_x = 0.0
variable_saved_y = 0.0
variable_saved_z = 0.0
variable_saved_e = 0.0
gcode = 
	{% if printer.pause_resume.is_paused %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% set extruder = printer[printer.toolhead.extruder] %}
	{% if extruder.target <= printer.configfile.settings[
	printer.toolhead.extruder].min_temp
	| float + 0.5 %}
	M109 S{saved_extruder_temp}
	{% endif %}
	
	
	
	{% if 'E' not in params and not saved_e %}
	{% set saved_e = 5.0 %}
	G1 E{'%.4f' % -saved_e } F{km.load_speed}
	{% endif %}
	
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"
	G90
	
	G0 X{saved_x} Y{saved_y} F{km.travel_speed_xy}
	G0 Z{saved_z} F{km.travel_speed_z}
	G91
	
	G1 E{'%.4f' % (params.E|default(saved_e))} F{km.load_speed}
	RESTORE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE MOVE=1
	_KM_RESUME_BASE
	{% else %}
	{ action_respond_info("Printer is not paused.") }
	{% endif %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=printing RESET_STACK=1

[gcode_macro clear_pause]
description = Clears the current pause state.
	Usage: CLEAR_PAUSE
rename_existing = _KM_CLEAR_PAUSE
gcode = 
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"
	_KM_CLEAR_PAUSE

[gcode_macro print_start]
description = Inserted by slicer at start of print. Rather than using this macro
	directly you should configure your slicer as instructed in the readme.
	Usage: PRINT_START BED=<temp> EXTRUDER=<temp> [CHAMBER=<temp>]
	[MESH_MIN=<x,y>] [MESH_MAX=<x,y>] [LAYERS=<num>]
	[NOZZLE_SIZE=<mm>]
gcode = 
	{action_respond_info(
	"This file is using an old The PRINT_START format. This print will run "
	"fine, but you should update your slicer config to take advantage of the "
	"phased PRINT_START macros. The slicer documentation is here:\n"
	"https://github.com/jschuh/klipper-macros\x23slicer-configuration"
	)}
	
	_PRINT_START_PHASE_INIT {rawparams}
	_PRINT_START_PHASE_PREHEAT
	_PRINT_START_PHASE_PROBING
	_PRINT_START_PHASE_EXTRUDER
	_PRINT_START_PHASE_PURGE

[gcode_macro _print_start_phase_init]
description = Inserted by slicer at start of print. Initializes PRINT_START
	phases.
	Usage: See PRINT_START.
gcode = 
	CHECK_KM_CONFIG
	SET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{False}"
	_KM_APPLY_PRINT_OFFSET RESET=1
	_PRINT_START_PHASE_CHECK PHASE=none
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% if not params.BED %}
	{% set dummy = params.__setitem__('BED', params.BED_TEMP|int) %}
	{% endif %}
	{% if not params.EXTRUDER %}
	{% set dummy = params.__setitem__('EXTRUDER', params.EXTRUDER_TEMP|int) %}
	{% endif %}
	
	
	PRINT_START_SET PRINT_START_PHASE="init" {% for k in params %}{' %s=\"%s\"' %
	(k,params[k]|replace('\\','\\\\')|replace('\'','\\\'')|replace('\"','\\\"'))
	}{% endfor %}
	
	
	_km_check_and_set_print_bounds
	
	M107
	CLEAR_PAUSE
	
	M140 S{params.BED}
	{% if params.CHAMBER %}M141 S{params.CHAMBER|int}{% endif %}
	{% if printer.bed_mesh %}BED_MESH_CLEAR{% endif %}
	
	{% if km.start_try_saved_surface_mesh and printer.bed_mesh %}
	LOAD_SURFACE_MESH
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="preheat"

[gcode_macro _print_start_phase_preheat]
description = Inserted by slicer at start of print. Handles the bed and chamber
	heating phases and ends when both are stabilized at their target temperatures.
	Usage: See PRINT_START.
gcode = 
	_PRINT_START_PHASE_CHECK PHASE=preheat
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set BED = print.BED|int %}
	{% set EXTRUDER = print.EXTRUDER|int %}
	{% set CHAMBER = print.CHAMBER|default(0)|int %}
	{% set LAYERS = print.LAYERS|default(0)|int %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% set bed_at_target = (BED + 0.4 - printer.heater_bed.temperature) |
	abs <= 0.6 %}
	PRINT_START_SET BED_AT_TARGET={1 if bed_at_target else 0}
	{% set start_level_bed_at_temp = km.start_level_bed_at_temp and
	not printer.bed_mesh.profile_name %}
	{% set actions_at_temp = start_level_bed_at_temp or
	km.start_quad_gantry_level_at_temp or
	km.start_z_tilt_adjust_at_temp or
	(km.start_home_z_at_temp and not bed_at_target) %}
	{% set bed_overshoot = (BED + (km.start_bed_heat_overshoot if
	(BED and not bed_at_target) else 0.0),
	printer.configfile.settings.heater_bed.max_temp ) | min %}
	
	INIT_LAYER_GCODE LAYERS="{LAYERS}"
	{% if CHAMBER > 0.0 %}
	M141 S{CHAMBER}
	{% endif %}
	
	M140 S{bed_overshoot}
	{% if actions_at_temp %}
	
	
	M104 S{km.start_extruder_probing_temp if km.start_extruder_probing_temp > 0
	else (km.start_extruder_preheat_scale * EXTRUDER)|round(0,'ceil')|int}
	{% else %}
	M104 S{EXTRUDER}
	{% endif %}
	
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing RESET_STACK=1
	G28
	G90
	{% if BED > 0.0 %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=bed_heating RESET_STACK=1
	
	{% if not bed_at_target %}
	PARK
	
	M190 S{bed_overshoot}
	G4 P{km.start_bed_heat_delay / 2}
	M190 R{BED}
	G4 P{km.start_bed_heat_delay / 2}
	{% endif %}
	{% endif %}
	
	{% if CHAMBER > 0.0 %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=chamber_heating RESET_STACK=1
	_KM_PARK_IF_NEEDED HEATER="chamber" RANGE=ABOVE
	M191 S{CHAMBER}
	{% endif %}
	
	{% if BED > 0.0 and bed_at_target%}
	M190 R{BED}
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="probing"

[gcode_macro _print_start_phase_probing]
description = Inserted by slicer at start of print. Performs probing (including
	mesh bed level) and other operations that should be run when the bed and
	chamber are stabilized at their target temps.
	Usage: See PRINT_START.
gcode = 
	_PRINT_START_PHASE_CHECK PHASE=probing
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set MESH_MIN = print.MESH_MIN|default(None) %}
	{% set MESH_MAX = print.MESH_MAX|default(None) %}
	
	{% if km.start_random_placement_max > 0 and print.PRINT_MIN and MESH_MIN %}
	{% set PRINT_MIN = print.PRINT_MIN.split(",")|map('float')|list %}
	{% set PRINT_MAX = print.PRINT_MAX.split(",")|map('float')|list %}
	{% set x_offset = (((km.print_max[0] - km.print_min[0] - PRINT_MAX[0] +
	PRINT_MIN[0] - 2 * km.start_random_placement_padding)|int,
	km.start_random_placement_max * 2)|min, 0)|max %}
	{% set y_offset = (((km.print_max[1] - km.print_min[1] - PRINT_MAX[1] +
	PRINT_MIN[1] - 2 * km.start_random_placement_padding)|int,
	km.start_random_placement_max * 2)|min, 0)|max %}
	{% if x_offset > 0 %}
	{% set x_offset = range(x_offset)|random + km.print_min[0] -
	PRINT_MIN[0] + km.start_random_placement_padding %}
	{% endif %}
	{% if y_offset > 0 %}
	{% set y_offset = range(y_offset)|random + km.print_min[1] -
	PRINT_MIN[1] + km.start_random_placement_padding %}
	{% endif %}
	
	
	{% set MESH_MIN = MESH_MIN.split(",")|map('float')|list %}
	{% set MESH_MAX = MESH_MAX.split(",")|map('float')|list %}
	{% set MESH_MIN_NEW = (MESH_MIN[0] + x_offset, MESH_MIN[1] + y_offset) %}
	{% set MESH_MAX_NEW = (MESH_MAX[0] + x_offset, MESH_MAX[1] + y_offset) %}
	{action_respond_info(
	"Relocating print origin from (%.3f,%.3f) "|format(*MESH_MIN) +
	"to (%.3f,%.3f)"|format(*MESH_MIN_NEW))}
	{% set MESH_MIN = (MESH_MIN_NEW[0], MESH_MIN_NEW[1])|join(',') %}
	{% set MESH_MAX = (MESH_MAX_NEW[0], MESH_MAX_NEW[1])|join(',') %}
	PRINT_START_SET PRINT_OFFSET={"%d,%d" % (x_offset,y_offset)}
	{% endif %}
	
	{% set EXTRUDER = print.EXTRUDER|int %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set start_level_bed_at_temp = km.start_level_bed_at_temp and
	not printer.bed_mesh.profile_name %}
	{% set start_home_z_at_temp = km.start_home_z_at_temp and
	not print.BED_AT_TARGET|int %}
	{% set actions_at_temp = start_level_bed_at_temp or
	km.start_quad_gantry_level_at_temp or
	km.start_z_tilt_adjust_at_temp or
	start_home_z_at_temp %}
	{% if actions_at_temp %}
	{% if km.start_extruder_probing_temp > 0 %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating RESET_STACK=1
	_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=2
	M109 R{km.start_extruder_probing_temp}
	{% else %}
	M104 S{EXTRUDER}
	{% endif %}
	{% if start_home_z_at_temp %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing RESET_STACK=1
	G28 Z
	{% endif %}
	{% if km.start_z_tilt_adjust_at_temp %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=calibrating_z RESET_STACK=1
	Z_TILT_ADJUST
	{% endif %}
	{% if km.start_quad_gantry_level_at_temp %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=leveling_gantry RESET_STACK=1
	QUAD_GANTRY_LEVEL
	{% endif %}
	{% if start_level_bed_at_temp %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=meshing RESET_STACK=1
	_km_mesh_if_needed {% if MESH_MIN %} MESH_MIN={MESH_MIN}{% endif
	%}{% if MESH_MAX %} MESH_MAX={MESH_MAX}{% endif %}
	{% endif %}
	{% if km.start_extruder_probing_temp > 0 %}
	M104 S{EXTRUDER}
	{% endif %}
	G4
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="extruder"

[gcode_macro _print_start_phase_extruder]
description = Inserted by slicer at start of print. Preheats the extruder.
	Usage: See PRINT_START.
gcode = 
	_PRINT_START_PHASE_CHECK PHASE=extruder
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set EXTRUDER = print.EXTRUDER|default(print.EXTRUDER_TEMP)|float %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	
	{% if EXTRUDER > 0 %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating RESET_STACK=1
	_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=ABOVE
	M109 S{EXTRUDER}
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="purge"

[gcode_macro _print_start_phase_purge]
description = Inserted by slicer at start of print. Generates purge lines.
	Usage: See PRINT_START.
gcode = 
	_PRINT_START_PHASE_CHECK PHASE=purge
	
	_KM_APPLY_PRINT_OFFSET
	
	_APPLY_BED_SURFACE_OFFSET
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set MESH_MIN = print.MESH_MIN|default(None) %}
	{% set MESH_MAX = print.MESH_MAX|default(None) %}
	{% set NOZZLE_SIZE = print.NOZZLE_SIZE|default(print.NOZZLE_SIZE)|
	default(printer.configfile.settings.extruder.nozzle_diameter)|float %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% if km.start_purge_length > 0.0 and printer.extruder.can_extrude %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=purging RESET_STACK=1
	DRAW_PURGE_LINE WIDTH="{NOZZLE_SIZE * 1.25}" HEIGHT="{NOZZLE_SIZE * 0.625
	}"{% if MESH_MIN %} PRINT_MIN={MESH_MIN}{% endif
	%}{% if MESH_MAX %} PRINT_MAX={MESH_MAX}{% endif %}
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="printing"
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=printing RESET_STACK=1

[gcode_macro _km_park_if_needed]
description = Parks the extruder if the current temperature of the supplied
	heater is not within the specified target range.
	Usage: _KM_PARK_IF_NEEDED HEATER=<heater> RANGE=[<percentage>|ABOVE|BELOW]
gcode = 
	
	{% set HEATER = params.HEATER if params.HEATER in
	printer.heaters.available_heaters else
	("heater_generic " ~ params.HEATER) %}
	{% set RANGE = (params.RANGE|default(1))|string|upper %}
	
	{% if printer[HEATER].target %}
	{% if RANGE == "ABOVE" %}
	{% if printer[HEATER].temperature < printer[HEATER].target %}
	PARK
	{% endif %}
	{% elif RANGE == "BELOW" %}
	{% if printer[HEATER].temperature > printer[HEATER].target %}
	PARK
	{% endif %}
	{% elif (printer[HEATER].temperature - printer[HEATER].target)|abs >
	(printer[HEATER].target * RANGE|float * 0.01)|abs %}
	PARK
	{% endif %}
	{% endif %}

[gcode_macro _km_apply_print_offset]
variable_offset = []
gcode = 
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% if params.RESET|default(0)|int and offset and
	not printer["gcode_macro _km_save_state"].is_ephemeral%}
	{% set PRINT_OFFSET = [offset.pop(0) * -1, offset.pop() * -1] %}
	{% elif print.PRINT_OFFSET and not offset and
	not printer["gcode_macro _km_save_state"].is_ephemeral %}
	{% set PRINT_OFFSET = print.PRINT_OFFSET.split(",")|map('float')|list %}
	{% set dummy = offset.extend(PRINT_OFFSET) %}
	{% endif %}
	
	{% if PRINT_OFFSET %}
	_KM_SET_GCODE_OFFSET_BASE {"X_ADJUST=%.2f Y_ADJUST=%.2f"|
	format(*PRINT_OFFSET)}
	{% endif %}

[gcode_macro _km_mesh_if_needed]
gcode = 
	
	
	
	{% if not printer.bed_mesh.profile_name %}
	BED_MESH_CALIBRATE_FAST {rawparams}
	{% endif %}

[gcode_macro print_start_set]
description = Inserted by slicer to set values used by PRINT_START.
	Usage: PRINT_START_SET <VARIABLE>=<value>
variable_print = {}
gcode = 
	{%for k in params %}
	{% set dummy = print.__setitem__(k|upper, params[k]) %}
	{% endfor %}

[gcode_macro _print_start_phase_check]
gcode = 
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set PRINT_START_PHASE = print.PRINT_START_PHASE|default("none") %}
	{% if PRINT_START_PHASE != params.PHASE %}
	
	SET_GCODE_VARIABLE MACRO=print_start_set VARIABLE=print VALUE="{{}}"
	{% if params.PHASE != 'none' %}
	{% set error = "PRINT_START phase error. Expected '%s' but found '%s'" %
	(params.PHASE, PRINT_START_PHASE) %}
	
	{% if not 'virtual_sdcard' in printer or
	not printer.virtual_sdcard.is_active or 'CANCEL_PRINT' not in
	printer.configfile.settings.virtual_sdcard.on_error_gcode|
	default("")|upper %}
	{action_respond_info(error)}
	CANCEL_PRINT
	{% else %}
	{action_raise_error(error)}
	{% endif %}
	{% else %}
	{ action_respond_info("Expected phase '%s' but found '%s'. Resetting."
	% (params.PHASE, PRINT_START_PHASE)) }
	{% endif %}
	{% endif %}

[gcode_macro print_end]
description = Inserted by slicer at end of print.
	Usage: PRINT_END
gcode = 
	_KM_CHECK_IS_PRINTING
	M400
	_PRINT_END_INNER
	
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% if km.start_clear_adjustments_at_end != 0 %}
	RESET_HEATER_SCALING
	RESET_FAN_SCALING
	M220 S100
	M221 S100
	{% endif %}
	_RESET_LAYER_GCODE
	_RESET_VELOCITY_LIMITS
	TURN_OFF_HEATERS
	M107; turn off fan
	{% if printer.bed_mesh %}BED_MESH_CLEAR{% endif %}
	
	{% if printer.toolhead.homed_axes|lower == "xyz" %}
	PARK Y="{km.start_end_park_y}"
	{% endif %}
	M84
	CLEAR_PAUSE
	SET_GCODE_VARIABLE MACRO=print_start_set VARIABLE=print VALUE="{{}}"
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready RESET_STACK=1

[gcode_macro _print_end_inner]
variable_cancelled = False
gcode = 
	SET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{False}"
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set toolhead = printer.toolhead %}
	{% set origin = printer.gcode_move.homing_origin%}
	{% set max_x = km.print_max[0] - origin.x %}
	{% set max_y = km.print_max[1] - origin.y %}
	{% set max_z = toolhead.axis_maximum.z - origin.z %}
	
	{% if not cancelled %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=completing
	{% endif %}
	
	{% if printer.extruder.can_extrude %}
	
	{% if not printer.pause_resume.is_paused and not cancelled and
	toolhead.homed_axes|lower == "xyz" %}
	{% set x_safe = (max_x - toolhead.position.x, 2.0)|min %}
	{% set y_safe = (max_y - toolhead.position.y, 2.0)|min %}
	{% set z_safe = (max_z - toolhead.position.z, 2.0)|min %}
	G91
	G0 Z{z_safe} E-1.0 F{km.travel_speed_z * 2}
	G0 X{x_safe} Y{y_safe} E-1.0 F{km.travel_speed_xy}
	
	_KM_APPLY_PRINT_OFFSET RESET=1
	{% endif %}
	
	
	G92 E0
	G1 E-5.0 F3600
	M400
	{% endif %}

[gcode_macro _km_check_is_printing]
variable_debug_state = False
description = Throws an error if print is not currently in progress.
gcode = 
	{% if not debug_state and
	printer.idle_timeout.state|string != "Printing" and
	not (printer.virtual_sdcard|default({})).is_active|default(False) and
	not printer.pause_resume.is_paused %}
	{ action_raise_error("No active print.") }
	{% endif %}

[gcode_macro _km_check_and_set_print_bounds]
description = Validates all print bounds and caches their values.
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set print = printer["gcode_macro print_start_set"].print %}
	
	
	{% if print.MESH_MIN %}
	{% set MESH_MIN = print.MESH_MIN.split(",")|map('float')|list %}
	{% set MESH_MAX = print.MESH_MAX.split(",")|map('float')|list %}
	{%if MESH_MIN[0] < km.print_min[0] or MESH_MIN[1] < km.print_min[1] %}
	{action_raise_error("MESH_MIN %s is outside the printable bounds" %
	(MESH_MIN|string, km.print_min|string))}
	{%elif MESH_MAX[0] > km.print_max[0] or MESH_MAX[1] > km.print_max[1] %}
	{action_raise_error("MESH_MAX %s is outside the printable bounds %s" %
	(MESH_MAX|string, km.print_max|string))}
	{% endif %}
	{% endif %}
	
	
	{% set points = [] %}
	{% if print.MODEL_MIN or print.MODEL_MAX %}
	{% set MODEL_MIN = print.MODEL_MIN.split(",")|map('float')|list %}
	{% set MODEL_MAX = print.MODEL_MAX.split(",")|map('float')|list %}
	{% set points = [MODEL_MIN, MODEL_MAX] %}
	{% endif %}
	{% if (printer.exclude_object|default({})).objects %}
	{% set points = printer.exclude_object.objects|selectattr('polygon')|
	map(attribute='polygon')|sum(start=points) %}
	{% set points_len = points|length %}
	{% if points_len >= 2 %}
	{% set x_coords = (points|map(attribute=0)|sort|list)[0::points_len-1] %}
	{% set y_coords = (points|map(attribute=1)|sort|list)[0::points_len-1] %}
	{% set MODEL_MIN = (x_coords[0],y_coords[0])|map('float')|list %}
	{% set MODEL_MAX = (x_coords[1],y_coords[1])|map('float')|list %}
	PRINT_START_SET MODEL_MIN="{MODEL_MIN|join(',')
	}" MODEL_MAX="{MODEL_MAX|join(',')}"
	{% endif %}
	{% endif %}
	
	{% if MODEL_MIN %}
	
	{% if MODEL_MIN[0] < km.print_min[0] or MODEL_MIN[1] < km.print_min[1] %}
	{action_raise_error("MODEL_MIN %s is outside the printable bounds" %
	(MODEL_MIN|string, km.print_min|string))}
	{% elif MODEL_MAX[0] > km.print_max[0] or MODEL_MAX[1] > km.print_max[1] %}
	{action_raise_error("MODEL_MAX %s is outside the printable bounds %s" %
	(MODEL_MAX|string, km.print_max|string))}
	{% endif %}
	{% endif %}
	
	
	{% if MESH_MIN and MODEL_MIN %}
	PRINT_START_SET PRINT_MIN="{((MODEL_MIN[0],MESH_MIN[0])|min,
	(MODEL_MIN[1],MESH_MIN[1])|min)|join(',')
	}" PRINT_MAX="{((MODEL_MAX[0],MESH_MAX[0])|max,
	(MODEL_MAX[1],MESH_MAX[1])|max)|join(',')}"
	{% else %}
	PRINT_START_SET PRINT_MIN="{km.print_min|join(',')
	}" PRINT_MAX="{km.print_max|join(',')}"
	{% endif %}

[gcode_macro _km_save_state]
description = Tracks gcode state.
variable_state_set = {}
variable_is_ephemeral = 0
gcode = 
	{% if params.SAVE|int %}
	{% set dummy = state_set.__setitem__(params.NAME, None) %}
	{% else %}
	{% set dummy = state_set.__delitem__(params.NAME) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=_km_save_state VARIABLE=is_ephemeral VALUE="{
	1 if state_set|length > 0 else 0 }"

[gcode_macro save_gcode_state]
description = Wraps SAVE_GCODE_STATE to track persistence state.
	Usage: See Klipper documentation
rename_existing = _KM_SAVE_GCODE_STATE
gcode = 
	_KM_SAVE_GCODE_STATE {rawparams}
	{% set NAME = params.NAME|default("default") %}
	_km_save_state NAME={NAME} SAVE=1

[gcode_macro restore_gcode_state]
description = Wraps RESTORE_GCODE_STATE to track persistence state.
	Usage: See Klipper documentation
rename_existing = _KM_RESTORE_GCODE_STATE
gcode = 
	_KM_RESTORE_GCODE_STATE {rawparams}
	{% set NAME = params.NAME|default("default") %}
	_km_save_state NAME={NAME} SAVE=0

[gcode_macro _abort_on_gcode_state]
gcode = 
	{% set save_state = printer["gcode_macro _km_save_state"] %}
	{% if save_state.is_ephemeral %}
	{action_raise_error("Encountered unexpected save state " +
	save_state.state_set|list|sort|string)}
	{% endif %}

[gcode_macro _km_print_status]
variable_last_status = 'none'
variable_status_stack = []
variable_command_list = {}
variable_status_list = [
	'ready',
	'filament_load',
	'filament_unload',
	'bed_heating',
	'chamber_heating',
	'homing',
	'leveling_gantry',
	'calibrating_z',
	'meshing',
	'extruder_heating',
	'purging',
	'printing',
	'pausing',
	'cancelling',
	'completing',
	]
gcode = 
	{% set ACTION = params.ACTION|trim|upper %}
	{% set STATUS = params.STATUS|default("")|trim|lower %}
	
	
	{% if ACTION == "ADD_EVENT" %}
	{% set COMMAND = params.COMMAND %}
	{% set ARGS = params.ARGS|default(0)|int != 0 %}
	{% set TYPE = params.TYPE|default('ENTER')|trim|upper %}
	{% set WHEN = params.WHEN|default('PRINTING')|trim|upper %}
	{% set FILTER_ENTER =
	(params.FILTER_ENTER|default("")|trim|lower).split(',')|
	select()|unique|list %}
	{% set FILTER_LEAVE =
	(params.FILTER_LEAVE|default("")|trim|lower).split(',')|
	select()|unique|list %}
	
	{% set STATUSES = STATUS.split(',')|map('trim')|list %}
	{% for s in (STATUSES if STATUSES[0] != 'all' else status_list) %}
	{% if not s in command_list %}
	{% set dummy = command_list.__setitem__(s,[]) %}
	{% endif %}
	{% set dummy = command_list[s].append({'cmd':COMMAND, 'args':ARGS,
	'type':TYPE, 'when':WHEN,
	'filt_e':FILTER_ENTER,
	'filt_l':FILTER_LEAVE}) %}
	{% endfor %}
	
	
	{% elif ACTION == "CHANGE" %}
	{% if params.RESET_STACK|default(0)|int %}
	{% for dummy in range(status_stack|length) %}
	{% set dummy = status_stack.pop() %}
	{% endfor %}
	
	
	{% elif STATUS == "pop_status" %}
	{% set STATUS = (status_stack|default(['ready'], True)).pop() %}
	{% endif %}
	
	{% if STATUS not in status_list %}
	{action_raise_error("Status '%s' not valid."|format(STATUS))}
	{% endif %}
	
	{% if STATUS != last_status %}
	{% set is_printing =
	printer["gcode_macro print_start_set"].print.PRINT_START_PHASE|
	default("")|length != 0 %}
	{% set print_states = ('ALWAYS', 'PRINTING' if is_printing else 'IDLE') %}
	
	{% for c in command_list[last_status]|default([]) %}
	{% if c.type in ('BOTH','LEAVE') and c.when in print_states and
	(not c.filt_l or STATUS in c.filt_l) %}
	M400
	{c.cmd}{% if c.args %} TYPE=LEAVE WHEN={print_states[1]
	} LAST_STATUS={last_status} NEXT_STATUS={STATUS}{% endif %}
	{% endif %}
	{% endfor %}
	
	{% for c in command_list[STATUS]|default([]) %}
	{% if c.type in ('BOTH','ENTER') and c.when in print_states and
	(not c.filt_e or STATUS in c.filt_e) %}
	M400
	{c.cmd}{% if c.args %} TYPE=ENTER WHEN={print_states[1]
	} LAST_STATUS={last_status} NEXT_STATUS={STATUS}{% endif %}
	{% endif %}
	{% endfor %}
	SET_GCODE_VARIABLE MACRO=_km_print_status VARIABLE=last_status VALUE="'{
	STATUS}'"
	{% endif %}
	
	
	{% elif ACTION == "PUSH_STATUS" %}
	{% set dummy = status_stack.append(last_status) %}
	
	
	{% else %}
	{action_raise_error("Action '%s' not valid."|format(ACTION))}
	{% endif %}

[gcode_macro gcode_on_print_status]
description = Adds a gcode command for a status event.
	Usage: GCODE_ON_PRINT_STATUS STATUS=<status> COMMAND=<gcode> [ARGS=<1|0>]
	[WHEN=<PRINTING|IDLE|ALWAYS>]
	[TYPE=<ENTER|LEAVE|BOTH>]
	[FILTER_ENTER=<status list>]
	[FILTER_LEAVE=<status list>]
gcode = 
	{% set STATUS = (params.STATUS|lower).split(',')|map('trim')|list %}
	{% set TYPE = params.TYPE|default('ENTER')|trim|upper %}
	{% set WHEN = params.WHEN|default('PRINTING')|trim|upper %}
	{% set FILTER_ENTER =
	(params.FILTER_ENTER|default("")|trim|lower).split(',')|select()|list %}
	{% set FILTER_LEAVE =
	(params.FILTER_LEAVE|default("")|trim|lower).split(',')|select()|list %}
	
	
	{% set status_list = printer["gcode_macro _km_print_status"].status_list %}
	{% for s in STATUS %}
	{% if not (s in status_list or s == 'all' and STATUS|length == 1) %}
	{action_raise_error("STATUS parameter '%s' not valid."|format(s))}
	{% endif %}
	{% endfor %}
	
	{% if TYPE not in ('ENTER', 'LEAVE', 'BOTH') %}
	{action_raise_error("TYPE paramater '%s' not valid."|format(TYPE))}
	{% elif WHEN not in ('PRINTING', 'IDLE', 'ALWAYS') %}
	{action_raise_error("WHEN parameter '%s' not valid."|format(WHEN))}
	{% elif TYPE == 'ENTER' and FILTER_LEAVE %}
	{action_raise_error("FILTER_LEAVE not valid with TYPE=ENTER.")}
	{% elif TYPE == 'LEAVE' and FILTER_ENTER %}
	{action_raise_error("FILTER_ENTER not valid with TYPE=LEAVE.")}
	{% endif %}
	{% for f in FILTER_ENTER %}
	{% if f not in status_list %}
	{action_raise_error("FILTER_ENTER parameter '%s' not valid."|format(f))}
	{% endif %}
	{% endfor %}
	{% for f in FILTER_LEAVE %}
	{% if f not in status_list %}
	{action_raise_error("FILTER_LEAVE parameter '%s' not valid."|format(f))}
	{% endif %}
	{% endfor %}
	
	
	_KM_PRINT_STATUS ACTION=ADD_EVENT {rawparams}

[gcode_macro m201]
description = Sets maximum accelleration.
	Usage: M201 [X<accel>] [Y<accel>]
variable_max_accel = 1.7976931348623157e+308
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% if 'X' in params or 'Y' in params %}
	{% set accel = (params.X|default(params.Y)|float,
	params.Y|default(params.X)|float)|min %}
	SET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{accel}"
	{% else %}
	SET_VELOCITY_LIMIT
	{% endif %}

[gcode_macro m203]
description = Sets maximum velocity.
	Usage: M203 [X<velocity>] [Y<velocity>]
gcode = 
	{% if 'X' in params or 'Y' in params %}
	{% set velocity = (params.X|default(params.Y)|float,
	params.Y|default(params.X)|float)|min %}
	SET_VELOCITY_LIMIT VELOCITY="{velocity}"
	{% else %}
	SET_VELOCITY_LIMIT
	{% endif %}

[gcode_macro m205]
description = Sets square corner velocity.
	Usage: M203 [X<velocity>] [Y<velocity>]
gcode = 
	{% if 'X' in params or 'Y' in params %}
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY="{
	(params.X|default(0)|float, params.Y|default(0)|float)|min}"
	{% else %}
	SET_VELOCITY_LIMIT
	{% endif %}

[gcode_macro m900]
description = Sets pressure advance.
	Usage: M900 [K<advance>] [T<extruder_index>]
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% if km.pressure_advance_scale > 0.0 %}
	{% set extruder = "extruder" ~ params.T|replace('0', '')
	if "T" in params else printer.toolhead.extruder %}
	{% if 'K' in params %}
	SET_PRESSURE_ADVANCE EXTRUDER="{extruder}" ADVANCE="{
	params.K|float * km.pressure_advance_scale}"
	{% endif %}
	{% endif %}

[gcode_macro _reset_velocity_limits]
description = Sets maximum accelleration.
	Usage: M204 [S<accel>] [P<accel> T<accel>]
gcode = 
	SET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{1.7976931348623157e+308}"

[gcode_macro bed_mesh_calibrate]
rename_existing = _KM_BED_MESH_CALIBRATE_BASE
description = Wraps BED_MESH_CALIBRATE, scaling probe count to specified area.
	Usage: See Klipper documentation.
gcode = 
	BED_MESH_CALIBRATE_FAST{%for k in params%}{' '~k~'="'~params[k]~'"'}{%endfor%}

[gcode_macro g29]
gcode = 
	BED_MESH_CALIBRATE

[idle_timeout]
gcode = 
	_KM_IDLE_TIMEOUT

[respond]

[gcode_macro PRINT_START]
rename_existing = KM_PRINT_START
gcode = 
	
	STATUS_HOMING
	KM_PRINT_START {rawparams}
	STATUS_PRINTING

[board_pins EBB36_G0B1_v1.2]
mcu = ebbcan
aliases = 
aliases_step = 
	EXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15
aliases_limitsw = 
	LIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6
aliases_bltouch = 
	PROBE_1=PB9,PROBE_2=PB8
aliases_fans = 
	FAN0=PA1,FAN1=PA0
aliases_thermistors = 
	TH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7
aliases_heaters = 
	HE0=PB13
aliases_rgb = 
	RGBLED=PD3
aliases_adxl = 
	ADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11
aliases_i2c = 
	AUX0=PB3,AUX1=PB4

[neopixel sb_leds]
pin = ebbcan:RGBLED
chain_count = 3
color_order = GRB
initial_red = 0.0
initial_green = 0.0
initial_blue = 0.0
initial_white = 1.0

[save_variables]
filename = ~/printer_data/variables.cfg

[mcu CB1]
serial = /tmp/klipper_host_mcu

[mcu]
canbus_uuid = f94e10a9add8

[mcu ebbcan]
canbus_uuid = 57244ec148c0

[printer]
kinematics = corexy
max_velocity = 600
max_accel = 10000
max_accel_to_decel = 5000
max_z_velocity = 5
max_z_accel = 100

[stepper_x]
step_pin = PE2
dir_pin = !PB4
enable_pin = !PC11
microsteps = 16
rotation_distance = 40
endstop_pin = !ebbcan:LIMIT_2
position_endstop = 220
position_min = -4
position_max = 220
homing_speed = 50

[tmc2209 stepper_x]
uart_pin = PC10
diag_pin = PF3
run_current = 1.1

[tmc2209 stepper_y]
uart_pin = PF13
diag_pin = PF4
run_current = 1.1

[tmc2209 stepper_z]
uart_pin = PF9
diag_pin = PF5
run_current = 0.650

[tmc2209 extruder]
uart_pin = ebbcan:EXT_UART
diag_pin = ebbcan:LIMIT_3
run_current = 0.650

[stepper_y]
step_pin = PF12
dir_pin = !PF11
enable_pin = !PB3
microsteps = 16
rotation_distance = 40
endstop_pin = ^PF3
position_endstop = 220
position_min = -4
position_max = 220
homing_speed = 50

[stepper_z]
step_pin = PD7
dir_pin = !PD6
enable_pin = !PF10
microsteps = 16
rotation_distance = 8
endstop_pin = probe:z_virtual_endstop
position_max = 300
position_min = -3

[heater_bed]
heater_pin = PB7
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PA0
min_temp = 0
max_temp = 130
control = pid
pid_kp = 63.528
pid_ki = 0.875
pid_kd = 1153.041

[temperature_sensor raspberry_pi]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor mcu_temp]
sensor_type = temperature_mcu
min_temp = 0
max_temp = 100

[controller_fan MCU_Fan]
pin = PE6
heater = extruder
fan_speed = 1

[heater_fan heatbreak_cooling_fan]
pin = ebbcan:FAN0
kick_start_time = 0.25
heater = extruder
heater_temp = 50.0
fan_speed = 1

[fan]
pin = ebbcan:FAN1

[safe_z_home]
home_xy_position = 140, 140
speed = 100
z_hop = 10
z_hop_speed = 20

[extruder]
step_pin = ebbcan:EXT_STEP
dir_pin = ebbcan:EXT_DIR
enable_pin = !ebbcan:EXT_EN
microsteps = 16
rotation_distance = 4.71
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.750
max_extrude_only_distance = 101.0
heater_pin = ebbcan:HE0
sensor_type = ATC Semitec 104NT-4-R025H42G
sensor_pin = ebbcan:TH0
min_temp = 0
max_temp = 300
max_extrude_cross_section = 5
pressure_advance = 0.02
control = pid
pid_kp = 20.603
pid_ki = 0.988
pid_kd = 107.392

[bltouch]
sensor_pin = ebbcan:PROBE_2
control_pin = ebbcan:PROBE_1
x_offset = -40
y_offset = -17
samples = 2
samples_tolerance = 0.015
samples_tolerance_retries = 5
z_offset = 2.849

[bed_mesh]
speed = 100
horizontal_move_z = 5
mesh_min = 10, 27
mesh_max = 173, 200
probe_count = 5, 5
algorithm = bicubic
fade_start = 1
fade_end = 10

[bed_screws]
screw1 = 55,55
screw2 = 200,55
screw3 = 200,205
screw4 = 55,205

[screws_tilt_adjust]
screw1 = 65,55
screw1_name = front left screw
screw2 = 218,55
screw2_name = front right screw
screw3 = 218,215
screw3_name = rear right screw
screw4 = 65,215
screw4_name = rear left screw
horizontal_move_z = 10
speed = 50
screw_thread = CW-M4

[display]
lcd_type = st7920
cs_pin = PB12
sclk_pin = PB13
sid_pin = PB15
encoder_pins = ^PB14, ^PB10
click_pin = ^!PB2

[exclude_object]

[firmware_retraction]
retract_length = 0.4
retract_speed = 20
unretract_extra_length = 0
unretract_speed = 10

[input_shaper]
shaper_type_x = 2hump_ei
shaper_freq_x = 86.2
shaper_type_y = zv
shaper_freq_y = 44.8

[gcode_arcs]
resolution = 1.0

[adxl345]
cs_pin = ebbcan:ADXL_CS
spi_software_sclk_pin = ebbcan:ADXL_SCLK
spi_software_mosi_pin = ebbcan:ADXL_MOSI
spi_software_miso_pin = ebbcan:ADXL_MISO

[resonance_tester]
accel_chip = adxl345
probe_points = 
	120,120,20

[bed_mesh default]
version = 1
points = 
	0.027500, 0.058750, 0.091250, 0.182500
	-0.003750, 0.061250, 0.072500, 0.125000
	0.021250, 0.016250, 0.013750, 0.033750
	-0.023750, -0.018750, -0.036250, -0.037500
x_count = 4
y_count = 4
mesh_x_pps = 2
mesh_y_pps = 2
algo = bicubic
tension = 0.2
min_x = 48.75
max_x = 171.24
min_y = 48.75
max_y = 171.24
=======================
Extruder max_extrude_ratio=2.078758
mcu 'mcu': Starting CAN connect
Created a socket
webhooks client 281473539719904: New connection
webhooks client 281473539719904: Client info {'program': 'Moonraker', 'version': 'v0.8.0-92-g504a3a7'}
Loaded MCU 'mcu' 109 commands (v0.11.0-241-gffb5105b / gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2)
MCU 'mcu' config: ADC_MAX=4095 BUS_PINS_i2c1_PA9_PA10=PA9,PA10 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_i2c2_PB13_PB14=PB13,PB14 BUS_PINS_i2c3_PB3_PB4=PB3,PB4 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3=PB4,PB5,PB3 CANBUS_BRIDGE=1 CLOCK_FREQ=64000000 MCU=stm32g0b1xx PWM_MAX=255 RECEIVE_WINDOW=192 RESERVE_PINS_CAN=PD12,PD13 RESERVE_PINS_USB=PA11,PA12 RESERVE_PINS_crystal=PF0,PF1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
mcu 'CB1': Starting connect
Loaded MCU 'CB1' 113 commands (v0.11.0-241-gffb5105b / gcc: (Debian 10.2.1-6) 10.2.1 20210110 binutils: (GNU Binutils for Debian) 2.35.2)
MCU 'CB1' config: ADC_MAX=4095 CLOCK_FREQ=50000000 MCU=linux PCA9685_MAX=4096 PWM_MAX=32768 STATS_SUMSQ_BASE=256
mcu 'ebbcan': Starting CAN connect
Created a socket
Loaded MCU 'ebbcan' 109 commands (v0.11.0-241-gffb5105b / gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2)
MCU 'ebbcan' config: ADC_MAX=4095 BUS_PINS_i2c1_PA9_PA10=PA9,PA10 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_i2c2_PB13_PB14=PB13,PB14 BUS_PINS_i2c3_PB3_PB4=PB3,PB4 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3=PB4,PB5,PB3 CANBUS_FREQUENCY=1000000 CLOCK_FREQ=64000000 MCU=stm32g0b1xx PWM_MAX=255 RECEIVE_WINDOW=192 RESERVE_PINS_CAN=PB0,PB1 RESERVE_PINS_crystal=PF0,PF1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
mcu_temperature 'mcu' nominal base=-268.847262 slope=1298.126801
Sending MCU 'mcu' printer configuration...
Configured MCU 'mcu' (1024 moves)
Sending MCU 'CB1' printer configuration...
Configured MCU 'CB1' (1024 moves)
Sending MCU 'ebbcan' printer configuration...
Configured MCU 'ebbcan' (1024 moves)
Starting heater checks for heater_bed
bed_mesh: generated points
Index |  Tool Adjusted  |   Probe
  0   | (50.0, 44.0)    | (10.0, 27.0)
  1   | (90.8, 44.0)    | (50.8, 27.0)
  2   | (131.5, 44.0)   | (91.5, 27.0)
  3   | (172.2, 44.0)   | (132.2, 27.0)
  4   | (213.0, 44.0)   | (173.0, 27.0)
  5   | (213.0, 87.2)   | (173.0, 70.2)
  6   | (172.2, 87.2)   | (132.2, 70.2)
  7   | (131.5, 87.2)   | (91.5, 70.2)
  8   | (90.8, 87.2)    | (50.8, 70.2)
  9   | (50.0, 87.2)    | (10.0, 70.2)
  10  | (50.0, 130.5)   | (10.0, 113.5)
  11  | (90.8, 130.5)   | (50.8, 113.5)
  12  | (131.5, 130.5)  | (91.5, 113.5)
  13  | (172.2, 130.5)  | (132.2, 113.5)
  14  | (213.0, 130.5)  | (173.0, 113.5)
  15  | (213.0, 173.8)  | (173.0, 156.8)
  16  | (172.2, 173.8)  | (132.2, 156.8)
  17  | (131.5, 173.8)  | (91.5, 156.8)
  18  | (90.8, 173.8)   | (50.8, 156.8)
  19  | (50.0, 173.8)   | (10.0, 156.8)
  20  | (50.0, 217.0)   | (10.0, 200.0)
  21  | (90.8, 217.0)   | (50.8, 200.0)
  22  | (131.5, 217.0)  | (91.5, 200.0)
  23  | (172.2, 217.0)  | (132.2, 200.0)
  24  | (213.0, 217.0)  | (173.0, 200.0)
Starting heater checks for extruder
Stats 56.7: gcodein=0  mcu: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=3089 bytes_read=5676 bytes_retransmit=0 bytes_invalid=0 send_seq=221 receive_seq=218 retransmit_seq=0 srtt=0.002 rttvar=0.002 rto=0.025 ready_bytes=1665 upcoming_bytes=30 freq=64007188 CB1: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=819 bytes_read=4602 bytes_retransmit=0 bytes_invalid=0 send_seq=112 receive_seq=112 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49998012 adj=49979639 ebbcan: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=1436 bytes_read=4749 bytes_retransmit=0 bytes_invalid=0 send_seq=146 receive_seq=146 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64002370 adj=64003684  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=49.3 mcu_temp: temp=32.2 sysload=2.62 cputime=10.364 memavail=700156 print_time=0.010 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
webhooks: registering remote method 'shutdown_machine' for connection id: 281473539719904
webhooks: registering remote method 'reboot_machine' for connection id: 281473539719904
webhooks: registering remote method 'pause_job_queue' for connection id: 281473539719904
webhooks: registering remote method 'start_job_queue' for connection id: 281473539719904
Active bed surface: default; offset: -0.050
Stats 206.0: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5900 bytes_read=23084 bytes_retransmit=0 bytes_invalid=0 send_seq=409 receive_seq=409 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001160 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000015 bytes_write=1725 bytes_read=7398 bytes_retransmit=0 bytes_invalid=0 send_seq=263 receive_seq=263 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49996814 adj=49995587 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=2373 bytes_read=15019 bytes_retransmit=0 bytes_invalid=0 send_seq=300 receive_seq=300 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000385 adj=63999247  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=53.5 mcu_temp: temp=34.8 sysload=0.62 cputime=17.550 memavail=696952 print_time=209.256 buffer_time=0.550 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
Attempting MCU 'CB1' config_reset command
b'Got EOF when reading from device'
Attempting MCU 'ebbcan' reset command
Attempting MCU 'mcu' reset command
webhooks client 281473539719904: Disconnected
Restarting printer
Start printer at Mon Aug 21 00:40:40 2023 (1692578440.9 207.8)
===== Config file =====
[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancels the current print.
	Usage: CANCEL_PRINT
rename_existing = _KM_CANCEL_PRINT_BASE
gcode = 
	_KM_CHECK_IS_PRINTING
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=cancelling RESET_STACK=1
	SET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{True}"
	PRINT_END
	_KM_CANCEL_PRINT_BASE
	{% if printer.pause_resume.is_paused %}
	RESTORE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE MOVE=0
	{% endif %}
	CLEAR_PAUSE
	_KM_APPLY_PRINT_OFFSET RESET=1
	{% if 'virtual_sdcard' in printer and not printer.virtual_sdcard.is_active %}
	SDCARD_RESET_FILE
	{% endif %}

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
variable_restore_idle_timeout = 0
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set idle_timeout = client.idle_timeout|default(0) %}
	
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE={printer[printer.toolhead.extruder].target}
	
	{% if idle_timeout > 0 %}
	SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
	SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
	{% endif %}
	PAUSE_BASE
	_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
variable_last_extruder_temp = 0
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move = client.speed_move|default(velocity) %}
	
	
	{% if printer['gcode_macro PAUSE'].restore_idle_timeout > 0 %}
	SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro PAUSE'].restore_idle_timeout}
	{% endif %}
	M109 S{last_extruder_temp}
	_CLIENT_EXTRUDE
	RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	_KM_CHECK_IS_PRINTING
	{% set pause_next_layer =
	printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE | default(1) | int != 0 %}
	{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VALUE="{
	{ 'enable': False, 'call': MACRO }}" VARIABLE=pause_next_layer
	GCODE_AT_LAYER COMMAND="{MACRO|replace('\"','\\\"')
	}" CANCEL="{0 if ENABLE else 1}" LAYER="next"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	_KM_CHECK_IS_PRINTING
	{% set pause_at_layer =
	printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	
	{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined else
	params.LAYER is defined %}
	{% set LAYER = params.LAYER |
	default((pause_at_layer.layer|int,
	printer.print_stats.info.current_layer|int + 1)|max)%}
	{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}
	
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{
	{ 'enable': False, 'layer': 0, 'call': MACRO }}"
	{% if ENABLE and pause_at_layer.enable %}
	
	GCODE_AT_LAYER COMMAND="{pause_at_layer.call|replace('\"','\\\"')
	}" CANCEL="{1}" LAYER="{pause_at_layer.layer}"
	{% endif %}
	
	GCODE_AT_LAYER COMMAND="{MACRO|replace('\"','\\\"')
	}" CANCEL="{0 if ENABLE else 1}" LAYER="{LAYER}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = _KM_SET_PRINT_STATS_INFO
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	_KM_SET_PRINT_STATS_INFO {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.extruder.can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[gcode_macro _km_options]
variable_load_length = 90.0
variable_menu_temperature = [
	{'name' : 'PLA',  'extruder' : 200.0, 'bed' : 60.0},
	{'name' : 'PETG', 'extruder' : 230.0, 'bed' : 85.0},
	{'name' : 'ABS',  'extruder' : 245.0, 'bed' : 110.0, 'chamber' : 60}]
variable_start_purge_length = 50
variable_start_extruder_probing_temp = 150
variable_park_x = 200.0
variable_park_y = 200.0
gcode = 

[gcode_macro bed_mesh_calibrate_fast]
description = Wraps BED_MESH_CALIBRATE, scaling probe count to specified area.
	Usage: See Klipper documentation.
gcode = 
	
	BED_MESH_CHECK ABORT=1
	
	
	{% set calibrate_cmd =
	(printer["gcode_macro list_macros"].macros.bed_mesh_calibrate|
	default(["bed_mesh_calibrate"],True))[-1] %}
	
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set probe_mesh_padding = km.probe_mesh_padding %}
	{% set probe_min_count = km.probe_min_count %}
	{% set probe_count_scale = km.probe_count_scale %}
	{% set bed_mesh = printer.configfile.settings.bed_mesh %}
	
	
	{%if "mesh_radius" not in bed_mesh and
	"MESH_RADIUS" not in params %}
	{% set safe_min_x = bed_mesh.mesh_min[0] %}
	{% set safe_min_y = bed_mesh.mesh_min[1] %}
	{% set safe_max_x = bed_mesh.mesh_max[0] %}
	{% set safe_max_y = bed_mesh.mesh_max[1] %}
	
	
	{% if "MESH_MIN" in params %}
	{% set mesh_min_x = (params.MESH_MIN.split(",")[0]|float -
	probe_mesh_padding, safe_min_x)|max %}
	{% set mesh_min_y = (params.MESH_MIN.split(",")[1]|float -
	probe_mesh_padding, safe_min_y)|max %}
	{% else %}
	{% set mesh_min_x = safe_min_x %}
	{% set mesh_min_y = safe_min_y %}
	{% endif %}
	{% if "MESH_MAX" in params %}
	{% set mesh_max_x = (params.MESH_MAX.split(",")[0]|float +
	probe_mesh_padding, safe_max_x)|min %}
	{% set mesh_max_y = (params.MESH_MAX.split(",")[1]|float +
	probe_mesh_padding, safe_max_y)|min %}
	{% else %}
	{% set mesh_max_x = safe_max_x %}
	{% set mesh_max_y = safe_max_y %}
	{% endif %}
	
	{% set probe_count = bed_mesh.probe_count if not params.PROBE_COUNT else
	params.PROBE_COUNT.split(",")|map('int')|list %}
	
	{% if "PROBE_COUNT" not in params %}
	{% set max_x_probes = probe_count[0] %}
	{% set max_y_probes = probe_count[-1] %}
	
	{% set x_probes = (max_x_probes * (mesh_max_x - mesh_min_x) /
	(safe_max_x - safe_min_x) * probe_count_scale)
	| round(0) | int %}
	{% set x_probes = ((x_probes, probe_min_count)|max, max_x_probes)|min %}
	
	{% set y_probes = (max_y_probes * (mesh_max_y - mesh_min_y ) /
	(safe_max_y - safe_min_y) * probe_count_scale )
	| round(0) | int %}
	{% set y_probes = ((y_probes, probe_min_count)|max, max_y_probes)|min %}
	
	{% if x_probes > 6 and y_probes < 4 %}
	{% set y_probes = 4 %}
	{% elif y_probes > 6 and x_probes < 4 %}
	{% set x_probes = 4 %}
	{% endif %}
	{% set probe_count = [x_probes,y_probes] %}
	{% elif probe_count|length == 1 %}
	{% set dummy = probe_count.append(probe_count[0]) %}
	{% endif %}
	
	
	
	
	
	
	
	{% if "relative_reference_index" in bed_mesh %}
	{% set row = (bed_mesh.relative_reference_index / bed_mesh.probe_count[0]
	)|int%}
	{% set rrf_x = (((safe_max_x - safe_min_x) /
	(bed_mesh.probe_count[0] - 1))|round(2, 'floor')) *
	(bed_mesh.relative_reference_index %
	bed_mesh.probe_count[-1]) %}
	{% if row % 2 %}
	{% set rrf_x = safe_max_x - rrf_x %}
	{% else %}
	{% set rrf_x = safe_min_x + rrf_x %}
	{% endif %}
	{% set rrf_y = (((safe_max_y - safe_min_y) /
	(bed_mesh.probe_count[-1] - 1))|round(2, 'floor')) *
	row + safe_min_x %}
	{% set x_dist = (mesh_max_x - mesh_min_x) / (probe_count[0] - 1) %}
	{% set y_dist = (mesh_max_y - mesh_min_y) / (probe_count[1] - 1) %}
	{% set rrf = {'x':0, 'y':0, 'dist':safe_max_x**2+safe_max_y**2,'pos':0} %}
	{% for row in range(probe_count[1])%}
	{% for col in range(probe_count[0])%}
	{% if row % 2 %}
	{% set x = mesh_max_x - col * x_dist %}
	{% else %}
	{% set x = mesh_min_x + col * x_dist %}
	{% endif %}
	{% set y = mesh_min_y + row * y_dist %}
	{% set dist = ((x - rrf_x)**2 + (y - rrf_y)**2)**0.5 %}
	{% if dist < rrf.dist %}
	{% set dummy = rrf.__setitem__("dist", dist) %}
	{% set dummy = rrf.__setitem__("x", x) %}
	{% set dummy = rrf.__setitem__("y", y) %}
	{% set dummy = rrf.__setitem__("pos", row * probe_count[1] + col) %}
	{% endif %}
	{% endfor %}
	{% endfor %}
	{% if rrf.x != rrf_x or rrf.y != rrf_y %}
	{action_respond_info("relative_reference_index remapped to"
	" %d (%.2f,%.2f) from %d (%.2f,%.2f)" %
	(rrf.pos, rrf.x, rrf.y,
	bed_mesh.relative_reference_index, rrf_x, rrf_y))}
	{% endif %}
	{% set dummy = params.__setitem__("RELATIVE_REFERENCE_INDEX", rrf.pos) %}
	{% endif %}
	
	{% set dummy = params.__setitem__("MESH_MIN", mesh_min_x~","~mesh_min_y) %}
	{% set dummy = params.__setitem__("MESH_MAX", mesh_max_x~","~mesh_max_y) %}
	{% set dummy = params.__setitem__("PROBE_COUNT", probe_count|join(',')) %}
	
	{% if probe_count[0] > 6 or probe_count[1]|default(0) > 6 %}
	{% set dummy = params.__setitem__("ALGORITHM", "bicubic") %}
	{% endif %}
	
	{% if "MESH_MIN" in params or "MESH_MAX" in params %}
	BED_MESH_CHECK {rawparams}
	{% endif %}
	{% else %}
	
	{% set dummy = params.__delitem__("MESH_MIN") %}
	{% set dummy = params.__delitem__("MESH_MAX") %}
	{% endif %}
	
	{% if "MESH_MIN" in params or "MESH_MAX" in params %}
	BED_MESH_CHECK ABORT=1{%for k in params%}{' '~k~'="'~params[k]~'"'}{%
	endfor%}
	{% endif %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=meshing
	{calibrate_cmd}{%for k in params%}{' '~k~'="'~params[k]~'"'}{%endfor%}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro bed_mesh_check]
description = Warns if bed_mesh config may generate an invalid mesh.
	Usage: BED_MESH_CHECK [MESH_MIN=<x,y>] [MESH_MAX=<x,y>] [ABORT=<0|1>]
gcode = 
	{% if printer.bed_mesh is defined %}
	{% set action = action_respond_info if params.ABORT|default(0)|int == 0 else
	action_raise_error %}
	{% set settings = printer.configfile.settings %}
	{% set x_min = settings.stepper_x.position_min %}
	{% set y_min = settings.stepper_y.position_min %}
	{% set x_max = settings.stepper_x.position_max %}
	{% set y_max = settings.stepper_y.position_max %}
	
	{% set label = "[bed_mesh] config" %}
	{% if "MESH_MIN" in params %}
	{% set label = "BED_MESH_CALIBRATE params" %}
	{% set mesh_min_x = params.MESH_MIN.split(",")[0]|float %}
	{% set mesh_min_y = params.MESH_MIN.split(",")[1]|float %}
	{% else %}
	{% set mesh_min_x = settings.bed_mesh.mesh_min[0] %}
	{% set mesh_min_y = settings.bed_mesh.mesh_min[1] %}
	{% endif %}
	{% if "MESH_MAX" in params %}
	{% set label = "BED_MESH_CALIBRATE params" %}
	{% set mesh_max_x = params.MESH_MAX.split(",")[0]|float %}
	{% set mesh_max_y = params.MESH_MAX.split(",")[1]|float %}
	{% else %}
	{% set mesh_max_x = settings.bed_mesh.mesh_max[0] %}
	{% set mesh_max_y = settings.bed_mesh.mesh_max[1] %}
	{% endif %}
	
	{% if "bltouch" in settings %}
	{% set x_offset = settings.bltouch.x_offset %}
	{% set y_offset = settings.bltouch.y_offset %}
	{% set probe = "bltouch" %}
	{% elif "probe" in settings %}
	{% set x_offset = settings.probe.x_offset %}
	{% set y_offset = settings.probe.y_offset %}
	{% set probe = "probe" %}
	{% else %}
	{% set x_offset = 0.0 %}
	{% set y_offset = 0.0 %}
	{% endif %}
	
	{% set output = [] %}
	{% set warn =
	"* mesh_%s (%f, %f) adjusted by " ~ probe ~
	".%s_offset (%f) can move out of range for "
	"stepper_%s.position_%s (%f)." %}
	{% if x_offset > 0 and (mesh_min_x - x_offset) < x_min %}
	{% set dummy = output.append(warn % ('min', mesh_min_x, mesh_min_y,
	'x', x_offset, 'x', 'min', x_min)) %}
	{% elif x_offset < 0 and (mesh_max_x - x_offset) > x_max %}
	{% set dummy = output.append(warn % ('max', mesh_max_x, mesh_max_y,
	'x', x_offset, 'x', 'max', x_max)) %}
	{% endif %}
	{% if y_offset > 0 and (mesh_min_y - y_offset) < y_min %}
	{% set dummy = output.append(warn % ('min', mesh_min_x, mesh_min_y,
	'y', y_offset, 'y', 'min', y_min)) %}
	{% elif y_offset < 0 and (mesh_max_y - y_offset) > y_max %}
	{% set dummy = output.append(warn % ('max', mesh_max_x, mesh_max_y,
	'y', y_offset, 'y', 'max', y_max)) %}
	{% endif %}
	
	{% if output %}
	{ action(
	"Warning: The following issue(s) were detected in your " ~ label ~
	":\n" ~ output|join("\n")) }
	{% endif %}
	{% endif %}

[gcode_macro _apply_bed_surface_offset]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% if surfaces.active %}
	SET_SURFACE_ACTIVE SURFACE={surfaces.active}
	{% endif %}

[gcode_macro _init_surfaces]
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% if "bed_surfaces" in printer.save_variables.variables %}
	{% set old_surfaces = printer.save_variables.variables.bed_surfaces %}
	{% else %}
	{% set old_surfaces = { 'active' : '', 'available' : {} } %}
	{% endif %}
	{% set settings = printer.configfile.settings %}
	{% set new_probe_z = (settings.probe | default(settings.bltouch) |
	default(settings.smart_effector) | default({})
	).z_offset|default(0.0)|float %}
	{% set new_endstop_z = (settings.stepper_z | default({})).position_endstop |
	default(0.0)|float %}
	{% if 'endstop_z' not in old_surfaces %}
	{% set dummy = old_surfaces.__setitem__('endstop_z', new_endstop_z) %}
	{% endif %}
	{% if 'probe_z' not in old_surfaces %}
	{% set dummy = old_surfaces.__setitem__('probe_z', new_probe_z) %}
	{% endif %}
	{% set surfaces = { 'active' : '', 'available' : {},
	'endstop_z' : old_surfaces.endstop_z,
	'probe_z' : old_surfaces.probe_z } %}
	{% for s in km.bed_surfaces %}
	{% set s = s.split()|join(' ')|lower %}
	{% if s|length > km.bed_surface_max_name_length or
	s|list|select("in", " \r\n\"\'")|list %}
	{action_raise_error('Invalid surface name "%s". Name must be %d or fewer '
	'characters and must not include space or quotation characters'
	| format(s, km.bed_surface_max_name_length))}
	{% endif %}
	{% if s in old_surfaces.available %}
	{% set dummy = surfaces.available.__setitem__(s,
	old_surfaces.available[s]) %}
	{% else %}
	{% set dummy = surfaces.available.__setitem__(s, {'offset' : 0.0}) %}
	{% endif %}
	{% endfor %}
	{% if old_surfaces.active in surfaces.available %}
	{% set dummy = surfaces.__setitem__('active', old_surfaces.active) %}
	{% elif km.bed_surfaces %}
	{% set dummy = surfaces.__setitem__('active', km.bed_surfaces[0]|lower) %}
	{% endif %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	_APPLY_BED_SURFACE_OFFSET
	{% if new_probe_z != surfaces.probe_z or
	new_endstop_z != surfaces.endstop_z %}
	{ action_respond_info(
	'Z probe offset or endstop position changed. Run ADJUST_SURFACE_OFFSETS '
	'to adjust the offset for all saved surfaces by the change differential, '
	'or run ADJUST_SURFACE_OFFSETS IGNORE=1 to hide this message without '
	'making changes.') }
	{% endif %}

[gcode_macro adjust_surface_offsets]
description = Adjusts surface offsets to account for changes in the Z endstop
	position or probe Z offset.
	Usage: ADJUST_SURFACE_OFFSETS [IGNORE]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% set settings = printer.configfile.settings %}
	{% set new_probe_z = (settings.probe | default(settings.bltouch) |
	default(settings.smart_effector) | default({})
	).z_offset|default(0.0)|float %}
	{% set new_endstop_z = (settings.stepper_z | default({})).position_endstop |
	default(0.0)|float %}
	{% set diff = (surfaces.probe_z - new_probe_z +
	surfaces.endstop_z - new_endstop_z)|round(6) %}
	{% if not params.IGNORE|default(0)|int %}
	{% for s in surfaces.available %}
	{% set offset = (surfaces.available[s].offset - diff)|round(6) %}
	{% set dummy = surfaces.available.__setitem__(s, {'offset' : offset}) %}
	{% endfor %}
	{ action_respond_info("All bed surfaces now adjusted by %1.4f"|
	format(diff))}
	{% elif diff != 0 %}
	{ action_respond_info("Status cleared without adjustment") }
	{% endif %}
	{% set dummy = surfaces.__setitem__('endstop_z', new_endstop_z| round(6)) %}
	{% set dummy = surfaces.__setitem__('probe_z', new_probe_z|round(6)) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"

[gcode_macro set_surface_offset]
description = Sets the offset for a surface and moves the toolhead (if homed).
	Usage: SET_SURFACE_OFFSET [OFFSET=<offset>] [SURFACE=<surface>]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}
	{% if SURFACE not in surfaces.available %}
	{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }
	{% endif %}
	{% set active = surfaces.available[SURFACE] %}
	
	{% set OFFSET = params.OFFSET|default(active.offset)|float %}
	{% if OFFSET != active.offset %}
	{% set dummy = surfaces.available[SURFACE].__setitem__("offset", OFFSET) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	{% if SURFACE == surfaces.active %}
	_km_set_gcode_offset_base Z="{OFFSET}" MOVE={
	1 if printer.toolhead.homed_axes == 'xyz' else 0}
	{% endif %}
	{% endif %}
	{ action_respond_info("Bed surface: %s Offset: %.3f"
	| format(SURFACE, OFFSET)) }
	
	{% set dummy = None if True else "
	{% set dummy = params.SURFACE|default(active surface) %}
	{% set dummy = params.OFFSET|default(none)|float %}
	" %}

[gcode_macro set_surface_active]
description = Sets the active bed surface and moves the toolhead (if homed). If
	no SURFACE argument is present the available surfaces are listed and the
	active one is preceded by a "*".
	Usage: SET_SURFACE_ACTIVE [SURFACE=<surface>]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% if "SURFACE" in params %}
	{% set SURFACE = params.SURFACE|lower %}
	{% if SURFACE not in surfaces.available %}
	{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }
	{% endif %}
	{% if SURFACE != surfaces.active %}
	{% set dummy = surfaces.__setitem__("active", SURFACE) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	{% endif %}
	{% if surfaces.available[SURFACE].offset !=
	printer.gcode_move.homing_origin.z %}
	_km_set_gcode_offset_base Z="{surfaces.available[SURFACE].offset
	}" MOVE={1 if printer.toolhead.homed_axes == 'xyz' else 0}
	{% endif %}
	{action_respond_info("Active bed surface: %s; offset: %.3f"
	| format(SURFACE, surfaces.available[SURFACE].offset))}
	{% else %}
	{% set output = [] %}
	{% for s in surfaces.available|list|sort %}
	{% set dummy = output.append("%s&nbsp;%s - offset: %.3f"
	| format("*" if s == surfaces.active else "&nbsp;",
	s, surfaces.available[s].offset)) %}
	{% endfor %}
	{action_respond_info(output|join('\n'))}
	{% endif %}
	
	{% set dummy = None if True else "
	{% set dummy = params.SURFACE|default(none) %}
	" %}

[gcode_macro set_gcode_offset]
description = Wraps SET_GCODE_OFFSET to update the current bed sheet offset.
	Usage: SET_GCODE_OFFSET [X=<pos>|X_ADJUST=<adjust>]
	[Y=<pos>|Y_ADJUST=<adjust>]
	[Z=<pos>|Z_ADJUST=<adjust>]
	[MOVE=1 [MOVE_SPEED=<speed>]]
rename_existing = _KM_SET_GCODE_OFFSET_BASE
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% if surfaces.active and
	not printer["gcode_macro _km_save_state"].is_ephemeral %}
	{% set Z = params.Z|default(0.0)|float|round(6) %}
	{% set Z_ADJUST = params.Z_ADJUST|default(0.0)|float %}
	{% if 'Z' in params and
	Z != surfaces.available[surfaces.active].offset %}
	{% set dummy = surfaces.available[surfaces.active].__setitem__("offset",
	Z) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	{% elif Z_ADJUST != 0.0 %}
	{% set dummy = surfaces.available[surfaces.active].__setitem__(
	"offset", (Z_ADJUST + printer.gcode_move.homing_origin.z)|round(6)) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	{% endif %}
	{% endif %}
	_km_set_gcode_offset_base{% for k in params%}{' '~k~'="'~params[k]~'"'
	}{% endfor %}

[gcode_macro make_surface_mesh]
description = Generates and saves a mesh to automatically load in PRINT_START.
	Usage: MAKE_SURFACE_MESH [SURFACE=<surface>] [BED=<probing temperature>]
	[EXTRUDER=<probing temperature>]
	[MESH_MULTIPLIER=<integer multiple of mesh density>]
	[bed_mesh_calibrate parameters]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}
	{% if SURFACE not in surfaces.available %}
	{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }
	{% endif %}
	{% set dummy = params.__setitem__('PROFILE', SURFACE) %}
	{% set BED = params.BED|default(70) | int %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set EXTRUDER = params.EXTRUDER|default(km.start_extruder_probing_temp) |
	int %}
	{% set MESH_MULTIPLIER = (params.MESH_MULTIPLIER|default(2)|int, 1)|max %}
	
	M104 S{EXTRUDER}
	M140 S{BED}
	G28
	
	
	{% if surfaces.available[SURFACE].offset !=
	printer.gcode_move.homing_origin.z %}
	_km_set_gcode_offset_base Z="{surfaces.available[SURFACE].offset
	}" MOVE=1
	{% endif %}
	
	
	{% if BED > 0 %}
	{action_respond_info("Stabilizing bed at %iC" | format(BED,))}
	_KM_PARK_IF_NEEDED HEATER=heater_bed RANGE=0.5
	{% if BED < (printer.heater_bed.temperature - 0.2) %}
	M190 R{BED}
	G4 P{((km.start_bed_heat_delay * 10, 30000)|min,
	km.start_bed_heat_delay)|max}
	{% else %}
	G4 P{km.start_bed_heat_delay}
	{% endif %}
	M190 R{BED}
	{% endif %}
	
	{% if EXTRUDER > 0 %}
	_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=2
	M109 R{km.start_extruder_probing_temp}
	{% endif %}
	
	{% if km.start_home_z_at_temp and not bed_at_target %}
	G28 Z
	{% endif %}
	
	
	
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count
	if not params.PROBE_COUNT else
	params.PROBE_COUNT.split(",")|map('int')|list %}
	{% set dummy = params.__setitem__('PROBE_COUNT',(
	MESH_MULTIPLIER * (probe_count[0] - 1) + 1,
	MESH_MULTIPLIER * (probe_count[-1] - 1) + 1,)|join(',')) %}
	
	BED_MESH_CLEAR
	BED_MESH_CALIBRATE_FAST {%
	for k in params|reject('in',['BED','SURFACE'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor %}
	SAVE_CONFIG
	
	
	{% set dummy = None if True else "
	{% set dummy = params.MESH_MULTIPLIER|default(2) %}
	{% set dummy = params.SURFACE|default(active surface) %}
	" %}

[gcode_macro load_surface_mesh]
description = Attempts to load a mesh associated with the specified surface.
	Usage: LOAD_SURFACE_MESH [SURFACE=<surface>]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}
	{% if SURFACE != surfaces.active %}
	SET_SURFACE_ACTIVE SURFACE={SURFACE}
	{% endif %}
	
	{% if SURFACE in printer.bed_mesh.profiles %}
	{% set mesh = printer.bed_mesh.profiles[SURFACE].mesh_params %}
	{% set default = printer.configfile.settings.bed_mesh %}
	
	{% if mesh.min_x <= (default.mesh_min[0] + 0.5) and
	mesh.min_y <= (default.mesh_min[1] + 0.5) and
	mesh.max_x >= (default.mesh_max[0] - 0.5) and
	mesh.max_y >= (default.mesh_max[1] - 0.5) and
	mesh.x_count >= default.probe_count[0] and
	mesh.y_count >= default.probe_count[-1] %}
	
	BED_MESH_PROFILE LOAD={SURFACE}
	{action_respond_info("Loaded mesh: %s" | format(SURFACE,))}
	{% endif %}
	{% endif %}

[gcode_macro m300]
description = Emits and audible beep.
	Usage: M300 [P<duration>] [S<frequency>]
gcode = 
	{% set settings = printer.configfile.settings %}
	{% if "output_pin beeper" in printer %}
	{% set P = (params.P|default(100)|int, 0)|max %}
	{% set S = (params.S|default(1000)|int, 1)|max %}
	SET_PIN PIN=beeper VALUE={% if settings["output_pin beeper"].pwm %}{
	settings["output_pin beeper"].scale|default(1.0) * 0.5
	} CYCLE_TIME={ 1.0 / S }{% else %}1{% endif %}
	G4 P{P}
	SET_PIN PIN=beeper VALUE=0
	{% else %}
	{action_respond_info(
	"M300 is disabled. To enable create an [output_pin beeper] config.")}
	{% endif %}

[gcode_macro set_draw_params]
description = Sets the default parameters used by DRAW_LINE_TO.
	Usage: SET_DRAW_PARAMS [HEIGHT=<mm>] [WIDTH=<mm>] [FEEDRATE=<mm/m>]
variable_height = 0.2
variable_width = 0.0
variable_feedrate = 1200
gcode = 
	{% set dparams = printer["gcode_macro set_draw_params"] %}
	{% for k in params %}
	{% set kl = k|lower %}
	{% if kl in dparams %}
	{% if dparams[kl] is float %}
	{% set v = params[k]|float %}
	{% elif dparams[kl] is integer %}
	{% set v = params[k]|int %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=set_draw_params VARIABLE={kl} VALUE="{v}"
	{% endif %}
	{% endfor %}

[gcode_macro draw_line_to]
description = Extrudes a line of filament at the specified height and width from
	the current coordinate to the supplied XY coordinate. (The height is used only
	to calculate the extrusion volume.)
	Usage: DRAW_LINE_TO [X=<pos>] [Y=<pos>] [HEIGHT=<mm>] [WIDTH=<mm>]
	[FEEDRATE=<mm/m>]
gcode = 
	{% set dparams = printer["gcode_macro set_draw_params"] %}
	{% set position = printer.gcode_move.gcode_position %}
	{% set X = params.X|default(position.x)|float %}
	{% set Y = params.Y|default(position.y)|float %}
	{% set HEIGHT = params.HEIGHT|default(dparams.height)|float %}
	{% set WIDTH = params.WIDTH|default(dparams.width)|float %}
	{% set FEEDRATE = params.FEEDRATE|default(dparams.feedrate)|int %}
	
	{% set distance = ((X - position.x) ** 2 + (Y - position.y) ** 2) ** 0.5 %}
	
	{% set filament_area = 3.14159 *
	(printer.configfile.settings[
	printer.toolhead.extruder].filament_diameter ** 2) / 4 %}
	{% set E = distance * ((WIDTH * HEIGHT) / filament_area) %}
	
	
	_KM_SAVE_GCODE_STATE NAME=_KM_PURGE
	G90
	G92 E0.0
	G1 X{"%.3f" % X} Y{"%.3f" % Y} E{"%.5f" % E} F{FEEDRATE}
	_KM_RESTORE_GCODE_STATE NAME=_KM_PURGE MOVE=0

[gcode_macro draw_purge_line]
description = Purges the specified length of filament as a line (or rows of
	lines) in front of the supplied print area. If no print area is specified the
	purge lines are drawn at the front edge of the maximum printable area. If no
	printable area is set it defaults to the XY axis limits.
	Usage: DRAW_PURGE_LINE [PRINT_MIN=<X,Y>] [PRINT_MAX=<X,Y>] [HEIGHT=<mm>]
	[WIDTH=<mm>] [LENGTH=<mm>]
gcode = 
	
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set origin = printer.gcode_move.homing_origin %}
	{% set dummy = km.__setitem__('print_min', (km.print_min[0] - origin.x,
	km.print_min[1] - origin.y)) %}
	{% set dummy = km.__setitem__('print_max', (km.print_max[0] - origin.x,
	km.print_max[1] - origin.y)) %}
	
	{% if "PRINT_MIN" in params %}
	{% set PRINT_MIN = (
	(params.PRINT_MIN.split(",")[0]|float, km.print_min[0])|max,
	(params.PRINT_MIN.split(",")[1]|float, km.print_min[1])|max
	) %}
	{% else %}
	{% set PRINT_MIN = km.print_min %}
	{% endif %}
	{% if "PRINT_MAX" in params %}
	{% set PRINT_MAX = (
	(params.PRINT_MAX.split(",")[0]|float, km.print_max[0])|min,
	(params.PRINT_MAX.split(",")[1]|float, km.print_max[1])|min
	) %}
	{% else %}
	{% set PRINT_MAX = km.print_max %}
	{% endif %}
	{% set extruder = printer.toolhead.extruder|string %}
	{% set HEIGHT = params.HEIGHT|default(
	printer.configfile.settings[extruder].nozzle_diameter * 0.625)|float %}
	{% set WIDTH = params.WIDTH|default(
	printer.configfile.settings[extruder].nozzle_diameter * 1.25)|float %}
	{% set LENGTH = params.LENGTH|default(km.start_purge_length)|float %}
	
	{% set dparams = printer["gcode_macro set_draw_params"] %}
	{% set filament_area = 3.14159 *
	(printer.configfile.settings[extruder].filament_diameter ** 2) / 4 %}
	{% set purge_length = (LENGTH * filament_area) / (WIDTH * HEIGHT) %}
	{% set printable_length = PRINT_MAX[0] - PRINT_MIN[0] %}
	{% set purge_rows = (purge_length / printable_length)|round(0,'ceil')|int %}
	{% set printable_inset = (printable_length - purge_length / purge_rows) / 2 %}
	{% set PRINT_MIN = (PRINT_MIN[0] + printable_inset, PRINT_MIN[1]) %}
	{% set PRINT_MAX = (PRINT_MAX[0] - printable_inset, PRINT_MAX[1]) %}
	
	{% set y_start = (km.print_min[1], PRINT_MIN[1] - km.start_purge_clearance -
	(purge_rows + 0.5) * WIDTH )|max %}
	G90
	
	G1 X{"%.3f" % (PRINT_MIN[0] - 30, km.print_min[0])|max} Y{
	"%.3f" % (y_start - 10, km.print_min[1])|max} F{km.travel_speed_xy}
	
	G1 X{"%.3f" % (PRINT_MIN[0] - 2, km.print_min[0])|max} Y{"%.3f" % y_start} Z{
	"%.4f" % HEIGHT} F{km.travel_speed_xy}
	
	G92 E0.0
	G1 E{"%.3f" % km.start_purge_prime_length} F{km.load_priming_speed}
	G92 E0.0
	
	G1 X{"%.3f" % PRINT_MIN[0]} F{km.travel_speed_xy}
	{% for n in range(purge_rows - 1) %}
	{% set x_pos = PRINT_MIN[0] if n % 2 else PRINT_MAX[0] %}
	DRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{
	WIDTH * n + y_start}"
	DRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{
	WIDTH * (n + 1) + y_start}"
	{% endfor %}
	{% set x_pos = PRINT_MAX[0] if purge_rows % 2 else PRINT_MIN[0] %}
	DRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{
	WIDTH * (purge_rows - 1) + y_start}"
	G92 E0.0

[gcode_macro _check_fan_params]
gcode = 
	{% set MAXIMUM = params.MAXIMUM|default(
	printer["gcode_macro set_fan_scaling"].maximum)|int %}
	{% set MINIMUM = params.MINIMUM|default(
	printer["gcode_macro set_fan_scaling"].minimum)|int %}
	
	{% if params.SCALE and params.SCALE|float <= 0 %}
	{ action_raise_error("SCALE must be a positive value.") }
	{% elif MINIMUM < 0 or MINIMUM > 255 %}
	{ action_raise_error("MINIMUM must be between 0 and 255.") }
	{% elif MAXIMUM < 0 or MAXIMUM > 255 %}
	{ action_raise_error("MAXIMUM must be between 0 and 255.") }
	{% elif params.SPEED and (params.SPEED|int < 0 or params.SPEED|int > 255) %}
	{ action_raise_error("SPEED must be between 0 and 255.") }
	{% elif params.BOOST and (params.BOOST|int < 0 or params.BOOST|int > 255) %}
	{ action_raise_error("BOOST must be between 0 and 255.") }
	{% elif MINIMUM > MAXIMUM %}
	{ action_raise_error("MINIMUM must be less than or equal to MAXIMUM.") }
	{% endif %}

[gcode_macro set_fan_scaling]
description = Sets fan scaling factors applied to M106 command. If a speed is
	provided it will be adjusted according to the scaling parameters.
	Usage: SET_FAN_SCALING [SCALE=<scale>] [BOOST=<boost>] [MAXIMUM=<max>]
	[MINIMUM=<min>] [SPEED=<speed>]
variable_scale = 1.0
variable_boost = 0
variable_minimum = 0
variable_maximum = 255
variable_real_speed = 0
gcode = 
	_CHECK_FAN_PARAMS{% for k in params %}{' '~k~'='~params[k]}{% endfor %}
	{% set SCALE = params.SCALE|default(scale)|float %}
	{% set BOOST = params.BOOST|default(boost)|float %}
	{% set MAXIMUM = params.MAXIMUM|default(maximum)|int %}
	{% set MINIMUM = params.MINIMUM|default(minimum)|int %}
	{% set SPEED = params.SPEED|default(real_speed)|int %}
	
	{% if SCALE != 1.0 or BOOST != 0 or MAXIMUM != 255 or MINIMUM != 0 %}
	{action_respond_info("Fan: Scale: %.2f Minimum:%i Maximum: %i Speed: %i"|
	format(SCALE, MINIMUM, MAXIMUM, SPEED))}
	{% endif %}
	
	
	{% if params|length > 0 %}
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=scale VALUE="{SCALE}"
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=boost VALUE="{BOOST}"
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=minimum VALUE="{MINIMUM}"
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=maximum VALUE="{MAXIMUM}"
	
	M106 S{SPEED}
	{% endif %}
	
	{% set dummy = None if True else "
	{% set dummy = params.SCALE|default(1.0)|float %}
	{% set dummy = params.BUMP|default(0)|int %}
	{% set dummy = params.MAXIMUM|default(255)|int %}
	{% set dummy = params.MINIMUM|default(0)|int %}
	{% set dummy = params.SPEED|default(current speed)|int %}
	" %}

[gcode_macro reset_fan_scaling]
description = Clears all fan scaling factors.
	Usage: RESET_FAN_SCALING
gcode = 
	SET_FAN_SCALING SCALE=1.0 BOOST=0 MAXIMUM=255 MINIMUM=0

[gcode_macro m106]
description = Wraps M106 to implement scaling overrides.
rename_existing = M106.6245197
gcode = 
	{% set S = params.S|default(255)|int %}
	{% set scale = printer["gcode_macro set_fan_scaling"] %}
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=real_speed VALUE="{S}"
	M106.6245197 S{((((S + scale.boost) * scale.scale) | round | int,
	scale.minimum) | max, scale.maximum) | min}

[gcode_macro _load_unload]
gcode = 
	{% set saved_extruder = printer.toolhead.extruder %}
	{% set EXTRUDER = params.EXTRUDER|default(saved_extruder)|lower %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% set BEEPS = params.BEEPS|default(8)|int if "output_pin beeper" in printer
	else 0 %}
	{% set default_minimum = km.load_min_temp if km.load_min_temp else
	(printer.configfile.settings[EXTRUDER].min_extrude_temp + 5) %}
	{% if 'MINIMUM' in params %}
	{% set MINIMUM = params.MINIMUM|int %}
	
	{% elif printer.pause_resume.is_paused and printer[EXTRUDER].target == 0 and
	printer["gcode_macro resume"].saved_extruder_temp %}
	{% set MINIMUM = printer["gcode_macro resume"].saved_extruder_temp %}
	
	{% elif printer[EXTRUDER].target > default_minimum %}
	{% set MINIMUM = printer[EXTRUDER].target %}
	{% else %}
	{% set MINIMUM = default_minimum %}
	{% endif %}
	{% if MINIMUM < printer.configfile.settings[EXTRUDER].min_extrude_temp %}
	{ action_raise_error("Extrude below minimum temp.") }
	{% elif printer.pause_resume.is_paused %}
	
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"
	{% endif %}
	{% set SPEED = params.SPEED|default(km.load_speed)|int %}
	{% set priming_length = km.load_priming_length %}
	{% set LENGTH = params.LENGTH|default(km.load_length)|float - priming_length%}
	{% if LENGTH < 0 %}
	{% set priming_length = (priming_length + LENGTH, 0)|max %}
	{% set LENGTH = 0 %}
	{% endif %}
	SAVE_GCODE_STATE NAME=_KM_LOAD_UNLOAD
	{% if EXTRUDER != saved_extruder%}
	ACTIVATE_EXTRUDER EXTRUDER={EXTRUDER}
	{% endif %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	{% if not printer.extruder.can_extrude or
	printer[EXTRUDER].target < default_minimum %}
	{action_respond_info("Preheating %s to %d" | format(EXTRUDER, MINIMUM))}
	M109 S{MINIMUM}
	{% endif %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS={"filament_load"
	if params.LOAD|int else "filament_unload"}
	M83
	{% set priming_speed = (km.load_priming_speed, SPEED)|min %}
	{% if params.LOAD|int %}
	G0 E{LENGTH} F{SPEED}
	G0 E{priming_length} F{priming_speed}
	G0 E{'%.4f' % -printer["gcode_macro resume"].saved_e} F{km.load_speed}
	{% else %}
	{% set pre_prime_distance = 5.0 %}
	{% set shaping_moves = 5 %}
	{% set shaping_distance = (shaping_moves * (1 + shaping_moves)/20) %}
	
	G0 E{pre_prime_distance} F{SPEED}
	G4 P500
	G0 E{'%.4f' % -(priming_length - shaping_distance)} F{SPEED}
	
	
	{% for i in range(1, shaping_moves + 1) %}
	G0 E2 F{priming_speed}
	G0 E-{2 + (0.1 * i)} F{priming_speed}
	{% endfor %}
	
	G0 E{'%.4f' % -(LENGTH + pre_prime_distance)} F{SPEED}
	{% endif %}
	RESTORE_GCODE_STATE NAME=_KM_LOAD_UNLOAD
	
	
	{% for i in range(BEEPS) %}
	M300 P100
	G4 P200
	{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro LOAD_FILAMENT]
description = Loads filament to the extruder.
	Usage: LOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]
	[EXTRUDER=<extruder>] [MINIMUM=<temperature>]
	[BEEPS=<beep count on completion>]
gcode = 
	_LOAD_UNLOAD LOAD=1{% for k in params
	%}{' '~k~'="'~params[k]~'"'}{% endfor %}
	
	
	{% set dummy = None if True else "
	M109
	{% set dummy = params.LENGTH|default(variable_load_length)|float %}
	{% set dummy = params.SPEED|default(variable_load_speed)|float %}
	{% set dummy = params.EXTRUDER|default(current extruder) %}
	{% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}
	{% set dummy = params.BEEPS|default(10)|int %}
	" %}

[gcode_macro UNLOAD_FILAMENT]
description = Unloads filament from the extruder.
	Usage: UNLOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]
	[EXTRUDER=<extruder>] [MINIMUM=<temperature>]
	[BEEPS=<beep count on completion>]
gcode = 
	_LOAD_UNLOAD LOAD=0{% for k in params
	%}{' '~k~'="'~params[k]~'"'}{% endfor %}
	
	
	{% set dummy = None if True else "
	M109
	{% set dummy = params.LENGTH|default(variable_load_length)|float %}
	{% set dummy = params.SPEED|default(variable_load_speed)|float %}
	{% set dummy = params.EXTRUDER|default(default extruder) %}
	{% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}
	{% set dummy = params.BEEPS|default(10)|int %}
	" %}

[gcode_macro _pause_inner_m700]
gcode = 
	{% set extruder = "extruder" ~ params.T|replace('0', '')
	if "T" in params else printer.toolhead.extruder %}
	{% if extruder != printer.toolhead.extruder%}
	ACTIVATE_EXTRUDER EXTRUDER={extruder}
	{% endif %}
	
	{% set z_param = (' Z="%f"' % params.Z) if 'Z' in params else "" %}
	
	{% if printer.idle_timeout.state|string == "Printing" %}
	PAUSE B="{0}" P=2{z_param}
	{% elif not printer.pause_resume.is_paused%}
	PARK B="{0}" P=2{z_param}
	{% endif %}

[gcode_macro m701]
description = Pauses/parks the toolhead then loads filament to the extruder.
	Usage: M701 [L<distance>] [Z<pos>] [T<extruder>]
gcode = 
	{% if 'U' in params %}
	{% if not 'L' in params %}
	RESPOND TYPE=error MSG="Argument \"U\" substituted for missing \"L\"."
	{% set dummy = params.__setitem__("L", params.U) %}
	{% else %}
	RESPOND TYPE=error MSG="Invalid argument \"U\" ignored."
	{% endif %}
	{% endif %}
	
	_PAUSE_INNER_M700 {% for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	LOAD_FILAMENT BEEPS="{10}" LENGTH={
	params.L|default(printer["gcode_macro _km_globals"].load_length)|float}

[gcode_macro m702]
description = Pauses/parks the toolhead then unloads filament from the extruder.
	Usage: M702 [U<distance>] [Z<pos>] [T<extruder>]
gcode = 
	{% if 'L' in params %}
	{% if not 'U' in params %}
	RESPOND TYPE=error MSG="Argument \"L\" substituted for missing \"U\"."
	{% set dummy = params.__setitem__("U", params.L) %}
	{% else %}
	RESPOND TYPE=error MSG="Invalid argument \"L\" ignored."
	{% endif %}
	{% endif %}
	
	_PAUSE_INNER_M700 {% for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	UNLOAD_FILAMENT BEEPS="{10}" LENGTH={
	params.U|default(printer["gcode_macro _km_globals"].load_length)|float}

[gcode_macro _km_globals]
variable_bed_surface_max_name_length = 10
variable_bed_surfaces = ['default']
variable_load_length = 90.0
variable_load_min_temp = 0
variable_load_priming_length = 20.0
variable_load_priming_speed = 200
variable_load_speed = 1200
variable_menu_show_octoprint = True
variable_menu_show_sdcard = True
variable_menu_temperature = [
	{'name' : 'PLA',  'extruder' : 200, 'bed' : 60},
	{'name' : 'PETG', 'extruder' : 230, 'bed' : 85},
	{'name' : 'ABS',  'extruder' : 245, 'bed' : 110}]
variable_park_x = 0.0
variable_park_y = 0.0
variable_park_z = 20.0
variable_print_min = ()
variable_print_max = ()
variable_pressure_advance_scale = -1.0
variable_probe_mesh_padding = 5.0
variable_probe_min_count = 3
variable_probe_count_scale = 1.0
variable_start_bed_heat_delay = 2000
variable_start_bed_heat_overshoot = 2.0
variable_start_clear_adjustments_at_end = True
variable_start_end_park_y = 0.0
variable_start_extruder_preheat_scale = 0.5
variable_start_extruder_probing_temp = 0
variable_start_home_z_at_temp = True
variable_start_level_bed_at_temp = True
variable_start_purge_clearance = 2.0
variable_start_purge_length = 0.0
variable_start_purge_prime_length = 12.0
variable_start_quad_gantry_level_at_temp = True
variable_start_random_placement_max = 0
variable_start_random_placement_padding = 10.0
variable_start_try_saved_surface_mesh = False
variable_start_z_tilt_adjust_at_temp = True
variable_travel_speed_xy = 3000
variable_travel_speed_z = 600
description = Initializes our globals, including any _km_options overrides.
gcode = 
	
	
	
	
	
	
	
	
	{% set required_sections = {"heater_bed" : None,
	"extruder" : None,
	"gcode_macro _km_options" : None,
	"idle_timeout" : ("gcode", "_KM_IDLE_TIMEOUT"),
	"pause_resume" : None,
	"respond" : None,
	"save_variables" : None,
	"virtual_sdcard" :
	("on_error_gcode", "CANCEL_PRINT")
	} %}
	{% set warn_removed = {
	"start_extruder_set_target_before_level" :
	"The start_extruder_set_target_before_level option has been removed. "
	"Use the start_extruder_probing_temp option instead to set a fixed "
	"probing temperature.",
	"start_gcode_before_print" :
	"The start_gcode_before_print option has been removed. The same effect "
	"can now be achieved by inserting custom gcode before the "
	"_PRINT_START_PHASE_PURGE line in your slicer's start gcode, or by "
	"wrapping the _PRINT_START_PHASE_PURGE macro. See the Slicer "
	"Configuration section in the readme for more information.",
	"velocity_decel_scale" :
	"The velocity_decel_scale option has been removed. Klipper's input "
	"shaping provides a superior mechanism for improving print quality "
	"at higher speeds.",
	} %}
	{% set output = [] %}
	{% for s in required_sections %}
	{% set f = required_sections[s][0] if required_sections[s] else None %}
	{% set v = required_sections[s][1] if required_sections[s] else None %}
	{% if s not in printer.configfile.config %}
	{% set dummy = output.append("Missing [%s] section.\n" | format(s)) %}
	{% elif f and
	(v not in printer.configfile.config[s][f]|default("")|upper) %}
	{% set dummy = output.append("Missing %s in %s for [%s] section.\n"
	| format(v, f, s)) %}
	{% endif %}
	{% endfor %}
	{% if output %}
	{ action_emergency_stop((
	"required printer.cfg section(s) missing:\n"
	~ output | join("\n")) ~
	"See readme: https://github.com/jschuh/klipper-macros\x23klipper-setup")
	}
	{% endif %}
	
	
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_level_bed_at_temp VALUE="{
	1 if printer.bed_mesh is defined else 0}"
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_quad_gantry_level_at_temp VALUE="{
	1 if printer.quad_gantry_level is defined else 0}"
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_z_tilt_adjust_at_temp VALUE="{
	1 if printer.z_tilt is defined else 0}"
	{% set toolhead = printer.toolhead %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=print_min VALUE="{
	(toolhead.axis_minimum.x, toolhead.axis_minimum.y)}"
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=print_max VALUE="{
	(toolhead.axis_maximum.x, toolhead.axis_maximum.y)}"
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_end_park_y VALUE="{
	toolhead.axis_maximum.y}"
	{% set settings = printer.configfile.settings %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_home_z_at_temp VALUE="{
	1 if ("stepper_z" in settings and
	settings.stepper_z.endstop_pin.split()|join("")|lower ==
	"probe:z_virtual_endstop") else 0}"
	
	{% set options = printer["gcode_macro _km_options"] %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	
	{% if options.park_x|default("")|string|lower == "min" %}
	{% set dummy = options.__setitem__("park_x",
	printer.configfile.settings.stepper_x.position_min) %}
	{% elif options.park_x|default("")|string|lower == "max" %}
	{% set dummy = options.__setitem__("park_x",
	printer.configfile.settings.stepper_x.position_max) %}
	{% endif %}
	{% if options.park_y|default("")|string|lower == "min" %}
	{% set dummy = options.__setitem__("park_y",
	printer.configfile.settings.stepper_y.position_min) %}
	{% elif options.park_y|default("")|string|lower == "max" %}
	{% set dummy = options.__setitem__("park_y",
	printer.configfile.settings.stepper_y.position_max) %}
	{% endif %}
	{% if options.start_end_park_y|default("")|string|lower == "min" %}
	{% set dummy = options.__setitem__("start_end_park_y",
	printer.configfile.settings.stepper_y.position_min) %}
	{% elif options.start_end_park_y|default("")|string|lower == "max" %}
	{% set dummy = options.__setitem__("start_end_park_y",
	printer.configfile.settings.stepper_y.position_max) %}
	{% endif %}
	{% if options.park_z|default("")|string|lower == "min" %}
	{% set dummy = options.__setitem__("park_z",
	printer.configfile.settings.stepper_z.position_min) %}
	{% elif options.park_z|default("")|string|lower == "max" %}
	{% set dummy = options.__setitem__("park_z",
	printer.configfile.settings.stepper_z.position_max) %}
	{% endif %}
	
	
	{% for k in options %}
	{% if k not in km %}
	{% if k in warn_removed %}
	{action_respond_info(warn_removed[k])}
	{% else %}
	{% set dummy = output.append("%s is not valid for _KM_OPTIONS." |
	format(k)) %}
	{% endif %}
	{% elif km[k] is string %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k
	} VALUE="'{options[k]|replace('\\','\\\\')|replace('\'','\\\'')
	|replace('\"','\\\"')}'"
	{% elif km[k] is float %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k
	} VALUE="{options[k]|float}"
	{% elif km[k] is integer or km[k] is boolean %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k} VALUE="{options[k]|int}"
	{% elif km[k] is mapping %}
	{% if options[k] is not mapping %}
	{% set dummy = output.append("%s requires a mapping type." |
	format(k)) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k
	} VALUE="{options[k]|replace('\"','\\\"')}"
	{% elif km[k] is sequence %}
	{% if options[k] is not sequence %}
	{% set dummy = output.append("%s requires a sequence type." |
	format(k)) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k
	} VALUE="{options[k]|replace('\"','\\\"')}"
	{% else %}
	{% set dummy = output.append("%s is not a valid type for _KM_OPTIONS." |
	format(k)) %}
	{% endif %}
	{% endfor %}
	
	{% if "homing_override" in printer.configfile.config %}
	{% for l in printer.configfile.config.homing_override.gcode.split("\n") %}
	{% if " g28 " in (" " ~ l.split("\x23")[0].split(";")[0]|lower ~ " ") %}
	{% set dummy = output.append(
	"G28 in [homing_override] gcode. Replace with G28.6245197 to "
	"fix recursive macro call.\n"
	"See readme: https://github.com/jschuh/klipper-macros\x23g28") %}
	{% endif %}
	{% endfor %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=check_km_config VARIABLE=load_errors VALUE="{
	output|replace('\"','\\\"')}"
	M400

[delayed_gcode INIT_GLOBALS]
initial_duration = 1
gcode = 
	LIST_MACROS SILENT=1
	_KM_GLOBALS
	
	CHECK_KM_CONFIG
	_INIT_SURFACES
	BED_MESH_CHECK
	
	SET_DRAW_PARAMS WIDTH="{printer.configfile.settings.extruder.nozzle_diameter}"
	
	_KM_OPTIONS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready

[gcode_macro check_km_config]
variable_load_errors = []
description = Checks global variables and throws an error on any invalid values.
	Does nothing if the config has no errors.
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set toolhead = printer.toolhead %}
	{% set output = load_errors %}
	{% if km.park_x > toolhead.axis_maximum.x or
	km.park_x < toolhead.axis_minimum.x %}
	{% set dummy = output.append("park_x is invalid.") %}
	{% endif %}
	{% if km.park_y > toolhead.axis_maximum.y or
	km.park_y < toolhead.axis_minimum.y %}
	{% set dummy = output.append("park_y is invalid.") %}
	{% endif %}
	{% if km.park_z > toolhead.axis_maximum.z or
	km.park_z < toolhead.axis_minimum.z %}
	{% set dummy = output.append("park_z is invalid.") %}
	{% endif %}
	{% if km.print_max[0] > toolhead.axis_maximum.x or
	km.print_max[1] > toolhead.axis_maximum.y %}
	{% set dummy = output.append("print_max is invalid.") %}
	{% endif %}
	{% if km.print_min[0] < toolhead.axis_minimum.x or
	km.print_min[1] < toolhead.axis_minimum.y %}
	{% set dummy = output.append("print_min is invalid.") %}
	{% endif %}
	{% if km.start_extruder_preheat_scale > 1.0 or
	km.start_extruder_preheat_scale < 0.0 %}
	{% set dummy = output.append("extruder_preheat_scale is invalid.") %}
	{% endif %}
	{% if km.load_length >
	printer.configfile.settings["extruder"].max_extrude_only_distance %}
	{% set dummy = output.append(
	"load_length exceeds max_extrude_only_distance.") %}
	{% endif %}
	{% if km.load_length < km.load_priming_length %}
	{% set dummy = output.append(
	"load_length is shorter than load_priming_length.") %}
	{% endif %}
	{% if km.load_length < 0.0 %}
	{% set dummy = output.append("load_length is negative.") %}
	{% endif %}
	{% if km.load_priming_length < 0.0 %}
	{% set dummy = output.append("load_priming_length is negative.") %}
	{% endif %}
	
	
	{% if output %}
	{ action_raise_error(output|sort|join('\nError: ')) }
	{% endif %}
	M400

[gcode_macro kmvars]
description = Lists global variables used by klipper-macros.
	Usage: KMVARS [SEARCH=<search_string>]
gcode = 
	{% set SEARCH = params.SEARCH|default(params.S|default(""))|lower %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set output = [] %}
	{% for k in km %}
	{% if SEARCH in k %}
	{% set dummy = output.append(k ~ ": " ~ km[k]) %}
	{% endif %}
	{% endfor %}
	{ action_respond_info(output|sort|join('\n')) }

[gcode_macro check_macro_docs]
description = Lists macros lacking proper documentation.
	Usage: CHECK_MACRO_DOCS [USAGE=<0|1>] [HIDDEN=<1|0>] [RENAMED=<1|0>]
gcode = 
	{% set USAGE = params.USAGE|default(0)|int %}
	{% set HIDDEN = params.HIDDEN|default(0)|int %}
	{% set RENAMED = params.RENAMED|default(0)|int %}
	{% set output = [] %}
	{%set config = printer.configfile.config %}
	{% for k in config|sort %}
	{% if k.startswith("gcode_macro") %}
	{% set name = k.split()[1] %}
	{% set desc = config[k].description|default("") %}
	{% set is_renamed = config[k].rename_existing|default("") %}
	{% if (not desc or (USAGE and not "Usage: "~name.upper() in desc)) and
	(HIDDEN or not name.startswith('_')) and (RENAMED or is_renamed) %}
	{% set dummy = output.append("%s&nbsp;%s: missing %s."
	| format("*" if is_renamed else "&nbsp;", name,
	"description" if not desc else "usage")) %}
	{% endif %}
	{% endif %}
	{% endfor %}
	{action_respond_info(output|join("\n"))}

[gcode_macro listvars]
description = Lists per-macro variables with a name containing SEARCH. This is
	useful for debugging macros by allowing you to probe printer state. Be very
	careful, however, as an overly broad SEARCH parameter can take a long time
	to process and potentially hang or crash klipper.
	Usage: LISTVARS SEARCH=<search_string>
gcode = 
	
	{% if 'SEARCH' not in params and 'S' not in params %}
	{ action_raise_error("Must provide a SEARCH parameter.") }
	{% endif %}
	{% set SEARCH = params.SEARCH|default(params.S)|lower %}
	{% set ns = namespace() %}
	{% set output = [] %}
	{% for item in printer %}
	{% if item is not string %}
	{% set ns.path = ['printer', "[%s]" % (item|string), ''] %}
	{% elif ' ' in item %}
	{% set ns.path = ['printer', "['%s']" % (item), ''] %}
	{% else %}
	{% set ns.path = ['printer.', item, ''] %}
	{% endif %}
	
	{% if SEARCH in ns.path|lower %}
	{% set dummy = output.append(ns.path|join) %}
	{% endif %}
	
	{% if printer[item].items() %}
	{% for childkey, child in printer[item].items() recursive %}
	{% set ns.path = ns.path[:loop.depth|int + 1] %}
	{% if childkey is not string %}
	{% set null = ns.path.append("[%s]" % (childkey|string)) %}
	{% elif ' ' in childkey %}
	{% set null = ns.path.append("['%s']" % (childkey)) %}
	{% else %}
	{% set null = ns.path.append(".%s" % (childkey)) %}
	{% endif %}
	
	{% if child is mapping  %}
	{loop(child.items())}
	{% else %}
	{% if SEARCH in ns.path|lower %}
	{% set dummy = output.append("%s : %s" % (ns.path|join, child)) %}
	{% endif %}
	{% endif %}
	{% endfor %}
	{% endif %}
	{% endfor %}
	{ action_respond_info(output|join("\n")) }

[gcode_macro list_macros]
description = Lists registered macros (and optionally show variable state).
	Usage: LISTVARS SEARCH=<search_string> VARS=<0|1> SILENT=<0|1>
variable_macros = {}
gcode = 
	
	{% if not macros %}
	{% set renames = {} %}
	{% for k in printer.configfile.config %}
	{% if k.lower().startswith("gcode_macro") and
	printer.configfile.config[k].rename_existing %}
	{% set name = k.split(None, 1)[1] | lower %}
	{% set dummy = renames.__setitem__(name,
	[printer.configfile.config[k].rename_existing|lower] +
	renames[name]|default([])) %}
	{% endif %}
	{% endfor %}
	{% for k in printer %}
	{% if k.lower().startswith("gcode_macro") %}
	{% set name = k.split(None, 1)[1] | lower %}
	{% set dummy = macros.__setitem__(name, renames[name]|default([])) %}
	{% endif %}
	{% endfor %}
	{% endif %}
	
	{% if params.SILENT|default(0)|int == 0 %}
	_LIST_MACROS_DISPLAY {rawparams}
	{% endif %}

[gcode_macro _list_macros_display]
gcode = 
	{% set SEARCH = params.SEARCH | default(params.S) | default("") | lower %}
	{% set VARS = params.VARS | default(params.V) | default(0) | int != 0 %}
	
	{% set macros = printer["gcode_macro list_macros"].macros %}
	{% set output = [] %}
	{% for k in macros %}
	{% if SEARCH in k | lower %}
	{% set line = k ~ ((" (renames: %s)" % (macros[k]|join(","))) if macros[k]
	else "") %}
	{% set outvars = [] %}
	{% if VARS %}
	{% for v in printer["gcode_macro " ~ k] | sort %}
	{% set dummy = outvars.append("\n* %s: %s" %
	(v, printer["gcode_macro " ~ k][v]|string)) %}
	{% endfor %}
	{% endif %}
	{% set dummy = output.append(line + outvars | join("")) %}
	{% endif %}
	{% endfor %}
	{ action_respond_info(output | sort | join("\n")) }

[gcode_macro set_heater_temperature_scaled]
gcode = 
	{% set HEATER = params.HEATER.lower() %}
	{% set TARGET = params.TARGET|default(0.0)|float %}
	{% set scaled_heaters =
	printer["gcode_macro set_heater_scaling"].scaled_heaters %}
	{% if HEATER in scaled_heaters %}
	{% set scales = scaled_heaters[HEATER] %}
	{% set dummy = scales.__setitem__("real_target", TARGET) %}
	{%if TARGET > 0.0 %}
	{% set TARGET = (((TARGET + scales.bump) * scales.scale, scales.minimum)
	| max, scales.maximum)|min %}
	{% endif %}
	{% endif %}
	SET_HEATER_TEMPERATURE HEATER="{HEATER}" TARGET={TARGET}

[gcode_macro temperature_wait_scaled]
gcode = 
	{% set SENSOR = params.SENSOR.lower() %}
	{% set heater = SENSOR if not SENSOR.startswith("heater_generic") else
	SENSOR.split()[1] %}
	{% set scaled_heaters =
	printer["gcode_macro set_heater_scaling"].scaled_heaters %}
	{% if heater in scaled_heaters %}
	{% set scales = scaled_heaters[heater] %}
	{% if "MINIMUM" in params and MINIMUM > 0.0 %}
	{% set MINIMUM = (((MINIMUM + scales.bump) * scales.scale, scales.minimum)
	| max, scales.maximum)|min %}
	{% endif %}
	{% if "MAXIMUM" in params and MAXIMUM > 0.0 %}
	{% set MAXIMUM = (((MAXIMUM + scales.bump) * scales.scale, scales.minimum)
	| max, scales.maximum)|min %}
	{% endif %}
	{% else %}
	{% set settings = printer.configfile.settings[SENSOR] %}
	{% set MINIMUM = params.MINIMUM|default(settings.min_temp) %}
	{% set MAXIMUM = params.MAXIMUM|default(settings.max_temp) %}
	{% endif %}
	{% if printer[sensor].temperature < MINIMUM or
	printer[sensor].temperature > MAXIMUM %}
	TEMPERATURE_WAIT SENSOR="{SENSOR}" MINIMUM={MINIMUM} MAXIMUM={MAXIMUM}
	{% endif %}

[gcode_macro _gcode_wait_wrapper_inner]
gcode = 
	
	
	{% set sensor = params.HEATER if params.HEATER in
	printer.heaters.available_heaters
	else ("heater_generic " ~ params.HEATER) %}
	{% set target = printer[sensor].target %}
	{% if 'R' in params and target > 0.0 %}
	{% set T = params.T|default("") %}
	M{params.M}.6245197 S{target} { (" T"~T) if T else "" }
	{% elif printer[sensor].temperature < target %}
	TEMPERATURE_WAIT SENSOR="{sensor}" MINIMUM={target}
	{% endif %}

[gcode_macro _gcode_wait_wrapper]
gcode = 
	{% set target = params.S | default(params.R | default(0))| float %}
	SET_HEATER_TEMPERATURE_SCALED HEATER="{params.HEATER}" TARGET={target}
	_GCODE_WAIT_WRAPPER_INNER{%
	for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}

[gcode_macro m109]
rename_existing = M109.6245197
gcode = 
	{% set extruder = "extruder" ~ params.T|replace('0', '')
	if "T" in params else printer.toolhead.extruder %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating
	_GCODE_WAIT_WRAPPER HEATER={extruder}{%
	for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro m190]
rename_existing = M190.6245197
gcode = 
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=bed_heating
	_GCODE_WAIT_WRAPPER HEATER=heater_bed {%
	for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro m191]
description = Sets chamber temperature (with wait for heating).
	Usage: M191 [S<temp>]
gcode = 
	
	{% if "R" in params %}
	{% set dummy = params.__setitem__("S", params.R) %}
	{% endif %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=chamber_heating
	_GCODE_WAIT_WRAPPER HEATER=chamber {%
	for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro m104]
rename_existing = M104.6245197
gcode = 
	{% set extruder = "extruder" ~ params.T|replace('0', '')
	if "T" in params else printer.toolhead.extruder %}
	SET_HEATER_TEMPERATURE_SCALED HEATER={extruder} TARGET={params.S|default(0)}

[gcode_macro m140]
rename_existing = M140.6245197
gcode = 
	SET_HEATER_TEMPERATURE_SCALED HEATER=heater_bed TARGET={params.S|default(0)}

[gcode_macro m141]
description = Sets chamber temperature.
	Usage: M141 [S<temp>]
gcode = 
	SET_HEATER_TEMPERATURE_SCALED HEATER=chamber TARGET={params.S|default(0)}

[gcode_macro _check_heater_params]
gcode = 
	{% set HEATER = params.HEATER|lower %}
	{% set sensor = params.HEATER %}
	{% if HEATER not in printer.heaters.available_heaters %}
	{% set sensor = "heater_generic " ~ HEATER %}
	{% if sensor not in printer.heaters.available_heaters %}
	{ action_raise_error("The value '%s' is not valid for HEATER"
	| format(HEATER)) }
	{% endif %}
	{% endif %}
	{% set settings = printer.configfile.settings[sensor] %}
	{% set scaled_heaters =
	printer["gcode_macro set_heater_scaling"].scaled_heaters %}
	{% if HEATER is in scaled_heaters %}
	{% set scales = scaled_heaters[HEATER] %}
	{% else %}
	{% set scales = { "scale": 1.0, "bump": 0.0, "minimum": settings.min_temp,
	"maximum": settings.max_temp,
	"real_target": printer[sensor].target} %}
	{% endif %}
	{% set SCALE = params.SCALE|default(scales.scale)|float %}
	{% set BUMP = params.BUMP|default(scales.bump)|float %}
	{% set MINIMUM = params.MINIMUM|default(scales.minimum)|float %}
	{% set MAXIMUM = params.MAXIMUM|default(scales.maximum)|float %}
	
	{% if SCALE <= 0 %}
	{ action_raise_error("SCALE must be a positive value.") }
	{% elif MINIMUM < settings.min_temp or MINIMUM > settings.max_temp %}
	{ action_raise_error("MINIMUM must be between %.1f and %.1f" |
	format(settings.min_temp, settings.max_temp)) }
	{% elif MAXIMUM < settings.min_temp or MAXIMUM > settings.max_temp %}
	{ action_raise_error("MAXIMUM must be between %.1f and %.1f" |
	format(settings.min_temp, settings.max_temp)) }
	{% elif MINIMUM >= MAXIMUM %}
	{ action_raise_error("MINIMUM must be less than MAXIMUM.") }
	{% elif "TARGET" in params and (params.TARGET|float < MINIMUM or
	params.TARGET|float > MAXIMUM) %}
	{ action_raise_error("TARGET must be between %.1f and %.1f" |
	format(settings.min_temp, settings.max_temp)) }
	{% endif %}

[gcode_macro set_heater_scaling]
description = Sets scaling parameters for heater. If a new target temperature is
	passed it will be adjusted to the scaling parameters.
	Usage: SET_HEATER_SCALING [HEATER=<heater>] [SCALE=<scale_factor>]
	[BUMP=<degrees>] [MAXIMUM=<degrees>]
	[MINIMUM=<degrees>] [TARGET=<temp>]
variable_scaled_heaters = {}
gcode = 
	
	{% if "HEATER" is not in params %}
	{% set output = [] %}
	{% for h in scaled_heaters %}
	{% set dummy = output.append(
	"%s: Scale: %.2f Bump: %.1f Minimum:%.1f Maximum: %.1f"
	| format(h, scaled_heaters[h].scale, scaled_heaters[h].bump,
	scaled_heaters[h].minimum, scaled_heaters[h].maximum)) %}
	{% endfor %}
	{% if output %}}{action_respond_info(output|join('\n'))}{% endif %}
	{% else %}
	
	{% set HEATER = params.HEATER.lower() %}
	{% set settings = printer.configfile.settings[HEATER] %}
	{% if HEATER is not in scaled_heaters %}
	{% set dummy = scaled_heaters.__setitem__(HEATER, {"scale": 1.0,
	"bump": 0.0, "minimum": settings.min_temp,
	"maximum": settings.max_temp,
	"real_target": printer[HEATER].target}) %}
	{% endif %}
	_CHECK_HEATER_PARAMS{% for k in params %}{' '~k~'='~params[k]}{% endfor %}
	{% set scales = scaled_heaters[HEATER] %}
	{% set SCALE = params.SCALE|default(scales.scale)|float %}
	{% set BUMP = params.BUMP|default(scales.bump)|float %}
	{% set MAXIMUM = params.MAXIMUM|default(scales.maximum)|float %}
	{% set MINIMUM = params.MINIMUM|default(scales.minimum)|float %}
	{% set TARGET = params.TARGET|default(scales.real_target)|float %}
	{% set dummy = scales.__setitem__("scale", SCALE) %}
	{% set dummy = scales.__setitem__("bump", BUMP) %}
	{% set dummy = scales.__setitem__("maximum", MAXIMUM) %}
	{% set dummy = scales.__setitem__("minimum", MINIMUM) %}
	{% set dummy = scales.__setitem__("real_target", TARGET) %}
	
	{% set settings = printer.configfile.settings[HEATER] %}
	{% if SCALE != 1.0 or BUMP != 0.0 or MINIMUM != settings.min_temp or
	MAXIMUM != settings.max_temp %}
	{% set dummy = scaled_heaters.__setitem__(HEATER, scales) %}
	{% else %}
	{% set dummy = scaled_heaters.__delitem__(HEATER) %}
	{% endif %}
	SET_HEATER_TEMPERATURE_SCALED HEATER={HEATER} TARGET={TARGET}
	{action_respond_info(
	"%s: Scale: %.2f Bump: %.1f Minimum:%.1f Maximum: %.1f Target: %.1f"
	| format(HEATER, SCALE, BUMP, MINIMUM, MAXIMUM, TARGET))}
	{% endif %}
	
	{% set dummy = None if True else "
	{% set dummy = params.HEATER|default(e.g. extruder) %}
	{% set dummy = params.SCALE|default(1.0)|float %}
	{% set dummy = params.BUMP|default(0.0)|float %}
	{% set dummy = params.MAXIMUM|default(max_temp)|float %}
	{% set dummy = params.MINIMUM|default(min_temp)|float %}
	{% set dummy = params.TARGET|default(current target)|float %}
	" %}

[gcode_macro reset_heater_scaling]
description = Clears scaling for heater (or all heaters if none specified).
	Usage: RESET_HEATER_SCALING [HEATER=<heater>]
gcode = 
	{% if "HEATER" in params %}
	{% set HEATER = params.HEATER.lower() %}
	{% if HEATER not in printer.heaters.available_heaters %}
	{ action_raise_error("The value '%s' is not valid for HEATER"
	| format(HEATER)) }
	{% endif %}
	{% set settings = printer.configfile.settings[HEATER] %}
	SET_HEATER_SCALING HEATER={HEATER
	} SCALE=1.0 BUMP=0.0 MINIMUM={settings.min_temp
	} MAXIMUM={settings.max_temp}
	{% else %}
	
	SET_GCODE_VARIABLE MACRO=set_heater_scaling VARIABLE=scaled_heaters VALUE={
	"{}"}
	{% endif %}

[gcode_macro _km_idle_timeout]
gcode = 
	{% if printer.pause_resume.is_paused %}
	{action_respond_info("Extruder powered down on idle timeout.")}
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{
	printer[printer.toolhead.extruder].target}"
	M104; Turn off extruder but leave the bed on.
	{% else %}
	TURN_OFF_HEATERS
	M107; turn off fan
	M84
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready
	{% endif %}

[gcode_macro _check_kinematic_limits]
gcode = 
	{% set toolhead = printer.toolhead %}
	{% if params.X and (params.X|float < toolhead.axis_minimum.x or
	params.X|float > toolhead.axis_maximum.x) %}
	{action_raise_error("X[%.3f] must be between %.3f and %.3f."
	| format(params.X|float, toolhead.axis_minimum.x,
	toolhead.axis_maximum.x))}
	{% elif params.Y and (params.Y|float < toolhead.axis_minimum.y or
	params.Y|float > toolhead.axis_maximum.y) %}
	{action_raise_error("Y[%.3f] must be between %.3f and %.3f."
	| format(params.Y|float, toolhead.axis_minimum.y,
	toolhead.axis_maximum.y))}
	{% elif params.Z and (params.Z|float < toolhead.axis_minimum.z or
	params.Z|float > toolhead.axis_maximum.z) %}
	{action_raise_error("Z[%.3f] must be between %.3f and %.3f."
	| format(params.Z|float, toolhead.axis_minimum.z,
	toolhead.axis_maximum.z))}
	{% elif params.E and (params.E|float|abs > printer.configfile.settings[
	"extruder"].max_extrude_only_distance) %}
	{action_raise_error("E[%.4f] exceeds max_extrude_only_distance[%.4f]."
	| format(params.E|float|abs, printer.configfile.settings[
	"extruder"].max_extrude_only_distance))}
	{% endif %}

[gcode_macro lazy_home]
description = Homes the specified axes. If lazy is true, already homed axes
	are skipped.
	Usage: LAZY_HOME [LAZY=<1|0>] [AXES=<axes_string>]
gcode = 
	
	LIST_MACROS SILENT=1
	_LAZY_HOME_INNER {rawparams}

[gcode_macro _lazy_home_inner]
gcode = 
	
	{% set G28 = (printer["gcode_macro list_macros"].macros.g28|
	default(["g28"],True))[-1] %}
	{% set axes = 'XYZ'|select('in', params.AXES|default("XYZ")|upper|list) %}
	{% if not axes %}
	{% set axes = 'XYZ' %}
	{% endif %}
	{% if params.LAZY|default(1)|int %}
	{% set axes = axes|reject('in', printer.toolhead.homed_axes|upper)|join() %}
	{% endif %}
	
	{% if axes %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing
	{G28}{% for k in axes %}{' ' ~ k}{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status
	{% endif %}

[gcode_macro g28]
description = Wraps the G28 command to add the Marlin "O" parameter so that
	already homed axes will not be homed again. See the Klipper documentation on
	G28 for the behavior of the other parameters.
	Usage: G28 [O] ...
rename_existing = G28.6245197
gcode = 
	{% set axes = 'XYZ'|select('in', params)|join() %}
	LAZY_HOME LAZY={('O' in params)|int}{%if axes%} AXES={axes}{%endif%}

[gcode_macro before_layer_change]
description = Add this to the "before layer change" input box in the slicer.
	Usage: BEFORE_LAYER_CHANGE HEIGHT=<current_height> LAYER=<current_layer>
gcode = 
	{% set height = params.HEIGHT|default(printer.toolhead.position.z)|float %}
	{% set layer = params.LAYER|default(-1)|int + 1 %}
	{% if height >= 0.0 and layer >= 0 %}
	SET_PRINT_STATS_INFO CURRENT_LAYER="{layer}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{height}"
	{% if printer["gcode_macro _km_layer_run"].clearance_z < height %}
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{
	height}"
	{% endif %}
	{% endif %}

[gcode_macro after_layer_change]
description = Add this to the "after layer change" input box in the slicer.
	Usage: AFTER_LAYER_CHANGE
gcode = 
	_KM_LAYER_RUN

[gcode_macro gcode_at_layer]
description = Schedules the specified g-code command to be run at the specified
	layer. LAYER=next will cause the command to run at the next layer change.
	Usage: GCODE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } COMMAND=<gcode>
	[CANCEL=<0|1>]
gcode = 
	{% set tot_layers = printer.print_stats.info.total_layer %}
	{% if params|length > 0 %}
	_KM_CHECK_IS_PRINTING
	
	{% set CANCEL = params.CANCEL|default(0)|int != 0 %}
	{% set COMMAND = params.COMMAND|default(None) %}
	{% if COMMAND %}
	{% set COMMAND = COMMAND.lstrip().split(None, 1) %}
	{% set COMMAND = " ".join([COMMAND[0]|upper] + COMMAND[1:]) %}
	{% endif %}
	
	{% if "LAYER" in params %}
	{% set cmd_container = "commands_layer" %}
	{% set cur_layer = printer.print_stats.info.current_layer|int %}
	{% if "HEIGHT" in params %}
	{action_raise_error("Conflicting HEIGHT and LAYER arguments provided.")}
	{% elif params.LAYER|string|lower == "next" %}
	{% set LAYER = cur_layer + 1 %}
	{% else %}
	{% set LAYER = params.LAYER|int %}
	{% endif %}
	{% if LAYER <= cur_layer %}
	{action_raise_error("LAYER[%i] must be above current print layer[%i]."
	| format(LAYER, cur_layer))}
	{% elif tot_layers and LAYER > tot_layers %}
	{action_raise_error("LAYER[%i] must not be above top layer[%i]."
	| format(LAYER, tot_layers))}
	{% endif %}
	{% set key = LAYER %}
	
	{% elif "HEIGHT" in params %}
	{% set cmd_container = "commands_height" %}
	{% set HEIGHT = params.HEIGHT|float %}
	{% set cur_height = printer["gcode_macro _km_layer_run"].cur_height %}
	{% if HEIGHT <= cur_height %}
	{action_raise_error(
	"HEIGHT[%.3f] must be above current print height[%.3f].")
	| format(HEIGHT, cur_height)}
	{% elif HEIGHT >= printer.toolhead.axis_maximum.z %}
	{action_raise_error(
	"HEIGHT[%.3f] must be below maximum Z height[%.3f].")
	| format(HEIGHT, printer.toolhead.axis_maximum.z)}
	{% endif %}
	{% set key = HEIGHT %}
	
	{% else %}
	{action_raise_error("No HEIGHT or LAYER argument provided.")}
	{% endif %}
	
	{% set commands = printer["gcode_macro _km_layer_run"][cmd_container] %}
	{% if key not in commands and not CANCEL %}
	{% set dummy = commands.__setitem__(key, []) %}
	{% endif %}
	
	{% if CANCEL %}
	{% if key in commands %}
	{% set pos = ("%i"|format(key)) if key is integer else
	("%.3fmm"|format(key)) %}
	{% if COMMAND %}
	{% set dummy = commands[key].remove(COMMAND) %}
	{% if commands[key]|length == 0 %}
	{% set dummy = commands.__delitem__(key) %}
	{% endif %}
	{action_respond_info("Cancelled %s %s:\n* %s" |
	format("layer" if k is integer else "height",
	pos, COMMAND))}
	{% else %}
	{% set dummy = commands.__delitem__(key) %}
	{action_respond_info("Cancelled all commands at %s %s." |
	format("layer" if k is integer else "height",
	pos))}
	{% endif %}
	{% endif %}
	{% elif not COMMAND %}
	{action_raise_error("No COMMAND argument provided.")}
	{% elif COMMAND in commands[key] %}
	{action_raise_error("Duplicate command previously scheduled.")}
	{% else %}
	{% set dummy = commands[key].append(COMMAND) %}
	{% set pos = ("%i"|format(key)) if key is integer else
	("%.3fmm"|format(key)) %}
	{action_respond_info("%s %s:\n* %s" |
	format("layer" if key is integer else "height",
	pos, COMMAND))}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE={cmd_container} VALUE="{
	commands|replace('\"','\\\"')}"
	_UPDATE_LAYER_COMPAT
	
	
	{% else %}
	{% set output = [] %}
	{% set commands = printer["gcode_macro _km_layer_run"].commands_layer %}
	{% for key in commands|list|sort %}
	{% set dummy = output.append("layer %i:" | format(key)) %}
	{% for c in commands[key] %}
	{% set dummy = output.append("* %s" | format(c)) %}
	{% endfor %}
	{% endfor %}
	{% set commands = printer["gcode_macro _km_layer_run"].commands_height %}
	{% for key in commands|list|sort %}
	{% set dummy = output.append("height %.3fmm:" | format(key)) %}
	{% for c in commands[key] %}
	{% set dummy = output.append("* %s" | format(c)) %}
	{% endfor %}
	{% endfor %}
	{action_respond_info(output|join('\n'))}
	{% endif %}

[gcode_macro _km_layer_run]
description = Runs pending commands for the current layer change.
	Usage: _KM_LAYER_RUN
variable_cur_height = 0.0
variable_clearance_z = 0.0
variable_commands_layer = {}
variable_commands_height = {}
gcode = 
	{% set cur_layer = printer.print_stats.info.current_layer %}
	{% for key in commands_layer | select("<=", cur_layer) | sort %}
	{action_respond_info("Executing scheduled commands at layer %d:\n%s" |
	format(key, commands_layer[key]|join('\n')))}
	{% for c in commands_layer[key] %}
	{c}
	{% endfor %}
	{% set dummy = commands_layer.__delitem__(key) %}
	{% endfor %}
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{
	commands_layer|replace('\"','\\\"')}"
	{% for key in commands_height | select("<=", cur_height) | sort %}
	{action_respond_info("Executing scheduled commands at height %.3f:\n%s" |
	format(key, commands_height[key]|join('\n')))}
	{% for c in commands_height[key] %}
	{c}
	{% endfor %}
	{% set dummy = commands_height.__delitem__(key) %}
	{% endfor %}
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{
	commands_height|replace('\"','\\\"')}"
	_UPDATE_LAYER_COMPAT

[gcode_macro init_layer_gcode]
description = Clears scheduled gcode commands and state for all layers.
	Usage: INIT_LAYER_GCODE LAYERS=<num>
gcode = 
	SET_PRINT_STATS_INFO TOTAL_LAYER="{params.LAYERS|int + 1}" CURRENT_LAYER="{0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"
	_UPDATE_LAYER_COMPAT

[gcode_macro _reset_layer_gcode]
description = Clears scheduled gcode commands and state for all layers.
	Usage: _RESET_LAYER_GCODE
gcode = 
	SET_PRINT_STATS_INFO TOTAL_LAYER="{0}" CURRENT_LAYER="{0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"
	_UPDATE_LAYER_COMPAT

[gcode_macro cancel_all_layer_gcode]
description = Clears all scheduled gcode commands.
	Usage: CANCEL_ALL_LAYER_GCODE
gcode = 
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"
	_UPDATE_LAYER_COMPAT

[gcode_macro _update_layer_compat]
gcode = 
	{% set next_layer = printer.print_stats.info.current_layer|int + 1 %}
	{% set commands_layer = printer["gcode_macro _km_layer_run"].commands_layer %}
	{% set keys = commands_layer | sort(reverse=True) %}
	
	{% set pause_next_layer = {'enable': False, 'call':
	printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer.call} %}
	{% if pause_next_layer.call in commands_layer[next_layer] | default([]) %}
	{% set dummy = pause_next_layer.__setitem__('enable', True) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{
	pause_next_layer|replace('\"','\\\"') }"
	
	
	{% set pause_at_layer = {'enable': False, 'layer': 0, 'call':
	printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer.call} %}
	{% if pause_next_layer.enable and
	pause_next_layer.call == pause_at_layer.call %}
	{% set keys = keys | reject("==", next_layer) %}
	{% endif %}
	
	
	
	
	{% for key in keys %}
	{% if pause_at_layer.call in commands_layer[key] %}
	{% set dummy = pause_at_layer.__setitem__('enable', True) %}
	{% set dummy = pause_at_layer.__setitem__('layer', key) %}
	{% endif %}
	{% endfor %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{
	pause_at_layer|replace('\"','\\\"') }"

[gcode_macro pause_next_layer]
description = Convenience macro to schedule the current print to pause at the
	next layer change. See PAUSE for additional arguments.
	Usage: PAUSE_NEXT_LAYER ...
gcode = 
	_CHECK_KINEMATIC_LIMITS{% for k in params%}{' ' ~k~ '=' ~ params[k]
	}{% endfor %}
	GCODE_AT_LAYER LAYER=NEXT COMMAND="PAUSE{% for k in params %}{
	' ' ~ k ~ '=' ~ params[k]}{% endfor %}"

[gcode_macro pause_at_layer]
description = Convenience macro to schedule the current print to pause at the
	specified layer change. LAYER=next will cause the command to run at the next
	layer change. See PAUSE for additional arguments.
	Usage: PAUSE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...
gcode = 
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	" %}
	{% set filtered_params = params|reject('in',['HEIGHT','LAYER'])|list|sort %}
	_CHECK_KINEMATIC_LIMITS{% for k in filtered_params%}{' ' ~k~ '=' ~ params[k]
	}{% endfor %}
	GCODE_AT_LAYER {% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor
	%} COMMAND="PAUSE{% for k in filtered_params %}{
	' ' ~ k ~ '=' ~ params[k]}{% endfor %}"

[gcode_macro speed_at_layer]
description = Convenience macro to schedule a feedrate adjustment at the
	specified layer change. LAYER=next will cause the command to run at the next
	layer change. (SPEED parameter behaves the same as the M220 S parameter.)
	Usage: SPEED_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } SPEED=<percentage>
gcode = 
	{% set SPEED = params.SPEED|default(0)|int %}
	{% if SPEED < 1 or SPEED > 500 %}
	{action_raise_error("SPEED[%i] parameter between 1 and 500 is required."
	% SPEED)}
	{% endif %}
	GCODE_AT_LAYER {% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor %} COMMAND="M220 S{SPEED|int}"
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	{% set dummy = params.SPEED|default(percentage)|int %}
	" %}

[gcode_macro flow_at_layer]
description = Convenience macro to schedule a flow percentage adjustment at the
	specified layer change. LAYER=next will cause the command to run at the next
	layer change. (FLOW parameter behaves the same as the M221 S parameter.)
	Usage: FLOW_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } FLOW=<percentage>
gcode = 
	{% set FLOW = params.FLOW|default(0)|int %}
	{% if FLOW < 1 or FLOW > 500 %}
	{action_raise_error("FLOW[%i] parameter between 1 and 500 is required."
	% FLOW)}
	{% endif %}
	GCODE_AT_LAYER {% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor %} COMMAND="M221 S{FLOW|int}"
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	{% set dummy = params.FLOW|default(percentage)|int %}
	" %}

[gcode_macro fan_at_layer]
description = Convenience macro to schedule a fan adjustment at the specified
	layer change. LAYER=next will cause the command to run at the next layer
	change. See SET_FAN_SCALING for additional arguments.
	Usage: FAN_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...
gcode = 
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	{% set dummy = params.SCALE|default(1.0)|float %}
	{% set dummy = params.BUMP|default(0)|int %}
	{% set dummy = params.MAXIMUM|default(0)|int %}
	{% set dummy = params.MINIMUM|default(255)|int %}
	{% set dummy = params.SPEED|default(current speed)|int %}
	" %}
	{% set filtered_params = params|reject('in',['HEIGHT','LAYER'])|list|sort %}
	{% if filtered_params|length == 0 %}
	{action_raise_error("No fan parameters provided.")}
	{% endif %}
	_CHECK_FAN_PARAMS{% for k in filtered_params %}{' '~k~'='~params[k]
	}{% endfor %}
	GCODE_AT_LAYER {% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor
	%} COMMAND="SET_FAN_SCALING{% for k in filtered_params %}{
	' ' ~ k ~ '=' ~ params[k]}{% endfor %}"

[gcode_macro heater_at_layer]
description = Convenience macro to schedule a heater adjustment at the specified
	layer change. LAYER=next will cause the command to run at the next layer
	change. See SET_HEATER_SCALING for additional arguments.
	Usage: HEATER_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...
gcode = 
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	{% set dummy = params.HEATER|default(e.g. extruder) %}
	{% set dummy = params.SCALE|default(1.0)|float %}
	{% set dummy = params.BUMP|default(0.0)|float %}
	{% set dummy = params.MAXIMUM|default(max_temp)|float %}
	{% set dummy = params.MINIMUM|default(min_temp)|float %}
	{% set dummy = params.TARGET|default(current target)|float %}
	" %}
	{% set filtered_params = params|reject('in',['HEIGHT','LAYER'])|list|sort %}
	_CHECK_HEATER_PARAMS{% for k in filtered_params%}{' ' ~ k ~ '=' ~ params[k]
	}{% endfor %}
	GCODE_AT_LAYER{% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor
	%} COMMAND="SET_HEATER_SCALING{% for k in filtered_params %}{
	' ' ~ k ~ '=\\\"' ~ params[k]|replace('\\','\\\\')|replace('\'','\\\'')
	|replace('\"','\\\"') ~ '\\\"'
	}{% endfor %}"

[gcode_macro park]
description = Park the toolhead
	Usage: PARK [P=<0|1|2>] [X=<pos>] [Y=<pos>] [Z=<pos>] [LAZY=<1|0>]
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set LAZY = params.LAZY|default(1)|int %}
	{% if printer.toolhead.homed_axes != "xyz" %}
	{% if LAZY %}
	LAZY_HOME
	{% else %}
	{action_raise_error("Must home axes first.")}
	{% endif %}
	{% endif %}
	
	
	{% set P = (params.P|default(2))|int %}
	{% set X = params.X|default(km.park_x)|float %}
	{% set Y = params.Y|default(km.park_y)|float %}
	{% set Z = params.Z|default(km.park_z)|float %}
	
	M400
	_CHECK_KINEMATIC_LIMITS X="{X}" Y="{Y}" Z="{Z}"
	_PARK_INNER X="{X}" Y="{Y}" Z="{Z}" P="{P}" LAZY="{LAZY}"
	
	{% set dummy = None if True else "
	{% set dummy = params.P|default(mode=<0|1|2>)|int %}
	{% set dummy = params.X|default(X position)|int %}
	{% set dummy = params.Y|default(Y position)|int %}
	{% set dummy = params.Z|default(Z position)|int %}
	" %}

[gcode_macro _park_inner]
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set travel_speed_xy = km.travel_speed_xy %}
	{% set travel_speed_z = km.travel_speed_z %}
	
	{% set position = printer.gcode_move.gcode_position %}
	{% set origin = printer.gcode_move.homing_origin%}
	
	
	
	{% set clearance_z = (printer["gcode_macro _km_layer_run"].clearance_z,
	position.z) | max %}
	{% set P = params.P|int %}
	{% set X = params.X|float - origin.x %}
	{% set Y = params.Y|float - origin.y %}
	{% set Z = params.Z|float %}
	{% set LAZY = params.LAZY|int %}
	
	
	{% if P == 0 %}
	{% if clearance_z > Z %}
	{% set Z = clearance_z %}
	{% endif %}
	{% elif P == 1 %}
	{% set Z = Z - origin.z %}
	{% elif P == 2 %}
	{% set Z = Z + clearance_z %}
	{% else %}
	{action_raise_error("Invalid parameter P=%i. Value must be 0, 1, or 2." |
	format(P)) }
	{% endif %}
	
	
	{% set Z = ((Z, printer.toolhead.axis_maximum.z - origin.z)|min,
	printer.toolhead.axis_minimum.z - origin.z)|max %}
	
	
	{% if (not LAZY) or P != 2 or X != position.x or Y != position.y
	or Z < clearance_z %}
	SAVE_GCODE_STATE NAME=_KM_PARK
	G90
	G0 Z{Z} F{travel_speed_z}
	G0 X{X} Y{Y} F{travel_speed_xy}
	RESTORE_GCODE_STATE NAME=_KM_PARK MOVE=0
	{% endif %}

[gcode_macro g27]
description = Parks the toolhead.
	Usage: G27 [P=<0|1|2>]
gcode = 
	
	PARK P={params.P|default(0)} {% for k in params|reject("in", "GP") %}{
	' '~k~'="'~params[k]~'"'
	}{% endfor %}

[gcode_macro pause]
description = Pauses the current print.
	Usage: PAUSE [X=<pos>] [Y=<pos>] [Z=<pos>] [E=<retract_length>] [B=<beeps>]
rename_existing = _KM_PAUSE_BASE
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% set E = (params.E|default(5))|float %}
	
	{% set B = params.B|default(10)|int if "output_pin beeper" in printer else 0
	%}
	
	{% if printer.pause_resume.is_paused %}
	{ action_respond_info("Print already paused") }
	{% elif printer.idle_timeout.state | string == "Printing" or
	(printer.virtual_sdcard|default({})).is_active|default(False) %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pausing RESET_STACK=1
	{% set position = printer.gcode_move.gcode_position %}
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_x VALUE="{position.x}"
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_y VALUE="{position.y}"
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_z VALUE="{position.z}"
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{E}"
	SAVE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE
	_KM_PAUSE_BASE
	M83
	{% if printer.extruder.can_extrude %}
	G1 E{'%.4f' % -E} F{km.load_speed}
	{% endif %}
	PARK P=2{% for k in params|select("in", "XYZ") %}{
	' '~k~'="'~params[k]~'"'}{% endfor %}
	
	{% for i in range(B) %}
	M300 P100
	G4 P200
	{% endfor %}
	{% else %}
	{ action_respond_info("Print not in progress") }
	{% endif %}

[gcode_macro m600]
description = Pauses the current print.
	Usage: M600 [B<beeps>] [E<pos>] [L<pos>] [R<temp>] [U<pos>] [X<pos>] [Y<pos>]
	[Z<pos>]
gcode = 
	PAUSE B="{0}" P=2{% for k in params|select("in", "EXYZ") %}{
	' '~k~'="'~params[k]~'"'}{% endfor %}
	UNLOAD_FILAMENT{% if 'U' in params %} LENGTH={params.U}{% endif
	%} BEEPS="{params.B|default(10)|int}"
	{% if 'R' in params %}M109 S{params.R}{% endif %}

[gcode_macro m601]
description = Pauses the current print.
	Usage: M601
gcode = 
	PAUSE

[gcode_macro m602]
description = Resumes the currently paused print.
	Usage: M602
gcode = 
	RESUME

[gcode_macro m24]
rename_existing = M24.6245197
gcode = 
	{% if printer.pause_resume.is_paused %}
	RESUME
	{% else %}
	M24.6245197
	{% endif %}

[gcode_macro m25]
rename_existing = M25.6245197
gcode = 
	PAUSE

[gcode_macro resume]
description = Resumes the currently paused print.
	Usage: RESUME [E<pos>]
rename_existing = _KM_RESUME_BASE
variable_saved_extruder_temp = 0
variable_saved_x = 0.0
variable_saved_y = 0.0
variable_saved_z = 0.0
variable_saved_e = 0.0
gcode = 
	{% if printer.pause_resume.is_paused %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% set extruder = printer[printer.toolhead.extruder] %}
	{% if extruder.target <= printer.configfile.settings[
	printer.toolhead.extruder].min_temp
	| float + 0.5 %}
	M109 S{saved_extruder_temp}
	{% endif %}
	
	
	
	{% if 'E' not in params and not saved_e %}
	{% set saved_e = 5.0 %}
	G1 E{'%.4f' % -saved_e } F{km.load_speed}
	{% endif %}
	
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"
	G90
	
	G0 X{saved_x} Y{saved_y} F{km.travel_speed_xy}
	G0 Z{saved_z} F{km.travel_speed_z}
	G91
	
	G1 E{'%.4f' % (params.E|default(saved_e))} F{km.load_speed}
	RESTORE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE MOVE=1
	_KM_RESUME_BASE
	{% else %}
	{ action_respond_info("Printer is not paused.") }
	{% endif %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=printing RESET_STACK=1

[gcode_macro clear_pause]
description = Clears the current pause state.
	Usage: CLEAR_PAUSE
rename_existing = _KM_CLEAR_PAUSE
gcode = 
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"
	_KM_CLEAR_PAUSE

[gcode_macro print_start]
description = Inserted by slicer at start of print. Rather than using this macro
	directly you should configure your slicer as instructed in the readme.
	Usage: PRINT_START BED=<temp> EXTRUDER=<temp> [CHAMBER=<temp>]
	[MESH_MIN=<x,y>] [MESH_MAX=<x,y>] [LAYERS=<num>]
	[NOZZLE_SIZE=<mm>]
gcode = 
	{action_respond_info(
	"This file is using an old The PRINT_START format. This print will run "
	"fine, but you should update your slicer config to take advantage of the "
	"phased PRINT_START macros. The slicer documentation is here:\n"
	"https://github.com/jschuh/klipper-macros\x23slicer-configuration"
	)}
	
	_PRINT_START_PHASE_INIT {rawparams}
	_PRINT_START_PHASE_PREHEAT
	_PRINT_START_PHASE_PROBING
	_PRINT_START_PHASE_EXTRUDER
	_PRINT_START_PHASE_PURGE

[gcode_macro _print_start_phase_init]
description = Inserted by slicer at start of print. Initializes PRINT_START
	phases.
	Usage: See PRINT_START.
gcode = 
	CHECK_KM_CONFIG
	SET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{False}"
	_KM_APPLY_PRINT_OFFSET RESET=1
	_PRINT_START_PHASE_CHECK PHASE=none
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% if not params.BED %}
	{% set dummy = params.__setitem__('BED', params.BED_TEMP|int) %}
	{% endif %}
	{% if not params.EXTRUDER %}
	{% set dummy = params.__setitem__('EXTRUDER', params.EXTRUDER_TEMP|int) %}
	{% endif %}
	
	
	PRINT_START_SET PRINT_START_PHASE="init" {% for k in params %}{' %s=\"%s\"' %
	(k,params[k]|replace('\\','\\\\')|replace('\'','\\\'')|replace('\"','\\\"'))
	}{% endfor %}
	
	
	_km_check_and_set_print_bounds
	
	M107
	CLEAR_PAUSE
	
	M140 S{params.BED}
	{% if params.CHAMBER %}M141 S{params.CHAMBER|int}{% endif %}
	{% if printer.bed_mesh %}BED_MESH_CLEAR{% endif %}
	
	{% if km.start_try_saved_surface_mesh and printer.bed_mesh %}
	LOAD_SURFACE_MESH
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="preheat"

[gcode_macro _print_start_phase_preheat]
description = Inserted by slicer at start of print. Handles the bed and chamber
	heating phases and ends when both are stabilized at their target temperatures.
	Usage: See PRINT_START.
gcode = 
	_PRINT_START_PHASE_CHECK PHASE=preheat
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set BED = print.BED|int %}
	{% set EXTRUDER = print.EXTRUDER|int %}
	{% set CHAMBER = print.CHAMBER|default(0)|int %}
	{% set LAYERS = print.LAYERS|default(0)|int %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% set bed_at_target = (BED + 0.4 - printer.heater_bed.temperature) |
	abs <= 0.6 %}
	PRINT_START_SET BED_AT_TARGET={1 if bed_at_target else 0}
	{% set start_level_bed_at_temp = km.start_level_bed_at_temp and
	not printer.bed_mesh.profile_name %}
	{% set actions_at_temp = start_level_bed_at_temp or
	km.start_quad_gantry_level_at_temp or
	km.start_z_tilt_adjust_at_temp or
	(km.start_home_z_at_temp and not bed_at_target) %}
	{% set bed_overshoot = (BED + (km.start_bed_heat_overshoot if
	(BED and not bed_at_target) else 0.0),
	printer.configfile.settings.heater_bed.max_temp ) | min %}
	
	INIT_LAYER_GCODE LAYERS="{LAYERS}"
	{% if CHAMBER > 0.0 %}
	M141 S{CHAMBER}
	{% endif %}
	
	M140 S{bed_overshoot}
	{% if actions_at_temp %}
	
	
	M104 S{km.start_extruder_probing_temp if km.start_extruder_probing_temp > 0
	else (km.start_extruder_preheat_scale * EXTRUDER)|round(0,'ceil')|int}
	{% else %}
	M104 S{EXTRUDER}
	{% endif %}
	
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing RESET_STACK=1
	G28
	G90
	{% if BED > 0.0 %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=bed_heating RESET_STACK=1
	
	{% if not bed_at_target %}
	PARK
	
	M190 S{bed_overshoot}
	G4 P{km.start_bed_heat_delay / 2}
	M190 R{BED}
	G4 P{km.start_bed_heat_delay / 2}
	{% endif %}
	{% endif %}
	
	{% if CHAMBER > 0.0 %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=chamber_heating RESET_STACK=1
	_KM_PARK_IF_NEEDED HEATER="chamber" RANGE=ABOVE
	M191 S{CHAMBER}
	{% endif %}
	
	{% if BED > 0.0 and bed_at_target%}
	M190 R{BED}
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="probing"

[gcode_macro _print_start_phase_probing]
description = Inserted by slicer at start of print. Performs probing (including
	mesh bed level) and other operations that should be run when the bed and
	chamber are stabilized at their target temps.
	Usage: See PRINT_START.
gcode = 
	_PRINT_START_PHASE_CHECK PHASE=probing
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set MESH_MIN = print.MESH_MIN|default(None) %}
	{% set MESH_MAX = print.MESH_MAX|default(None) %}
	
	{% if km.start_random_placement_max > 0 and print.PRINT_MIN and MESH_MIN %}
	{% set PRINT_MIN = print.PRINT_MIN.split(",")|map('float')|list %}
	{% set PRINT_MAX = print.PRINT_MAX.split(",")|map('float')|list %}
	{% set x_offset = (((km.print_max[0] - km.print_min[0] - PRINT_MAX[0] +
	PRINT_MIN[0] - 2 * km.start_random_placement_padding)|int,
	km.start_random_placement_max * 2)|min, 0)|max %}
	{% set y_offset = (((km.print_max[1] - km.print_min[1] - PRINT_MAX[1] +
	PRINT_MIN[1] - 2 * km.start_random_placement_padding)|int,
	km.start_random_placement_max * 2)|min, 0)|max %}
	{% if x_offset > 0 %}
	{% set x_offset = range(x_offset)|random + km.print_min[0] -
	PRINT_MIN[0] + km.start_random_placement_padding %}
	{% endif %}
	{% if y_offset > 0 %}
	{% set y_offset = range(y_offset)|random + km.print_min[1] -
	PRINT_MIN[1] + km.start_random_placement_padding %}
	{% endif %}
	
	
	{% set MESH_MIN = MESH_MIN.split(",")|map('float')|list %}
	{% set MESH_MAX = MESH_MAX.split(",")|map('float')|list %}
	{% set MESH_MIN_NEW = (MESH_MIN[0] + x_offset, MESH_MIN[1] + y_offset) %}
	{% set MESH_MAX_NEW = (MESH_MAX[0] + x_offset, MESH_MAX[1] + y_offset) %}
	{action_respond_info(
	"Relocating print origin from (%.3f,%.3f) "|format(*MESH_MIN) +
	"to (%.3f,%.3f)"|format(*MESH_MIN_NEW))}
	{% set MESH_MIN = (MESH_MIN_NEW[0], MESH_MIN_NEW[1])|join(',') %}
	{% set MESH_MAX = (MESH_MAX_NEW[0], MESH_MAX_NEW[1])|join(',') %}
	PRINT_START_SET PRINT_OFFSET={"%d,%d" % (x_offset,y_offset)}
	{% endif %}
	
	{% set EXTRUDER = print.EXTRUDER|int %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set start_level_bed_at_temp = km.start_level_bed_at_temp and
	not printer.bed_mesh.profile_name %}
	{% set start_home_z_at_temp = km.start_home_z_at_temp and
	not print.BED_AT_TARGET|int %}
	{% set actions_at_temp = start_level_bed_at_temp or
	km.start_quad_gantry_level_at_temp or
	km.start_z_tilt_adjust_at_temp or
	start_home_z_at_temp %}
	{% if actions_at_temp %}
	{% if km.start_extruder_probing_temp > 0 %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating RESET_STACK=1
	_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=2
	M109 R{km.start_extruder_probing_temp}
	{% else %}
	M104 S{EXTRUDER}
	{% endif %}
	{% if start_home_z_at_temp %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing RESET_STACK=1
	G28 Z
	{% endif %}
	{% if km.start_z_tilt_adjust_at_temp %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=calibrating_z RESET_STACK=1
	Z_TILT_ADJUST
	{% endif %}
	{% if km.start_quad_gantry_level_at_temp %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=leveling_gantry RESET_STACK=1
	QUAD_GANTRY_LEVEL
	{% endif %}
	{% if start_level_bed_at_temp %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=meshing RESET_STACK=1
	_km_mesh_if_needed {% if MESH_MIN %} MESH_MIN={MESH_MIN}{% endif
	%}{% if MESH_MAX %} MESH_MAX={MESH_MAX}{% endif %}
	{% endif %}
	{% if km.start_extruder_probing_temp > 0 %}
	M104 S{EXTRUDER}
	{% endif %}
	G4
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="extruder"

[gcode_macro _print_start_phase_extruder]
description = Inserted by slicer at start of print. Preheats the extruder.
	Usage: See PRINT_START.
gcode = 
	_PRINT_START_PHASE_CHECK PHASE=extruder
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set EXTRUDER = print.EXTRUDER|default(print.EXTRUDER_TEMP)|float %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	
	{% if EXTRUDER > 0 %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating RESET_STACK=1
	_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=ABOVE
	M109 S{EXTRUDER}
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="purge"

[gcode_macro _print_start_phase_purge]
description = Inserted by slicer at start of print. Generates purge lines.
	Usage: See PRINT_START.
gcode = 
	_PRINT_START_PHASE_CHECK PHASE=purge
	
	_KM_APPLY_PRINT_OFFSET
	
	_APPLY_BED_SURFACE_OFFSET
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set MESH_MIN = print.MESH_MIN|default(None) %}
	{% set MESH_MAX = print.MESH_MAX|default(None) %}
	{% set NOZZLE_SIZE = print.NOZZLE_SIZE|default(print.NOZZLE_SIZE)|
	default(printer.configfile.settings.extruder.nozzle_diameter)|float %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% if km.start_purge_length > 0.0 and printer.extruder.can_extrude %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=purging RESET_STACK=1
	DRAW_PURGE_LINE WIDTH="{NOZZLE_SIZE * 1.25}" HEIGHT="{NOZZLE_SIZE * 0.625
	}"{% if MESH_MIN %} PRINT_MIN={MESH_MIN}{% endif
	%}{% if MESH_MAX %} PRINT_MAX={MESH_MAX}{% endif %}
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="printing"
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=printing RESET_STACK=1

[gcode_macro _km_park_if_needed]
description = Parks the extruder if the current temperature of the supplied
	heater is not within the specified target range.
	Usage: _KM_PARK_IF_NEEDED HEATER=<heater> RANGE=[<percentage>|ABOVE|BELOW]
gcode = 
	
	{% set HEATER = params.HEATER if params.HEATER in
	printer.heaters.available_heaters else
	("heater_generic " ~ params.HEATER) %}
	{% set RANGE = (params.RANGE|default(1))|string|upper %}
	
	{% if printer[HEATER].target %}
	{% if RANGE == "ABOVE" %}
	{% if printer[HEATER].temperature < printer[HEATER].target %}
	PARK
	{% endif %}
	{% elif RANGE == "BELOW" %}
	{% if printer[HEATER].temperature > printer[HEATER].target %}
	PARK
	{% endif %}
	{% elif (printer[HEATER].temperature - printer[HEATER].target)|abs >
	(printer[HEATER].target * RANGE|float * 0.01)|abs %}
	PARK
	{% endif %}
	{% endif %}

[gcode_macro _km_apply_print_offset]
variable_offset = []
gcode = 
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% if params.RESET|default(0)|int and offset and
	not printer["gcode_macro _km_save_state"].is_ephemeral%}
	{% set PRINT_OFFSET = [offset.pop(0) * -1, offset.pop() * -1] %}
	{% elif print.PRINT_OFFSET and not offset and
	not printer["gcode_macro _km_save_state"].is_ephemeral %}
	{% set PRINT_OFFSET = print.PRINT_OFFSET.split(",")|map('float')|list %}
	{% set dummy = offset.extend(PRINT_OFFSET) %}
	{% endif %}
	
	{% if PRINT_OFFSET %}
	_KM_SET_GCODE_OFFSET_BASE {"X_ADJUST=%.2f Y_ADJUST=%.2f"|
	format(*PRINT_OFFSET)}
	{% endif %}

[gcode_macro _km_mesh_if_needed]
gcode = 
	
	
	
	{% if not printer.bed_mesh.profile_name %}
	BED_MESH_CALIBRATE_FAST {rawparams}
	{% endif %}

[gcode_macro print_start_set]
description = Inserted by slicer to set values used by PRINT_START.
	Usage: PRINT_START_SET <VARIABLE>=<value>
variable_print = {}
gcode = 
	{%for k in params %}
	{% set dummy = print.__setitem__(k|upper, params[k]) %}
	{% endfor %}

[gcode_macro _print_start_phase_check]
gcode = 
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set PRINT_START_PHASE = print.PRINT_START_PHASE|default("none") %}
	{% if PRINT_START_PHASE != params.PHASE %}
	
	SET_GCODE_VARIABLE MACRO=print_start_set VARIABLE=print VALUE="{{}}"
	{% if params.PHASE != 'none' %}
	{% set error = "PRINT_START phase error. Expected '%s' but found '%s'" %
	(params.PHASE, PRINT_START_PHASE) %}
	
	{% if not 'virtual_sdcard' in printer or
	not printer.virtual_sdcard.is_active or 'CANCEL_PRINT' not in
	printer.configfile.settings.virtual_sdcard.on_error_gcode|
	default("")|upper %}
	{action_respond_info(error)}
	CANCEL_PRINT
	{% else %}
	{action_raise_error(error)}
	{% endif %}
	{% else %}
	{ action_respond_info("Expected phase '%s' but found '%s'. Resetting."
	% (params.PHASE, PRINT_START_PHASE)) }
	{% endif %}
	{% endif %}

[gcode_macro print_end]
description = Inserted by slicer at end of print.
	Usage: PRINT_END
gcode = 
	_KM_CHECK_IS_PRINTING
	M400
	_PRINT_END_INNER
	
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% if km.start_clear_adjustments_at_end != 0 %}
	RESET_HEATER_SCALING
	RESET_FAN_SCALING
	M220 S100
	M221 S100
	{% endif %}
	_RESET_LAYER_GCODE
	_RESET_VELOCITY_LIMITS
	TURN_OFF_HEATERS
	M107; turn off fan
	{% if printer.bed_mesh %}BED_MESH_CLEAR{% endif %}
	
	{% if printer.toolhead.homed_axes|lower == "xyz" %}
	PARK Y="{km.start_end_park_y}"
	{% endif %}
	M84
	CLEAR_PAUSE
	SET_GCODE_VARIABLE MACRO=print_start_set VARIABLE=print VALUE="{{}}"
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready RESET_STACK=1

[gcode_macro _print_end_inner]
variable_cancelled = False
gcode = 
	SET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{False}"
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set toolhead = printer.toolhead %}
	{% set origin = printer.gcode_move.homing_origin%}
	{% set max_x = km.print_max[0] - origin.x %}
	{% set max_y = km.print_max[1] - origin.y %}
	{% set max_z = toolhead.axis_maximum.z - origin.z %}
	
	{% if not cancelled %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=completing
	{% endif %}
	
	{% if printer.extruder.can_extrude %}
	
	{% if not printer.pause_resume.is_paused and not cancelled and
	toolhead.homed_axes|lower == "xyz" %}
	{% set x_safe = (max_x - toolhead.position.x, 2.0)|min %}
	{% set y_safe = (max_y - toolhead.position.y, 2.0)|min %}
	{% set z_safe = (max_z - toolhead.position.z, 2.0)|min %}
	G91
	G0 Z{z_safe} E-1.0 F{km.travel_speed_z * 2}
	G0 X{x_safe} Y{y_safe} E-1.0 F{km.travel_speed_xy}
	
	_KM_APPLY_PRINT_OFFSET RESET=1
	{% endif %}
	
	
	G92 E0
	G1 E-5.0 F3600
	M400
	{% endif %}

[gcode_macro _km_check_is_printing]
variable_debug_state = False
description = Throws an error if print is not currently in progress.
gcode = 
	{% if not debug_state and
	printer.idle_timeout.state|string != "Printing" and
	not (printer.virtual_sdcard|default({})).is_active|default(False) and
	not printer.pause_resume.is_paused %}
	{ action_raise_error("No active print.") }
	{% endif %}

[gcode_macro _km_check_and_set_print_bounds]
description = Validates all print bounds and caches their values.
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set print = printer["gcode_macro print_start_set"].print %}
	
	
	{% if print.MESH_MIN %}
	{% set MESH_MIN = print.MESH_MIN.split(",")|map('float')|list %}
	{% set MESH_MAX = print.MESH_MAX.split(",")|map('float')|list %}
	{%if MESH_MIN[0] < km.print_min[0] or MESH_MIN[1] < km.print_min[1] %}
	{action_raise_error("MESH_MIN %s is outside the printable bounds" %
	(MESH_MIN|string, km.print_min|string))}
	{%elif MESH_MAX[0] > km.print_max[0] or MESH_MAX[1] > km.print_max[1] %}
	{action_raise_error("MESH_MAX %s is outside the printable bounds %s" %
	(MESH_MAX|string, km.print_max|string))}
	{% endif %}
	{% endif %}
	
	
	{% set points = [] %}
	{% if print.MODEL_MIN or print.MODEL_MAX %}
	{% set MODEL_MIN = print.MODEL_MIN.split(",")|map('float')|list %}
	{% set MODEL_MAX = print.MODEL_MAX.split(",")|map('float')|list %}
	{% set points = [MODEL_MIN, MODEL_MAX] %}
	{% endif %}
	{% if (printer.exclude_object|default({})).objects %}
	{% set points = printer.exclude_object.objects|selectattr('polygon')|
	map(attribute='polygon')|sum(start=points) %}
	{% set points_len = points|length %}
	{% if points_len >= 2 %}
	{% set x_coords = (points|map(attribute=0)|sort|list)[0::points_len-1] %}
	{% set y_coords = (points|map(attribute=1)|sort|list)[0::points_len-1] %}
	{% set MODEL_MIN = (x_coords[0],y_coords[0])|map('float')|list %}
	{% set MODEL_MAX = (x_coords[1],y_coords[1])|map('float')|list %}
	PRINT_START_SET MODEL_MIN="{MODEL_MIN|join(',')
	}" MODEL_MAX="{MODEL_MAX|join(',')}"
	{% endif %}
	{% endif %}
	
	{% if MODEL_MIN %}
	
	{% if MODEL_MIN[0] < km.print_min[0] or MODEL_MIN[1] < km.print_min[1] %}
	{action_raise_error("MODEL_MIN %s is outside the printable bounds" %
	(MODEL_MIN|string, km.print_min|string))}
	{% elif MODEL_MAX[0] > km.print_max[0] or MODEL_MAX[1] > km.print_max[1] %}
	{action_raise_error("MODEL_MAX %s is outside the printable bounds %s" %
	(MODEL_MAX|string, km.print_max|string))}
	{% endif %}
	{% endif %}
	
	
	{% if MESH_MIN and MODEL_MIN %}
	PRINT_START_SET PRINT_MIN="{((MODEL_MIN[0],MESH_MIN[0])|min,
	(MODEL_MIN[1],MESH_MIN[1])|min)|join(',')
	}" PRINT_MAX="{((MODEL_MAX[0],MESH_MAX[0])|max,
	(MODEL_MAX[1],MESH_MAX[1])|max)|join(',')}"
	{% else %}
	PRINT_START_SET PRINT_MIN="{km.print_min|join(',')
	}" PRINT_MAX="{km.print_max|join(',')}"
	{% endif %}

[gcode_macro _km_save_state]
description = Tracks gcode state.
variable_state_set = {}
variable_is_ephemeral = 0
gcode = 
	{% if params.SAVE|int %}
	{% set dummy = state_set.__setitem__(params.NAME, None) %}
	{% else %}
	{% set dummy = state_set.__delitem__(params.NAME) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=_km_save_state VARIABLE=is_ephemeral VALUE="{
	1 if state_set|length > 0 else 0 }"

[gcode_macro save_gcode_state]
description = Wraps SAVE_GCODE_STATE to track persistence state.
	Usage: See Klipper documentation
rename_existing = _KM_SAVE_GCODE_STATE
gcode = 
	_KM_SAVE_GCODE_STATE {rawparams}
	{% set NAME = params.NAME|default("default") %}
	_km_save_state NAME={NAME} SAVE=1

[gcode_macro restore_gcode_state]
description = Wraps RESTORE_GCODE_STATE to track persistence state.
	Usage: See Klipper documentation
rename_existing = _KM_RESTORE_GCODE_STATE
gcode = 
	_KM_RESTORE_GCODE_STATE {rawparams}
	{% set NAME = params.NAME|default("default") %}
	_km_save_state NAME={NAME} SAVE=0

[gcode_macro _abort_on_gcode_state]
gcode = 
	{% set save_state = printer["gcode_macro _km_save_state"] %}
	{% if save_state.is_ephemeral %}
	{action_raise_error("Encountered unexpected save state " +
	save_state.state_set|list|sort|string)}
	{% endif %}

[gcode_macro _km_print_status]
variable_last_status = 'none'
variable_status_stack = []
variable_command_list = {}
variable_status_list = [
	'ready',
	'filament_load',
	'filament_unload',
	'bed_heating',
	'chamber_heating',
	'homing',
	'leveling_gantry',
	'calibrating_z',
	'meshing',
	'extruder_heating',
	'purging',
	'printing',
	'pausing',
	'cancelling',
	'completing',
	]
gcode = 
	{% set ACTION = params.ACTION|trim|upper %}
	{% set STATUS = params.STATUS|default("")|trim|lower %}
	
	
	{% if ACTION == "ADD_EVENT" %}
	{% set COMMAND = params.COMMAND %}
	{% set ARGS = params.ARGS|default(0)|int != 0 %}
	{% set TYPE = params.TYPE|default('ENTER')|trim|upper %}
	{% set WHEN = params.WHEN|default('PRINTING')|trim|upper %}
	{% set FILTER_ENTER =
	(params.FILTER_ENTER|default("")|trim|lower).split(',')|
	select()|unique|list %}
	{% set FILTER_LEAVE =
	(params.FILTER_LEAVE|default("")|trim|lower).split(',')|
	select()|unique|list %}
	
	{% set STATUSES = STATUS.split(',')|map('trim')|list %}
	{% for s in (STATUSES if STATUSES[0] != 'all' else status_list) %}
	{% if not s in command_list %}
	{% set dummy = command_list.__setitem__(s,[]) %}
	{% endif %}
	{% set dummy = command_list[s].append({'cmd':COMMAND, 'args':ARGS,
	'type':TYPE, 'when':WHEN,
	'filt_e':FILTER_ENTER,
	'filt_l':FILTER_LEAVE}) %}
	{% endfor %}
	
	
	{% elif ACTION == "CHANGE" %}
	{% if params.RESET_STACK|default(0)|int %}
	{% for dummy in range(status_stack|length) %}
	{% set dummy = status_stack.pop() %}
	{% endfor %}
	
	
	{% elif STATUS == "pop_status" %}
	{% set STATUS = (status_stack|default(['ready'], True)).pop() %}
	{% endif %}
	
	{% if STATUS not in status_list %}
	{action_raise_error("Status '%s' not valid."|format(STATUS))}
	{% endif %}
	
	{% if STATUS != last_status %}
	{% set is_printing =
	printer["gcode_macro print_start_set"].print.PRINT_START_PHASE|
	default("")|length != 0 %}
	{% set print_states = ('ALWAYS', 'PRINTING' if is_printing else 'IDLE') %}
	
	{% for c in command_list[last_status]|default([]) %}
	{% if c.type in ('BOTH','LEAVE') and c.when in print_states and
	(not c.filt_l or STATUS in c.filt_l) %}
	M400
	{c.cmd}{% if c.args %} TYPE=LEAVE WHEN={print_states[1]
	} LAST_STATUS={last_status} NEXT_STATUS={STATUS}{% endif %}
	{% endif %}
	{% endfor %}
	
	{% for c in command_list[STATUS]|default([]) %}
	{% if c.type in ('BOTH','ENTER') and c.when in print_states and
	(not c.filt_e or STATUS in c.filt_e) %}
	M400
	{c.cmd}{% if c.args %} TYPE=ENTER WHEN={print_states[1]
	} LAST_STATUS={last_status} NEXT_STATUS={STATUS}{% endif %}
	{% endif %}
	{% endfor %}
	SET_GCODE_VARIABLE MACRO=_km_print_status VARIABLE=last_status VALUE="'{
	STATUS}'"
	{% endif %}
	
	
	{% elif ACTION == "PUSH_STATUS" %}
	{% set dummy = status_stack.append(last_status) %}
	
	
	{% else %}
	{action_raise_error("Action '%s' not valid."|format(ACTION))}
	{% endif %}

[gcode_macro gcode_on_print_status]
description = Adds a gcode command for a status event.
	Usage: GCODE_ON_PRINT_STATUS STATUS=<status> COMMAND=<gcode> [ARGS=<1|0>]
	[WHEN=<PRINTING|IDLE|ALWAYS>]
	[TYPE=<ENTER|LEAVE|BOTH>]
	[FILTER_ENTER=<status list>]
	[FILTER_LEAVE=<status list>]
gcode = 
	{% set STATUS = (params.STATUS|lower).split(',')|map('trim')|list %}
	{% set TYPE = params.TYPE|default('ENTER')|trim|upper %}
	{% set WHEN = params.WHEN|default('PRINTING')|trim|upper %}
	{% set FILTER_ENTER =
	(params.FILTER_ENTER|default("")|trim|lower).split(',')|select()|list %}
	{% set FILTER_LEAVE =
	(params.FILTER_LEAVE|default("")|trim|lower).split(',')|select()|list %}
	
	
	{% set status_list = printer["gcode_macro _km_print_status"].status_list %}
	{% for s in STATUS %}
	{% if not (s in status_list or s == 'all' and STATUS|length == 1) %}
	{action_raise_error("STATUS parameter '%s' not valid."|format(s))}
	{% endif %}
	{% endfor %}
	
	{% if TYPE not in ('ENTER', 'LEAVE', 'BOTH') %}
	{action_raise_error("TYPE paramater '%s' not valid."|format(TYPE))}
	{% elif WHEN not in ('PRINTING', 'IDLE', 'ALWAYS') %}
	{action_raise_error("WHEN parameter '%s' not valid."|format(WHEN))}
	{% elif TYPE == 'ENTER' and FILTER_LEAVE %}
	{action_raise_error("FILTER_LEAVE not valid with TYPE=ENTER.")}
	{% elif TYPE == 'LEAVE' and FILTER_ENTER %}
	{action_raise_error("FILTER_ENTER not valid with TYPE=LEAVE.")}
	{% endif %}
	{% for f in FILTER_ENTER %}
	{% if f not in status_list %}
	{action_raise_error("FILTER_ENTER parameter '%s' not valid."|format(f))}
	{% endif %}
	{% endfor %}
	{% for f in FILTER_LEAVE %}
	{% if f not in status_list %}
	{action_raise_error("FILTER_LEAVE parameter '%s' not valid."|format(f))}
	{% endif %}
	{% endfor %}
	
	
	_KM_PRINT_STATUS ACTION=ADD_EVENT {rawparams}

[gcode_macro m201]
description = Sets maximum accelleration.
	Usage: M201 [X<accel>] [Y<accel>]
variable_max_accel = 1.7976931348623157e+308
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% if 'X' in params or 'Y' in params %}
	{% set accel = (params.X|default(params.Y)|float,
	params.Y|default(params.X)|float)|min %}
	SET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{accel}"
	{% else %}
	SET_VELOCITY_LIMIT
	{% endif %}

[gcode_macro m203]
description = Sets maximum velocity.
	Usage: M203 [X<velocity>] [Y<velocity>]
gcode = 
	{% if 'X' in params or 'Y' in params %}
	{% set velocity = (params.X|default(params.Y)|float,
	params.Y|default(params.X)|float)|min %}
	SET_VELOCITY_LIMIT VELOCITY="{velocity}"
	{% else %}
	SET_VELOCITY_LIMIT
	{% endif %}

[gcode_macro m205]
description = Sets square corner velocity.
	Usage: M203 [X<velocity>] [Y<velocity>]
gcode = 
	{% if 'X' in params or 'Y' in params %}
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY="{
	(params.X|default(0)|float, params.Y|default(0)|float)|min}"
	{% else %}
	SET_VELOCITY_LIMIT
	{% endif %}

[gcode_macro m900]
description = Sets pressure advance.
	Usage: M900 [K<advance>] [T<extruder_index>]
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% if km.pressure_advance_scale > 0.0 %}
	{% set extruder = "extruder" ~ params.T|replace('0', '')
	if "T" in params else printer.toolhead.extruder %}
	{% if 'K' in params %}
	SET_PRESSURE_ADVANCE EXTRUDER="{extruder}" ADVANCE="{
	params.K|float * km.pressure_advance_scale}"
	{% endif %}
	{% endif %}

[gcode_macro _reset_velocity_limits]
description = Sets maximum accelleration.
	Usage: M204 [S<accel>] [P<accel> T<accel>]
gcode = 
	SET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{1.7976931348623157e+308}"

[gcode_macro bed_mesh_calibrate]
rename_existing = _KM_BED_MESH_CALIBRATE_BASE
description = Wraps BED_MESH_CALIBRATE, scaling probe count to specified area.
	Usage: See Klipper documentation.
gcode = 
	BED_MESH_CALIBRATE_FAST{%for k in params%}{' '~k~'="'~params[k]~'"'}{%endfor%}

[gcode_macro g29]
gcode = 
	BED_MESH_CALIBRATE

[idle_timeout]
gcode = 
	_KM_IDLE_TIMEOUT

[respond]

[gcode_macro PRINT_START]
rename_existing = KM_PRINT_START
gcode = 
	
	STATUS_HOMING
	KM_PRINT_START {rawparams}
	STATUS_PRINTING

[board_pins EBB36_G0B1_v1.2]
mcu = ebbcan
aliases = 
aliases_step = 
	EXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15
aliases_limitsw = 
	LIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6
aliases_bltouch = 
	PROBE_1=PB9,PROBE_2=PB8
aliases_fans = 
	FAN0=PA1,FAN1=PA0
aliases_thermistors = 
	TH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7
aliases_heaters = 
	HE0=PB13
aliases_rgb = 
	RGBLED=PD3
aliases_adxl = 
	ADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11
aliases_i2c = 
	AUX0=PB3,AUX1=PB4

[neopixel sb_leds]
pin = ebbcan:RGBLED
chain_count = 6
color_order = GRB
initial_red = 0.0
initial_green = 0.0
initial_blue = 0.0
initial_white = 1.0

[save_variables]
filename = ~/printer_data/variables.cfg

[mcu CB1]
serial = /tmp/klipper_host_mcu

[mcu]
canbus_uuid = f94e10a9add8

[mcu ebbcan]
canbus_uuid = 57244ec148c0

[printer]
kinematics = corexy
max_velocity = 600
max_accel = 10000
max_accel_to_decel = 5000
max_z_velocity = 5
max_z_accel = 100

[stepper_x]
step_pin = PE2
dir_pin = !PB4
enable_pin = !PC11
microsteps = 16
rotation_distance = 40
endstop_pin = !ebbcan:LIMIT_2
position_endstop = 220
position_min = -4
position_max = 220
homing_speed = 50

[tmc2209 stepper_x]
uart_pin = PC10
diag_pin = PF3
run_current = 1.1

[tmc2209 stepper_y]
uart_pin = PF13
diag_pin = PF4
run_current = 1.1

[tmc2209 stepper_z]
uart_pin = PF9
diag_pin = PF5
run_current = 0.650

[tmc2209 extruder]
uart_pin = ebbcan:EXT_UART
diag_pin = ebbcan:LIMIT_3
run_current = 0.650

[stepper_y]
step_pin = PF12
dir_pin = !PF11
enable_pin = !PB3
microsteps = 16
rotation_distance = 40
endstop_pin = ^PF3
position_endstop = 220
position_min = -4
position_max = 220
homing_speed = 50

[stepper_z]
step_pin = PD7
dir_pin = !PD6
enable_pin = !PF10
microsteps = 16
rotation_distance = 8
endstop_pin = probe:z_virtual_endstop
position_max = 300
position_min = -3

[heater_bed]
heater_pin = PB7
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PA0
min_temp = 0
max_temp = 130
control = pid
pid_kp = 63.528
pid_ki = 0.875
pid_kd = 1153.041

[temperature_sensor raspberry_pi]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor mcu_temp]
sensor_type = temperature_mcu
min_temp = 0
max_temp = 100

[controller_fan MCU_Fan]
pin = PE6
heater = extruder
fan_speed = 1

[heater_fan heatbreak_cooling_fan]
pin = ebbcan:FAN0
kick_start_time = 0.25
heater = extruder
heater_temp = 50.0
fan_speed = 1

[fan]
pin = ebbcan:FAN1

[safe_z_home]
home_xy_position = 140, 140
speed = 100
z_hop = 10
z_hop_speed = 20

[extruder]
step_pin = ebbcan:EXT_STEP
dir_pin = ebbcan:EXT_DIR
enable_pin = !ebbcan:EXT_EN
microsteps = 16
rotation_distance = 4.71
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.750
max_extrude_only_distance = 101.0
heater_pin = ebbcan:HE0
sensor_type = ATC Semitec 104NT-4-R025H42G
sensor_pin = ebbcan:TH0
min_temp = 0
max_temp = 300
max_extrude_cross_section = 5
pressure_advance = 0.02
control = pid
pid_kp = 20.603
pid_ki = 0.988
pid_kd = 107.392

[bltouch]
sensor_pin = ebbcan:PROBE_2
control_pin = ebbcan:PROBE_1
x_offset = -40
y_offset = -17
samples = 2
samples_tolerance = 0.015
samples_tolerance_retries = 5
z_offset = 2.849

[bed_mesh]
speed = 100
horizontal_move_z = 5
mesh_min = 10, 27
mesh_max = 173, 200
probe_count = 5, 5
algorithm = bicubic
fade_start = 1
fade_end = 10

[bed_screws]
screw1 = 55,55
screw2 = 200,55
screw3 = 200,205
screw4 = 55,205

[screws_tilt_adjust]
screw1 = 65,55
screw1_name = front left screw
screw2 = 218,55
screw2_name = front right screw
screw3 = 218,215
screw3_name = rear right screw
screw4 = 65,215
screw4_name = rear left screw
horizontal_move_z = 10
speed = 50
screw_thread = CW-M4

[display]
lcd_type = st7920
cs_pin = PB12
sclk_pin = PB13
sid_pin = PB15
encoder_pins = ^PB14, ^PB10
click_pin = ^!PB2

[exclude_object]

[firmware_retraction]
retract_length = 0.4
retract_speed = 20
unretract_extra_length = 0
unretract_speed = 10

[input_shaper]
shaper_type_x = 2hump_ei
shaper_freq_x = 86.2
shaper_type_y = zv
shaper_freq_y = 44.8

[gcode_arcs]
resolution = 1.0

[adxl345]
cs_pin = ebbcan:ADXL_CS
spi_software_sclk_pin = ebbcan:ADXL_SCLK
spi_software_mosi_pin = ebbcan:ADXL_MOSI
spi_software_miso_pin = ebbcan:ADXL_MISO

[resonance_tester]
accel_chip = adxl345
probe_points = 
	120,120,20

[bed_mesh default]
version = 1
points = 
	0.027500, 0.058750, 0.091250, 0.182500
	-0.003750, 0.061250, 0.072500, 0.125000
	0.021250, 0.016250, 0.013750, 0.033750
	-0.023750, -0.018750, -0.036250, -0.037500
x_count = 4
y_count = 4
mesh_x_pps = 2
mesh_y_pps = 2
algo = bicubic
tension = 0.2
min_x = 48.75
max_x = 171.24
min_y = 48.75
max_y = 171.24
=======================
Extruder max_extrude_ratio=2.078758
mcu 'mcu': Starting CAN connect
Created a socket
webhooks client 281473551903424: New connection
webhooks client 281473551903424: Client info {'program': 'Moonraker', 'version': 'v0.8.0-92-g504a3a7'}
Loaded MCU 'mcu' 109 commands (v0.11.0-241-gffb5105b / gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2)
MCU 'mcu' config: ADC_MAX=4095 BUS_PINS_i2c1_PA9_PA10=PA9,PA10 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_i2c2_PB13_PB14=PB13,PB14 BUS_PINS_i2c3_PB3_PB4=PB3,PB4 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3=PB4,PB5,PB3 CANBUS_BRIDGE=1 CLOCK_FREQ=64000000 MCU=stm32g0b1xx PWM_MAX=255 RECEIVE_WINDOW=192 RESERVE_PINS_CAN=PD12,PD13 RESERVE_PINS_USB=PA11,PA12 RESERVE_PINS_crystal=PF0,PF1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
mcu 'CB1': Starting connect
Loaded MCU 'CB1' 113 commands (v0.11.0-241-gffb5105b / gcc: (Debian 10.2.1-6) 10.2.1 20210110 binutils: (GNU Binutils for Debian) 2.35.2)
MCU 'CB1' config: ADC_MAX=4095 CLOCK_FREQ=50000000 MCU=linux PCA9685_MAX=4096 PWM_MAX=32768 STATS_SUMSQ_BASE=256
mcu 'ebbcan': Starting CAN connect
Created a socket
mcu 'ebbcan': got {'count': 522, 'sum': 605810, 'sumsq': 5688728, '#name': 'stats', '#sent_time': 216.61317856099998, '#receive_time': 216.61387351899998}
Loaded MCU 'ebbcan' 109 commands (v0.11.0-241-gffb5105b / gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2)
MCU 'ebbcan' config: ADC_MAX=4095 BUS_PINS_i2c1_PA9_PA10=PA9,PA10 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_i2c2_PB13_PB14=PB13,PB14 BUS_PINS_i2c3_PB3_PB4=PB3,PB4 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3=PB4,PB5,PB3 CANBUS_FREQUENCY=1000000 CLOCK_FREQ=64000000 MCU=stm32g0b1xx PWM_MAX=255 RECEIVE_WINDOW=192 RESERVE_PINS_CAN=PB0,PB1 RESERVE_PINS_crystal=PF0,PF1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
mcu_temperature 'mcu' nominal base=-268.847262 slope=1298.126801
Sending MCU 'mcu' printer configuration...
Configured MCU 'mcu' (1024 moves)
Sending MCU 'CB1' printer configuration...
Configured MCU 'CB1' (1024 moves)
Sending MCU 'ebbcan' printer configuration...
Configured MCU 'ebbcan' (1024 moves)
Starting heater checks for heater_bed
bed_mesh: generated points
Index |  Tool Adjusted  |   Probe
  0   | (50.0, 44.0)    | (10.0, 27.0)
  1   | (90.8, 44.0)    | (50.8, 27.0)
  2   | (131.5, 44.0)   | (91.5, 27.0)
  3   | (172.2, 44.0)   | (132.2, 27.0)
  4   | (213.0, 44.0)   | (173.0, 27.0)
  5   | (213.0, 87.2)   | (173.0, 70.2)
  6   | (172.2, 87.2)   | (132.2, 70.2)
  7   | (131.5, 87.2)   | (91.5, 70.2)
  8   | (90.8, 87.2)    | (50.8, 70.2)
  9   | (50.0, 87.2)    | (10.0, 70.2)
  10  | (50.0, 130.5)   | (10.0, 113.5)
  11  | (90.8, 130.5)   | (50.8, 113.5)
  12  | (131.5, 130.5)  | (91.5, 113.5)
  13  | (172.2, 130.5)  | (132.2, 113.5)
  14  | (213.0, 130.5)  | (173.0, 113.5)
  15  | (213.0, 173.8)  | (173.0, 156.8)
  16  | (172.2, 173.8)  | (132.2, 156.8)
  17  | (131.5, 173.8)  | (91.5, 156.8)
  18  | (90.8, 173.8)   | (50.8, 156.8)
  19  | (50.0, 173.8)   | (10.0, 156.8)
  20  | (50.0, 217.0)   | (10.0, 200.0)
  21  | (90.8, 217.0)   | (50.8, 200.0)
  22  | (131.5, 217.0)  | (91.5, 200.0)
  23  | (172.2, 217.0)  | (132.2, 200.0)
  24  | (213.0, 217.0)  | (173.0, 200.0)
Starting heater checks for extruder
Stats 218.2: gcodein=0  mcu: mcu_awake=0.044 mcu_task_avg=0.000014 mcu_task_stddev=0.000009 bytes_write=3773 bytes_read=5766 bytes_retransmit=0 bytes_invalid=0 send_seq=233 receive_seq=230 retransmit_seq=0 srtt=0.004 rttvar=0.002 rto=0.025 ready_bytes=1041 upcoming_bytes=30 freq=64006261 CB1: mcu_awake=0.004 mcu_task_avg=0.000027 mcu_task_stddev=0.000017 bytes_write=819 bytes_read=4523 bytes_retransmit=0 bytes_invalid=0 send_seq=112 receive_seq=112 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49998729 adj=49996897 ebbcan: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=1454 bytes_read=4769 bytes_retransmit=0 bytes_invalid=0 send_seq=147 receive_seq=147 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64003250 adj=64006263  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=58.5 mcu_temp: temp=34.5 sysload=0.60 cputime=25.740 memavail=693452 print_time=0.010 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
webhooks: registering remote method 'shutdown_machine' for connection id: 281473551903424
webhooks: registering remote method 'reboot_machine' for connection id: 281473551903424
webhooks: registering remote method 'pause_job_queue' for connection id: 281473551903424
webhooks: registering remote method 'start_job_queue' for connection id: 281473551903424
Active bed surface: default; offset: -0.050
Stats 219.3: gcodein=0  mcu: mcu_awake=0.044 mcu_task_avg=0.000014 mcu_task_stddev=0.000009 bytes_write=4955 bytes_read=6018 bytes_retransmit=0 bytes_invalid=0 send_seq=255 receive_seq=255 retransmit_seq=0 srtt=0.004 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64003470 CB1: mcu_awake=0.004 mcu_task_avg=0.000027 mcu_task_stddev=0.000017 bytes_write=825 bytes_read=4539 bytes_retransmit=0 bytes_invalid=0 send_seq=113 receive_seq=113 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49998669 adj=49991713 ebbcan: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=1460 bytes_read=4845 bytes_retransmit=0 bytes_invalid=0 send_seq=148 receive_seq=148 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001338 adj=63991784  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=55.6 mcu_temp: temp=34.8 sysload=0.60 cputime=26.055 memavail=691156 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
Stats 220.3: gcodein=0  mcu: mcu_awake=0.044 mcu_task_avg=0.000014 mcu_task_stddev=0.000009 bytes_write=4961 bytes_read=6121 bytes_retransmit=0 bytes_invalid=0 send_seq=256 receive_seq=256 retransmit_seq=0 srtt=0.003 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64002285 CB1: mcu_awake=0.004 mcu_task_avg=0.000027 mcu_task_stddev=0.000017 bytes_write=831 bytes_read=4555 bytes_retransmit=0 bytes_invalid=0 send_seq=114 receive_seq=114 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49998351 adj=49996704 ebbcan: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=1466 bytes_read=4906 bytes_retransmit=0 bytes_invalid=0 send_seq=149 receive_seq=149 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001060 adj=63995706  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=58.5 mcu_temp: temp=34.9 sysload=0.55 cputime=26.120 memavail=686976 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
Stats 221.3: gcodein=0  mcu: mcu_awake=0.044 mcu_task_avg=0.000014 mcu_task_stddev=0.000009 bytes_write=4973 bytes_read=6240 bytes_retransmit=0 bytes_invalid=0 send_seq=258 receive_seq=258 retransmit_seq=0 srtt=0.002 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001514 CB1: mcu_awake=0.004 mcu_task_avg=0.000027 mcu_task_stddev=0.000017 bytes_write=837 bytes_read=4571 bytes_retransmit=0 bytes_invalid=0 send_seq=115 receive_seq=115 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49998286 adj=49997956 ebbcan: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=1472 bytes_read=4967 bytes_retransmit=0 bytes_invalid=0 send_seq=150 receive_seq=150 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000717 adj=63998408  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=56.8 mcu_temp: temp=34.9 sysload=0.55 cputime=26.158 memavail=687288 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 222.3: gcodein=0  mcu: mcu_awake=0.110 mcu_task_avg=0.000037 mcu_task_stddev=0.000166 bytes_write=4979 bytes_read=6389 bytes_retransmit=0 bytes_invalid=0 send_seq=259 receive_seq=259 retransmit_seq=0 srtt=0.002 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001457 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=843 bytes_read=4600 bytes_retransmit=0 bytes_invalid=0 send_seq=116 receive_seq=116 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49998296 adj=49998878 ebbcan: mcu_awake=0.006 mcu_task_avg=0.000016 mcu_task_stddev=0.000037 bytes_write=1478 bytes_read=5058 bytes_retransmit=0 bytes_invalid=0 send_seq=151 receive_seq=151 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000706 adj=63999558  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=56.5 mcu_temp: temp=34.8 sysload=0.55 cputime=26.200 memavail=695196 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
Stats 223.3: gcodein=0  mcu: mcu_awake=0.110 mcu_task_avg=0.000037 mcu_task_stddev=0.000166 bytes_write=4985 bytes_read=6492 bytes_retransmit=0 bytes_invalid=0 send_seq=260 receive_seq=260 retransmit_seq=0 srtt=0.002 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001350 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=849 bytes_read=4616 bytes_retransmit=0 bytes_invalid=0 send_seq=117 receive_seq=117 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49998578 adj=49998584 ebbcan: mcu_awake=0.006 mcu_task_avg=0.000016 mcu_task_stddev=0.000037 bytes_write=1484 bytes_read=5119 bytes_retransmit=0 bytes_invalid=0 send_seq=152 receive_seq=152 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000636 adj=63999599  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=55.9 mcu_temp: temp=35.0 sysload=0.55 cputime=26.255 memavail=694468 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 224.3: gcodein=0  mcu: mcu_awake=0.110 mcu_task_avg=0.000037 mcu_task_stddev=0.000166 bytes_write=4991 bytes_read=6595 bytes_retransmit=0 bytes_invalid=0 send_seq=261 receive_seq=261 retransmit_seq=0 srtt=0.002 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001290 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=855 bytes_read=4632 bytes_retransmit=0 bytes_invalid=0 send_seq=118 receive_seq=118 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49998598 adj=49999279 ebbcan: mcu_awake=0.006 mcu_task_avg=0.000016 mcu_task_stddev=0.000037 bytes_write=1490 bytes_read=5180 bytes_retransmit=0 bytes_invalid=0 send_seq=153 receive_seq=153 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000562 adj=63999640  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=55.3 mcu_temp: temp=35.0 sysload=0.55 cputime=26.292 memavail=694088 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 225.3: gcodein=0  mcu: mcu_awake=0.110 mcu_task_avg=0.000037 mcu_task_stddev=0.000166 bytes_write=4997 bytes_read=6727 bytes_retransmit=0 bytes_invalid=0 send_seq=262 receive_seq=262 retransmit_seq=0 srtt=0.002 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001325 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=861 bytes_read=4648 bytes_retransmit=0 bytes_invalid=0 send_seq=119 receive_seq=119 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49998530 adj=49999049 ebbcan: mcu_awake=0.006 mcu_task_avg=0.000016 mcu_task_stddev=0.000037 bytes_write=1496 bytes_read=5256 bytes_retransmit=0 bytes_invalid=0 send_seq=154 receive_seq=154 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000690 adj=63999528  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=56.4 mcu_temp: temp=34.9 sysload=0.50 cputime=26.335 memavail=693864 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
Stats 226.3: gcodein=0  mcu: mcu_awake=0.110 mcu_task_avg=0.000037 mcu_task_stddev=0.000166 bytes_write=5003 bytes_read=6830 bytes_retransmit=0 bytes_invalid=0 send_seq=263 receive_seq=263 retransmit_seq=0 srtt=0.001 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001308 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=867 bytes_read=4664 bytes_retransmit=0 bytes_invalid=0 send_seq=120 receive_seq=120 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49998593 adj=49998447 ebbcan: mcu_awake=0.006 mcu_task_avg=0.000016 mcu_task_stddev=0.000037 bytes_write=1502 bytes_read=5317 bytes_retransmit=0 bytes_invalid=0 send_seq=155 receive_seq=155 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000660 adj=63999748  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=55.2 mcu_temp: temp=35.2 sysload=0.50 cputime=26.397 memavail=694192 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
Stats 227.3: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5009 bytes_read=6948 bytes_retransmit=0 bytes_invalid=0 send_seq=264 receive_seq=264 retransmit_seq=0 srtt=0.001 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001285 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000015 bytes_write=873 bytes_read=4693 bytes_retransmit=0 bytes_invalid=0 send_seq=121 receive_seq=121 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49998609 adj=49998483 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1508 bytes_read=5392 bytes_retransmit=0 bytes_invalid=0 send_seq=156 receive_seq=156 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000707 adj=63999612  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=54.0 mcu_temp: temp=35.3 sysload=0.50 cputime=26.460 memavail=693744 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 228.3: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5015 bytes_read=7080 bytes_retransmit=0 bytes_invalid=0 send_seq=265 receive_seq=265 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001289 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000015 bytes_write=879 bytes_read=4709 bytes_retransmit=0 bytes_invalid=0 send_seq=122 receive_seq=122 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49998616 adj=49998380 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1514 bytes_read=5468 bytes_retransmit=0 bytes_invalid=0 send_seq=157 receive_seq=157 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000657 adj=63999802  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=54.3 mcu_temp: temp=35.3 sysload=0.50 cputime=26.524 memavail=693524 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 229.3: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5021 bytes_read=7183 bytes_retransmit=0 bytes_invalid=0 send_seq=266 receive_seq=266 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001257 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000015 bytes_write=885 bytes_read=4725 bytes_retransmit=0 bytes_invalid=0 send_seq=123 receive_seq=123 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49998597 adj=49998201 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1520 bytes_read=5529 bytes_retransmit=0 bytes_invalid=0 send_seq=158 receive_seq=158 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000638 adj=63999502  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=53.8 mcu_temp: temp=35.2 sysload=0.50 cputime=26.574 memavail=694060 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
Stats 230.3: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5027 bytes_read=7286 bytes_retransmit=0 bytes_invalid=0 send_seq=267 receive_seq=267 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001237 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000015 bytes_write=891 bytes_read=4741 bytes_retransmit=0 bytes_invalid=0 send_seq=124 receive_seq=124 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49998587 adj=49998086 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1526 bytes_read=5590 bytes_retransmit=0 bytes_invalid=0 send_seq=159 receive_seq=159 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000579 adj=63999532  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=54.6 mcu_temp: temp=35.1 sysload=0.46 cputime=26.610 memavail=693600 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 231.3: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5033 bytes_read=7418 bytes_retransmit=0 bytes_invalid=0 send_seq=268 receive_seq=268 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001240 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000015 bytes_write=897 bytes_read=4757 bytes_retransmit=0 bytes_invalid=0 send_seq=125 receive_seq=125 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49998622 adj=49997993 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1532 bytes_read=5666 bytes_retransmit=0 bytes_invalid=0 send_seq=160 receive_seq=160 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000536 adj=63999475  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=55.4 mcu_temp: temp=35.2 sysload=0.46 cputime=26.659 memavail=693376 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 232.3: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5039 bytes_read=7536 bytes_retransmit=0 bytes_invalid=0 send_seq=269 receive_seq=269 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001233 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=903 bytes_read=4786 bytes_retransmit=0 bytes_invalid=0 send_seq=126 receive_seq=126 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49998651 adj=49998048 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1538 bytes_read=5741 bytes_retransmit=0 bytes_invalid=0 send_seq=161 receive_seq=161 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000528 adj=63999232  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=54.3 mcu_temp: temp=35.2 sysload=0.46 cputime=26.718 memavail=693252 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 233.3: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5045 bytes_read=7639 bytes_retransmit=0 bytes_invalid=0 send_seq=270 receive_seq=270 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001215 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=909 bytes_read=4802 bytes_retransmit=0 bytes_invalid=0 send_seq=127 receive_seq=127 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49998643 adj=49998114 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1544 bytes_read=5802 bytes_retransmit=0 bytes_invalid=0 send_seq=162 receive_seq=162 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000500 adj=63999243  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=54.0 mcu_temp: temp=35.2 sysload=0.46 cputime=26.754 memavail=693272 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
Stats 234.3: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5051 bytes_read=7771 bytes_retransmit=0 bytes_invalid=0 send_seq=271 receive_seq=271 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001221 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=915 bytes_read=4818 bytes_retransmit=0 bytes_invalid=0 send_seq=128 receive_seq=128 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49998662 adj=49998042 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1550 bytes_read=5878 bytes_retransmit=0 bytes_invalid=0 send_seq=163 receive_seq=163 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000489 adj=63999214  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=55.2 mcu_temp: temp=35.2 sysload=0.46 cputime=26.799 memavail=693284 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 235.3: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5057 bytes_read=7874 bytes_retransmit=0 bytes_invalid=0 send_seq=272 receive_seq=272 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001219 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=921 bytes_read=4834 bytes_retransmit=0 bytes_invalid=0 send_seq=129 receive_seq=129 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49998723 adj=49998026 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1556 bytes_read=5939 bytes_retransmit=0 bytes_invalid=0 send_seq=164 receive_seq=164 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000482 adj=63999141  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=55.2 mcu_temp: temp=35.3 sysload=0.43 cputime=26.855 memavail=693240 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 236.3: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5063 bytes_read=7977 bytes_retransmit=0 bytes_invalid=0 send_seq=273 receive_seq=273 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001230 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=927 bytes_read=4850 bytes_retransmit=0 bytes_invalid=0 send_seq=130 receive_seq=130 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49998796 adj=49998288 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1562 bytes_read=6000 bytes_retransmit=0 bytes_invalid=0 send_seq=165 receive_seq=165 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000479 adj=63999150  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=54.1 mcu_temp: temp=35.2 sysload=0.43 cputime=26.918 memavail=693312 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 237.3: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5069 bytes_read=8124 bytes_retransmit=0 bytes_invalid=0 send_seq=274 receive_seq=274 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001252 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000013 bytes_write=933 bytes_read=4879 bytes_retransmit=0 bytes_invalid=0 send_seq=131 receive_seq=131 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49998881 adj=49998516 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1568 bytes_read=6090 bytes_retransmit=0 bytes_invalid=0 send_seq=166 receive_seq=166 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000486 adj=63999097  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=54.0 mcu_temp: temp=35.3 sysload=0.43 cputime=26.984 memavail=693312 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
Stats 238.3: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5075 bytes_read=8227 bytes_retransmit=0 bytes_invalid=0 send_seq=275 receive_seq=275 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001248 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000013 bytes_write=939 bytes_read=4895 bytes_retransmit=0 bytes_invalid=0 send_seq=132 receive_seq=132 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49998988 adj=49998740 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1580 bytes_read=6167 bytes_retransmit=0 bytes_invalid=0 send_seq=168 receive_seq=168 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000487 adj=63999048  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=53.4 mcu_temp: temp=35.2 sysload=0.43 cputime=27.046 memavail=693312 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 239.3: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5081 bytes_read=8345 bytes_retransmit=0 bytes_invalid=0 send_seq=276 receive_seq=276 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001251 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000013 bytes_write=945 bytes_read=4911 bytes_retransmit=0 bytes_invalid=0 send_seq=133 receive_seq=133 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999062 adj=49999190 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1586 bytes_read=6228 bytes_retransmit=0 bytes_invalid=0 send_seq=169 receive_seq=169 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000471 adj=63999122  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=53.4 mcu_temp: temp=35.2 sysload=0.43 cputime=27.101 memavail=692576 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 240.3: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5087 bytes_read=8462 bytes_retransmit=0 bytes_invalid=0 send_seq=277 receive_seq=277 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001239 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000013 bytes_write=951 bytes_read=4927 bytes_retransmit=0 bytes_invalid=0 send_seq=134 receive_seq=134 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999109 adj=49999335 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1592 bytes_read=6304 bytes_retransmit=0 bytes_invalid=0 send_seq=170 receive_seq=170 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000455 adj=63999034  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=53.8 mcu_temp: temp=35.3 sysload=0.39 cputime=27.138 memavail=692580 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 241.3: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5127 bytes_read=8575 bytes_retransmit=0 bytes_invalid=0 send_seq=280 receive_seq=280 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001228 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000013 bytes_write=957 bytes_read=4943 bytes_retransmit=0 bytes_invalid=0 send_seq=135 receive_seq=135 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999180 adj=49999421 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1598 bytes_read=6365 bytes_retransmit=0 bytes_invalid=0 send_seq=171 receive_seq=171 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000472 adj=63999068  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=54.3 mcu_temp: temp=35.4 sysload=0.39 cputime=27.187 memavail=692572 print_time=34.717 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
Attempting MCU 'CB1' config_reset command
b'Got EOF when reading from device'
Attempting MCU 'ebbcan' reset command
Attempting MCU 'mcu' reset command
webhooks client 281473551903424: Disconnected
Restarting printer
Start printer at Mon Aug 21 00:41:15 2023 (1692578475.7 242.6)
===== Config file =====
[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancels the current print.
	Usage: CANCEL_PRINT
rename_existing = _KM_CANCEL_PRINT_BASE
gcode = 
	_KM_CHECK_IS_PRINTING
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=cancelling RESET_STACK=1
	SET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{True}"
	PRINT_END
	_KM_CANCEL_PRINT_BASE
	{% if printer.pause_resume.is_paused %}
	RESTORE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE MOVE=0
	{% endif %}
	CLEAR_PAUSE
	_KM_APPLY_PRINT_OFFSET RESET=1
	{% if 'virtual_sdcard' in printer and not printer.virtual_sdcard.is_active %}
	SDCARD_RESET_FILE
	{% endif %}

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
variable_restore_idle_timeout = 0
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set idle_timeout = client.idle_timeout|default(0) %}
	
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE={printer[printer.toolhead.extruder].target}
	
	{% if idle_timeout > 0 %}
	SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
	SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
	{% endif %}
	PAUSE_BASE
	_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
variable_last_extruder_temp = 0
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move = client.speed_move|default(velocity) %}
	
	
	{% if printer['gcode_macro PAUSE'].restore_idle_timeout > 0 %}
	SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro PAUSE'].restore_idle_timeout}
	{% endif %}
	M109 S{last_extruder_temp}
	_CLIENT_EXTRUDE
	RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	_KM_CHECK_IS_PRINTING
	{% set pause_next_layer =
	printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE | default(1) | int != 0 %}
	{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VALUE="{
	{ 'enable': False, 'call': MACRO }}" VARIABLE=pause_next_layer
	GCODE_AT_LAYER COMMAND="{MACRO|replace('\"','\\\"')
	}" CANCEL="{0 if ENABLE else 1}" LAYER="next"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	_KM_CHECK_IS_PRINTING
	{% set pause_at_layer =
	printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	
	{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined else
	params.LAYER is defined %}
	{% set LAYER = params.LAYER |
	default((pause_at_layer.layer|int,
	printer.print_stats.info.current_layer|int + 1)|max)%}
	{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}
	
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{
	{ 'enable': False, 'layer': 0, 'call': MACRO }}"
	{% if ENABLE and pause_at_layer.enable %}
	
	GCODE_AT_LAYER COMMAND="{pause_at_layer.call|replace('\"','\\\"')
	}" CANCEL="{1}" LAYER="{pause_at_layer.layer}"
	{% endif %}
	
	GCODE_AT_LAYER COMMAND="{MACRO|replace('\"','\\\"')
	}" CANCEL="{0 if ENABLE else 1}" LAYER="{LAYER}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = _KM_SET_PRINT_STATS_INFO
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	_KM_SET_PRINT_STATS_INFO {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.extruder.can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[gcode_macro _km_options]
variable_load_length = 90.0
variable_menu_temperature = [
	{'name' : 'PLA',  'extruder' : 200.0, 'bed' : 60.0},
	{'name' : 'PETG', 'extruder' : 230.0, 'bed' : 85.0},
	{'name' : 'ABS',  'extruder' : 245.0, 'bed' : 110.0, 'chamber' : 60}]
variable_start_purge_length = 50
variable_start_extruder_probing_temp = 150
variable_park_x = 200.0
variable_park_y = 200.0
gcode = 

[gcode_macro bed_mesh_calibrate_fast]
description = Wraps BED_MESH_CALIBRATE, scaling probe count to specified area.
	Usage: See Klipper documentation.
gcode = 
	
	BED_MESH_CHECK ABORT=1
	
	
	{% set calibrate_cmd =
	(printer["gcode_macro list_macros"].macros.bed_mesh_calibrate|
	default(["bed_mesh_calibrate"],True))[-1] %}
	
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set probe_mesh_padding = km.probe_mesh_padding %}
	{% set probe_min_count = km.probe_min_count %}
	{% set probe_count_scale = km.probe_count_scale %}
	{% set bed_mesh = printer.configfile.settings.bed_mesh %}
	
	
	{%if "mesh_radius" not in bed_mesh and
	"MESH_RADIUS" not in params %}
	{% set safe_min_x = bed_mesh.mesh_min[0] %}
	{% set safe_min_y = bed_mesh.mesh_min[1] %}
	{% set safe_max_x = bed_mesh.mesh_max[0] %}
	{% set safe_max_y = bed_mesh.mesh_max[1] %}
	
	
	{% if "MESH_MIN" in params %}
	{% set mesh_min_x = (params.MESH_MIN.split(",")[0]|float -
	probe_mesh_padding, safe_min_x)|max %}
	{% set mesh_min_y = (params.MESH_MIN.split(",")[1]|float -
	probe_mesh_padding, safe_min_y)|max %}
	{% else %}
	{% set mesh_min_x = safe_min_x %}
	{% set mesh_min_y = safe_min_y %}
	{% endif %}
	{% if "MESH_MAX" in params %}
	{% set mesh_max_x = (params.MESH_MAX.split(",")[0]|float +
	probe_mesh_padding, safe_max_x)|min %}
	{% set mesh_max_y = (params.MESH_MAX.split(",")[1]|float +
	probe_mesh_padding, safe_max_y)|min %}
	{% else %}
	{% set mesh_max_x = safe_max_x %}
	{% set mesh_max_y = safe_max_y %}
	{% endif %}
	
	{% set probe_count = bed_mesh.probe_count if not params.PROBE_COUNT else
	params.PROBE_COUNT.split(",")|map('int')|list %}
	
	{% if "PROBE_COUNT" not in params %}
	{% set max_x_probes = probe_count[0] %}
	{% set max_y_probes = probe_count[-1] %}
	
	{% set x_probes = (max_x_probes * (mesh_max_x - mesh_min_x) /
	(safe_max_x - safe_min_x) * probe_count_scale)
	| round(0) | int %}
	{% set x_probes = ((x_probes, probe_min_count)|max, max_x_probes)|min %}
	
	{% set y_probes = (max_y_probes * (mesh_max_y - mesh_min_y ) /
	(safe_max_y - safe_min_y) * probe_count_scale )
	| round(0) | int %}
	{% set y_probes = ((y_probes, probe_min_count)|max, max_y_probes)|min %}
	
	{% if x_probes > 6 and y_probes < 4 %}
	{% set y_probes = 4 %}
	{% elif y_probes > 6 and x_probes < 4 %}
	{% set x_probes = 4 %}
	{% endif %}
	{% set probe_count = [x_probes,y_probes] %}
	{% elif probe_count|length == 1 %}
	{% set dummy = probe_count.append(probe_count[0]) %}
	{% endif %}
	
	
	
	
	
	
	
	{% if "relative_reference_index" in bed_mesh %}
	{% set row = (bed_mesh.relative_reference_index / bed_mesh.probe_count[0]
	)|int%}
	{% set rrf_x = (((safe_max_x - safe_min_x) /
	(bed_mesh.probe_count[0] - 1))|round(2, 'floor')) *
	(bed_mesh.relative_reference_index %
	bed_mesh.probe_count[-1]) %}
	{% if row % 2 %}
	{% set rrf_x = safe_max_x - rrf_x %}
	{% else %}
	{% set rrf_x = safe_min_x + rrf_x %}
	{% endif %}
	{% set rrf_y = (((safe_max_y - safe_min_y) /
	(bed_mesh.probe_count[-1] - 1))|round(2, 'floor')) *
	row + safe_min_x %}
	{% set x_dist = (mesh_max_x - mesh_min_x) / (probe_count[0] - 1) %}
	{% set y_dist = (mesh_max_y - mesh_min_y) / (probe_count[1] - 1) %}
	{% set rrf = {'x':0, 'y':0, 'dist':safe_max_x**2+safe_max_y**2,'pos':0} %}
	{% for row in range(probe_count[1])%}
	{% for col in range(probe_count[0])%}
	{% if row % 2 %}
	{% set x = mesh_max_x - col * x_dist %}
	{% else %}
	{% set x = mesh_min_x + col * x_dist %}
	{% endif %}
	{% set y = mesh_min_y + row * y_dist %}
	{% set dist = ((x - rrf_x)**2 + (y - rrf_y)**2)**0.5 %}
	{% if dist < rrf.dist %}
	{% set dummy = rrf.__setitem__("dist", dist) %}
	{% set dummy = rrf.__setitem__("x", x) %}
	{% set dummy = rrf.__setitem__("y", y) %}
	{% set dummy = rrf.__setitem__("pos", row * probe_count[1] + col) %}
	{% endif %}
	{% endfor %}
	{% endfor %}
	{% if rrf.x != rrf_x or rrf.y != rrf_y %}
	{action_respond_info("relative_reference_index remapped to"
	" %d (%.2f,%.2f) from %d (%.2f,%.2f)" %
	(rrf.pos, rrf.x, rrf.y,
	bed_mesh.relative_reference_index, rrf_x, rrf_y))}
	{% endif %}
	{% set dummy = params.__setitem__("RELATIVE_REFERENCE_INDEX", rrf.pos) %}
	{% endif %}
	
	{% set dummy = params.__setitem__("MESH_MIN", mesh_min_x~","~mesh_min_y) %}
	{% set dummy = params.__setitem__("MESH_MAX", mesh_max_x~","~mesh_max_y) %}
	{% set dummy = params.__setitem__("PROBE_COUNT", probe_count|join(',')) %}
	
	{% if probe_count[0] > 6 or probe_count[1]|default(0) > 6 %}
	{% set dummy = params.__setitem__("ALGORITHM", "bicubic") %}
	{% endif %}
	
	{% if "MESH_MIN" in params or "MESH_MAX" in params %}
	BED_MESH_CHECK {rawparams}
	{% endif %}
	{% else %}
	
	{% set dummy = params.__delitem__("MESH_MIN") %}
	{% set dummy = params.__delitem__("MESH_MAX") %}
	{% endif %}
	
	{% if "MESH_MIN" in params or "MESH_MAX" in params %}
	BED_MESH_CHECK ABORT=1{%for k in params%}{' '~k~'="'~params[k]~'"'}{%
	endfor%}
	{% endif %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=meshing
	{calibrate_cmd}{%for k in params%}{' '~k~'="'~params[k]~'"'}{%endfor%}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro bed_mesh_check]
description = Warns if bed_mesh config may generate an invalid mesh.
	Usage: BED_MESH_CHECK [MESH_MIN=<x,y>] [MESH_MAX=<x,y>] [ABORT=<0|1>]
gcode = 
	{% if printer.bed_mesh is defined %}
	{% set action = action_respond_info if params.ABORT|default(0)|int == 0 else
	action_raise_error %}
	{% set settings = printer.configfile.settings %}
	{% set x_min = settings.stepper_x.position_min %}
	{% set y_min = settings.stepper_y.position_min %}
	{% set x_max = settings.stepper_x.position_max %}
	{% set y_max = settings.stepper_y.position_max %}
	
	{% set label = "[bed_mesh] config" %}
	{% if "MESH_MIN" in params %}
	{% set label = "BED_MESH_CALIBRATE params" %}
	{% set mesh_min_x = params.MESH_MIN.split(",")[0]|float %}
	{% set mesh_min_y = params.MESH_MIN.split(",")[1]|float %}
	{% else %}
	{% set mesh_min_x = settings.bed_mesh.mesh_min[0] %}
	{% set mesh_min_y = settings.bed_mesh.mesh_min[1] %}
	{% endif %}
	{% if "MESH_MAX" in params %}
	{% set label = "BED_MESH_CALIBRATE params" %}
	{% set mesh_max_x = params.MESH_MAX.split(",")[0]|float %}
	{% set mesh_max_y = params.MESH_MAX.split(",")[1]|float %}
	{% else %}
	{% set mesh_max_x = settings.bed_mesh.mesh_max[0] %}
	{% set mesh_max_y = settings.bed_mesh.mesh_max[1] %}
	{% endif %}
	
	{% if "bltouch" in settings %}
	{% set x_offset = settings.bltouch.x_offset %}
	{% set y_offset = settings.bltouch.y_offset %}
	{% set probe = "bltouch" %}
	{% elif "probe" in settings %}
	{% set x_offset = settings.probe.x_offset %}
	{% set y_offset = settings.probe.y_offset %}
	{% set probe = "probe" %}
	{% else %}
	{% set x_offset = 0.0 %}
	{% set y_offset = 0.0 %}
	{% endif %}
	
	{% set output = [] %}
	{% set warn =
	"* mesh_%s (%f, %f) adjusted by " ~ probe ~
	".%s_offset (%f) can move out of range for "
	"stepper_%s.position_%s (%f)." %}
	{% if x_offset > 0 and (mesh_min_x - x_offset) < x_min %}
	{% set dummy = output.append(warn % ('min', mesh_min_x, mesh_min_y,
	'x', x_offset, 'x', 'min', x_min)) %}
	{% elif x_offset < 0 and (mesh_max_x - x_offset) > x_max %}
	{% set dummy = output.append(warn % ('max', mesh_max_x, mesh_max_y,
	'x', x_offset, 'x', 'max', x_max)) %}
	{% endif %}
	{% if y_offset > 0 and (mesh_min_y - y_offset) < y_min %}
	{% set dummy = output.append(warn % ('min', mesh_min_x, mesh_min_y,
	'y', y_offset, 'y', 'min', y_min)) %}
	{% elif y_offset < 0 and (mesh_max_y - y_offset) > y_max %}
	{% set dummy = output.append(warn % ('max', mesh_max_x, mesh_max_y,
	'y', y_offset, 'y', 'max', y_max)) %}
	{% endif %}
	
	{% if output %}
	{ action(
	"Warning: The following issue(s) were detected in your " ~ label ~
	":\n" ~ output|join("\n")) }
	{% endif %}
	{% endif %}

[gcode_macro _apply_bed_surface_offset]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% if surfaces.active %}
	SET_SURFACE_ACTIVE SURFACE={surfaces.active}
	{% endif %}

[gcode_macro _init_surfaces]
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% if "bed_surfaces" in printer.save_variables.variables %}
	{% set old_surfaces = printer.save_variables.variables.bed_surfaces %}
	{% else %}
	{% set old_surfaces = { 'active' : '', 'available' : {} } %}
	{% endif %}
	{% set settings = printer.configfile.settings %}
	{% set new_probe_z = (settings.probe | default(settings.bltouch) |
	default(settings.smart_effector) | default({})
	).z_offset|default(0.0)|float %}
	{% set new_endstop_z = (settings.stepper_z | default({})).position_endstop |
	default(0.0)|float %}
	{% if 'endstop_z' not in old_surfaces %}
	{% set dummy = old_surfaces.__setitem__('endstop_z', new_endstop_z) %}
	{% endif %}
	{% if 'probe_z' not in old_surfaces %}
	{% set dummy = old_surfaces.__setitem__('probe_z', new_probe_z) %}
	{% endif %}
	{% set surfaces = { 'active' : '', 'available' : {},
	'endstop_z' : old_surfaces.endstop_z,
	'probe_z' : old_surfaces.probe_z } %}
	{% for s in km.bed_surfaces %}
	{% set s = s.split()|join(' ')|lower %}
	{% if s|length > km.bed_surface_max_name_length or
	s|list|select("in", " \r\n\"\'")|list %}
	{action_raise_error('Invalid surface name "%s". Name must be %d or fewer '
	'characters and must not include space or quotation characters'
	| format(s, km.bed_surface_max_name_length))}
	{% endif %}
	{% if s in old_surfaces.available %}
	{% set dummy = surfaces.available.__setitem__(s,
	old_surfaces.available[s]) %}
	{% else %}
	{% set dummy = surfaces.available.__setitem__(s, {'offset' : 0.0}) %}
	{% endif %}
	{% endfor %}
	{% if old_surfaces.active in surfaces.available %}
	{% set dummy = surfaces.__setitem__('active', old_surfaces.active) %}
	{% elif km.bed_surfaces %}
	{% set dummy = surfaces.__setitem__('active', km.bed_surfaces[0]|lower) %}
	{% endif %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	_APPLY_BED_SURFACE_OFFSET
	{% if new_probe_z != surfaces.probe_z or
	new_endstop_z != surfaces.endstop_z %}
	{ action_respond_info(
	'Z probe offset or endstop position changed. Run ADJUST_SURFACE_OFFSETS '
	'to adjust the offset for all saved surfaces by the change differential, '
	'or run ADJUST_SURFACE_OFFSETS IGNORE=1 to hide this message without '
	'making changes.') }
	{% endif %}

[gcode_macro adjust_surface_offsets]
description = Adjusts surface offsets to account for changes in the Z endstop
	position or probe Z offset.
	Usage: ADJUST_SURFACE_OFFSETS [IGNORE]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% set settings = printer.configfile.settings %}
	{% set new_probe_z = (settings.probe | default(settings.bltouch) |
	default(settings.smart_effector) | default({})
	).z_offset|default(0.0)|float %}
	{% set new_endstop_z = (settings.stepper_z | default({})).position_endstop |
	default(0.0)|float %}
	{% set diff = (surfaces.probe_z - new_probe_z +
	surfaces.endstop_z - new_endstop_z)|round(6) %}
	{% if not params.IGNORE|default(0)|int %}
	{% for s in surfaces.available %}
	{% set offset = (surfaces.available[s].offset - diff)|round(6) %}
	{% set dummy = surfaces.available.__setitem__(s, {'offset' : offset}) %}
	{% endfor %}
	{ action_respond_info("All bed surfaces now adjusted by %1.4f"|
	format(diff))}
	{% elif diff != 0 %}
	{ action_respond_info("Status cleared without adjustment") }
	{% endif %}
	{% set dummy = surfaces.__setitem__('endstop_z', new_endstop_z| round(6)) %}
	{% set dummy = surfaces.__setitem__('probe_z', new_probe_z|round(6)) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"

[gcode_macro set_surface_offset]
description = Sets the offset for a surface and moves the toolhead (if homed).
	Usage: SET_SURFACE_OFFSET [OFFSET=<offset>] [SURFACE=<surface>]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}
	{% if SURFACE not in surfaces.available %}
	{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }
	{% endif %}
	{% set active = surfaces.available[SURFACE] %}
	
	{% set OFFSET = params.OFFSET|default(active.offset)|float %}
	{% if OFFSET != active.offset %}
	{% set dummy = surfaces.available[SURFACE].__setitem__("offset", OFFSET) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	{% if SURFACE == surfaces.active %}
	_km_set_gcode_offset_base Z="{OFFSET}" MOVE={
	1 if printer.toolhead.homed_axes == 'xyz' else 0}
	{% endif %}
	{% endif %}
	{ action_respond_info("Bed surface: %s Offset: %.3f"
	| format(SURFACE, OFFSET)) }
	
	{% set dummy = None if True else "
	{% set dummy = params.SURFACE|default(active surface) %}
	{% set dummy = params.OFFSET|default(none)|float %}
	" %}

[gcode_macro set_surface_active]
description = Sets the active bed surface and moves the toolhead (if homed). If
	no SURFACE argument is present the available surfaces are listed and the
	active one is preceded by a "*".
	Usage: SET_SURFACE_ACTIVE [SURFACE=<surface>]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% if "SURFACE" in params %}
	{% set SURFACE = params.SURFACE|lower %}
	{% if SURFACE not in surfaces.available %}
	{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }
	{% endif %}
	{% if SURFACE != surfaces.active %}
	{% set dummy = surfaces.__setitem__("active", SURFACE) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	{% endif %}
	{% if surfaces.available[SURFACE].offset !=
	printer.gcode_move.homing_origin.z %}
	_km_set_gcode_offset_base Z="{surfaces.available[SURFACE].offset
	}" MOVE={1 if printer.toolhead.homed_axes == 'xyz' else 0}
	{% endif %}
	{action_respond_info("Active bed surface: %s; offset: %.3f"
	| format(SURFACE, surfaces.available[SURFACE].offset))}
	{% else %}
	{% set output = [] %}
	{% for s in surfaces.available|list|sort %}
	{% set dummy = output.append("%s&nbsp;%s - offset: %.3f"
	| format("*" if s == surfaces.active else "&nbsp;",
	s, surfaces.available[s].offset)) %}
	{% endfor %}
	{action_respond_info(output|join('\n'))}
	{% endif %}
	
	{% set dummy = None if True else "
	{% set dummy = params.SURFACE|default(none) %}
	" %}

[gcode_macro set_gcode_offset]
description = Wraps SET_GCODE_OFFSET to update the current bed sheet offset.
	Usage: SET_GCODE_OFFSET [X=<pos>|X_ADJUST=<adjust>]
	[Y=<pos>|Y_ADJUST=<adjust>]
	[Z=<pos>|Z_ADJUST=<adjust>]
	[MOVE=1 [MOVE_SPEED=<speed>]]
rename_existing = _KM_SET_GCODE_OFFSET_BASE
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% if surfaces.active and
	not printer["gcode_macro _km_save_state"].is_ephemeral %}
	{% set Z = params.Z|default(0.0)|float|round(6) %}
	{% set Z_ADJUST = params.Z_ADJUST|default(0.0)|float %}
	{% if 'Z' in params and
	Z != surfaces.available[surfaces.active].offset %}
	{% set dummy = surfaces.available[surfaces.active].__setitem__("offset",
	Z) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	{% elif Z_ADJUST != 0.0 %}
	{% set dummy = surfaces.available[surfaces.active].__setitem__(
	"offset", (Z_ADJUST + printer.gcode_move.homing_origin.z)|round(6)) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	{% endif %}
	{% endif %}
	_km_set_gcode_offset_base{% for k in params%}{' '~k~'="'~params[k]~'"'
	}{% endfor %}

[gcode_macro make_surface_mesh]
description = Generates and saves a mesh to automatically load in PRINT_START.
	Usage: MAKE_SURFACE_MESH [SURFACE=<surface>] [BED=<probing temperature>]
	[EXTRUDER=<probing temperature>]
	[MESH_MULTIPLIER=<integer multiple of mesh density>]
	[bed_mesh_calibrate parameters]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}
	{% if SURFACE not in surfaces.available %}
	{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }
	{% endif %}
	{% set dummy = params.__setitem__('PROFILE', SURFACE) %}
	{% set BED = params.BED|default(70) | int %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set EXTRUDER = params.EXTRUDER|default(km.start_extruder_probing_temp) |
	int %}
	{% set MESH_MULTIPLIER = (params.MESH_MULTIPLIER|default(2)|int, 1)|max %}
	
	M104 S{EXTRUDER}
	M140 S{BED}
	G28
	
	
	{% if surfaces.available[SURFACE].offset !=
	printer.gcode_move.homing_origin.z %}
	_km_set_gcode_offset_base Z="{surfaces.available[SURFACE].offset
	}" MOVE=1
	{% endif %}
	
	
	{% if BED > 0 %}
	{action_respond_info("Stabilizing bed at %iC" | format(BED,))}
	_KM_PARK_IF_NEEDED HEATER=heater_bed RANGE=0.5
	{% if BED < (printer.heater_bed.temperature - 0.2) %}
	M190 R{BED}
	G4 P{((km.start_bed_heat_delay * 10, 30000)|min,
	km.start_bed_heat_delay)|max}
	{% else %}
	G4 P{km.start_bed_heat_delay}
	{% endif %}
	M190 R{BED}
	{% endif %}
	
	{% if EXTRUDER > 0 %}
	_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=2
	M109 R{km.start_extruder_probing_temp}
	{% endif %}
	
	{% if km.start_home_z_at_temp and not bed_at_target %}
	G28 Z
	{% endif %}
	
	
	
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count
	if not params.PROBE_COUNT else
	params.PROBE_COUNT.split(",")|map('int')|list %}
	{% set dummy = params.__setitem__('PROBE_COUNT',(
	MESH_MULTIPLIER * (probe_count[0] - 1) + 1,
	MESH_MULTIPLIER * (probe_count[-1] - 1) + 1,)|join(',')) %}
	
	BED_MESH_CLEAR
	BED_MESH_CALIBRATE_FAST {%
	for k in params|reject('in',['BED','SURFACE'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor %}
	SAVE_CONFIG
	
	
	{% set dummy = None if True else "
	{% set dummy = params.MESH_MULTIPLIER|default(2) %}
	{% set dummy = params.SURFACE|default(active surface) %}
	" %}

[gcode_macro load_surface_mesh]
description = Attempts to load a mesh associated with the specified surface.
	Usage: LOAD_SURFACE_MESH [SURFACE=<surface>]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}
	{% if SURFACE != surfaces.active %}
	SET_SURFACE_ACTIVE SURFACE={SURFACE}
	{% endif %}
	
	{% if SURFACE in printer.bed_mesh.profiles %}
	{% set mesh = printer.bed_mesh.profiles[SURFACE].mesh_params %}
	{% set default = printer.configfile.settings.bed_mesh %}
	
	{% if mesh.min_x <= (default.mesh_min[0] + 0.5) and
	mesh.min_y <= (default.mesh_min[1] + 0.5) and
	mesh.max_x >= (default.mesh_max[0] - 0.5) and
	mesh.max_y >= (default.mesh_max[1] - 0.5) and
	mesh.x_count >= default.probe_count[0] and
	mesh.y_count >= default.probe_count[-1] %}
	
	BED_MESH_PROFILE LOAD={SURFACE}
	{action_respond_info("Loaded mesh: %s" | format(SURFACE,))}
	{% endif %}
	{% endif %}

[gcode_macro m300]
description = Emits and audible beep.
	Usage: M300 [P<duration>] [S<frequency>]
gcode = 
	{% set settings = printer.configfile.settings %}
	{% if "output_pin beeper" in printer %}
	{% set P = (params.P|default(100)|int, 0)|max %}
	{% set S = (params.S|default(1000)|int, 1)|max %}
	SET_PIN PIN=beeper VALUE={% if settings["output_pin beeper"].pwm %}{
	settings["output_pin beeper"].scale|default(1.0) * 0.5
	} CYCLE_TIME={ 1.0 / S }{% else %}1{% endif %}
	G4 P{P}
	SET_PIN PIN=beeper VALUE=0
	{% else %}
	{action_respond_info(
	"M300 is disabled. To enable create an [output_pin beeper] config.")}
	{% endif %}

[gcode_macro set_draw_params]
description = Sets the default parameters used by DRAW_LINE_TO.
	Usage: SET_DRAW_PARAMS [HEIGHT=<mm>] [WIDTH=<mm>] [FEEDRATE=<mm/m>]
variable_height = 0.2
variable_width = 0.0
variable_feedrate = 1200
gcode = 
	{% set dparams = printer["gcode_macro set_draw_params"] %}
	{% for k in params %}
	{% set kl = k|lower %}
	{% if kl in dparams %}
	{% if dparams[kl] is float %}
	{% set v = params[k]|float %}
	{% elif dparams[kl] is integer %}
	{% set v = params[k]|int %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=set_draw_params VARIABLE={kl} VALUE="{v}"
	{% endif %}
	{% endfor %}

[gcode_macro draw_line_to]
description = Extrudes a line of filament at the specified height and width from
	the current coordinate to the supplied XY coordinate. (The height is used only
	to calculate the extrusion volume.)
	Usage: DRAW_LINE_TO [X=<pos>] [Y=<pos>] [HEIGHT=<mm>] [WIDTH=<mm>]
	[FEEDRATE=<mm/m>]
gcode = 
	{% set dparams = printer["gcode_macro set_draw_params"] %}
	{% set position = printer.gcode_move.gcode_position %}
	{% set X = params.X|default(position.x)|float %}
	{% set Y = params.Y|default(position.y)|float %}
	{% set HEIGHT = params.HEIGHT|default(dparams.height)|float %}
	{% set WIDTH = params.WIDTH|default(dparams.width)|float %}
	{% set FEEDRATE = params.FEEDRATE|default(dparams.feedrate)|int %}
	
	{% set distance = ((X - position.x) ** 2 + (Y - position.y) ** 2) ** 0.5 %}
	
	{% set filament_area = 3.14159 *
	(printer.configfile.settings[
	printer.toolhead.extruder].filament_diameter ** 2) / 4 %}
	{% set E = distance * ((WIDTH * HEIGHT) / filament_area) %}
	
	
	_KM_SAVE_GCODE_STATE NAME=_KM_PURGE
	G90
	G92 E0.0
	G1 X{"%.3f" % X} Y{"%.3f" % Y} E{"%.5f" % E} F{FEEDRATE}
	_KM_RESTORE_GCODE_STATE NAME=_KM_PURGE MOVE=0

[gcode_macro draw_purge_line]
description = Purges the specified length of filament as a line (or rows of
	lines) in front of the supplied print area. If no print area is specified the
	purge lines are drawn at the front edge of the maximum printable area. If no
	printable area is set it defaults to the XY axis limits.
	Usage: DRAW_PURGE_LINE [PRINT_MIN=<X,Y>] [PRINT_MAX=<X,Y>] [HEIGHT=<mm>]
	[WIDTH=<mm>] [LENGTH=<mm>]
gcode = 
	
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set origin = printer.gcode_move.homing_origin %}
	{% set dummy = km.__setitem__('print_min', (km.print_min[0] - origin.x,
	km.print_min[1] - origin.y)) %}
	{% set dummy = km.__setitem__('print_max', (km.print_max[0] - origin.x,
	km.print_max[1] - origin.y)) %}
	
	{% if "PRINT_MIN" in params %}
	{% set PRINT_MIN = (
	(params.PRINT_MIN.split(",")[0]|float, km.print_min[0])|max,
	(params.PRINT_MIN.split(",")[1]|float, km.print_min[1])|max
	) %}
	{% else %}
	{% set PRINT_MIN = km.print_min %}
	{% endif %}
	{% if "PRINT_MAX" in params %}
	{% set PRINT_MAX = (
	(params.PRINT_MAX.split(",")[0]|float, km.print_max[0])|min,
	(params.PRINT_MAX.split(",")[1]|float, km.print_max[1])|min
	) %}
	{% else %}
	{% set PRINT_MAX = km.print_max %}
	{% endif %}
	{% set extruder = printer.toolhead.extruder|string %}
	{% set HEIGHT = params.HEIGHT|default(
	printer.configfile.settings[extruder].nozzle_diameter * 0.625)|float %}
	{% set WIDTH = params.WIDTH|default(
	printer.configfile.settings[extruder].nozzle_diameter * 1.25)|float %}
	{% set LENGTH = params.LENGTH|default(km.start_purge_length)|float %}
	
	{% set dparams = printer["gcode_macro set_draw_params"] %}
	{% set filament_area = 3.14159 *
	(printer.configfile.settings[extruder].filament_diameter ** 2) / 4 %}
	{% set purge_length = (LENGTH * filament_area) / (WIDTH * HEIGHT) %}
	{% set printable_length = PRINT_MAX[0] - PRINT_MIN[0] %}
	{% set purge_rows = (purge_length / printable_length)|round(0,'ceil')|int %}
	{% set printable_inset = (printable_length - purge_length / purge_rows) / 2 %}
	{% set PRINT_MIN = (PRINT_MIN[0] + printable_inset, PRINT_MIN[1]) %}
	{% set PRINT_MAX = (PRINT_MAX[0] - printable_inset, PRINT_MAX[1]) %}
	
	{% set y_start = (km.print_min[1], PRINT_MIN[1] - km.start_purge_clearance -
	(purge_rows + 0.5) * WIDTH )|max %}
	G90
	
	G1 X{"%.3f" % (PRINT_MIN[0] - 30, km.print_min[0])|max} Y{
	"%.3f" % (y_start - 10, km.print_min[1])|max} F{km.travel_speed_xy}
	
	G1 X{"%.3f" % (PRINT_MIN[0] - 2, km.print_min[0])|max} Y{"%.3f" % y_start} Z{
	"%.4f" % HEIGHT} F{km.travel_speed_xy}
	
	G92 E0.0
	G1 E{"%.3f" % km.start_purge_prime_length} F{km.load_priming_speed}
	G92 E0.0
	
	G1 X{"%.3f" % PRINT_MIN[0]} F{km.travel_speed_xy}
	{% for n in range(purge_rows - 1) %}
	{% set x_pos = PRINT_MIN[0] if n % 2 else PRINT_MAX[0] %}
	DRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{
	WIDTH * n + y_start}"
	DRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{
	WIDTH * (n + 1) + y_start}"
	{% endfor %}
	{% set x_pos = PRINT_MAX[0] if purge_rows % 2 else PRINT_MIN[0] %}
	DRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{
	WIDTH * (purge_rows - 1) + y_start}"
	G92 E0.0

[gcode_macro _check_fan_params]
gcode = 
	{% set MAXIMUM = params.MAXIMUM|default(
	printer["gcode_macro set_fan_scaling"].maximum)|int %}
	{% set MINIMUM = params.MINIMUM|default(
	printer["gcode_macro set_fan_scaling"].minimum)|int %}
	
	{% if params.SCALE and params.SCALE|float <= 0 %}
	{ action_raise_error("SCALE must be a positive value.") }
	{% elif MINIMUM < 0 or MINIMUM > 255 %}
	{ action_raise_error("MINIMUM must be between 0 and 255.") }
	{% elif MAXIMUM < 0 or MAXIMUM > 255 %}
	{ action_raise_error("MAXIMUM must be between 0 and 255.") }
	{% elif params.SPEED and (params.SPEED|int < 0 or params.SPEED|int > 255) %}
	{ action_raise_error("SPEED must be between 0 and 255.") }
	{% elif params.BOOST and (params.BOOST|int < 0 or params.BOOST|int > 255) %}
	{ action_raise_error("BOOST must be between 0 and 255.") }
	{% elif MINIMUM > MAXIMUM %}
	{ action_raise_error("MINIMUM must be less than or equal to MAXIMUM.") }
	{% endif %}

[gcode_macro set_fan_scaling]
description = Sets fan scaling factors applied to M106 command. If a speed is
	provided it will be adjusted according to the scaling parameters.
	Usage: SET_FAN_SCALING [SCALE=<scale>] [BOOST=<boost>] [MAXIMUM=<max>]
	[MINIMUM=<min>] [SPEED=<speed>]
variable_scale = 1.0
variable_boost = 0
variable_minimum = 0
variable_maximum = 255
variable_real_speed = 0
gcode = 
	_CHECK_FAN_PARAMS{% for k in params %}{' '~k~'='~params[k]}{% endfor %}
	{% set SCALE = params.SCALE|default(scale)|float %}
	{% set BOOST = params.BOOST|default(boost)|float %}
	{% set MAXIMUM = params.MAXIMUM|default(maximum)|int %}
	{% set MINIMUM = params.MINIMUM|default(minimum)|int %}
	{% set SPEED = params.SPEED|default(real_speed)|int %}
	
	{% if SCALE != 1.0 or BOOST != 0 or MAXIMUM != 255 or MINIMUM != 0 %}
	{action_respond_info("Fan: Scale: %.2f Minimum:%i Maximum: %i Speed: %i"|
	format(SCALE, MINIMUM, MAXIMUM, SPEED))}
	{% endif %}
	
	
	{% if params|length > 0 %}
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=scale VALUE="{SCALE}"
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=boost VALUE="{BOOST}"
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=minimum VALUE="{MINIMUM}"
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=maximum VALUE="{MAXIMUM}"
	
	M106 S{SPEED}
	{% endif %}
	
	{% set dummy = None if True else "
	{% set dummy = params.SCALE|default(1.0)|float %}
	{% set dummy = params.BUMP|default(0)|int %}
	{% set dummy = params.MAXIMUM|default(255)|int %}
	{% set dummy = params.MINIMUM|default(0)|int %}
	{% set dummy = params.SPEED|default(current speed)|int %}
	" %}

[gcode_macro reset_fan_scaling]
description = Clears all fan scaling factors.
	Usage: RESET_FAN_SCALING
gcode = 
	SET_FAN_SCALING SCALE=1.0 BOOST=0 MAXIMUM=255 MINIMUM=0

[gcode_macro m106]
description = Wraps M106 to implement scaling overrides.
rename_existing = M106.6245197
gcode = 
	{% set S = params.S|default(255)|int %}
	{% set scale = printer["gcode_macro set_fan_scaling"] %}
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=real_speed VALUE="{S}"
	M106.6245197 S{((((S + scale.boost) * scale.scale) | round | int,
	scale.minimum) | max, scale.maximum) | min}

[gcode_macro _load_unload]
gcode = 
	{% set saved_extruder = printer.toolhead.extruder %}
	{% set EXTRUDER = params.EXTRUDER|default(saved_extruder)|lower %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% set BEEPS = params.BEEPS|default(8)|int if "output_pin beeper" in printer
	else 0 %}
	{% set default_minimum = km.load_min_temp if km.load_min_temp else
	(printer.configfile.settings[EXTRUDER].min_extrude_temp + 5) %}
	{% if 'MINIMUM' in params %}
	{% set MINIMUM = params.MINIMUM|int %}
	
	{% elif printer.pause_resume.is_paused and printer[EXTRUDER].target == 0 and
	printer["gcode_macro resume"].saved_extruder_temp %}
	{% set MINIMUM = printer["gcode_macro resume"].saved_extruder_temp %}
	
	{% elif printer[EXTRUDER].target > default_minimum %}
	{% set MINIMUM = printer[EXTRUDER].target %}
	{% else %}
	{% set MINIMUM = default_minimum %}
	{% endif %}
	{% if MINIMUM < printer.configfile.settings[EXTRUDER].min_extrude_temp %}
	{ action_raise_error("Extrude below minimum temp.") }
	{% elif printer.pause_resume.is_paused %}
	
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"
	{% endif %}
	{% set SPEED = params.SPEED|default(km.load_speed)|int %}
	{% set priming_length = km.load_priming_length %}
	{% set LENGTH = params.LENGTH|default(km.load_length)|float - priming_length%}
	{% if LENGTH < 0 %}
	{% set priming_length = (priming_length + LENGTH, 0)|max %}
	{% set LENGTH = 0 %}
	{% endif %}
	SAVE_GCODE_STATE NAME=_KM_LOAD_UNLOAD
	{% if EXTRUDER != saved_extruder%}
	ACTIVATE_EXTRUDER EXTRUDER={EXTRUDER}
	{% endif %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	{% if not printer.extruder.can_extrude or
	printer[EXTRUDER].target < default_minimum %}
	{action_respond_info("Preheating %s to %d" | format(EXTRUDER, MINIMUM))}
	M109 S{MINIMUM}
	{% endif %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS={"filament_load"
	if params.LOAD|int else "filament_unload"}
	M83
	{% set priming_speed = (km.load_priming_speed, SPEED)|min %}
	{% if params.LOAD|int %}
	G0 E{LENGTH} F{SPEED}
	G0 E{priming_length} F{priming_speed}
	G0 E{'%.4f' % -printer["gcode_macro resume"].saved_e} F{km.load_speed}
	{% else %}
	{% set pre_prime_distance = 5.0 %}
	{% set shaping_moves = 5 %}
	{% set shaping_distance = (shaping_moves * (1 + shaping_moves)/20) %}
	
	G0 E{pre_prime_distance} F{SPEED}
	G4 P500
	G0 E{'%.4f' % -(priming_length - shaping_distance)} F{SPEED}
	
	
	{% for i in range(1, shaping_moves + 1) %}
	G0 E2 F{priming_speed}
	G0 E-{2 + (0.1 * i)} F{priming_speed}
	{% endfor %}
	
	G0 E{'%.4f' % -(LENGTH + pre_prime_distance)} F{SPEED}
	{% endif %}
	RESTORE_GCODE_STATE NAME=_KM_LOAD_UNLOAD
	
	
	{% for i in range(BEEPS) %}
	M300 P100
	G4 P200
	{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro LOAD_FILAMENT]
description = Loads filament to the extruder.
	Usage: LOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]
	[EXTRUDER=<extruder>] [MINIMUM=<temperature>]
	[BEEPS=<beep count on completion>]
gcode = 
	_LOAD_UNLOAD LOAD=1{% for k in params
	%}{' '~k~'="'~params[k]~'"'}{% endfor %}
	
	
	{% set dummy = None if True else "
	M109
	{% set dummy = params.LENGTH|default(variable_load_length)|float %}
	{% set dummy = params.SPEED|default(variable_load_speed)|float %}
	{% set dummy = params.EXTRUDER|default(current extruder) %}
	{% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}
	{% set dummy = params.BEEPS|default(10)|int %}
	" %}

[gcode_macro UNLOAD_FILAMENT]
description = Unloads filament from the extruder.
	Usage: UNLOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]
	[EXTRUDER=<extruder>] [MINIMUM=<temperature>]
	[BEEPS=<beep count on completion>]
gcode = 
	_LOAD_UNLOAD LOAD=0{% for k in params
	%}{' '~k~'="'~params[k]~'"'}{% endfor %}
	
	
	{% set dummy = None if True else "
	M109
	{% set dummy = params.LENGTH|default(variable_load_length)|float %}
	{% set dummy = params.SPEED|default(variable_load_speed)|float %}
	{% set dummy = params.EXTRUDER|default(default extruder) %}
	{% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}
	{% set dummy = params.BEEPS|default(10)|int %}
	" %}

[gcode_macro _pause_inner_m700]
gcode = 
	{% set extruder = "extruder" ~ params.T|replace('0', '')
	if "T" in params else printer.toolhead.extruder %}
	{% if extruder != printer.toolhead.extruder%}
	ACTIVATE_EXTRUDER EXTRUDER={extruder}
	{% endif %}
	
	{% set z_param = (' Z="%f"' % params.Z) if 'Z' in params else "" %}
	
	{% if printer.idle_timeout.state|string == "Printing" %}
	PAUSE B="{0}" P=2{z_param}
	{% elif not printer.pause_resume.is_paused%}
	PARK B="{0}" P=2{z_param}
	{% endif %}

[gcode_macro m701]
description = Pauses/parks the toolhead then loads filament to the extruder.
	Usage: M701 [L<distance>] [Z<pos>] [T<extruder>]
gcode = 
	{% if 'U' in params %}
	{% if not 'L' in params %}
	RESPOND TYPE=error MSG="Argument \"U\" substituted for missing \"L\"."
	{% set dummy = params.__setitem__("L", params.U) %}
	{% else %}
	RESPOND TYPE=error MSG="Invalid argument \"U\" ignored."
	{% endif %}
	{% endif %}
	
	_PAUSE_INNER_M700 {% for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	LOAD_FILAMENT BEEPS="{10}" LENGTH={
	params.L|default(printer["gcode_macro _km_globals"].load_length)|float}

[gcode_macro m702]
description = Pauses/parks the toolhead then unloads filament from the extruder.
	Usage: M702 [U<distance>] [Z<pos>] [T<extruder>]
gcode = 
	{% if 'L' in params %}
	{% if not 'U' in params %}
	RESPOND TYPE=error MSG="Argument \"L\" substituted for missing \"U\"."
	{% set dummy = params.__setitem__("U", params.L) %}
	{% else %}
	RESPOND TYPE=error MSG="Invalid argument \"L\" ignored."
	{% endif %}
	{% endif %}
	
	_PAUSE_INNER_M700 {% for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	UNLOAD_FILAMENT BEEPS="{10}" LENGTH={
	params.U|default(printer["gcode_macro _km_globals"].load_length)|float}

[gcode_macro _km_globals]
variable_bed_surface_max_name_length = 10
variable_bed_surfaces = ['default']
variable_load_length = 90.0
variable_load_min_temp = 0
variable_load_priming_length = 20.0
variable_load_priming_speed = 200
variable_load_speed = 1200
variable_menu_show_octoprint = True
variable_menu_show_sdcard = True
variable_menu_temperature = [
	{'name' : 'PLA',  'extruder' : 200, 'bed' : 60},
	{'name' : 'PETG', 'extruder' : 230, 'bed' : 85},
	{'name' : 'ABS',  'extruder' : 245, 'bed' : 110}]
variable_park_x = 0.0
variable_park_y = 0.0
variable_park_z = 20.0
variable_print_min = ()
variable_print_max = ()
variable_pressure_advance_scale = -1.0
variable_probe_mesh_padding = 5.0
variable_probe_min_count = 3
variable_probe_count_scale = 1.0
variable_start_bed_heat_delay = 2000
variable_start_bed_heat_overshoot = 2.0
variable_start_clear_adjustments_at_end = True
variable_start_end_park_y = 0.0
variable_start_extruder_preheat_scale = 0.5
variable_start_extruder_probing_temp = 0
variable_start_home_z_at_temp = True
variable_start_level_bed_at_temp = True
variable_start_purge_clearance = 2.0
variable_start_purge_length = 0.0
variable_start_purge_prime_length = 12.0
variable_start_quad_gantry_level_at_temp = True
variable_start_random_placement_max = 0
variable_start_random_placement_padding = 10.0
variable_start_try_saved_surface_mesh = False
variable_start_z_tilt_adjust_at_temp = True
variable_travel_speed_xy = 3000
variable_travel_speed_z = 600
description = Initializes our globals, including any _km_options overrides.
gcode = 
	
	
	
	
	
	
	
	
	{% set required_sections = {"heater_bed" : None,
	"extruder" : None,
	"gcode_macro _km_options" : None,
	"idle_timeout" : ("gcode", "_KM_IDLE_TIMEOUT"),
	"pause_resume" : None,
	"respond" : None,
	"save_variables" : None,
	"virtual_sdcard" :
	("on_error_gcode", "CANCEL_PRINT")
	} %}
	{% set warn_removed = {
	"start_extruder_set_target_before_level" :
	"The start_extruder_set_target_before_level option has been removed. "
	"Use the start_extruder_probing_temp option instead to set a fixed "
	"probing temperature.",
	"start_gcode_before_print" :
	"The start_gcode_before_print option has been removed. The same effect "
	"can now be achieved by inserting custom gcode before the "
	"_PRINT_START_PHASE_PURGE line in your slicer's start gcode, or by "
	"wrapping the _PRINT_START_PHASE_PURGE macro. See the Slicer "
	"Configuration section in the readme for more information.",
	"velocity_decel_scale" :
	"The velocity_decel_scale option has been removed. Klipper's input "
	"shaping provides a superior mechanism for improving print quality "
	"at higher speeds.",
	} %}
	{% set output = [] %}
	{% for s in required_sections %}
	{% set f = required_sections[s][0] if required_sections[s] else None %}
	{% set v = required_sections[s][1] if required_sections[s] else None %}
	{% if s not in printer.configfile.config %}
	{% set dummy = output.append("Missing [%s] section.\n" | format(s)) %}
	{% elif f and
	(v not in printer.configfile.config[s][f]|default("")|upper) %}
	{% set dummy = output.append("Missing %s in %s for [%s] section.\n"
	| format(v, f, s)) %}
	{% endif %}
	{% endfor %}
	{% if output %}
	{ action_emergency_stop((
	"required printer.cfg section(s) missing:\n"
	~ output | join("\n")) ~
	"See readme: https://github.com/jschuh/klipper-macros\x23klipper-setup")
	}
	{% endif %}
	
	
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_level_bed_at_temp VALUE="{
	1 if printer.bed_mesh is defined else 0}"
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_quad_gantry_level_at_temp VALUE="{
	1 if printer.quad_gantry_level is defined else 0}"
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_z_tilt_adjust_at_temp VALUE="{
	1 if printer.z_tilt is defined else 0}"
	{% set toolhead = printer.toolhead %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=print_min VALUE="{
	(toolhead.axis_minimum.x, toolhead.axis_minimum.y)}"
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=print_max VALUE="{
	(toolhead.axis_maximum.x, toolhead.axis_maximum.y)}"
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_end_park_y VALUE="{
	toolhead.axis_maximum.y}"
	{% set settings = printer.configfile.settings %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_home_z_at_temp VALUE="{
	1 if ("stepper_z" in settings and
	settings.stepper_z.endstop_pin.split()|join("")|lower ==
	"probe:z_virtual_endstop") else 0}"
	
	{% set options = printer["gcode_macro _km_options"] %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	
	{% if options.park_x|default("")|string|lower == "min" %}
	{% set dummy = options.__setitem__("park_x",
	printer.configfile.settings.stepper_x.position_min) %}
	{% elif options.park_x|default("")|string|lower == "max" %}
	{% set dummy = options.__setitem__("park_x",
	printer.configfile.settings.stepper_x.position_max) %}
	{% endif %}
	{% if options.park_y|default("")|string|lower == "min" %}
	{% set dummy = options.__setitem__("park_y",
	printer.configfile.settings.stepper_y.position_min) %}
	{% elif options.park_y|default("")|string|lower == "max" %}
	{% set dummy = options.__setitem__("park_y",
	printer.configfile.settings.stepper_y.position_max) %}
	{% endif %}
	{% if options.start_end_park_y|default("")|string|lower == "min" %}
	{% set dummy = options.__setitem__("start_end_park_y",
	printer.configfile.settings.stepper_y.position_min) %}
	{% elif options.start_end_park_y|default("")|string|lower == "max" %}
	{% set dummy = options.__setitem__("start_end_park_y",
	printer.configfile.settings.stepper_y.position_max) %}
	{% endif %}
	{% if options.park_z|default("")|string|lower == "min" %}
	{% set dummy = options.__setitem__("park_z",
	printer.configfile.settings.stepper_z.position_min) %}
	{% elif options.park_z|default("")|string|lower == "max" %}
	{% set dummy = options.__setitem__("park_z",
	printer.configfile.settings.stepper_z.position_max) %}
	{% endif %}
	
	
	{% for k in options %}
	{% if k not in km %}
	{% if k in warn_removed %}
	{action_respond_info(warn_removed[k])}
	{% else %}
	{% set dummy = output.append("%s is not valid for _KM_OPTIONS." |
	format(k)) %}
	{% endif %}
	{% elif km[k] is string %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k
	} VALUE="'{options[k]|replace('\\','\\\\')|replace('\'','\\\'')
	|replace('\"','\\\"')}'"
	{% elif km[k] is float %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k
	} VALUE="{options[k]|float}"
	{% elif km[k] is integer or km[k] is boolean %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k} VALUE="{options[k]|int}"
	{% elif km[k] is mapping %}
	{% if options[k] is not mapping %}
	{% set dummy = output.append("%s requires a mapping type." |
	format(k)) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k
	} VALUE="{options[k]|replace('\"','\\\"')}"
	{% elif km[k] is sequence %}
	{% if options[k] is not sequence %}
	{% set dummy = output.append("%s requires a sequence type." |
	format(k)) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k
	} VALUE="{options[k]|replace('\"','\\\"')}"
	{% else %}
	{% set dummy = output.append("%s is not a valid type for _KM_OPTIONS." |
	format(k)) %}
	{% endif %}
	{% endfor %}
	
	{% if "homing_override" in printer.configfile.config %}
	{% for l in printer.configfile.config.homing_override.gcode.split("\n") %}
	{% if " g28 " in (" " ~ l.split("\x23")[0].split(";")[0]|lower ~ " ") %}
	{% set dummy = output.append(
	"G28 in [homing_override] gcode. Replace with G28.6245197 to "
	"fix recursive macro call.\n"
	"See readme: https://github.com/jschuh/klipper-macros\x23g28") %}
	{% endif %}
	{% endfor %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=check_km_config VARIABLE=load_errors VALUE="{
	output|replace('\"','\\\"')}"
	M400

[delayed_gcode INIT_GLOBALS]
initial_duration = 1
gcode = 
	LIST_MACROS SILENT=1
	_KM_GLOBALS
	
	CHECK_KM_CONFIG
	_INIT_SURFACES
	BED_MESH_CHECK
	
	SET_DRAW_PARAMS WIDTH="{printer.configfile.settings.extruder.nozzle_diameter}"
	
	_KM_OPTIONS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready

[gcode_macro check_km_config]
variable_load_errors = []
description = Checks global variables and throws an error on any invalid values.
	Does nothing if the config has no errors.
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set toolhead = printer.toolhead %}
	{% set output = load_errors %}
	{% if km.park_x > toolhead.axis_maximum.x or
	km.park_x < toolhead.axis_minimum.x %}
	{% set dummy = output.append("park_x is invalid.") %}
	{% endif %}
	{% if km.park_y > toolhead.axis_maximum.y or
	km.park_y < toolhead.axis_minimum.y %}
	{% set dummy = output.append("park_y is invalid.") %}
	{% endif %}
	{% if km.park_z > toolhead.axis_maximum.z or
	km.park_z < toolhead.axis_minimum.z %}
	{% set dummy = output.append("park_z is invalid.") %}
	{% endif %}
	{% if km.print_max[0] > toolhead.axis_maximum.x or
	km.print_max[1] > toolhead.axis_maximum.y %}
	{% set dummy = output.append("print_max is invalid.") %}
	{% endif %}
	{% if km.print_min[0] < toolhead.axis_minimum.x or
	km.print_min[1] < toolhead.axis_minimum.y %}
	{% set dummy = output.append("print_min is invalid.") %}
	{% endif %}
	{% if km.start_extruder_preheat_scale > 1.0 or
	km.start_extruder_preheat_scale < 0.0 %}
	{% set dummy = output.append("extruder_preheat_scale is invalid.") %}
	{% endif %}
	{% if km.load_length >
	printer.configfile.settings["extruder"].max_extrude_only_distance %}
	{% set dummy = output.append(
	"load_length exceeds max_extrude_only_distance.") %}
	{% endif %}
	{% if km.load_length < km.load_priming_length %}
	{% set dummy = output.append(
	"load_length is shorter than load_priming_length.") %}
	{% endif %}
	{% if km.load_length < 0.0 %}
	{% set dummy = output.append("load_length is negative.") %}
	{% endif %}
	{% if km.load_priming_length < 0.0 %}
	{% set dummy = output.append("load_priming_length is negative.") %}
	{% endif %}
	
	
	{% if output %}
	{ action_raise_error(output|sort|join('\nError: ')) }
	{% endif %}
	M400

[gcode_macro kmvars]
description = Lists global variables used by klipper-macros.
	Usage: KMVARS [SEARCH=<search_string>]
gcode = 
	{% set SEARCH = params.SEARCH|default(params.S|default(""))|lower %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set output = [] %}
	{% for k in km %}
	{% if SEARCH in k %}
	{% set dummy = output.append(k ~ ": " ~ km[k]) %}
	{% endif %}
	{% endfor %}
	{ action_respond_info(output|sort|join('\n')) }

[gcode_macro check_macro_docs]
description = Lists macros lacking proper documentation.
	Usage: CHECK_MACRO_DOCS [USAGE=<0|1>] [HIDDEN=<1|0>] [RENAMED=<1|0>]
gcode = 
	{% set USAGE = params.USAGE|default(0)|int %}
	{% set HIDDEN = params.HIDDEN|default(0)|int %}
	{% set RENAMED = params.RENAMED|default(0)|int %}
	{% set output = [] %}
	{%set config = printer.configfile.config %}
	{% for k in config|sort %}
	{% if k.startswith("gcode_macro") %}
	{% set name = k.split()[1] %}
	{% set desc = config[k].description|default("") %}
	{% set is_renamed = config[k].rename_existing|default("") %}
	{% if (not desc or (USAGE and not "Usage: "~name.upper() in desc)) and
	(HIDDEN or not name.startswith('_')) and (RENAMED or is_renamed) %}
	{% set dummy = output.append("%s&nbsp;%s: missing %s."
	| format("*" if is_renamed else "&nbsp;", name,
	"description" if not desc else "usage")) %}
	{% endif %}
	{% endif %}
	{% endfor %}
	{action_respond_info(output|join("\n"))}

[gcode_macro listvars]
description = Lists per-macro variables with a name containing SEARCH. This is
	useful for debugging macros by allowing you to probe printer state. Be very
	careful, however, as an overly broad SEARCH parameter can take a long time
	to process and potentially hang or crash klipper.
	Usage: LISTVARS SEARCH=<search_string>
gcode = 
	
	{% if 'SEARCH' not in params and 'S' not in params %}
	{ action_raise_error("Must provide a SEARCH parameter.") }
	{% endif %}
	{% set SEARCH = params.SEARCH|default(params.S)|lower %}
	{% set ns = namespace() %}
	{% set output = [] %}
	{% for item in printer %}
	{% if item is not string %}
	{% set ns.path = ['printer', "[%s]" % (item|string), ''] %}
	{% elif ' ' in item %}
	{% set ns.path = ['printer', "['%s']" % (item), ''] %}
	{% else %}
	{% set ns.path = ['printer.', item, ''] %}
	{% endif %}
	
	{% if SEARCH in ns.path|lower %}
	{% set dummy = output.append(ns.path|join) %}
	{% endif %}
	
	{% if printer[item].items() %}
	{% for childkey, child in printer[item].items() recursive %}
	{% set ns.path = ns.path[:loop.depth|int + 1] %}
	{% if childkey is not string %}
	{% set null = ns.path.append("[%s]" % (childkey|string)) %}
	{% elif ' ' in childkey %}
	{% set null = ns.path.append("['%s']" % (childkey)) %}
	{% else %}
	{% set null = ns.path.append(".%s" % (childkey)) %}
	{% endif %}
	
	{% if child is mapping  %}
	{loop(child.items())}
	{% else %}
	{% if SEARCH in ns.path|lower %}
	{% set dummy = output.append("%s : %s" % (ns.path|join, child)) %}
	{% endif %}
	{% endif %}
	{% endfor %}
	{% endif %}
	{% endfor %}
	{ action_respond_info(output|join("\n")) }

[gcode_macro list_macros]
description = Lists registered macros (and optionally show variable state).
	Usage: LISTVARS SEARCH=<search_string> VARS=<0|1> SILENT=<0|1>
variable_macros = {}
gcode = 
	
	{% if not macros %}
	{% set renames = {} %}
	{% for k in printer.configfile.config %}
	{% if k.lower().startswith("gcode_macro") and
	printer.configfile.config[k].rename_existing %}
	{% set name = k.split(None, 1)[1] | lower %}
	{% set dummy = renames.__setitem__(name,
	[printer.configfile.config[k].rename_existing|lower] +
	renames[name]|default([])) %}
	{% endif %}
	{% endfor %}
	{% for k in printer %}
	{% if k.lower().startswith("gcode_macro") %}
	{% set name = k.split(None, 1)[1] | lower %}
	{% set dummy = macros.__setitem__(name, renames[name]|default([])) %}
	{% endif %}
	{% endfor %}
	{% endif %}
	
	{% if params.SILENT|default(0)|int == 0 %}
	_LIST_MACROS_DISPLAY {rawparams}
	{% endif %}

[gcode_macro _list_macros_display]
gcode = 
	{% set SEARCH = params.SEARCH | default(params.S) | default("") | lower %}
	{% set VARS = params.VARS | default(params.V) | default(0) | int != 0 %}
	
	{% set macros = printer["gcode_macro list_macros"].macros %}
	{% set output = [] %}
	{% for k in macros %}
	{% if SEARCH in k | lower %}
	{% set line = k ~ ((" (renames: %s)" % (macros[k]|join(","))) if macros[k]
	else "") %}
	{% set outvars = [] %}
	{% if VARS %}
	{% for v in printer["gcode_macro " ~ k] | sort %}
	{% set dummy = outvars.append("\n* %s: %s" %
	(v, printer["gcode_macro " ~ k][v]|string)) %}
	{% endfor %}
	{% endif %}
	{% set dummy = output.append(line + outvars | join("")) %}
	{% endif %}
	{% endfor %}
	{ action_respond_info(output | sort | join("\n")) }

[gcode_macro set_heater_temperature_scaled]
gcode = 
	{% set HEATER = params.HEATER.lower() %}
	{% set TARGET = params.TARGET|default(0.0)|float %}
	{% set scaled_heaters =
	printer["gcode_macro set_heater_scaling"].scaled_heaters %}
	{% if HEATER in scaled_heaters %}
	{% set scales = scaled_heaters[HEATER] %}
	{% set dummy = scales.__setitem__("real_target", TARGET) %}
	{%if TARGET > 0.0 %}
	{% set TARGET = (((TARGET + scales.bump) * scales.scale, scales.minimum)
	| max, scales.maximum)|min %}
	{% endif %}
	{% endif %}
	SET_HEATER_TEMPERATURE HEATER="{HEATER}" TARGET={TARGET}

[gcode_macro temperature_wait_scaled]
gcode = 
	{% set SENSOR = params.SENSOR.lower() %}
	{% set heater = SENSOR if not SENSOR.startswith("heater_generic") else
	SENSOR.split()[1] %}
	{% set scaled_heaters =
	printer["gcode_macro set_heater_scaling"].scaled_heaters %}
	{% if heater in scaled_heaters %}
	{% set scales = scaled_heaters[heater] %}
	{% if "MINIMUM" in params and MINIMUM > 0.0 %}
	{% set MINIMUM = (((MINIMUM + scales.bump) * scales.scale, scales.minimum)
	| max, scales.maximum)|min %}
	{% endif %}
	{% if "MAXIMUM" in params and MAXIMUM > 0.0 %}
	{% set MAXIMUM = (((MAXIMUM + scales.bump) * scales.scale, scales.minimum)
	| max, scales.maximum)|min %}
	{% endif %}
	{% else %}
	{% set settings = printer.configfile.settings[SENSOR] %}
	{% set MINIMUM = params.MINIMUM|default(settings.min_temp) %}
	{% set MAXIMUM = params.MAXIMUM|default(settings.max_temp) %}
	{% endif %}
	{% if printer[sensor].temperature < MINIMUM or
	printer[sensor].temperature > MAXIMUM %}
	TEMPERATURE_WAIT SENSOR="{SENSOR}" MINIMUM={MINIMUM} MAXIMUM={MAXIMUM}
	{% endif %}

[gcode_macro _gcode_wait_wrapper_inner]
gcode = 
	
	
	{% set sensor = params.HEATER if params.HEATER in
	printer.heaters.available_heaters
	else ("heater_generic " ~ params.HEATER) %}
	{% set target = printer[sensor].target %}
	{% if 'R' in params and target > 0.0 %}
	{% set T = params.T|default("") %}
	M{params.M}.6245197 S{target} { (" T"~T) if T else "" }
	{% elif printer[sensor].temperature < target %}
	TEMPERATURE_WAIT SENSOR="{sensor}" MINIMUM={target}
	{% endif %}

[gcode_macro _gcode_wait_wrapper]
gcode = 
	{% set target = params.S | default(params.R | default(0))| float %}
	SET_HEATER_TEMPERATURE_SCALED HEATER="{params.HEATER}" TARGET={target}
	_GCODE_WAIT_WRAPPER_INNER{%
	for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}

[gcode_macro m109]
rename_existing = M109.6245197
gcode = 
	{% set extruder = "extruder" ~ params.T|replace('0', '')
	if "T" in params else printer.toolhead.extruder %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating
	_GCODE_WAIT_WRAPPER HEATER={extruder}{%
	for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro m190]
rename_existing = M190.6245197
gcode = 
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=bed_heating
	_GCODE_WAIT_WRAPPER HEATER=heater_bed {%
	for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro m191]
description = Sets chamber temperature (with wait for heating).
	Usage: M191 [S<temp>]
gcode = 
	
	{% if "R" in params %}
	{% set dummy = params.__setitem__("S", params.R) %}
	{% endif %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=chamber_heating
	_GCODE_WAIT_WRAPPER HEATER=chamber {%
	for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro m104]
rename_existing = M104.6245197
gcode = 
	{% set extruder = "extruder" ~ params.T|replace('0', '')
	if "T" in params else printer.toolhead.extruder %}
	SET_HEATER_TEMPERATURE_SCALED HEATER={extruder} TARGET={params.S|default(0)}

[gcode_macro m140]
rename_existing = M140.6245197
gcode = 
	SET_HEATER_TEMPERATURE_SCALED HEATER=heater_bed TARGET={params.S|default(0)}

[gcode_macro m141]
description = Sets chamber temperature.
	Usage: M141 [S<temp>]
gcode = 
	SET_HEATER_TEMPERATURE_SCALED HEATER=chamber TARGET={params.S|default(0)}

[gcode_macro _check_heater_params]
gcode = 
	{% set HEATER = params.HEATER|lower %}
	{% set sensor = params.HEATER %}
	{% if HEATER not in printer.heaters.available_heaters %}
	{% set sensor = "heater_generic " ~ HEATER %}
	{% if sensor not in printer.heaters.available_heaters %}
	{ action_raise_error("The value '%s' is not valid for HEATER"
	| format(HEATER)) }
	{% endif %}
	{% endif %}
	{% set settings = printer.configfile.settings[sensor] %}
	{% set scaled_heaters =
	printer["gcode_macro set_heater_scaling"].scaled_heaters %}
	{% if HEATER is in scaled_heaters %}
	{% set scales = scaled_heaters[HEATER] %}
	{% else %}
	{% set scales = { "scale": 1.0, "bump": 0.0, "minimum": settings.min_temp,
	"maximum": settings.max_temp,
	"real_target": printer[sensor].target} %}
	{% endif %}
	{% set SCALE = params.SCALE|default(scales.scale)|float %}
	{% set BUMP = params.BUMP|default(scales.bump)|float %}
	{% set MINIMUM = params.MINIMUM|default(scales.minimum)|float %}
	{% set MAXIMUM = params.MAXIMUM|default(scales.maximum)|float %}
	
	{% if SCALE <= 0 %}
	{ action_raise_error("SCALE must be a positive value.") }
	{% elif MINIMUM < settings.min_temp or MINIMUM > settings.max_temp %}
	{ action_raise_error("MINIMUM must be between %.1f and %.1f" |
	format(settings.min_temp, settings.max_temp)) }
	{% elif MAXIMUM < settings.min_temp or MAXIMUM > settings.max_temp %}
	{ action_raise_error("MAXIMUM must be between %.1f and %.1f" |
	format(settings.min_temp, settings.max_temp)) }
	{% elif MINIMUM >= MAXIMUM %}
	{ action_raise_error("MINIMUM must be less than MAXIMUM.") }
	{% elif "TARGET" in params and (params.TARGET|float < MINIMUM or
	params.TARGET|float > MAXIMUM) %}
	{ action_raise_error("TARGET must be between %.1f and %.1f" |
	format(settings.min_temp, settings.max_temp)) }
	{% endif %}

[gcode_macro set_heater_scaling]
description = Sets scaling parameters for heater. If a new target temperature is
	passed it will be adjusted to the scaling parameters.
	Usage: SET_HEATER_SCALING [HEATER=<heater>] [SCALE=<scale_factor>]
	[BUMP=<degrees>] [MAXIMUM=<degrees>]
	[MINIMUM=<degrees>] [TARGET=<temp>]
variable_scaled_heaters = {}
gcode = 
	
	{% if "HEATER" is not in params %}
	{% set output = [] %}
	{% for h in scaled_heaters %}
	{% set dummy = output.append(
	"%s: Scale: %.2f Bump: %.1f Minimum:%.1f Maximum: %.1f"
	| format(h, scaled_heaters[h].scale, scaled_heaters[h].bump,
	scaled_heaters[h].minimum, scaled_heaters[h].maximum)) %}
	{% endfor %}
	{% if output %}}{action_respond_info(output|join('\n'))}{% endif %}
	{% else %}
	
	{% set HEATER = params.HEATER.lower() %}
	{% set settings = printer.configfile.settings[HEATER] %}
	{% if HEATER is not in scaled_heaters %}
	{% set dummy = scaled_heaters.__setitem__(HEATER, {"scale": 1.0,
	"bump": 0.0, "minimum": settings.min_temp,
	"maximum": settings.max_temp,
	"real_target": printer[HEATER].target}) %}
	{% endif %}
	_CHECK_HEATER_PARAMS{% for k in params %}{' '~k~'='~params[k]}{% endfor %}
	{% set scales = scaled_heaters[HEATER] %}
	{% set SCALE = params.SCALE|default(scales.scale)|float %}
	{% set BUMP = params.BUMP|default(scales.bump)|float %}
	{% set MAXIMUM = params.MAXIMUM|default(scales.maximum)|float %}
	{% set MINIMUM = params.MINIMUM|default(scales.minimum)|float %}
	{% set TARGET = params.TARGET|default(scales.real_target)|float %}
	{% set dummy = scales.__setitem__("scale", SCALE) %}
	{% set dummy = scales.__setitem__("bump", BUMP) %}
	{% set dummy = scales.__setitem__("maximum", MAXIMUM) %}
	{% set dummy = scales.__setitem__("minimum", MINIMUM) %}
	{% set dummy = scales.__setitem__("real_target", TARGET) %}
	
	{% set settings = printer.configfile.settings[HEATER] %}
	{% if SCALE != 1.0 or BUMP != 0.0 or MINIMUM != settings.min_temp or
	MAXIMUM != settings.max_temp %}
	{% set dummy = scaled_heaters.__setitem__(HEATER, scales) %}
	{% else %}
	{% set dummy = scaled_heaters.__delitem__(HEATER) %}
	{% endif %}
	SET_HEATER_TEMPERATURE_SCALED HEATER={HEATER} TARGET={TARGET}
	{action_respond_info(
	"%s: Scale: %.2f Bump: %.1f Minimum:%.1f Maximum: %.1f Target: %.1f"
	| format(HEATER, SCALE, BUMP, MINIMUM, MAXIMUM, TARGET))}
	{% endif %}
	
	{% set dummy = None if True else "
	{% set dummy = params.HEATER|default(e.g. extruder) %}
	{% set dummy = params.SCALE|default(1.0)|float %}
	{% set dummy = params.BUMP|default(0.0)|float %}
	{% set dummy = params.MAXIMUM|default(max_temp)|float %}
	{% set dummy = params.MINIMUM|default(min_temp)|float %}
	{% set dummy = params.TARGET|default(current target)|float %}
	" %}

[gcode_macro reset_heater_scaling]
description = Clears scaling for heater (or all heaters if none specified).
	Usage: RESET_HEATER_SCALING [HEATER=<heater>]
gcode = 
	{% if "HEATER" in params %}
	{% set HEATER = params.HEATER.lower() %}
	{% if HEATER not in printer.heaters.available_heaters %}
	{ action_raise_error("The value '%s' is not valid for HEATER"
	| format(HEATER)) }
	{% endif %}
	{% set settings = printer.configfile.settings[HEATER] %}
	SET_HEATER_SCALING HEATER={HEATER
	} SCALE=1.0 BUMP=0.0 MINIMUM={settings.min_temp
	} MAXIMUM={settings.max_temp}
	{% else %}
	
	SET_GCODE_VARIABLE MACRO=set_heater_scaling VARIABLE=scaled_heaters VALUE={
	"{}"}
	{% endif %}

[gcode_macro _km_idle_timeout]
gcode = 
	{% if printer.pause_resume.is_paused %}
	{action_respond_info("Extruder powered down on idle timeout.")}
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{
	printer[printer.toolhead.extruder].target}"
	M104; Turn off extruder but leave the bed on.
	{% else %}
	TURN_OFF_HEATERS
	M107; turn off fan
	M84
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready
	{% endif %}

[gcode_macro _check_kinematic_limits]
gcode = 
	{% set toolhead = printer.toolhead %}
	{% if params.X and (params.X|float < toolhead.axis_minimum.x or
	params.X|float > toolhead.axis_maximum.x) %}
	{action_raise_error("X[%.3f] must be between %.3f and %.3f."
	| format(params.X|float, toolhead.axis_minimum.x,
	toolhead.axis_maximum.x))}
	{% elif params.Y and (params.Y|float < toolhead.axis_minimum.y or
	params.Y|float > toolhead.axis_maximum.y) %}
	{action_raise_error("Y[%.3f] must be between %.3f and %.3f."
	| format(params.Y|float, toolhead.axis_minimum.y,
	toolhead.axis_maximum.y))}
	{% elif params.Z and (params.Z|float < toolhead.axis_minimum.z or
	params.Z|float > toolhead.axis_maximum.z) %}
	{action_raise_error("Z[%.3f] must be between %.3f and %.3f."
	| format(params.Z|float, toolhead.axis_minimum.z,
	toolhead.axis_maximum.z))}
	{% elif params.E and (params.E|float|abs > printer.configfile.settings[
	"extruder"].max_extrude_only_distance) %}
	{action_raise_error("E[%.4f] exceeds max_extrude_only_distance[%.4f]."
	| format(params.E|float|abs, printer.configfile.settings[
	"extruder"].max_extrude_only_distance))}
	{% endif %}

[gcode_macro lazy_home]
description = Homes the specified axes. If lazy is true, already homed axes
	are skipped.
	Usage: LAZY_HOME [LAZY=<1|0>] [AXES=<axes_string>]
gcode = 
	
	LIST_MACROS SILENT=1
	_LAZY_HOME_INNER {rawparams}

[gcode_macro _lazy_home_inner]
gcode = 
	
	{% set G28 = (printer["gcode_macro list_macros"].macros.g28|
	default(["g28"],True))[-1] %}
	{% set axes = 'XYZ'|select('in', params.AXES|default("XYZ")|upper|list) %}
	{% if not axes %}
	{% set axes = 'XYZ' %}
	{% endif %}
	{% if params.LAZY|default(1)|int %}
	{% set axes = axes|reject('in', printer.toolhead.homed_axes|upper)|join() %}
	{% endif %}
	
	{% if axes %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing
	{G28}{% for k in axes %}{' ' ~ k}{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status
	{% endif %}

[gcode_macro g28]
description = Wraps the G28 command to add the Marlin "O" parameter so that
	already homed axes will not be homed again. See the Klipper documentation on
	G28 for the behavior of the other parameters.
	Usage: G28 [O] ...
rename_existing = G28.6245197
gcode = 
	{% set axes = 'XYZ'|select('in', params)|join() %}
	LAZY_HOME LAZY={('O' in params)|int}{%if axes%} AXES={axes}{%endif%}

[gcode_macro before_layer_change]
description = Add this to the "before layer change" input box in the slicer.
	Usage: BEFORE_LAYER_CHANGE HEIGHT=<current_height> LAYER=<current_layer>
gcode = 
	{% set height = params.HEIGHT|default(printer.toolhead.position.z)|float %}
	{% set layer = params.LAYER|default(-1)|int + 1 %}
	{% if height >= 0.0 and layer >= 0 %}
	SET_PRINT_STATS_INFO CURRENT_LAYER="{layer}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{height}"
	{% if printer["gcode_macro _km_layer_run"].clearance_z < height %}
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{
	height}"
	{% endif %}
	{% endif %}

[gcode_macro after_layer_change]
description = Add this to the "after layer change" input box in the slicer.
	Usage: AFTER_LAYER_CHANGE
gcode = 
	_KM_LAYER_RUN

[gcode_macro gcode_at_layer]
description = Schedules the specified g-code command to be run at the specified
	layer. LAYER=next will cause the command to run at the next layer change.
	Usage: GCODE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } COMMAND=<gcode>
	[CANCEL=<0|1>]
gcode = 
	{% set tot_layers = printer.print_stats.info.total_layer %}
	{% if params|length > 0 %}
	_KM_CHECK_IS_PRINTING
	
	{% set CANCEL = params.CANCEL|default(0)|int != 0 %}
	{% set COMMAND = params.COMMAND|default(None) %}
	{% if COMMAND %}
	{% set COMMAND = COMMAND.lstrip().split(None, 1) %}
	{% set COMMAND = " ".join([COMMAND[0]|upper] + COMMAND[1:]) %}
	{% endif %}
	
	{% if "LAYER" in params %}
	{% set cmd_container = "commands_layer" %}
	{% set cur_layer = printer.print_stats.info.current_layer|int %}
	{% if "HEIGHT" in params %}
	{action_raise_error("Conflicting HEIGHT and LAYER arguments provided.")}
	{% elif params.LAYER|string|lower == "next" %}
	{% set LAYER = cur_layer + 1 %}
	{% else %}
	{% set LAYER = params.LAYER|int %}
	{% endif %}
	{% if LAYER <= cur_layer %}
	{action_raise_error("LAYER[%i] must be above current print layer[%i]."
	| format(LAYER, cur_layer))}
	{% elif tot_layers and LAYER > tot_layers %}
	{action_raise_error("LAYER[%i] must not be above top layer[%i]."
	| format(LAYER, tot_layers))}
	{% endif %}
	{% set key = LAYER %}
	
	{% elif "HEIGHT" in params %}
	{% set cmd_container = "commands_height" %}
	{% set HEIGHT = params.HEIGHT|float %}
	{% set cur_height = printer["gcode_macro _km_layer_run"].cur_height %}
	{% if HEIGHT <= cur_height %}
	{action_raise_error(
	"HEIGHT[%.3f] must be above current print height[%.3f].")
	| format(HEIGHT, cur_height)}
	{% elif HEIGHT >= printer.toolhead.axis_maximum.z %}
	{action_raise_error(
	"HEIGHT[%.3f] must be below maximum Z height[%.3f].")
	| format(HEIGHT, printer.toolhead.axis_maximum.z)}
	{% endif %}
	{% set key = HEIGHT %}
	
	{% else %}
	{action_raise_error("No HEIGHT or LAYER argument provided.")}
	{% endif %}
	
	{% set commands = printer["gcode_macro _km_layer_run"][cmd_container] %}
	{% if key not in commands and not CANCEL %}
	{% set dummy = commands.__setitem__(key, []) %}
	{% endif %}
	
	{% if CANCEL %}
	{% if key in commands %}
	{% set pos = ("%i"|format(key)) if key is integer else
	("%.3fmm"|format(key)) %}
	{% if COMMAND %}
	{% set dummy = commands[key].remove(COMMAND) %}
	{% if commands[key]|length == 0 %}
	{% set dummy = commands.__delitem__(key) %}
	{% endif %}
	{action_respond_info("Cancelled %s %s:\n* %s" |
	format("layer" if k is integer else "height",
	pos, COMMAND))}
	{% else %}
	{% set dummy = commands.__delitem__(key) %}
	{action_respond_info("Cancelled all commands at %s %s." |
	format("layer" if k is integer else "height",
	pos))}
	{% endif %}
	{% endif %}
	{% elif not COMMAND %}
	{action_raise_error("No COMMAND argument provided.")}
	{% elif COMMAND in commands[key] %}
	{action_raise_error("Duplicate command previously scheduled.")}
	{% else %}
	{% set dummy = commands[key].append(COMMAND) %}
	{% set pos = ("%i"|format(key)) if key is integer else
	("%.3fmm"|format(key)) %}
	{action_respond_info("%s %s:\n* %s" |
	format("layer" if key is integer else "height",
	pos, COMMAND))}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE={cmd_container} VALUE="{
	commands|replace('\"','\\\"')}"
	_UPDATE_LAYER_COMPAT
	
	
	{% else %}
	{% set output = [] %}
	{% set commands = printer["gcode_macro _km_layer_run"].commands_layer %}
	{% for key in commands|list|sort %}
	{% set dummy = output.append("layer %i:" | format(key)) %}
	{% for c in commands[key] %}
	{% set dummy = output.append("* %s" | format(c)) %}
	{% endfor %}
	{% endfor %}
	{% set commands = printer["gcode_macro _km_layer_run"].commands_height %}
	{% for key in commands|list|sort %}
	{% set dummy = output.append("height %.3fmm:" | format(key)) %}
	{% for c in commands[key] %}
	{% set dummy = output.append("* %s" | format(c)) %}
	{% endfor %}
	{% endfor %}
	{action_respond_info(output|join('\n'))}
	{% endif %}

[gcode_macro _km_layer_run]
description = Runs pending commands for the current layer change.
	Usage: _KM_LAYER_RUN
variable_cur_height = 0.0
variable_clearance_z = 0.0
variable_commands_layer = {}
variable_commands_height = {}
gcode = 
	{% set cur_layer = printer.print_stats.info.current_layer %}
	{% for key in commands_layer | select("<=", cur_layer) | sort %}
	{action_respond_info("Executing scheduled commands at layer %d:\n%s" |
	format(key, commands_layer[key]|join('\n')))}
	{% for c in commands_layer[key] %}
	{c}
	{% endfor %}
	{% set dummy = commands_layer.__delitem__(key) %}
	{% endfor %}
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{
	commands_layer|replace('\"','\\\"')}"
	{% for key in commands_height | select("<=", cur_height) | sort %}
	{action_respond_info("Executing scheduled commands at height %.3f:\n%s" |
	format(key, commands_height[key]|join('\n')))}
	{% for c in commands_height[key] %}
	{c}
	{% endfor %}
	{% set dummy = commands_height.__delitem__(key) %}
	{% endfor %}
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{
	commands_height|replace('\"','\\\"')}"
	_UPDATE_LAYER_COMPAT

[gcode_macro init_layer_gcode]
description = Clears scheduled gcode commands and state for all layers.
	Usage: INIT_LAYER_GCODE LAYERS=<num>
gcode = 
	SET_PRINT_STATS_INFO TOTAL_LAYER="{params.LAYERS|int + 1}" CURRENT_LAYER="{0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"
	_UPDATE_LAYER_COMPAT

[gcode_macro _reset_layer_gcode]
description = Clears scheduled gcode commands and state for all layers.
	Usage: _RESET_LAYER_GCODE
gcode = 
	SET_PRINT_STATS_INFO TOTAL_LAYER="{0}" CURRENT_LAYER="{0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"
	_UPDATE_LAYER_COMPAT

[gcode_macro cancel_all_layer_gcode]
description = Clears all scheduled gcode commands.
	Usage: CANCEL_ALL_LAYER_GCODE
gcode = 
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"
	_UPDATE_LAYER_COMPAT

[gcode_macro _update_layer_compat]
gcode = 
	{% set next_layer = printer.print_stats.info.current_layer|int + 1 %}
	{% set commands_layer = printer["gcode_macro _km_layer_run"].commands_layer %}
	{% set keys = commands_layer | sort(reverse=True) %}
	
	{% set pause_next_layer = {'enable': False, 'call':
	printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer.call} %}
	{% if pause_next_layer.call in commands_layer[next_layer] | default([]) %}
	{% set dummy = pause_next_layer.__setitem__('enable', True) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{
	pause_next_layer|replace('\"','\\\"') }"
	
	
	{% set pause_at_layer = {'enable': False, 'layer': 0, 'call':
	printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer.call} %}
	{% if pause_next_layer.enable and
	pause_next_layer.call == pause_at_layer.call %}
	{% set keys = keys | reject("==", next_layer) %}
	{% endif %}
	
	
	
	
	{% for key in keys %}
	{% if pause_at_layer.call in commands_layer[key] %}
	{% set dummy = pause_at_layer.__setitem__('enable', True) %}
	{% set dummy = pause_at_layer.__setitem__('layer', key) %}
	{% endif %}
	{% endfor %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{
	pause_at_layer|replace('\"','\\\"') }"

[gcode_macro pause_next_layer]
description = Convenience macro to schedule the current print to pause at the
	next layer change. See PAUSE for additional arguments.
	Usage: PAUSE_NEXT_LAYER ...
gcode = 
	_CHECK_KINEMATIC_LIMITS{% for k in params%}{' ' ~k~ '=' ~ params[k]
	}{% endfor %}
	GCODE_AT_LAYER LAYER=NEXT COMMAND="PAUSE{% for k in params %}{
	' ' ~ k ~ '=' ~ params[k]}{% endfor %}"

[gcode_macro pause_at_layer]
description = Convenience macro to schedule the current print to pause at the
	specified layer change. LAYER=next will cause the command to run at the next
	layer change. See PAUSE for additional arguments.
	Usage: PAUSE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...
gcode = 
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	" %}
	{% set filtered_params = params|reject('in',['HEIGHT','LAYER'])|list|sort %}
	_CHECK_KINEMATIC_LIMITS{% for k in filtered_params%}{' ' ~k~ '=' ~ params[k]
	}{% endfor %}
	GCODE_AT_LAYER {% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor
	%} COMMAND="PAUSE{% for k in filtered_params %}{
	' ' ~ k ~ '=' ~ params[k]}{% endfor %}"

[gcode_macro speed_at_layer]
description = Convenience macro to schedule a feedrate adjustment at the
	specified layer change. LAYER=next will cause the command to run at the next
	layer change. (SPEED parameter behaves the same as the M220 S parameter.)
	Usage: SPEED_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } SPEED=<percentage>
gcode = 
	{% set SPEED = params.SPEED|default(0)|int %}
	{% if SPEED < 1 or SPEED > 500 %}
	{action_raise_error("SPEED[%i] parameter between 1 and 500 is required."
	% SPEED)}
	{% endif %}
	GCODE_AT_LAYER {% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor %} COMMAND="M220 S{SPEED|int}"
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	{% set dummy = params.SPEED|default(percentage)|int %}
	" %}

[gcode_macro flow_at_layer]
description = Convenience macro to schedule a flow percentage adjustment at the
	specified layer change. LAYER=next will cause the command to run at the next
	layer change. (FLOW parameter behaves the same as the M221 S parameter.)
	Usage: FLOW_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } FLOW=<percentage>
gcode = 
	{% set FLOW = params.FLOW|default(0)|int %}
	{% if FLOW < 1 or FLOW > 500 %}
	{action_raise_error("FLOW[%i] parameter between 1 and 500 is required."
	% FLOW)}
	{% endif %}
	GCODE_AT_LAYER {% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor %} COMMAND="M221 S{FLOW|int}"
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	{% set dummy = params.FLOW|default(percentage)|int %}
	" %}

[gcode_macro fan_at_layer]
description = Convenience macro to schedule a fan adjustment at the specified
	layer change. LAYER=next will cause the command to run at the next layer
	change. See SET_FAN_SCALING for additional arguments.
	Usage: FAN_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...
gcode = 
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	{% set dummy = params.SCALE|default(1.0)|float %}
	{% set dummy = params.BUMP|default(0)|int %}
	{% set dummy = params.MAXIMUM|default(0)|int %}
	{% set dummy = params.MINIMUM|default(255)|int %}
	{% set dummy = params.SPEED|default(current speed)|int %}
	" %}
	{% set filtered_params = params|reject('in',['HEIGHT','LAYER'])|list|sort %}
	{% if filtered_params|length == 0 %}
	{action_raise_error("No fan parameters provided.")}
	{% endif %}
	_CHECK_FAN_PARAMS{% for k in filtered_params %}{' '~k~'='~params[k]
	}{% endfor %}
	GCODE_AT_LAYER {% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor
	%} COMMAND="SET_FAN_SCALING{% for k in filtered_params %}{
	' ' ~ k ~ '=' ~ params[k]}{% endfor %}"

[gcode_macro heater_at_layer]
description = Convenience macro to schedule a heater adjustment at the specified
	layer change. LAYER=next will cause the command to run at the next layer
	change. See SET_HEATER_SCALING for additional arguments.
	Usage: HEATER_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...
gcode = 
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	{% set dummy = params.HEATER|default(e.g. extruder) %}
	{% set dummy = params.SCALE|default(1.0)|float %}
	{% set dummy = params.BUMP|default(0.0)|float %}
	{% set dummy = params.MAXIMUM|default(max_temp)|float %}
	{% set dummy = params.MINIMUM|default(min_temp)|float %}
	{% set dummy = params.TARGET|default(current target)|float %}
	" %}
	{% set filtered_params = params|reject('in',['HEIGHT','LAYER'])|list|sort %}
	_CHECK_HEATER_PARAMS{% for k in filtered_params%}{' ' ~ k ~ '=' ~ params[k]
	}{% endfor %}
	GCODE_AT_LAYER{% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor
	%} COMMAND="SET_HEATER_SCALING{% for k in filtered_params %}{
	' ' ~ k ~ '=\\\"' ~ params[k]|replace('\\','\\\\')|replace('\'','\\\'')
	|replace('\"','\\\"') ~ '\\\"'
	}{% endfor %}"

[gcode_macro park]
description = Park the toolhead
	Usage: PARK [P=<0|1|2>] [X=<pos>] [Y=<pos>] [Z=<pos>] [LAZY=<1|0>]
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set LAZY = params.LAZY|default(1)|int %}
	{% if printer.toolhead.homed_axes != "xyz" %}
	{% if LAZY %}
	LAZY_HOME
	{% else %}
	{action_raise_error("Must home axes first.")}
	{% endif %}
	{% endif %}
	
	
	{% set P = (params.P|default(2))|int %}
	{% set X = params.X|default(km.park_x)|float %}
	{% set Y = params.Y|default(km.park_y)|float %}
	{% set Z = params.Z|default(km.park_z)|float %}
	
	M400
	_CHECK_KINEMATIC_LIMITS X="{X}" Y="{Y}" Z="{Z}"
	_PARK_INNER X="{X}" Y="{Y}" Z="{Z}" P="{P}" LAZY="{LAZY}"
	
	{% set dummy = None if True else "
	{% set dummy = params.P|default(mode=<0|1|2>)|int %}
	{% set dummy = params.X|default(X position)|int %}
	{% set dummy = params.Y|default(Y position)|int %}
	{% set dummy = params.Z|default(Z position)|int %}
	" %}

[gcode_macro _park_inner]
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set travel_speed_xy = km.travel_speed_xy %}
	{% set travel_speed_z = km.travel_speed_z %}
	
	{% set position = printer.gcode_move.gcode_position %}
	{% set origin = printer.gcode_move.homing_origin%}
	
	
	
	{% set clearance_z = (printer["gcode_macro _km_layer_run"].clearance_z,
	position.z) | max %}
	{% set P = params.P|int %}
	{% set X = params.X|float - origin.x %}
	{% set Y = params.Y|float - origin.y %}
	{% set Z = params.Z|float %}
	{% set LAZY = params.LAZY|int %}
	
	
	{% if P == 0 %}
	{% if clearance_z > Z %}
	{% set Z = clearance_z %}
	{% endif %}
	{% elif P == 1 %}
	{% set Z = Z - origin.z %}
	{% elif P == 2 %}
	{% set Z = Z + clearance_z %}
	{% else %}
	{action_raise_error("Invalid parameter P=%i. Value must be 0, 1, or 2." |
	format(P)) }
	{% endif %}
	
	
	{% set Z = ((Z, printer.toolhead.axis_maximum.z - origin.z)|min,
	printer.toolhead.axis_minimum.z - origin.z)|max %}
	
	
	{% if (not LAZY) or P != 2 or X != position.x or Y != position.y
	or Z < clearance_z %}
	SAVE_GCODE_STATE NAME=_KM_PARK
	G90
	G0 Z{Z} F{travel_speed_z}
	G0 X{X} Y{Y} F{travel_speed_xy}
	RESTORE_GCODE_STATE NAME=_KM_PARK MOVE=0
	{% endif %}

[gcode_macro g27]
description = Parks the toolhead.
	Usage: G27 [P=<0|1|2>]
gcode = 
	
	PARK P={params.P|default(0)} {% for k in params|reject("in", "GP") %}{
	' '~k~'="'~params[k]~'"'
	}{% endfor %}

[gcode_macro pause]
description = Pauses the current print.
	Usage: PAUSE [X=<pos>] [Y=<pos>] [Z=<pos>] [E=<retract_length>] [B=<beeps>]
rename_existing = _KM_PAUSE_BASE
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% set E = (params.E|default(5))|float %}
	
	{% set B = params.B|default(10)|int if "output_pin beeper" in printer else 0
	%}
	
	{% if printer.pause_resume.is_paused %}
	{ action_respond_info("Print already paused") }
	{% elif printer.idle_timeout.state | string == "Printing" or
	(printer.virtual_sdcard|default({})).is_active|default(False) %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pausing RESET_STACK=1
	{% set position = printer.gcode_move.gcode_position %}
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_x VALUE="{position.x}"
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_y VALUE="{position.y}"
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_z VALUE="{position.z}"
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{E}"
	SAVE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE
	_KM_PAUSE_BASE
	M83
	{% if printer.extruder.can_extrude %}
	G1 E{'%.4f' % -E} F{km.load_speed}
	{% endif %}
	PARK P=2{% for k in params|select("in", "XYZ") %}{
	' '~k~'="'~params[k]~'"'}{% endfor %}
	
	{% for i in range(B) %}
	M300 P100
	G4 P200
	{% endfor %}
	{% else %}
	{ action_respond_info("Print not in progress") }
	{% endif %}

[gcode_macro m600]
description = Pauses the current print.
	Usage: M600 [B<beeps>] [E<pos>] [L<pos>] [R<temp>] [U<pos>] [X<pos>] [Y<pos>]
	[Z<pos>]
gcode = 
	PAUSE B="{0}" P=2{% for k in params|select("in", "EXYZ") %}{
	' '~k~'="'~params[k]~'"'}{% endfor %}
	UNLOAD_FILAMENT{% if 'U' in params %} LENGTH={params.U}{% endif
	%} BEEPS="{params.B|default(10)|int}"
	{% if 'R' in params %}M109 S{params.R}{% endif %}

[gcode_macro m601]
description = Pauses the current print.
	Usage: M601
gcode = 
	PAUSE

[gcode_macro m602]
description = Resumes the currently paused print.
	Usage: M602
gcode = 
	RESUME

[gcode_macro m24]
rename_existing = M24.6245197
gcode = 
	{% if printer.pause_resume.is_paused %}
	RESUME
	{% else %}
	M24.6245197
	{% endif %}

[gcode_macro m25]
rename_existing = M25.6245197
gcode = 
	PAUSE

[gcode_macro resume]
description = Resumes the currently paused print.
	Usage: RESUME [E<pos>]
rename_existing = _KM_RESUME_BASE
variable_saved_extruder_temp = 0
variable_saved_x = 0.0
variable_saved_y = 0.0
variable_saved_z = 0.0
variable_saved_e = 0.0
gcode = 
	{% if printer.pause_resume.is_paused %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% set extruder = printer[printer.toolhead.extruder] %}
	{% if extruder.target <= printer.configfile.settings[
	printer.toolhead.extruder].min_temp
	| float + 0.5 %}
	M109 S{saved_extruder_temp}
	{% endif %}
	
	
	
	{% if 'E' not in params and not saved_e %}
	{% set saved_e = 5.0 %}
	G1 E{'%.4f' % -saved_e } F{km.load_speed}
	{% endif %}
	
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"
	G90
	
	G0 X{saved_x} Y{saved_y} F{km.travel_speed_xy}
	G0 Z{saved_z} F{km.travel_speed_z}
	G91
	
	G1 E{'%.4f' % (params.E|default(saved_e))} F{km.load_speed}
	RESTORE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE MOVE=1
	_KM_RESUME_BASE
	{% else %}
	{ action_respond_info("Printer is not paused.") }
	{% endif %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=printing RESET_STACK=1

[gcode_macro clear_pause]
description = Clears the current pause state.
	Usage: CLEAR_PAUSE
rename_existing = _KM_CLEAR_PAUSE
gcode = 
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"
	_KM_CLEAR_PAUSE

[gcode_macro print_start]
description = Inserted by slicer at start of print. Rather than using this macro
	directly you should configure your slicer as instructed in the readme.
	Usage: PRINT_START BED=<temp> EXTRUDER=<temp> [CHAMBER=<temp>]
	[MESH_MIN=<x,y>] [MESH_MAX=<x,y>] [LAYERS=<num>]
	[NOZZLE_SIZE=<mm>]
gcode = 
	{action_respond_info(
	"This file is using an old The PRINT_START format. This print will run "
	"fine, but you should update your slicer config to take advantage of the "
	"phased PRINT_START macros. The slicer documentation is here:\n"
	"https://github.com/jschuh/klipper-macros\x23slicer-configuration"
	)}
	
	_PRINT_START_PHASE_INIT {rawparams}
	_PRINT_START_PHASE_PREHEAT
	_PRINT_START_PHASE_PROBING
	_PRINT_START_PHASE_EXTRUDER
	_PRINT_START_PHASE_PURGE

[gcode_macro _print_start_phase_init]
description = Inserted by slicer at start of print. Initializes PRINT_START
	phases.
	Usage: See PRINT_START.
gcode = 
	CHECK_KM_CONFIG
	SET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{False}"
	_KM_APPLY_PRINT_OFFSET RESET=1
	_PRINT_START_PHASE_CHECK PHASE=none
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% if not params.BED %}
	{% set dummy = params.__setitem__('BED', params.BED_TEMP|int) %}
	{% endif %}
	{% if not params.EXTRUDER %}
	{% set dummy = params.__setitem__('EXTRUDER', params.EXTRUDER_TEMP|int) %}
	{% endif %}
	
	
	PRINT_START_SET PRINT_START_PHASE="init" {% for k in params %}{' %s=\"%s\"' %
	(k,params[k]|replace('\\','\\\\')|replace('\'','\\\'')|replace('\"','\\\"'))
	}{% endfor %}
	
	
	_km_check_and_set_print_bounds
	
	M107
	CLEAR_PAUSE
	
	M140 S{params.BED}
	{% if params.CHAMBER %}M141 S{params.CHAMBER|int}{% endif %}
	{% if printer.bed_mesh %}BED_MESH_CLEAR{% endif %}
	
	{% if km.start_try_saved_surface_mesh and printer.bed_mesh %}
	LOAD_SURFACE_MESH
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="preheat"

[gcode_macro _print_start_phase_preheat]
description = Inserted by slicer at start of print. Handles the bed and chamber
	heating phases and ends when both are stabilized at their target temperatures.
	Usage: See PRINT_START.
gcode = 
	_PRINT_START_PHASE_CHECK PHASE=preheat
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set BED = print.BED|int %}
	{% set EXTRUDER = print.EXTRUDER|int %}
	{% set CHAMBER = print.CHAMBER|default(0)|int %}
	{% set LAYERS = print.LAYERS|default(0)|int %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% set bed_at_target = (BED + 0.4 - printer.heater_bed.temperature) |
	abs <= 0.6 %}
	PRINT_START_SET BED_AT_TARGET={1 if bed_at_target else 0}
	{% set start_level_bed_at_temp = km.start_level_bed_at_temp and
	not printer.bed_mesh.profile_name %}
	{% set actions_at_temp = start_level_bed_at_temp or
	km.start_quad_gantry_level_at_temp or
	km.start_z_tilt_adjust_at_temp or
	(km.start_home_z_at_temp and not bed_at_target) %}
	{% set bed_overshoot = (BED + (km.start_bed_heat_overshoot if
	(BED and not bed_at_target) else 0.0),
	printer.configfile.settings.heater_bed.max_temp ) | min %}
	
	INIT_LAYER_GCODE LAYERS="{LAYERS}"
	{% if CHAMBER > 0.0 %}
	M141 S{CHAMBER}
	{% endif %}
	
	M140 S{bed_overshoot}
	{% if actions_at_temp %}
	
	
	M104 S{km.start_extruder_probing_temp if km.start_extruder_probing_temp > 0
	else (km.start_extruder_preheat_scale * EXTRUDER)|round(0,'ceil')|int}
	{% else %}
	M104 S{EXTRUDER}
	{% endif %}
	
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing RESET_STACK=1
	G28
	G90
	{% if BED > 0.0 %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=bed_heating RESET_STACK=1
	
	{% if not bed_at_target %}
	PARK
	
	M190 S{bed_overshoot}
	G4 P{km.start_bed_heat_delay / 2}
	M190 R{BED}
	G4 P{km.start_bed_heat_delay / 2}
	{% endif %}
	{% endif %}
	
	{% if CHAMBER > 0.0 %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=chamber_heating RESET_STACK=1
	_KM_PARK_IF_NEEDED HEATER="chamber" RANGE=ABOVE
	M191 S{CHAMBER}
	{% endif %}
	
	{% if BED > 0.0 and bed_at_target%}
	M190 R{BED}
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="probing"

[gcode_macro _print_start_phase_probing]
description = Inserted by slicer at start of print. Performs probing (including
	mesh bed level) and other operations that should be run when the bed and
	chamber are stabilized at their target temps.
	Usage: See PRINT_START.
gcode = 
	_PRINT_START_PHASE_CHECK PHASE=probing
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set MESH_MIN = print.MESH_MIN|default(None) %}
	{% set MESH_MAX = print.MESH_MAX|default(None) %}
	
	{% if km.start_random_placement_max > 0 and print.PRINT_MIN and MESH_MIN %}
	{% set PRINT_MIN = print.PRINT_MIN.split(",")|map('float')|list %}
	{% set PRINT_MAX = print.PRINT_MAX.split(",")|map('float')|list %}
	{% set x_offset = (((km.print_max[0] - km.print_min[0] - PRINT_MAX[0] +
	PRINT_MIN[0] - 2 * km.start_random_placement_padding)|int,
	km.start_random_placement_max * 2)|min, 0)|max %}
	{% set y_offset = (((km.print_max[1] - km.print_min[1] - PRINT_MAX[1] +
	PRINT_MIN[1] - 2 * km.start_random_placement_padding)|int,
	km.start_random_placement_max * 2)|min, 0)|max %}
	{% if x_offset > 0 %}
	{% set x_offset = range(x_offset)|random + km.print_min[0] -
	PRINT_MIN[0] + km.start_random_placement_padding %}
	{% endif %}
	{% if y_offset > 0 %}
	{% set y_offset = range(y_offset)|random + km.print_min[1] -
	PRINT_MIN[1] + km.start_random_placement_padding %}
	{% endif %}
	
	
	{% set MESH_MIN = MESH_MIN.split(",")|map('float')|list %}
	{% set MESH_MAX = MESH_MAX.split(",")|map('float')|list %}
	{% set MESH_MIN_NEW = (MESH_MIN[0] + x_offset, MESH_MIN[1] + y_offset) %}
	{% set MESH_MAX_NEW = (MESH_MAX[0] + x_offset, MESH_MAX[1] + y_offset) %}
	{action_respond_info(
	"Relocating print origin from (%.3f,%.3f) "|format(*MESH_MIN) +
	"to (%.3f,%.3f)"|format(*MESH_MIN_NEW))}
	{% set MESH_MIN = (MESH_MIN_NEW[0], MESH_MIN_NEW[1])|join(',') %}
	{% set MESH_MAX = (MESH_MAX_NEW[0], MESH_MAX_NEW[1])|join(',') %}
	PRINT_START_SET PRINT_OFFSET={"%d,%d" % (x_offset,y_offset)}
	{% endif %}
	
	{% set EXTRUDER = print.EXTRUDER|int %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set start_level_bed_at_temp = km.start_level_bed_at_temp and
	not printer.bed_mesh.profile_name %}
	{% set start_home_z_at_temp = km.start_home_z_at_temp and
	not print.BED_AT_TARGET|int %}
	{% set actions_at_temp = start_level_bed_at_temp or
	km.start_quad_gantry_level_at_temp or
	km.start_z_tilt_adjust_at_temp or
	start_home_z_at_temp %}
	{% if actions_at_temp %}
	{% if km.start_extruder_probing_temp > 0 %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating RESET_STACK=1
	_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=2
	M109 R{km.start_extruder_probing_temp}
	{% else %}
	M104 S{EXTRUDER}
	{% endif %}
	{% if start_home_z_at_temp %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing RESET_STACK=1
	G28 Z
	{% endif %}
	{% if km.start_z_tilt_adjust_at_temp %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=calibrating_z RESET_STACK=1
	Z_TILT_ADJUST
	{% endif %}
	{% if km.start_quad_gantry_level_at_temp %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=leveling_gantry RESET_STACK=1
	QUAD_GANTRY_LEVEL
	{% endif %}
	{% if start_level_bed_at_temp %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=meshing RESET_STACK=1
	_km_mesh_if_needed {% if MESH_MIN %} MESH_MIN={MESH_MIN}{% endif
	%}{% if MESH_MAX %} MESH_MAX={MESH_MAX}{% endif %}
	{% endif %}
	{% if km.start_extruder_probing_temp > 0 %}
	M104 S{EXTRUDER}
	{% endif %}
	G4
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="extruder"

[gcode_macro _print_start_phase_extruder]
description = Inserted by slicer at start of print. Preheats the extruder.
	Usage: See PRINT_START.
gcode = 
	_PRINT_START_PHASE_CHECK PHASE=extruder
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set EXTRUDER = print.EXTRUDER|default(print.EXTRUDER_TEMP)|float %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	
	{% if EXTRUDER > 0 %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating RESET_STACK=1
	_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=ABOVE
	M109 S{EXTRUDER}
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="purge"

[gcode_macro _print_start_phase_purge]
description = Inserted by slicer at start of print. Generates purge lines.
	Usage: See PRINT_START.
gcode = 
	_PRINT_START_PHASE_CHECK PHASE=purge
	
	_KM_APPLY_PRINT_OFFSET
	
	_APPLY_BED_SURFACE_OFFSET
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set MESH_MIN = print.MESH_MIN|default(None) %}
	{% set MESH_MAX = print.MESH_MAX|default(None) %}
	{% set NOZZLE_SIZE = print.NOZZLE_SIZE|default(print.NOZZLE_SIZE)|
	default(printer.configfile.settings.extruder.nozzle_diameter)|float %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% if km.start_purge_length > 0.0 and printer.extruder.can_extrude %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=purging RESET_STACK=1
	DRAW_PURGE_LINE WIDTH="{NOZZLE_SIZE * 1.25}" HEIGHT="{NOZZLE_SIZE * 0.625
	}"{% if MESH_MIN %} PRINT_MIN={MESH_MIN}{% endif
	%}{% if MESH_MAX %} PRINT_MAX={MESH_MAX}{% endif %}
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="printing"
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=printing RESET_STACK=1

[gcode_macro _km_park_if_needed]
description = Parks the extruder if the current temperature of the supplied
	heater is not within the specified target range.
	Usage: _KM_PARK_IF_NEEDED HEATER=<heater> RANGE=[<percentage>|ABOVE|BELOW]
gcode = 
	
	{% set HEATER = params.HEATER if params.HEATER in
	printer.heaters.available_heaters else
	("heater_generic " ~ params.HEATER) %}
	{% set RANGE = (params.RANGE|default(1))|string|upper %}
	
	{% if printer[HEATER].target %}
	{% if RANGE == "ABOVE" %}
	{% if printer[HEATER].temperature < printer[HEATER].target %}
	PARK
	{% endif %}
	{% elif RANGE == "BELOW" %}
	{% if printer[HEATER].temperature > printer[HEATER].target %}
	PARK
	{% endif %}
	{% elif (printer[HEATER].temperature - printer[HEATER].target)|abs >
	(printer[HEATER].target * RANGE|float * 0.01)|abs %}
	PARK
	{% endif %}
	{% endif %}

[gcode_macro _km_apply_print_offset]
variable_offset = []
gcode = 
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% if params.RESET|default(0)|int and offset and
	not printer["gcode_macro _km_save_state"].is_ephemeral%}
	{% set PRINT_OFFSET = [offset.pop(0) * -1, offset.pop() * -1] %}
	{% elif print.PRINT_OFFSET and not offset and
	not printer["gcode_macro _km_save_state"].is_ephemeral %}
	{% set PRINT_OFFSET = print.PRINT_OFFSET.split(",")|map('float')|list %}
	{% set dummy = offset.extend(PRINT_OFFSET) %}
	{% endif %}
	
	{% if PRINT_OFFSET %}
	_KM_SET_GCODE_OFFSET_BASE {"X_ADJUST=%.2f Y_ADJUST=%.2f"|
	format(*PRINT_OFFSET)}
	{% endif %}

[gcode_macro _km_mesh_if_needed]
gcode = 
	
	
	
	{% if not printer.bed_mesh.profile_name %}
	BED_MESH_CALIBRATE_FAST {rawparams}
	{% endif %}

[gcode_macro print_start_set]
description = Inserted by slicer to set values used by PRINT_START.
	Usage: PRINT_START_SET <VARIABLE>=<value>
variable_print = {}
gcode = 
	{%for k in params %}
	{% set dummy = print.__setitem__(k|upper, params[k]) %}
	{% endfor %}

[gcode_macro _print_start_phase_check]
gcode = 
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set PRINT_START_PHASE = print.PRINT_START_PHASE|default("none") %}
	{% if PRINT_START_PHASE != params.PHASE %}
	
	SET_GCODE_VARIABLE MACRO=print_start_set VARIABLE=print VALUE="{{}}"
	{% if params.PHASE != 'none' %}
	{% set error = "PRINT_START phase error. Expected '%s' but found '%s'" %
	(params.PHASE, PRINT_START_PHASE) %}
	
	{% if not 'virtual_sdcard' in printer or
	not printer.virtual_sdcard.is_active or 'CANCEL_PRINT' not in
	printer.configfile.settings.virtual_sdcard.on_error_gcode|
	default("")|upper %}
	{action_respond_info(error)}
	CANCEL_PRINT
	{% else %}
	{action_raise_error(error)}
	{% endif %}
	{% else %}
	{ action_respond_info("Expected phase '%s' but found '%s'. Resetting."
	% (params.PHASE, PRINT_START_PHASE)) }
	{% endif %}
	{% endif %}

[gcode_macro print_end]
description = Inserted by slicer at end of print.
	Usage: PRINT_END
gcode = 
	_KM_CHECK_IS_PRINTING
	M400
	_PRINT_END_INNER
	
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% if km.start_clear_adjustments_at_end != 0 %}
	RESET_HEATER_SCALING
	RESET_FAN_SCALING
	M220 S100
	M221 S100
	{% endif %}
	_RESET_LAYER_GCODE
	_RESET_VELOCITY_LIMITS
	TURN_OFF_HEATERS
	M107; turn off fan
	{% if printer.bed_mesh %}BED_MESH_CLEAR{% endif %}
	
	{% if printer.toolhead.homed_axes|lower == "xyz" %}
	PARK Y="{km.start_end_park_y}"
	{% endif %}
	M84
	CLEAR_PAUSE
	SET_GCODE_VARIABLE MACRO=print_start_set VARIABLE=print VALUE="{{}}"
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready RESET_STACK=1

[gcode_macro _print_end_inner]
variable_cancelled = False
gcode = 
	SET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{False}"
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set toolhead = printer.toolhead %}
	{% set origin = printer.gcode_move.homing_origin%}
	{% set max_x = km.print_max[0] - origin.x %}
	{% set max_y = km.print_max[1] - origin.y %}
	{% set max_z = toolhead.axis_maximum.z - origin.z %}
	
	{% if not cancelled %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=completing
	{% endif %}
	
	{% if printer.extruder.can_extrude %}
	
	{% if not printer.pause_resume.is_paused and not cancelled and
	toolhead.homed_axes|lower == "xyz" %}
	{% set x_safe = (max_x - toolhead.position.x, 2.0)|min %}
	{% set y_safe = (max_y - toolhead.position.y, 2.0)|min %}
	{% set z_safe = (max_z - toolhead.position.z, 2.0)|min %}
	G91
	G0 Z{z_safe} E-1.0 F{km.travel_speed_z * 2}
	G0 X{x_safe} Y{y_safe} E-1.0 F{km.travel_speed_xy}
	
	_KM_APPLY_PRINT_OFFSET RESET=1
	{% endif %}
	
	
	G92 E0
	G1 E-5.0 F3600
	M400
	{% endif %}

[gcode_macro _km_check_is_printing]
variable_debug_state = False
description = Throws an error if print is not currently in progress.
gcode = 
	{% if not debug_state and
	printer.idle_timeout.state|string != "Printing" and
	not (printer.virtual_sdcard|default({})).is_active|default(False) and
	not printer.pause_resume.is_paused %}
	{ action_raise_error("No active print.") }
	{% endif %}

[gcode_macro _km_check_and_set_print_bounds]
description = Validates all print bounds and caches their values.
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set print = printer["gcode_macro print_start_set"].print %}
	
	
	{% if print.MESH_MIN %}
	{% set MESH_MIN = print.MESH_MIN.split(",")|map('float')|list %}
	{% set MESH_MAX = print.MESH_MAX.split(",")|map('float')|list %}
	{%if MESH_MIN[0] < km.print_min[0] or MESH_MIN[1] < km.print_min[1] %}
	{action_raise_error("MESH_MIN %s is outside the printable bounds" %
	(MESH_MIN|string, km.print_min|string))}
	{%elif MESH_MAX[0] > km.print_max[0] or MESH_MAX[1] > km.print_max[1] %}
	{action_raise_error("MESH_MAX %s is outside the printable bounds %s" %
	(MESH_MAX|string, km.print_max|string))}
	{% endif %}
	{% endif %}
	
	
	{% set points = [] %}
	{% if print.MODEL_MIN or print.MODEL_MAX %}
	{% set MODEL_MIN = print.MODEL_MIN.split(",")|map('float')|list %}
	{% set MODEL_MAX = print.MODEL_MAX.split(",")|map('float')|list %}
	{% set points = [MODEL_MIN, MODEL_MAX] %}
	{% endif %}
	{% if (printer.exclude_object|default({})).objects %}
	{% set points = printer.exclude_object.objects|selectattr('polygon')|
	map(attribute='polygon')|sum(start=points) %}
	{% set points_len = points|length %}
	{% if points_len >= 2 %}
	{% set x_coords = (points|map(attribute=0)|sort|list)[0::points_len-1] %}
	{% set y_coords = (points|map(attribute=1)|sort|list)[0::points_len-1] %}
	{% set MODEL_MIN = (x_coords[0],y_coords[0])|map('float')|list %}
	{% set MODEL_MAX = (x_coords[1],y_coords[1])|map('float')|list %}
	PRINT_START_SET MODEL_MIN="{MODEL_MIN|join(',')
	}" MODEL_MAX="{MODEL_MAX|join(',')}"
	{% endif %}
	{% endif %}
	
	{% if MODEL_MIN %}
	
	{% if MODEL_MIN[0] < km.print_min[0] or MODEL_MIN[1] < km.print_min[1] %}
	{action_raise_error("MODEL_MIN %s is outside the printable bounds" %
	(MODEL_MIN|string, km.print_min|string))}
	{% elif MODEL_MAX[0] > km.print_max[0] or MODEL_MAX[1] > km.print_max[1] %}
	{action_raise_error("MODEL_MAX %s is outside the printable bounds %s" %
	(MODEL_MAX|string, km.print_max|string))}
	{% endif %}
	{% endif %}
	
	
	{% if MESH_MIN and MODEL_MIN %}
	PRINT_START_SET PRINT_MIN="{((MODEL_MIN[0],MESH_MIN[0])|min,
	(MODEL_MIN[1],MESH_MIN[1])|min)|join(',')
	}" PRINT_MAX="{((MODEL_MAX[0],MESH_MAX[0])|max,
	(MODEL_MAX[1],MESH_MAX[1])|max)|join(',')}"
	{% else %}
	PRINT_START_SET PRINT_MIN="{km.print_min|join(',')
	}" PRINT_MAX="{km.print_max|join(',')}"
	{% endif %}

[gcode_macro _km_save_state]
description = Tracks gcode state.
variable_state_set = {}
variable_is_ephemeral = 0
gcode = 
	{% if params.SAVE|int %}
	{% set dummy = state_set.__setitem__(params.NAME, None) %}
	{% else %}
	{% set dummy = state_set.__delitem__(params.NAME) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=_km_save_state VARIABLE=is_ephemeral VALUE="{
	1 if state_set|length > 0 else 0 }"

[gcode_macro save_gcode_state]
description = Wraps SAVE_GCODE_STATE to track persistence state.
	Usage: See Klipper documentation
rename_existing = _KM_SAVE_GCODE_STATE
gcode = 
	_KM_SAVE_GCODE_STATE {rawparams}
	{% set NAME = params.NAME|default("default") %}
	_km_save_state NAME={NAME} SAVE=1

[gcode_macro restore_gcode_state]
description = Wraps RESTORE_GCODE_STATE to track persistence state.
	Usage: See Klipper documentation
rename_existing = _KM_RESTORE_GCODE_STATE
gcode = 
	_KM_RESTORE_GCODE_STATE {rawparams}
	{% set NAME = params.NAME|default("default") %}
	_km_save_state NAME={NAME} SAVE=0

[gcode_macro _abort_on_gcode_state]
gcode = 
	{% set save_state = printer["gcode_macro _km_save_state"] %}
	{% if save_state.is_ephemeral %}
	{action_raise_error("Encountered unexpected save state " +
	save_state.state_set|list|sort|string)}
	{% endif %}

[gcode_macro _km_print_status]
variable_last_status = 'none'
variable_status_stack = []
variable_command_list = {}
variable_status_list = [
	'ready',
	'filament_load',
	'filament_unload',
	'bed_heating',
	'chamber_heating',
	'homing',
	'leveling_gantry',
	'calibrating_z',
	'meshing',
	'extruder_heating',
	'purging',
	'printing',
	'pausing',
	'cancelling',
	'completing',
	]
gcode = 
	{% set ACTION = params.ACTION|trim|upper %}
	{% set STATUS = params.STATUS|default("")|trim|lower %}
	
	
	{% if ACTION == "ADD_EVENT" %}
	{% set COMMAND = params.COMMAND %}
	{% set ARGS = params.ARGS|default(0)|int != 0 %}
	{% set TYPE = params.TYPE|default('ENTER')|trim|upper %}
	{% set WHEN = params.WHEN|default('PRINTING')|trim|upper %}
	{% set FILTER_ENTER =
	(params.FILTER_ENTER|default("")|trim|lower).split(',')|
	select()|unique|list %}
	{% set FILTER_LEAVE =
	(params.FILTER_LEAVE|default("")|trim|lower).split(',')|
	select()|unique|list %}
	
	{% set STATUSES = STATUS.split(',')|map('trim')|list %}
	{% for s in (STATUSES if STATUSES[0] != 'all' else status_list) %}
	{% if not s in command_list %}
	{% set dummy = command_list.__setitem__(s,[]) %}
	{% endif %}
	{% set dummy = command_list[s].append({'cmd':COMMAND, 'args':ARGS,
	'type':TYPE, 'when':WHEN,
	'filt_e':FILTER_ENTER,
	'filt_l':FILTER_LEAVE}) %}
	{% endfor %}
	
	
	{% elif ACTION == "CHANGE" %}
	{% if params.RESET_STACK|default(0)|int %}
	{% for dummy in range(status_stack|length) %}
	{% set dummy = status_stack.pop() %}
	{% endfor %}
	
	
	{% elif STATUS == "pop_status" %}
	{% set STATUS = (status_stack|default(['ready'], True)).pop() %}
	{% endif %}
	
	{% if STATUS not in status_list %}
	{action_raise_error("Status '%s' not valid."|format(STATUS))}
	{% endif %}
	
	{% if STATUS != last_status %}
	{% set is_printing =
	printer["gcode_macro print_start_set"].print.PRINT_START_PHASE|
	default("")|length != 0 %}
	{% set print_states = ('ALWAYS', 'PRINTING' if is_printing else 'IDLE') %}
	
	{% for c in command_list[last_status]|default([]) %}
	{% if c.type in ('BOTH','LEAVE') and c.when in print_states and
	(not c.filt_l or STATUS in c.filt_l) %}
	M400
	{c.cmd}{% if c.args %} TYPE=LEAVE WHEN={print_states[1]
	} LAST_STATUS={last_status} NEXT_STATUS={STATUS}{% endif %}
	{% endif %}
	{% endfor %}
	
	{% for c in command_list[STATUS]|default([]) %}
	{% if c.type in ('BOTH','ENTER') and c.when in print_states and
	(not c.filt_e or STATUS in c.filt_e) %}
	M400
	{c.cmd}{% if c.args %} TYPE=ENTER WHEN={print_states[1]
	} LAST_STATUS={last_status} NEXT_STATUS={STATUS}{% endif %}
	{% endif %}
	{% endfor %}
	SET_GCODE_VARIABLE MACRO=_km_print_status VARIABLE=last_status VALUE="'{
	STATUS}'"
	{% endif %}
	
	
	{% elif ACTION == "PUSH_STATUS" %}
	{% set dummy = status_stack.append(last_status) %}
	
	
	{% else %}
	{action_raise_error("Action '%s' not valid."|format(ACTION))}
	{% endif %}

[gcode_macro gcode_on_print_status]
description = Adds a gcode command for a status event.
	Usage: GCODE_ON_PRINT_STATUS STATUS=<status> COMMAND=<gcode> [ARGS=<1|0>]
	[WHEN=<PRINTING|IDLE|ALWAYS>]
	[TYPE=<ENTER|LEAVE|BOTH>]
	[FILTER_ENTER=<status list>]
	[FILTER_LEAVE=<status list>]
gcode = 
	{% set STATUS = (params.STATUS|lower).split(',')|map('trim')|list %}
	{% set TYPE = params.TYPE|default('ENTER')|trim|upper %}
	{% set WHEN = params.WHEN|default('PRINTING')|trim|upper %}
	{% set FILTER_ENTER =
	(params.FILTER_ENTER|default("")|trim|lower).split(',')|select()|list %}
	{% set FILTER_LEAVE =
	(params.FILTER_LEAVE|default("")|trim|lower).split(',')|select()|list %}
	
	
	{% set status_list = printer["gcode_macro _km_print_status"].status_list %}
	{% for s in STATUS %}
	{% if not (s in status_list or s == 'all' and STATUS|length == 1) %}
	{action_raise_error("STATUS parameter '%s' not valid."|format(s))}
	{% endif %}
	{% endfor %}
	
	{% if TYPE not in ('ENTER', 'LEAVE', 'BOTH') %}
	{action_raise_error("TYPE paramater '%s' not valid."|format(TYPE))}
	{% elif WHEN not in ('PRINTING', 'IDLE', 'ALWAYS') %}
	{action_raise_error("WHEN parameter '%s' not valid."|format(WHEN))}
	{% elif TYPE == 'ENTER' and FILTER_LEAVE %}
	{action_raise_error("FILTER_LEAVE not valid with TYPE=ENTER.")}
	{% elif TYPE == 'LEAVE' and FILTER_ENTER %}
	{action_raise_error("FILTER_ENTER not valid with TYPE=LEAVE.")}
	{% endif %}
	{% for f in FILTER_ENTER %}
	{% if f not in status_list %}
	{action_raise_error("FILTER_ENTER parameter '%s' not valid."|format(f))}
	{% endif %}
	{% endfor %}
	{% for f in FILTER_LEAVE %}
	{% if f not in status_list %}
	{action_raise_error("FILTER_LEAVE parameter '%s' not valid."|format(f))}
	{% endif %}
	{% endfor %}
	
	
	_KM_PRINT_STATUS ACTION=ADD_EVENT {rawparams}

[gcode_macro m201]
description = Sets maximum accelleration.
	Usage: M201 [X<accel>] [Y<accel>]
variable_max_accel = 1.7976931348623157e+308
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% if 'X' in params or 'Y' in params %}
	{% set accel = (params.X|default(params.Y)|float,
	params.Y|default(params.X)|float)|min %}
	SET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{accel}"
	{% else %}
	SET_VELOCITY_LIMIT
	{% endif %}

[gcode_macro m203]
description = Sets maximum velocity.
	Usage: M203 [X<velocity>] [Y<velocity>]
gcode = 
	{% if 'X' in params or 'Y' in params %}
	{% set velocity = (params.X|default(params.Y)|float,
	params.Y|default(params.X)|float)|min %}
	SET_VELOCITY_LIMIT VELOCITY="{velocity}"
	{% else %}
	SET_VELOCITY_LIMIT
	{% endif %}

[gcode_macro m205]
description = Sets square corner velocity.
	Usage: M203 [X<velocity>] [Y<velocity>]
gcode = 
	{% if 'X' in params or 'Y' in params %}
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY="{
	(params.X|default(0)|float, params.Y|default(0)|float)|min}"
	{% else %}
	SET_VELOCITY_LIMIT
	{% endif %}

[gcode_macro m900]
description = Sets pressure advance.
	Usage: M900 [K<advance>] [T<extruder_index>]
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% if km.pressure_advance_scale > 0.0 %}
	{% set extruder = "extruder" ~ params.T|replace('0', '')
	if "T" in params else printer.toolhead.extruder %}
	{% if 'K' in params %}
	SET_PRESSURE_ADVANCE EXTRUDER="{extruder}" ADVANCE="{
	params.K|float * km.pressure_advance_scale}"
	{% endif %}
	{% endif %}

[gcode_macro _reset_velocity_limits]
description = Sets maximum accelleration.
	Usage: M204 [S<accel>] [P<accel> T<accel>]
gcode = 
	SET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{1.7976931348623157e+308}"

[gcode_macro bed_mesh_calibrate]
rename_existing = _KM_BED_MESH_CALIBRATE_BASE
description = Wraps BED_MESH_CALIBRATE, scaling probe count to specified area.
	Usage: See Klipper documentation.
gcode = 
	BED_MESH_CALIBRATE_FAST{%for k in params%}{' '~k~'="'~params[k]~'"'}{%endfor%}

[gcode_macro g29]
gcode = 
	BED_MESH_CALIBRATE

[idle_timeout]
gcode = 
	_KM_IDLE_TIMEOUT

[respond]

[gcode_macro PRINT_START]
rename_existing = KM_PRINT_START
gcode = 
	
	STATUS_HOMING
	KM_PRINT_START {rawparams}
	STATUS_PRINTING

[board_pins EBB36_G0B1_v1.2]
mcu = ebbcan
aliases = 
aliases_step = 
	EXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15
aliases_limitsw = 
	LIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6
aliases_bltouch = 
	PROBE_1=PB9,PROBE_2=PB8
aliases_fans = 
	FAN0=PA1,FAN1=PA0
aliases_thermistors = 
	TH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7
aliases_heaters = 
	HE0=PB13
aliases_rgb = 
	RGBLED=PD3
aliases_adxl = 
	ADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11
aliases_i2c = 
	AUX0=PB3,AUX1=PB4

[neopixel sb_leds]
pin = ebbcan:RGBLED
chain_count = 1
color_order = GRB
initial_red = 0.0
initial_green = 0.0
initial_blue = 0.0
initial_white = 1.0

[save_variables]
filename = ~/printer_data/variables.cfg

[mcu CB1]
serial = /tmp/klipper_host_mcu

[mcu]
canbus_uuid = f94e10a9add8

[mcu ebbcan]
canbus_uuid = 57244ec148c0

[printer]
kinematics = corexy
max_velocity = 600
max_accel = 10000
max_accel_to_decel = 5000
max_z_velocity = 5
max_z_accel = 100

[stepper_x]
step_pin = PE2
dir_pin = !PB4
enable_pin = !PC11
microsteps = 16
rotation_distance = 40
endstop_pin = !ebbcan:LIMIT_2
position_endstop = 220
position_min = -4
position_max = 220
homing_speed = 50

[tmc2209 stepper_x]
uart_pin = PC10
diag_pin = PF3
run_current = 1.1

[tmc2209 stepper_y]
uart_pin = PF13
diag_pin = PF4
run_current = 1.1

[tmc2209 stepper_z]
uart_pin = PF9
diag_pin = PF5
run_current = 0.650

[tmc2209 extruder]
uart_pin = ebbcan:EXT_UART
diag_pin = ebbcan:LIMIT_3
run_current = 0.650

[stepper_y]
step_pin = PF12
dir_pin = !PF11
enable_pin = !PB3
microsteps = 16
rotation_distance = 40
endstop_pin = ^PF3
position_endstop = 220
position_min = -4
position_max = 220
homing_speed = 50

[stepper_z]
step_pin = PD7
dir_pin = !PD6
enable_pin = !PF10
microsteps = 16
rotation_distance = 8
endstop_pin = probe:z_virtual_endstop
position_max = 300
position_min = -3

[heater_bed]
heater_pin = PB7
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PA0
min_temp = 0
max_temp = 130
control = pid
pid_kp = 63.528
pid_ki = 0.875
pid_kd = 1153.041

[temperature_sensor raspberry_pi]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor mcu_temp]
sensor_type = temperature_mcu
min_temp = 0
max_temp = 100

[controller_fan MCU_Fan]
pin = PE6
heater = extruder
fan_speed = 1

[heater_fan heatbreak_cooling_fan]
pin = ebbcan:FAN0
kick_start_time = 0.25
heater = extruder
heater_temp = 50.0
fan_speed = 1

[fan]
pin = ebbcan:FAN1

[safe_z_home]
home_xy_position = 140, 140
speed = 100
z_hop = 10
z_hop_speed = 20

[extruder]
step_pin = ebbcan:EXT_STEP
dir_pin = ebbcan:EXT_DIR
enable_pin = !ebbcan:EXT_EN
microsteps = 16
rotation_distance = 4.71
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.750
max_extrude_only_distance = 101.0
heater_pin = ebbcan:HE0
sensor_type = ATC Semitec 104NT-4-R025H42G
sensor_pin = ebbcan:TH0
min_temp = 0
max_temp = 300
max_extrude_cross_section = 5
pressure_advance = 0.02
control = pid
pid_kp = 20.603
pid_ki = 0.988
pid_kd = 107.392

[bltouch]
sensor_pin = ebbcan:PROBE_2
control_pin = ebbcan:PROBE_1
x_offset = -40
y_offset = -17
samples = 2
samples_tolerance = 0.015
samples_tolerance_retries = 5
z_offset = 2.849

[bed_mesh]
speed = 100
horizontal_move_z = 5
mesh_min = 10, 27
mesh_max = 173, 200
probe_count = 5, 5
algorithm = bicubic
fade_start = 1
fade_end = 10

[bed_screws]
screw1 = 55,55
screw2 = 200,55
screw3 = 200,205
screw4 = 55,205

[screws_tilt_adjust]
screw1 = 65,55
screw1_name = front left screw
screw2 = 218,55
screw2_name = front right screw
screw3 = 218,215
screw3_name = rear right screw
screw4 = 65,215
screw4_name = rear left screw
horizontal_move_z = 10
speed = 50
screw_thread = CW-M4

[display]
lcd_type = st7920
cs_pin = PB12
sclk_pin = PB13
sid_pin = PB15
encoder_pins = ^PB14, ^PB10
click_pin = ^!PB2

[exclude_object]

[firmware_retraction]
retract_length = 0.4
retract_speed = 20
unretract_extra_length = 0
unretract_speed = 10

[input_shaper]
shaper_type_x = 2hump_ei
shaper_freq_x = 86.2
shaper_type_y = zv
shaper_freq_y = 44.8

[gcode_arcs]
resolution = 1.0

[adxl345]
cs_pin = ebbcan:ADXL_CS
spi_software_sclk_pin = ebbcan:ADXL_SCLK
spi_software_mosi_pin = ebbcan:ADXL_MOSI
spi_software_miso_pin = ebbcan:ADXL_MISO

[resonance_tester]
accel_chip = adxl345
probe_points = 
	120,120,20

[bed_mesh default]
version = 1
points = 
	0.027500, 0.058750, 0.091250, 0.182500
	-0.003750, 0.061250, 0.072500, 0.125000
	0.021250, 0.016250, 0.013750, 0.033750
	-0.023750, -0.018750, -0.036250, -0.037500
x_count = 4
y_count = 4
mesh_x_pps = 2
mesh_y_pps = 2
algo = bicubic
tension = 0.2
min_x = 48.75
max_x = 171.24
min_y = 48.75
max_y = 171.24
=======================
Extruder max_extrude_ratio=2.078758
mcu 'mcu': Starting CAN connect
Created a socket
webhooks client 281473552679312: New connection
webhooks client 281473552679312: Client info {'program': 'Moonraker', 'version': 'v0.8.0-92-g504a3a7'}
Loaded MCU 'mcu' 109 commands (v0.11.0-241-gffb5105b / gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2)
MCU 'mcu' config: ADC_MAX=4095 BUS_PINS_i2c1_PA9_PA10=PA9,PA10 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_i2c2_PB13_PB14=PB13,PB14 BUS_PINS_i2c3_PB3_PB4=PB3,PB4 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3=PB4,PB5,PB3 CANBUS_BRIDGE=1 CLOCK_FREQ=64000000 MCU=stm32g0b1xx PWM_MAX=255 RECEIVE_WINDOW=192 RESERVE_PINS_CAN=PD12,PD13 RESERVE_PINS_USB=PA11,PA12 RESERVE_PINS_crystal=PF0,PF1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
mcu 'CB1': Starting connect
Loaded MCU 'CB1' 113 commands (v0.11.0-241-gffb5105b / gcc: (Debian 10.2.1-6) 10.2.1 20210110 binutils: (GNU Binutils for Debian) 2.35.2)
MCU 'CB1' config: ADC_MAX=4095 CLOCK_FREQ=50000000 MCU=linux PCA9685_MAX=4096 PWM_MAX=32768 STATS_SUMSQ_BASE=256
mcu 'ebbcan': Starting CAN connect
Created a socket
mcu 'ebbcan': got {'count': 522, 'sum': 605810, 'sumsq': 5688728, '#name': 'stats', '#sent_time': 251.429132827, '#receive_time': 251.44008436899998}
Loaded MCU 'ebbcan' 109 commands (v0.11.0-241-gffb5105b / gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2)
MCU 'ebbcan' config: ADC_MAX=4095 BUS_PINS_i2c1_PA9_PA10=PA9,PA10 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_i2c2_PB13_PB14=PB13,PB14 BUS_PINS_i2c3_PB3_PB4=PB3,PB4 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3=PB4,PB5,PB3 CANBUS_FREQUENCY=1000000 CLOCK_FREQ=64000000 MCU=stm32g0b1xx PWM_MAX=255 RECEIVE_WINDOW=192 RESERVE_PINS_CAN=PB0,PB1 RESERVE_PINS_crystal=PF0,PF1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
mcu_temperature 'mcu' nominal base=-268.847262 slope=1298.126801
Sending MCU 'mcu' printer configuration...
Configured MCU 'mcu' (1024 moves)
Sending MCU 'CB1' printer configuration...
Configured MCU 'CB1' (1024 moves)
Sending MCU 'ebbcan' printer configuration...
Configured MCU 'ebbcan' (1024 moves)
Starting heater checks for heater_bed
bed_mesh: generated points
Index |  Tool Adjusted  |   Probe
  0   | (50.0, 44.0)    | (10.0, 27.0)
  1   | (90.8, 44.0)    | (50.8, 27.0)
  2   | (131.5, 44.0)   | (91.5, 27.0)
  3   | (172.2, 44.0)   | (132.2, 27.0)
  4   | (213.0, 44.0)   | (173.0, 27.0)
  5   | (213.0, 87.2)   | (173.0, 70.2)
  6   | (172.2, 87.2)   | (132.2, 70.2)
  7   | (131.5, 87.2)   | (91.5, 70.2)
  8   | (90.8, 87.2)    | (50.8, 70.2)
  9   | (50.0, 87.2)    | (10.0, 70.2)
  10  | (50.0, 130.5)   | (10.0, 113.5)
  11  | (90.8, 130.5)   | (50.8, 113.5)
  12  | (131.5, 130.5)  | (91.5, 113.5)
  13  | (172.2, 130.5)  | (132.2, 113.5)
  14  | (213.0, 130.5)  | (173.0, 113.5)
  15  | (213.0, 173.8)  | (173.0, 156.8)
  16  | (172.2, 173.8)  | (132.2, 156.8)
  17  | (131.5, 173.8)  | (91.5, 156.8)
  18  | (90.8, 173.8)   | (50.8, 156.8)
  19  | (50.0, 173.8)   | (10.0, 156.8)
  20  | (50.0, 217.0)   | (10.0, 200.0)
  21  | (90.8, 217.0)   | (50.8, 200.0)
  22  | (131.5, 217.0)  | (91.5, 200.0)
  23  | (172.2, 217.0)  | (132.2, 200.0)
  24  | (213.0, 217.0)  | (173.0, 200.0)
Starting heater checks for extruder
Stats 252.9: gcodein=0  mcu: mcu_awake=0.044 mcu_task_avg=0.000014 mcu_task_stddev=0.000009 bytes_write=2930 bytes_read=5691 bytes_retransmit=0 bytes_invalid=0 send_seq=218 receive_seq=215 retransmit_seq=0 srtt=0.002 rttvar=0.002 rto=0.025 ready_bytes=1814 upcoming_bytes=25 freq=64004631 CB1: mcu_awake=0.004 mcu_task_avg=0.000025 mcu_task_stddev=0.000015 bytes_write=819 bytes_read=4523 bytes_retransmit=0 bytes_invalid=0 send_seq=112 receive_seq=112 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000681 adj=49998255 ebbcan: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=1428 bytes_read=4769 bytes_retransmit=0 bytes_invalid=0 send_seq=147 receive_seq=147 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000532 adj=64002397  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=58.9 mcu_temp: temp=34.5 sysload=0.41 cputime=35.268 memavail=692100 print_time=0.010 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
webhooks: registering remote method 'shutdown_machine' for connection id: 281473552679312
webhooks: registering remote method 'reboot_machine' for connection id: 281473552679312
webhooks: registering remote method 'pause_job_queue' for connection id: 281473552679312
webhooks: registering remote method 'start_job_queue' for connection id: 281473552679312
Active bed surface: default; offset: -0.050
Stats 254.1: gcodein=0  mcu: mcu_awake=0.044 mcu_task_avg=0.000014 mcu_task_stddev=0.000009 bytes_write=4960 bytes_read=6023 bytes_retransmit=0 bytes_invalid=0 send_seq=256 receive_seq=256 retransmit_seq=0 srtt=0.003 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64002470 CB1: mcu_awake=0.004 mcu_task_avg=0.000025 mcu_task_stddev=0.000015 bytes_write=825 bytes_read=4539 bytes_retransmit=0 bytes_invalid=0 send_seq=113 receive_seq=113 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50001733 adj=49995887 ebbcan: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=1434 bytes_read=4845 bytes_retransmit=0 bytes_invalid=0 send_seq=148 receive_seq=148 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000508 adj=63991851  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=57.5 mcu_temp: temp=34.6 sysload=0.41 cputime=35.612 memavail=694040 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 255.1: gcodein=0  mcu: mcu_awake=0.044 mcu_task_avg=0.000014 mcu_task_stddev=0.000009 bytes_write=4976 bytes_read=6126 bytes_retransmit=0 bytes_invalid=0 send_seq=258 receive_seq=257 retransmit_seq=0 srtt=0.003 rttvar=0.002 rto=0.025 ready_bytes=5 upcoming_bytes=0 freq=64001884 CB1: mcu_awake=0.004 mcu_task_avg=0.000025 mcu_task_stddev=0.000015 bytes_write=831 bytes_read=4555 bytes_retransmit=0 bytes_invalid=0 send_seq=114 receive_seq=114 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50001195 adj=50001586 ebbcan: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=1440 bytes_read=4906 bytes_retransmit=0 bytes_invalid=0 send_seq=149 receive_seq=149 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000192 adj=63997316  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=59.3 mcu_temp: temp=34.6 sysload=0.41 cputime=35.677 memavail=687812 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 256.1: gcodein=0  mcu: mcu_awake=0.044 mcu_task_avg=0.000014 mcu_task_stddev=0.000009 bytes_write=5001 bytes_read=6244 bytes_retransmit=0 bytes_invalid=0 send_seq=261 receive_seq=261 retransmit_seq=0 srtt=0.002 rttvar=0.002 rto=0.025 ready_bytes=5 upcoming_bytes=0 freq=64001531 CB1: mcu_awake=0.004 mcu_task_avg=0.000025 mcu_task_stddev=0.000015 bytes_write=837 bytes_read=4571 bytes_retransmit=0 bytes_invalid=0 send_seq=115 receive_seq=115 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000897 adj=50001036 ebbcan: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=1446 bytes_read=4967 bytes_retransmit=0 bytes_invalid=0 send_seq=150 receive_seq=150 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000236 adj=63998363  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=58.2 mcu_temp: temp=34.6 sysload=0.37 cputime=35.713 memavail=687816 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 257.1: gcodein=0  mcu: mcu_awake=0.110 mcu_task_avg=0.000038 mcu_task_stddev=0.000167 bytes_write=5036 bytes_read=6408 bytes_retransmit=0 bytes_invalid=0 send_seq=265 receive_seq=265 retransmit_seq=0 srtt=0.001 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001348 CB1: mcu_awake=0.004 mcu_task_avg=0.000025 mcu_task_stddev=0.000015 bytes_write=843 bytes_read=4587 bytes_retransmit=0 bytes_invalid=0 send_seq=116 receive_seq=116 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000758 adj=50000694 ebbcan: mcu_awake=0.006 mcu_task_avg=0.000016 mcu_task_stddev=0.000032 bytes_write=1452 bytes_read=5058 bytes_retransmit=0 bytes_invalid=0 send_seq=151 receive_seq=151 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000208 adj=63999329  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=57.0 mcu_temp: temp=35.0 sysload=0.37 cputime=35.751 memavail=691368 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 258.1: gcodein=0  mcu: mcu_awake=0.110 mcu_task_avg=0.000038 mcu_task_stddev=0.000167 bytes_write=5042 bytes_read=6511 bytes_retransmit=0 bytes_invalid=0 send_seq=266 receive_seq=266 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001279 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000012 bytes_write=849 bytes_read=4616 bytes_retransmit=0 bytes_invalid=0 send_seq=117 receive_seq=117 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000797 adj=50000479 ebbcan: mcu_awake=0.006 mcu_task_avg=0.000016 mcu_task_stddev=0.000032 bytes_write=1458 bytes_read=5119 bytes_retransmit=0 bytes_invalid=0 send_seq=152 receive_seq=152 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000337 adj=63999608  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=56.7 mcu_temp: temp=34.7 sysload=0.37 cputime=35.796 memavail=691368 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 259.1: gcodein=0  mcu: mcu_awake=0.110 mcu_task_avg=0.000038 mcu_task_stddev=0.000167 bytes_write=5048 bytes_read=6614 bytes_retransmit=0 bytes_invalid=0 send_seq=267 receive_seq=267 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001265 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000012 bytes_write=855 bytes_read=4632 bytes_retransmit=0 bytes_invalid=0 send_seq=118 receive_seq=118 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50001110 adj=50000554 ebbcan: mcu_awake=0.006 mcu_task_avg=0.000016 mcu_task_stddev=0.000032 bytes_write=1464 bytes_read=5180 bytes_retransmit=0 bytes_invalid=0 send_seq=153 receive_seq=153 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000470 adj=63999971  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=55.5 mcu_temp: temp=34.7 sysload=0.37 cputime=35.859 memavail=690908 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 260.1: gcodein=0  mcu: mcu_awake=0.110 mcu_task_avg=0.000038 mcu_task_stddev=0.000167 bytes_write=5054 bytes_read=6746 bytes_retransmit=0 bytes_invalid=0 send_seq=268 receive_seq=268 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001358 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000012 bytes_write=861 bytes_read=4648 bytes_retransmit=0 bytes_invalid=0 send_seq=119 receive_seq=119 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000936 adj=50001353 ebbcan: mcu_awake=0.006 mcu_task_avg=0.000016 mcu_task_stddev=0.000032 bytes_write=1470 bytes_read=5256 bytes_retransmit=0 bytes_invalid=0 send_seq=154 receive_seq=154 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000417 adj=64000173  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=55.7 mcu_temp: temp=34.8 sysload=0.37 cputime=35.901 memavail=691108 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 261.1: gcodein=0  mcu: mcu_awake=0.110 mcu_task_avg=0.000038 mcu_task_stddev=0.000167 bytes_write=5060 bytes_read=6849 bytes_retransmit=0 bytes_invalid=0 send_seq=269 receive_seq=269 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001331 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000012 bytes_write=867 bytes_read=4664 bytes_retransmit=0 bytes_invalid=0 send_seq=120 receive_seq=120 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000780 adj=50000229 ebbcan: mcu_awake=0.006 mcu_task_avg=0.000016 mcu_task_stddev=0.000032 bytes_write=1476 bytes_read=5317 bytes_retransmit=0 bytes_invalid=0 send_seq=155 receive_seq=155 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000377 adj=63999450  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=56.1 mcu_temp: temp=34.9 sysload=0.34 cputime=35.932 memavail=691172 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 262.1: gcodein=0  mcu: mcu_awake=0.006 mcu_task_avg=0.000015 mcu_task_stddev=0.000011 bytes_write=5072 bytes_read=6983 bytes_retransmit=0 bytes_invalid=0 send_seq=271 receive_seq=271 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001280 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000012 bytes_write=873 bytes_read=4680 bytes_retransmit=0 bytes_invalid=0 send_seq=121 receive_seq=121 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000760 adj=49999669 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1482 bytes_read=5392 bytes_retransmit=0 bytes_invalid=0 send_seq=156 receive_seq=156 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000405 adj=63999313  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=55.3 mcu_temp: temp=34.8 sysload=0.34 cputime=35.987 memavail=691376 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 263.1: gcodein=0  mcu: mcu_awake=0.006 mcu_task_avg=0.000015 mcu_task_stddev=0.000011 bytes_write=5078 bytes_read=7115 bytes_retransmit=0 bytes_invalid=0 send_seq=272 receive_seq=272 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001271 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000014 bytes_write=879 bytes_read=4709 bytes_retransmit=0 bytes_invalid=0 send_seq=122 receive_seq=122 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000743 adj=49999769 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1488 bytes_read=5468 bytes_retransmit=0 bytes_invalid=0 send_seq=157 receive_seq=157 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000425 adj=63999546  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=54.6 mcu_temp: temp=35.1 sysload=0.34 cputime=36.052 memavail=691432 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 264.1: gcodein=0  mcu: mcu_awake=0.006 mcu_task_avg=0.000015 mcu_task_stddev=0.000011 bytes_write=5084 bytes_read=7218 bytes_retransmit=0 bytes_invalid=0 send_seq=273 receive_seq=273 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001286 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000014 bytes_write=885 bytes_read=4725 bytes_retransmit=0 bytes_invalid=0 send_seq=123 receive_seq=123 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000729 adj=49999727 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1494 bytes_read=5529 bytes_retransmit=0 bytes_invalid=0 send_seq=158 receive_seq=158 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000431 adj=63999549  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=54.6 mcu_temp: temp=34.9 sysload=0.34 cputime=36.111 memavail=691432 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 265.1: gcodein=0  mcu: mcu_awake=0.006 mcu_task_avg=0.000015 mcu_task_stddev=0.000011 bytes_write=5090 bytes_read=7321 bytes_retransmit=0 bytes_invalid=0 send_seq=274 receive_seq=274 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001257 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000014 bytes_write=891 bytes_read=4741 bytes_retransmit=0 bytes_invalid=0 send_seq=124 receive_seq=124 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000706 adj=49999628 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1500 bytes_read=5590 bytes_retransmit=0 bytes_invalid=0 send_seq=159 receive_seq=159 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000394 adj=63999416  heater_bed: target=0 temp=26.0 pwm=0.000 raspberry_pi: temp=54.8 mcu_temp: temp=35.1 sysload=0.34 cputime=36.153 memavail=690948 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 266.1: gcodein=0  mcu: mcu_awake=0.006 mcu_task_avg=0.000015 mcu_task_stddev=0.000011 bytes_write=5096 bytes_read=7453 bytes_retransmit=0 bytes_invalid=0 send_seq=275 receive_seq=275 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001234 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000014 bytes_write=897 bytes_read=4757 bytes_retransmit=0 bytes_invalid=0 send_seq=125 receive_seq=125 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000656 adj=49999648 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1506 bytes_read=5666 bytes_retransmit=0 bytes_invalid=0 send_seq=160 receive_seq=160 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000422 adj=63999318  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=56.4 mcu_temp: temp=34.8 sysload=0.31 cputime=36.189 memavail=690956 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 267.1: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5121 bytes_read=7581 bytes_retransmit=0 bytes_invalid=0 send_seq=278 receive_seq=278 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001234 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000014 bytes_write=903 bytes_read=4773 bytes_retransmit=0 bytes_invalid=0 send_seq=126 receive_seq=126 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000648 adj=49999526 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1512 bytes_read=5741 bytes_retransmit=0 bytes_invalid=0 send_seq=161 receive_seq=161 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000422 adj=63999507  heater_bed: target=0 temp=26.0 pwm=0.000 raspberry_pi: temp=56.0 mcu_temp: temp=34.9 sysload=0.31 cputime=36.247 memavail=690736 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 268.1: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5165 bytes_read=7704 bytes_retransmit=0 bytes_invalid=0 send_seq=283 receive_seq=283 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001233 CB1: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000017 bytes_write=909 bytes_read=4802 bytes_retransmit=0 bytes_invalid=0 send_seq=127 receive_seq=127 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000642 adj=49999530 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1518 bytes_read=5802 bytes_retransmit=0 bytes_invalid=0 send_seq=162 receive_seq=162 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000425 adj=63999427  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=54.5 mcu_temp: temp=35.0 sysload=0.31 cputime=36.311 memavail=691172 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 269.1: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5190 bytes_read=7846 bytes_retransmit=0 bytes_invalid=0 send_seq=286 receive_seq=286 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001239 CB1: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000017 bytes_write=915 bytes_read=4818 bytes_retransmit=0 bytes_invalid=0 send_seq=128 receive_seq=128 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000637 adj=49999541 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1524 bytes_read=5878 bytes_retransmit=0 bytes_invalid=0 send_seq=163 receive_seq=163 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000420 adj=63999388  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=54.5 mcu_temp: temp=35.0 sysload=0.31 cputime=36.376 memavail=690568 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 270.1: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5196 bytes_read=7949 bytes_retransmit=0 bytes_invalid=0 send_seq=287 receive_seq=287 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001232 CB1: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000017 bytes_write=921 bytes_read=4834 bytes_retransmit=0 bytes_invalid=0 send_seq=129 receive_seq=129 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000605 adj=49999522 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1530 bytes_read=5939 bytes_retransmit=0 bytes_invalid=0 send_seq=164 receive_seq=164 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000407 adj=63999281  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=55.0 mcu_temp: temp=35.1 sysload=0.31 cputime=36.418 memavail=690432 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 271.1: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5202 bytes_read=8052 bytes_retransmit=0 bytes_invalid=0 send_seq=288 receive_seq=288 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001220 CB1: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000017 bytes_write=927 bytes_read=4850 bytes_retransmit=0 bytes_invalid=0 send_seq=130 receive_seq=130 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000581 adj=49999418 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1536 bytes_read=6000 bytes_retransmit=0 bytes_invalid=0 send_seq=165 receive_seq=165 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000393 adj=63999222  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=55.6 mcu_temp: temp=35.0 sysload=0.69 cputime=36.453 memavail=690256 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 272.1: gcodein=0  mcu: mcu_awake=0.007 mcu_task_avg=0.000016 mcu_task_stddev=0.000015 bytes_write=5208 bytes_read=8199 bytes_retransmit=0 bytes_invalid=0 send_seq=289 receive_seq=289 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001220 CB1: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000017 bytes_write=933 bytes_read=4866 bytes_retransmit=0 bytes_invalid=0 send_seq=131 receive_seq=131 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000576 adj=49999396 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1542 bytes_read=6090 bytes_retransmit=0 bytes_invalid=0 send_seq=166 receive_seq=166 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000412 adj=63999205  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=55.5 mcu_temp: temp=35.3 sysload=0.69 cputime=36.510 memavail=690988 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 273.1: gcodein=0  mcu: mcu_awake=0.007 mcu_task_avg=0.000016 mcu_task_stddev=0.000015 bytes_write=5214 bytes_read=8302 bytes_retransmit=0 bytes_invalid=0 send_seq=290 receive_seq=290 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001221 CB1: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000017 bytes_write=939 bytes_read=4895 bytes_retransmit=0 bytes_invalid=0 send_seq=132 receive_seq=132 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000573 adj=49999421 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1548 bytes_read=6151 bytes_retransmit=0 bytes_invalid=0 send_seq=167 receive_seq=167 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000414 adj=63999304  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=54.7 mcu_temp: temp=35.2 sysload=0.69 cputime=36.561 memavail=690656 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 274.1: gcodein=0  mcu: mcu_awake=0.007 mcu_task_avg=0.000016 mcu_task_stddev=0.000015 bytes_write=5220 bytes_read=8405 bytes_retransmit=0 bytes_invalid=0 send_seq=291 receive_seq=291 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001222 CB1: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000017 bytes_write=945 bytes_read=4911 bytes_retransmit=0 bytes_invalid=0 send_seq=133 receive_seq=133 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000540 adj=49999450 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1554 bytes_read=6212 bytes_retransmit=0 bytes_invalid=0 send_seq=168 receive_seq=168 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000402 adj=63999283  heater_bed: target=0 temp=26.1 pwm=0.000 raspberry_pi: temp=55.4 mcu_temp: temp=35.2 sysload=0.69 cputime=36.596 memavail=690280 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 275.1: gcodein=0  mcu: mcu_awake=0.007 mcu_task_avg=0.000016 mcu_task_stddev=0.000015 bytes_write=5226 bytes_read=8537 bytes_retransmit=0 bytes_invalid=0 send_seq=292 receive_seq=292 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001215 CB1: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000017 bytes_write=951 bytes_read=4927 bytes_retransmit=0 bytes_invalid=0 send_seq=134 receive_seq=134 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000522 adj=49999287 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1560 bytes_read=6288 bytes_retransmit=0 bytes_invalid=0 send_seq=169 receive_seq=169 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000393 adj=63999179  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=56.0 mcu_temp: temp=35.1 sysload=0.69 cputime=36.640 memavail=690540 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 276.1: gcodein=0  mcu: mcu_awake=0.007 mcu_task_avg=0.000016 mcu_task_stddev=0.000015 bytes_write=5232 bytes_read=8640 bytes_retransmit=0 bytes_invalid=0 send_seq=293 receive_seq=293 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001208 CB1: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000017 bytes_write=957 bytes_read=4943 bytes_retransmit=0 bytes_invalid=0 send_seq=135 receive_seq=135 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000511 adj=49999283 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1572 bytes_read=6365 bytes_retransmit=0 bytes_invalid=0 send_seq=171 receive_seq=171 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000380 adj=63999172  heater_bed: target=0 temp=26.1 pwm=0.000 raspberry_pi: temp=56.3 mcu_temp: temp=35.0 sysload=0.63 cputime=36.678 memavail=690352 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 277.1: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5238 bytes_read=8758 bytes_retransmit=0 bytes_invalid=0 send_seq=294 receive_seq=294 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001209 CB1: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000017 bytes_write=963 bytes_read=4959 bytes_retransmit=0 bytes_invalid=0 send_seq=136 receive_seq=136 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000494 adj=49999321 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1578 bytes_read=6440 bytes_retransmit=0 bytes_invalid=0 send_seq=172 receive_seq=172 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000381 adj=63999140  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=56.4 mcu_temp: temp=35.2 sysload=0.63 cputime=36.718 memavail=690808 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 278.1: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5244 bytes_read=8890 bytes_retransmit=0 bytes_invalid=0 send_seq=295 receive_seq=295 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001205 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000014 bytes_write=969 bytes_read=4988 bytes_retransmit=0 bytes_invalid=0 send_seq=137 receive_seq=137 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000490 adj=49999259 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1584 bytes_read=6516 bytes_retransmit=0 bytes_invalid=0 send_seq=173 receive_seq=173 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000386 adj=63999142  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=55.6 mcu_temp: temp=35.2 sysload=0.63 cputime=36.764 memavail=689876 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 279.1: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5269 bytes_read=9003 bytes_retransmit=0 bytes_invalid=0 send_seq=298 receive_seq=298 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001198 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000014 bytes_write=975 bytes_read=5004 bytes_retransmit=0 bytes_invalid=0 send_seq=138 receive_seq=138 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000491 adj=49999333 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1590 bytes_read=6577 bytes_retransmit=0 bytes_invalid=0 send_seq=174 receive_seq=174 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000383 adj=63999215  heater_bed: target=0 temp=26.0 pwm=0.000 raspberry_pi: temp=58.0 mcu_temp: temp=35.2 sysload=0.63 cputime=36.801 memavail=689380 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 280.1: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5313 bytes_read=9126 bytes_retransmit=0 bytes_invalid=0 send_seq=303 receive_seq=303 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001199 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000014 bytes_write=981 bytes_read=5020 bytes_retransmit=0 bytes_invalid=0 send_seq=139 receive_seq=139 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000492 adj=49999423 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1596 bytes_read=6638 bytes_retransmit=0 bytes_invalid=0 send_seq=175 receive_seq=175 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000394 adj=63999227  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=56.9 mcu_temp: temp=35.1 sysload=0.63 cputime=36.852 memavail=689412 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 281.1: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5352 bytes_read=9273 bytes_retransmit=0 bytes_invalid=0 send_seq=307 receive_seq=307 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001195 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000014 bytes_write=987 bytes_read=5036 bytes_retransmit=0 bytes_invalid=0 send_seq=140 receive_seq=140 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000488 adj=49999459 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1602 bytes_read=6714 bytes_retransmit=0 bytes_invalid=0 send_seq=176 receive_seq=176 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000397 adj=63999287  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=55.1 mcu_temp: temp=35.1 sysload=0.58 cputime=36.912 memavail=689676 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 282.1: gcodein=0  mcu: mcu_awake=0.007 mcu_task_avg=0.000017 mcu_task_stddev=0.000018 bytes_write=5377 bytes_read=9401 bytes_retransmit=0 bytes_invalid=0 send_seq=310 receive_seq=310 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001194 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000014 bytes_write=993 bytes_read=5052 bytes_retransmit=0 bytes_invalid=0 send_seq=141 receive_seq=141 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000485 adj=49999479 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1608 bytes_read=6789 bytes_retransmit=0 bytes_invalid=0 send_seq=177 receive_seq=177 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000415 adj=63999319  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=54.4 mcu_temp: temp=35.3 sysload=0.58 cputime=36.971 memavail=689684 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 283.1: gcodein=0  mcu: mcu_awake=0.007 mcu_task_avg=0.000017 mcu_task_stddev=0.000018 bytes_write=5402 bytes_read=9514 bytes_retransmit=0 bytes_invalid=0 send_seq=313 receive_seq=313 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001196 CB1: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000018 bytes_write=999 bytes_read=5081 bytes_retransmit=0 bytes_invalid=0 send_seq=142 receive_seq=142 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000479 adj=49999485 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1614 bytes_read=6850 bytes_retransmit=0 bytes_invalid=0 send_seq=178 receive_seq=178 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000420 adj=63999434  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=54.7 mcu_temp: temp=35.2 sysload=0.58 cputime=37.038 memavail=689436 print_time=42.502 buffer_time=0.844 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Attempting MCU 'CB1' config_reset command
b'Got EOF when reading from device'
Attempting MCU 'ebbcan' reset command
Attempting MCU 'mcu' reset command
webhooks client 281473552679312: Disconnected
Restarting printer
Start printer at Mon Aug 21 00:41:58 2023 (1692578518.4 285.3)
===== Config file =====
[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancels the current print.
	Usage: CANCEL_PRINT
rename_existing = _KM_CANCEL_PRINT_BASE
gcode = 
	_KM_CHECK_IS_PRINTING
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=cancelling RESET_STACK=1
	SET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{True}"
	PRINT_END
	_KM_CANCEL_PRINT_BASE
	{% if printer.pause_resume.is_paused %}
	RESTORE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE MOVE=0
	{% endif %}
	CLEAR_PAUSE
	_KM_APPLY_PRINT_OFFSET RESET=1
	{% if 'virtual_sdcard' in printer and not printer.virtual_sdcard.is_active %}
	SDCARD_RESET_FILE
	{% endif %}

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
variable_restore_idle_timeout = 0
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set idle_timeout = client.idle_timeout|default(0) %}
	
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE={printer[printer.toolhead.extruder].target}
	
	{% if idle_timeout > 0 %}
	SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
	SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
	{% endif %}
	PAUSE_BASE
	_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
variable_last_extruder_temp = 0
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move = client.speed_move|default(velocity) %}
	
	
	{% if printer['gcode_macro PAUSE'].restore_idle_timeout > 0 %}
	SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro PAUSE'].restore_idle_timeout}
	{% endif %}
	M109 S{last_extruder_temp}
	_CLIENT_EXTRUDE
	RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	_KM_CHECK_IS_PRINTING
	{% set pause_next_layer =
	printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE | default(1) | int != 0 %}
	{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VALUE="{
	{ 'enable': False, 'call': MACRO }}" VARIABLE=pause_next_layer
	GCODE_AT_LAYER COMMAND="{MACRO|replace('\"','\\\"')
	}" CANCEL="{0 if ENABLE else 1}" LAYER="next"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	_KM_CHECK_IS_PRINTING
	{% set pause_at_layer =
	printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	
	{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined else
	params.LAYER is defined %}
	{% set LAYER = params.LAYER |
	default((pause_at_layer.layer|int,
	printer.print_stats.info.current_layer|int + 1)|max)%}
	{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}
	
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{
	{ 'enable': False, 'layer': 0, 'call': MACRO }}"
	{% if ENABLE and pause_at_layer.enable %}
	
	GCODE_AT_LAYER COMMAND="{pause_at_layer.call|replace('\"','\\\"')
	}" CANCEL="{1}" LAYER="{pause_at_layer.layer}"
	{% endif %}
	
	GCODE_AT_LAYER COMMAND="{MACRO|replace('\"','\\\"')
	}" CANCEL="{0 if ENABLE else 1}" LAYER="{LAYER}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = _KM_SET_PRINT_STATS_INFO
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	_KM_SET_PRINT_STATS_INFO {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.extruder.can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[gcode_macro _km_options]
variable_load_length = 90.0
variable_menu_temperature = [
	{'name' : 'PLA',  'extruder' : 200.0, 'bed' : 60.0},
	{'name' : 'PETG', 'extruder' : 230.0, 'bed' : 85.0},
	{'name' : 'ABS',  'extruder' : 245.0, 'bed' : 110.0, 'chamber' : 60}]
variable_start_purge_length = 50
variable_start_extruder_probing_temp = 150
variable_park_x = 200.0
variable_park_y = 200.0
gcode = 

[gcode_macro bed_mesh_calibrate_fast]
description = Wraps BED_MESH_CALIBRATE, scaling probe count to specified area.
	Usage: See Klipper documentation.
gcode = 
	
	BED_MESH_CHECK ABORT=1
	
	
	{% set calibrate_cmd =
	(printer["gcode_macro list_macros"].macros.bed_mesh_calibrate|
	default(["bed_mesh_calibrate"],True))[-1] %}
	
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set probe_mesh_padding = km.probe_mesh_padding %}
	{% set probe_min_count = km.probe_min_count %}
	{% set probe_count_scale = km.probe_count_scale %}
	{% set bed_mesh = printer.configfile.settings.bed_mesh %}
	
	
	{%if "mesh_radius" not in bed_mesh and
	"MESH_RADIUS" not in params %}
	{% set safe_min_x = bed_mesh.mesh_min[0] %}
	{% set safe_min_y = bed_mesh.mesh_min[1] %}
	{% set safe_max_x = bed_mesh.mesh_max[0] %}
	{% set safe_max_y = bed_mesh.mesh_max[1] %}
	
	
	{% if "MESH_MIN" in params %}
	{% set mesh_min_x = (params.MESH_MIN.split(",")[0]|float -
	probe_mesh_padding, safe_min_x)|max %}
	{% set mesh_min_y = (params.MESH_MIN.split(",")[1]|float -
	probe_mesh_padding, safe_min_y)|max %}
	{% else %}
	{% set mesh_min_x = safe_min_x %}
	{% set mesh_min_y = safe_min_y %}
	{% endif %}
	{% if "MESH_MAX" in params %}
	{% set mesh_max_x = (params.MESH_MAX.split(",")[0]|float +
	probe_mesh_padding, safe_max_x)|min %}
	{% set mesh_max_y = (params.MESH_MAX.split(",")[1]|float +
	probe_mesh_padding, safe_max_y)|min %}
	{% else %}
	{% set mesh_max_x = safe_max_x %}
	{% set mesh_max_y = safe_max_y %}
	{% endif %}
	
	{% set probe_count = bed_mesh.probe_count if not params.PROBE_COUNT else
	params.PROBE_COUNT.split(",")|map('int')|list %}
	
	{% if "PROBE_COUNT" not in params %}
	{% set max_x_probes = probe_count[0] %}
	{% set max_y_probes = probe_count[-1] %}
	
	{% set x_probes = (max_x_probes * (mesh_max_x - mesh_min_x) /
	(safe_max_x - safe_min_x) * probe_count_scale)
	| round(0) | int %}
	{% set x_probes = ((x_probes, probe_min_count)|max, max_x_probes)|min %}
	
	{% set y_probes = (max_y_probes * (mesh_max_y - mesh_min_y ) /
	(safe_max_y - safe_min_y) * probe_count_scale )
	| round(0) | int %}
	{% set y_probes = ((y_probes, probe_min_count)|max, max_y_probes)|min %}
	
	{% if x_probes > 6 and y_probes < 4 %}
	{% set y_probes = 4 %}
	{% elif y_probes > 6 and x_probes < 4 %}
	{% set x_probes = 4 %}
	{% endif %}
	{% set probe_count = [x_probes,y_probes] %}
	{% elif probe_count|length == 1 %}
	{% set dummy = probe_count.append(probe_count[0]) %}
	{% endif %}
	
	
	
	
	
	
	
	{% if "relative_reference_index" in bed_mesh %}
	{% set row = (bed_mesh.relative_reference_index / bed_mesh.probe_count[0]
	)|int%}
	{% set rrf_x = (((safe_max_x - safe_min_x) /
	(bed_mesh.probe_count[0] - 1))|round(2, 'floor')) *
	(bed_mesh.relative_reference_index %
	bed_mesh.probe_count[-1]) %}
	{% if row % 2 %}
	{% set rrf_x = safe_max_x - rrf_x %}
	{% else %}
	{% set rrf_x = safe_min_x + rrf_x %}
	{% endif %}
	{% set rrf_y = (((safe_max_y - safe_min_y) /
	(bed_mesh.probe_count[-1] - 1))|round(2, 'floor')) *
	row + safe_min_x %}
	{% set x_dist = (mesh_max_x - mesh_min_x) / (probe_count[0] - 1) %}
	{% set y_dist = (mesh_max_y - mesh_min_y) / (probe_count[1] - 1) %}
	{% set rrf = {'x':0, 'y':0, 'dist':safe_max_x**2+safe_max_y**2,'pos':0} %}
	{% for row in range(probe_count[1])%}
	{% for col in range(probe_count[0])%}
	{% if row % 2 %}
	{% set x = mesh_max_x - col * x_dist %}
	{% else %}
	{% set x = mesh_min_x + col * x_dist %}
	{% endif %}
	{% set y = mesh_min_y + row * y_dist %}
	{% set dist = ((x - rrf_x)**2 + (y - rrf_y)**2)**0.5 %}
	{% if dist < rrf.dist %}
	{% set dummy = rrf.__setitem__("dist", dist) %}
	{% set dummy = rrf.__setitem__("x", x) %}
	{% set dummy = rrf.__setitem__("y", y) %}
	{% set dummy = rrf.__setitem__("pos", row * probe_count[1] + col) %}
	{% endif %}
	{% endfor %}
	{% endfor %}
	{% if rrf.x != rrf_x or rrf.y != rrf_y %}
	{action_respond_info("relative_reference_index remapped to"
	" %d (%.2f,%.2f) from %d (%.2f,%.2f)" %
	(rrf.pos, rrf.x, rrf.y,
	bed_mesh.relative_reference_index, rrf_x, rrf_y))}
	{% endif %}
	{% set dummy = params.__setitem__("RELATIVE_REFERENCE_INDEX", rrf.pos) %}
	{% endif %}
	
	{% set dummy = params.__setitem__("MESH_MIN", mesh_min_x~","~mesh_min_y) %}
	{% set dummy = params.__setitem__("MESH_MAX", mesh_max_x~","~mesh_max_y) %}
	{% set dummy = params.__setitem__("PROBE_COUNT", probe_count|join(',')) %}
	
	{% if probe_count[0] > 6 or probe_count[1]|default(0) > 6 %}
	{% set dummy = params.__setitem__("ALGORITHM", "bicubic") %}
	{% endif %}
	
	{% if "MESH_MIN" in params or "MESH_MAX" in params %}
	BED_MESH_CHECK {rawparams}
	{% endif %}
	{% else %}
	
	{% set dummy = params.__delitem__("MESH_MIN") %}
	{% set dummy = params.__delitem__("MESH_MAX") %}
	{% endif %}
	
	{% if "MESH_MIN" in params or "MESH_MAX" in params %}
	BED_MESH_CHECK ABORT=1{%for k in params%}{' '~k~'="'~params[k]~'"'}{%
	endfor%}
	{% endif %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=meshing
	{calibrate_cmd}{%for k in params%}{' '~k~'="'~params[k]~'"'}{%endfor%}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro bed_mesh_check]
description = Warns if bed_mesh config may generate an invalid mesh.
	Usage: BED_MESH_CHECK [MESH_MIN=<x,y>] [MESH_MAX=<x,y>] [ABORT=<0|1>]
gcode = 
	{% if printer.bed_mesh is defined %}
	{% set action = action_respond_info if params.ABORT|default(0)|int == 0 else
	action_raise_error %}
	{% set settings = printer.configfile.settings %}
	{% set x_min = settings.stepper_x.position_min %}
	{% set y_min = settings.stepper_y.position_min %}
	{% set x_max = settings.stepper_x.position_max %}
	{% set y_max = settings.stepper_y.position_max %}
	
	{% set label = "[bed_mesh] config" %}
	{% if "MESH_MIN" in params %}
	{% set label = "BED_MESH_CALIBRATE params" %}
	{% set mesh_min_x = params.MESH_MIN.split(",")[0]|float %}
	{% set mesh_min_y = params.MESH_MIN.split(",")[1]|float %}
	{% else %}
	{% set mesh_min_x = settings.bed_mesh.mesh_min[0] %}
	{% set mesh_min_y = settings.bed_mesh.mesh_min[1] %}
	{% endif %}
	{% if "MESH_MAX" in params %}
	{% set label = "BED_MESH_CALIBRATE params" %}
	{% set mesh_max_x = params.MESH_MAX.split(",")[0]|float %}
	{% set mesh_max_y = params.MESH_MAX.split(",")[1]|float %}
	{% else %}
	{% set mesh_max_x = settings.bed_mesh.mesh_max[0] %}
	{% set mesh_max_y = settings.bed_mesh.mesh_max[1] %}
	{% endif %}
	
	{% if "bltouch" in settings %}
	{% set x_offset = settings.bltouch.x_offset %}
	{% set y_offset = settings.bltouch.y_offset %}
	{% set probe = "bltouch" %}
	{% elif "probe" in settings %}
	{% set x_offset = settings.probe.x_offset %}
	{% set y_offset = settings.probe.y_offset %}
	{% set probe = "probe" %}
	{% else %}
	{% set x_offset = 0.0 %}
	{% set y_offset = 0.0 %}
	{% endif %}
	
	{% set output = [] %}
	{% set warn =
	"* mesh_%s (%f, %f) adjusted by " ~ probe ~
	".%s_offset (%f) can move out of range for "
	"stepper_%s.position_%s (%f)." %}
	{% if x_offset > 0 and (mesh_min_x - x_offset) < x_min %}
	{% set dummy = output.append(warn % ('min', mesh_min_x, mesh_min_y,
	'x', x_offset, 'x', 'min', x_min)) %}
	{% elif x_offset < 0 and (mesh_max_x - x_offset) > x_max %}
	{% set dummy = output.append(warn % ('max', mesh_max_x, mesh_max_y,
	'x', x_offset, 'x', 'max', x_max)) %}
	{% endif %}
	{% if y_offset > 0 and (mesh_min_y - y_offset) < y_min %}
	{% set dummy = output.append(warn % ('min', mesh_min_x, mesh_min_y,
	'y', y_offset, 'y', 'min', y_min)) %}
	{% elif y_offset < 0 and (mesh_max_y - y_offset) > y_max %}
	{% set dummy = output.append(warn % ('max', mesh_max_x, mesh_max_y,
	'y', y_offset, 'y', 'max', y_max)) %}
	{% endif %}
	
	{% if output %}
	{ action(
	"Warning: The following issue(s) were detected in your " ~ label ~
	":\n" ~ output|join("\n")) }
	{% endif %}
	{% endif %}

[gcode_macro _apply_bed_surface_offset]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% if surfaces.active %}
	SET_SURFACE_ACTIVE SURFACE={surfaces.active}
	{% endif %}

[gcode_macro _init_surfaces]
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% if "bed_surfaces" in printer.save_variables.variables %}
	{% set old_surfaces = printer.save_variables.variables.bed_surfaces %}
	{% else %}
	{% set old_surfaces = { 'active' : '', 'available' : {} } %}
	{% endif %}
	{% set settings = printer.configfile.settings %}
	{% set new_probe_z = (settings.probe | default(settings.bltouch) |
	default(settings.smart_effector) | default({})
	).z_offset|default(0.0)|float %}
	{% set new_endstop_z = (settings.stepper_z | default({})).position_endstop |
	default(0.0)|float %}
	{% if 'endstop_z' not in old_surfaces %}
	{% set dummy = old_surfaces.__setitem__('endstop_z', new_endstop_z) %}
	{% endif %}
	{% if 'probe_z' not in old_surfaces %}
	{% set dummy = old_surfaces.__setitem__('probe_z', new_probe_z) %}
	{% endif %}
	{% set surfaces = { 'active' : '', 'available' : {},
	'endstop_z' : old_surfaces.endstop_z,
	'probe_z' : old_surfaces.probe_z } %}
	{% for s in km.bed_surfaces %}
	{% set s = s.split()|join(' ')|lower %}
	{% if s|length > km.bed_surface_max_name_length or
	s|list|select("in", " \r\n\"\'")|list %}
	{action_raise_error('Invalid surface name "%s". Name must be %d or fewer '
	'characters and must not include space or quotation characters'
	| format(s, km.bed_surface_max_name_length))}
	{% endif %}
	{% if s in old_surfaces.available %}
	{% set dummy = surfaces.available.__setitem__(s,
	old_surfaces.available[s]) %}
	{% else %}
	{% set dummy = surfaces.available.__setitem__(s, {'offset' : 0.0}) %}
	{% endif %}
	{% endfor %}
	{% if old_surfaces.active in surfaces.available %}
	{% set dummy = surfaces.__setitem__('active', old_surfaces.active) %}
	{% elif km.bed_surfaces %}
	{% set dummy = surfaces.__setitem__('active', km.bed_surfaces[0]|lower) %}
	{% endif %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	_APPLY_BED_SURFACE_OFFSET
	{% if new_probe_z != surfaces.probe_z or
	new_endstop_z != surfaces.endstop_z %}
	{ action_respond_info(
	'Z probe offset or endstop position changed. Run ADJUST_SURFACE_OFFSETS '
	'to adjust the offset for all saved surfaces by the change differential, '
	'or run ADJUST_SURFACE_OFFSETS IGNORE=1 to hide this message without '
	'making changes.') }
	{% endif %}

[gcode_macro adjust_surface_offsets]
description = Adjusts surface offsets to account for changes in the Z endstop
	position or probe Z offset.
	Usage: ADJUST_SURFACE_OFFSETS [IGNORE]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% set settings = printer.configfile.settings %}
	{% set new_probe_z = (settings.probe | default(settings.bltouch) |
	default(settings.smart_effector) | default({})
	).z_offset|default(0.0)|float %}
	{% set new_endstop_z = (settings.stepper_z | default({})).position_endstop |
	default(0.0)|float %}
	{% set diff = (surfaces.probe_z - new_probe_z +
	surfaces.endstop_z - new_endstop_z)|round(6) %}
	{% if not params.IGNORE|default(0)|int %}
	{% for s in surfaces.available %}
	{% set offset = (surfaces.available[s].offset - diff)|round(6) %}
	{% set dummy = surfaces.available.__setitem__(s, {'offset' : offset}) %}
	{% endfor %}
	{ action_respond_info("All bed surfaces now adjusted by %1.4f"|
	format(diff))}
	{% elif diff != 0 %}
	{ action_respond_info("Status cleared without adjustment") }
	{% endif %}
	{% set dummy = surfaces.__setitem__('endstop_z', new_endstop_z| round(6)) %}
	{% set dummy = surfaces.__setitem__('probe_z', new_probe_z|round(6)) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"

[gcode_macro set_surface_offset]
description = Sets the offset for a surface and moves the toolhead (if homed).
	Usage: SET_SURFACE_OFFSET [OFFSET=<offset>] [SURFACE=<surface>]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}
	{% if SURFACE not in surfaces.available %}
	{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }
	{% endif %}
	{% set active = surfaces.available[SURFACE] %}
	
	{% set OFFSET = params.OFFSET|default(active.offset)|float %}
	{% if OFFSET != active.offset %}
	{% set dummy = surfaces.available[SURFACE].__setitem__("offset", OFFSET) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	{% if SURFACE == surfaces.active %}
	_km_set_gcode_offset_base Z="{OFFSET}" MOVE={
	1 if printer.toolhead.homed_axes == 'xyz' else 0}
	{% endif %}
	{% endif %}
	{ action_respond_info("Bed surface: %s Offset: %.3f"
	| format(SURFACE, OFFSET)) }
	
	{% set dummy = None if True else "
	{% set dummy = params.SURFACE|default(active surface) %}
	{% set dummy = params.OFFSET|default(none)|float %}
	" %}

[gcode_macro set_surface_active]
description = Sets the active bed surface and moves the toolhead (if homed). If
	no SURFACE argument is present the available surfaces are listed and the
	active one is preceded by a "*".
	Usage: SET_SURFACE_ACTIVE [SURFACE=<surface>]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% if "SURFACE" in params %}
	{% set SURFACE = params.SURFACE|lower %}
	{% if SURFACE not in surfaces.available %}
	{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }
	{% endif %}
	{% if SURFACE != surfaces.active %}
	{% set dummy = surfaces.__setitem__("active", SURFACE) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	{% endif %}
	{% if surfaces.available[SURFACE].offset !=
	printer.gcode_move.homing_origin.z %}
	_km_set_gcode_offset_base Z="{surfaces.available[SURFACE].offset
	}" MOVE={1 if printer.toolhead.homed_axes == 'xyz' else 0}
	{% endif %}
	{action_respond_info("Active bed surface: %s; offset: %.3f"
	| format(SURFACE, surfaces.available[SURFACE].offset))}
	{% else %}
	{% set output = [] %}
	{% for s in surfaces.available|list|sort %}
	{% set dummy = output.append("%s&nbsp;%s - offset: %.3f"
	| format("*" if s == surfaces.active else "&nbsp;",
	s, surfaces.available[s].offset)) %}
	{% endfor %}
	{action_respond_info(output|join('\n'))}
	{% endif %}
	
	{% set dummy = None if True else "
	{% set dummy = params.SURFACE|default(none) %}
	" %}

[gcode_macro set_gcode_offset]
description = Wraps SET_GCODE_OFFSET to update the current bed sheet offset.
	Usage: SET_GCODE_OFFSET [X=<pos>|X_ADJUST=<adjust>]
	[Y=<pos>|Y_ADJUST=<adjust>]
	[Z=<pos>|Z_ADJUST=<adjust>]
	[MOVE=1 [MOVE_SPEED=<speed>]]
rename_existing = _KM_SET_GCODE_OFFSET_BASE
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% if surfaces.active and
	not printer["gcode_macro _km_save_state"].is_ephemeral %}
	{% set Z = params.Z|default(0.0)|float|round(6) %}
	{% set Z_ADJUST = params.Z_ADJUST|default(0.0)|float %}
	{% if 'Z' in params and
	Z != surfaces.available[surfaces.active].offset %}
	{% set dummy = surfaces.available[surfaces.active].__setitem__("offset",
	Z) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	{% elif Z_ADJUST != 0.0 %}
	{% set dummy = surfaces.available[surfaces.active].__setitem__(
	"offset", (Z_ADJUST + printer.gcode_move.homing_origin.z)|round(6)) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	{% endif %}
	{% endif %}
	_km_set_gcode_offset_base{% for k in params%}{' '~k~'="'~params[k]~'"'
	}{% endfor %}

[gcode_macro make_surface_mesh]
description = Generates and saves a mesh to automatically load in PRINT_START.
	Usage: MAKE_SURFACE_MESH [SURFACE=<surface>] [BED=<probing temperature>]
	[EXTRUDER=<probing temperature>]
	[MESH_MULTIPLIER=<integer multiple of mesh density>]
	[bed_mesh_calibrate parameters]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}
	{% if SURFACE not in surfaces.available %}
	{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }
	{% endif %}
	{% set dummy = params.__setitem__('PROFILE', SURFACE) %}
	{% set BED = params.BED|default(70) | int %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set EXTRUDER = params.EXTRUDER|default(km.start_extruder_probing_temp) |
	int %}
	{% set MESH_MULTIPLIER = (params.MESH_MULTIPLIER|default(2)|int, 1)|max %}
	
	M104 S{EXTRUDER}
	M140 S{BED}
	G28
	
	
	{% if surfaces.available[SURFACE].offset !=
	printer.gcode_move.homing_origin.z %}
	_km_set_gcode_offset_base Z="{surfaces.available[SURFACE].offset
	}" MOVE=1
	{% endif %}
	
	
	{% if BED > 0 %}
	{action_respond_info("Stabilizing bed at %iC" | format(BED,))}
	_KM_PARK_IF_NEEDED HEATER=heater_bed RANGE=0.5
	{% if BED < (printer.heater_bed.temperature - 0.2) %}
	M190 R{BED}
	G4 P{((km.start_bed_heat_delay * 10, 30000)|min,
	km.start_bed_heat_delay)|max}
	{% else %}
	G4 P{km.start_bed_heat_delay}
	{% endif %}
	M190 R{BED}
	{% endif %}
	
	{% if EXTRUDER > 0 %}
	_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=2
	M109 R{km.start_extruder_probing_temp}
	{% endif %}
	
	{% if km.start_home_z_at_temp and not bed_at_target %}
	G28 Z
	{% endif %}
	
	
	
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count
	if not params.PROBE_COUNT else
	params.PROBE_COUNT.split(",")|map('int')|list %}
	{% set dummy = params.__setitem__('PROBE_COUNT',(
	MESH_MULTIPLIER * (probe_count[0] - 1) + 1,
	MESH_MULTIPLIER * (probe_count[-1] - 1) + 1,)|join(',')) %}
	
	BED_MESH_CLEAR
	BED_MESH_CALIBRATE_FAST {%
	for k in params|reject('in',['BED','SURFACE'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor %}
	SAVE_CONFIG
	
	
	{% set dummy = None if True else "
	{% set dummy = params.MESH_MULTIPLIER|default(2) %}
	{% set dummy = params.SURFACE|default(active surface) %}
	" %}

[gcode_macro load_surface_mesh]
description = Attempts to load a mesh associated with the specified surface.
	Usage: LOAD_SURFACE_MESH [SURFACE=<surface>]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}
	{% if SURFACE != surfaces.active %}
	SET_SURFACE_ACTIVE SURFACE={SURFACE}
	{% endif %}
	
	{% if SURFACE in printer.bed_mesh.profiles %}
	{% set mesh = printer.bed_mesh.profiles[SURFACE].mesh_params %}
	{% set default = printer.configfile.settings.bed_mesh %}
	
	{% if mesh.min_x <= (default.mesh_min[0] + 0.5) and
	mesh.min_y <= (default.mesh_min[1] + 0.5) and
	mesh.max_x >= (default.mesh_max[0] - 0.5) and
	mesh.max_y >= (default.mesh_max[1] - 0.5) and
	mesh.x_count >= default.probe_count[0] and
	mesh.y_count >= default.probe_count[-1] %}
	
	BED_MESH_PROFILE LOAD={SURFACE}
	{action_respond_info("Loaded mesh: %s" | format(SURFACE,))}
	{% endif %}
	{% endif %}

[gcode_macro m300]
description = Emits and audible beep.
	Usage: M300 [P<duration>] [S<frequency>]
gcode = 
	{% set settings = printer.configfile.settings %}
	{% if "output_pin beeper" in printer %}
	{% set P = (params.P|default(100)|int, 0)|max %}
	{% set S = (params.S|default(1000)|int, 1)|max %}
	SET_PIN PIN=beeper VALUE={% if settings["output_pin beeper"].pwm %}{
	settings["output_pin beeper"].scale|default(1.0) * 0.5
	} CYCLE_TIME={ 1.0 / S }{% else %}1{% endif %}
	G4 P{P}
	SET_PIN PIN=beeper VALUE=0
	{% else %}
	{action_respond_info(
	"M300 is disabled. To enable create an [output_pin beeper] config.")}
	{% endif %}

[gcode_macro set_draw_params]
description = Sets the default parameters used by DRAW_LINE_TO.
	Usage: SET_DRAW_PARAMS [HEIGHT=<mm>] [WIDTH=<mm>] [FEEDRATE=<mm/m>]
variable_height = 0.2
variable_width = 0.0
variable_feedrate = 1200
gcode = 
	{% set dparams = printer["gcode_macro set_draw_params"] %}
	{% for k in params %}
	{% set kl = k|lower %}
	{% if kl in dparams %}
	{% if dparams[kl] is float %}
	{% set v = params[k]|float %}
	{% elif dparams[kl] is integer %}
	{% set v = params[k]|int %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=set_draw_params VARIABLE={kl} VALUE="{v}"
	{% endif %}
	{% endfor %}

[gcode_macro draw_line_to]
description = Extrudes a line of filament at the specified height and width from
	the current coordinate to the supplied XY coordinate. (The height is used only
	to calculate the extrusion volume.)
	Usage: DRAW_LINE_TO [X=<pos>] [Y=<pos>] [HEIGHT=<mm>] [WIDTH=<mm>]
	[FEEDRATE=<mm/m>]
gcode = 
	{% set dparams = printer["gcode_macro set_draw_params"] %}
	{% set position = printer.gcode_move.gcode_position %}
	{% set X = params.X|default(position.x)|float %}
	{% set Y = params.Y|default(position.y)|float %}
	{% set HEIGHT = params.HEIGHT|default(dparams.height)|float %}
	{% set WIDTH = params.WIDTH|default(dparams.width)|float %}
	{% set FEEDRATE = params.FEEDRATE|default(dparams.feedrate)|int %}
	
	{% set distance = ((X - position.x) ** 2 + (Y - position.y) ** 2) ** 0.5 %}
	
	{% set filament_area = 3.14159 *
	(printer.configfile.settings[
	printer.toolhead.extruder].filament_diameter ** 2) / 4 %}
	{% set E = distance * ((WIDTH * HEIGHT) / filament_area) %}
	
	
	_KM_SAVE_GCODE_STATE NAME=_KM_PURGE
	G90
	G92 E0.0
	G1 X{"%.3f" % X} Y{"%.3f" % Y} E{"%.5f" % E} F{FEEDRATE}
	_KM_RESTORE_GCODE_STATE NAME=_KM_PURGE MOVE=0

[gcode_macro draw_purge_line]
description = Purges the specified length of filament as a line (or rows of
	lines) in front of the supplied print area. If no print area is specified the
	purge lines are drawn at the front edge of the maximum printable area. If no
	printable area is set it defaults to the XY axis limits.
	Usage: DRAW_PURGE_LINE [PRINT_MIN=<X,Y>] [PRINT_MAX=<X,Y>] [HEIGHT=<mm>]
	[WIDTH=<mm>] [LENGTH=<mm>]
gcode = 
	
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set origin = printer.gcode_move.homing_origin %}
	{% set dummy = km.__setitem__('print_min', (km.print_min[0] - origin.x,
	km.print_min[1] - origin.y)) %}
	{% set dummy = km.__setitem__('print_max', (km.print_max[0] - origin.x,
	km.print_max[1] - origin.y)) %}
	
	{% if "PRINT_MIN" in params %}
	{% set PRINT_MIN = (
	(params.PRINT_MIN.split(",")[0]|float, km.print_min[0])|max,
	(params.PRINT_MIN.split(",")[1]|float, km.print_min[1])|max
	) %}
	{% else %}
	{% set PRINT_MIN = km.print_min %}
	{% endif %}
	{% if "PRINT_MAX" in params %}
	{% set PRINT_MAX = (
	(params.PRINT_MAX.split(",")[0]|float, km.print_max[0])|min,
	(params.PRINT_MAX.split(",")[1]|float, km.print_max[1])|min
	) %}
	{% else %}
	{% set PRINT_MAX = km.print_max %}
	{% endif %}
	{% set extruder = printer.toolhead.extruder|string %}
	{% set HEIGHT = params.HEIGHT|default(
	printer.configfile.settings[extruder].nozzle_diameter * 0.625)|float %}
	{% set WIDTH = params.WIDTH|default(
	printer.configfile.settings[extruder].nozzle_diameter * 1.25)|float %}
	{% set LENGTH = params.LENGTH|default(km.start_purge_length)|float %}
	
	{% set dparams = printer["gcode_macro set_draw_params"] %}
	{% set filament_area = 3.14159 *
	(printer.configfile.settings[extruder].filament_diameter ** 2) / 4 %}
	{% set purge_length = (LENGTH * filament_area) / (WIDTH * HEIGHT) %}
	{% set printable_length = PRINT_MAX[0] - PRINT_MIN[0] %}
	{% set purge_rows = (purge_length / printable_length)|round(0,'ceil')|int %}
	{% set printable_inset = (printable_length - purge_length / purge_rows) / 2 %}
	{% set PRINT_MIN = (PRINT_MIN[0] + printable_inset, PRINT_MIN[1]) %}
	{% set PRINT_MAX = (PRINT_MAX[0] - printable_inset, PRINT_MAX[1]) %}
	
	{% set y_start = (km.print_min[1], PRINT_MIN[1] - km.start_purge_clearance -
	(purge_rows + 0.5) * WIDTH )|max %}
	G90
	
	G1 X{"%.3f" % (PRINT_MIN[0] - 30, km.print_min[0])|max} Y{
	"%.3f" % (y_start - 10, km.print_min[1])|max} F{km.travel_speed_xy}
	
	G1 X{"%.3f" % (PRINT_MIN[0] - 2, km.print_min[0])|max} Y{"%.3f" % y_start} Z{
	"%.4f" % HEIGHT} F{km.travel_speed_xy}
	
	G92 E0.0
	G1 E{"%.3f" % km.start_purge_prime_length} F{km.load_priming_speed}
	G92 E0.0
	
	G1 X{"%.3f" % PRINT_MIN[0]} F{km.travel_speed_xy}
	{% for n in range(purge_rows - 1) %}
	{% set x_pos = PRINT_MIN[0] if n % 2 else PRINT_MAX[0] %}
	DRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{
	WIDTH * n + y_start}"
	DRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{
	WIDTH * (n + 1) + y_start}"
	{% endfor %}
	{% set x_pos = PRINT_MAX[0] if purge_rows % 2 else PRINT_MIN[0] %}
	DRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{
	WIDTH * (purge_rows - 1) + y_start}"
	G92 E0.0

[gcode_macro _check_fan_params]
gcode = 
	{% set MAXIMUM = params.MAXIMUM|default(
	printer["gcode_macro set_fan_scaling"].maximum)|int %}
	{% set MINIMUM = params.MINIMUM|default(
	printer["gcode_macro set_fan_scaling"].minimum)|int %}
	
	{% if params.SCALE and params.SCALE|float <= 0 %}
	{ action_raise_error("SCALE must be a positive value.") }
	{% elif MINIMUM < 0 or MINIMUM > 255 %}
	{ action_raise_error("MINIMUM must be between 0 and 255.") }
	{% elif MAXIMUM < 0 or MAXIMUM > 255 %}
	{ action_raise_error("MAXIMUM must be between 0 and 255.") }
	{% elif params.SPEED and (params.SPEED|int < 0 or params.SPEED|int > 255) %}
	{ action_raise_error("SPEED must be between 0 and 255.") }
	{% elif params.BOOST and (params.BOOST|int < 0 or params.BOOST|int > 255) %}
	{ action_raise_error("BOOST must be between 0 and 255.") }
	{% elif MINIMUM > MAXIMUM %}
	{ action_raise_error("MINIMUM must be less than or equal to MAXIMUM.") }
	{% endif %}

[gcode_macro set_fan_scaling]
description = Sets fan scaling factors applied to M106 command. If a speed is
	provided it will be adjusted according to the scaling parameters.
	Usage: SET_FAN_SCALING [SCALE=<scale>] [BOOST=<boost>] [MAXIMUM=<max>]
	[MINIMUM=<min>] [SPEED=<speed>]
variable_scale = 1.0
variable_boost = 0
variable_minimum = 0
variable_maximum = 255
variable_real_speed = 0
gcode = 
	_CHECK_FAN_PARAMS{% for k in params %}{' '~k~'='~params[k]}{% endfor %}
	{% set SCALE = params.SCALE|default(scale)|float %}
	{% set BOOST = params.BOOST|default(boost)|float %}
	{% set MAXIMUM = params.MAXIMUM|default(maximum)|int %}
	{% set MINIMUM = params.MINIMUM|default(minimum)|int %}
	{% set SPEED = params.SPEED|default(real_speed)|int %}
	
	{% if SCALE != 1.0 or BOOST != 0 or MAXIMUM != 255 or MINIMUM != 0 %}
	{action_respond_info("Fan: Scale: %.2f Minimum:%i Maximum: %i Speed: %i"|
	format(SCALE, MINIMUM, MAXIMUM, SPEED))}
	{% endif %}
	
	
	{% if params|length > 0 %}
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=scale VALUE="{SCALE}"
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=boost VALUE="{BOOST}"
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=minimum VALUE="{MINIMUM}"
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=maximum VALUE="{MAXIMUM}"
	
	M106 S{SPEED}
	{% endif %}
	
	{% set dummy = None if True else "
	{% set dummy = params.SCALE|default(1.0)|float %}
	{% set dummy = params.BUMP|default(0)|int %}
	{% set dummy = params.MAXIMUM|default(255)|int %}
	{% set dummy = params.MINIMUM|default(0)|int %}
	{% set dummy = params.SPEED|default(current speed)|int %}
	" %}

[gcode_macro reset_fan_scaling]
description = Clears all fan scaling factors.
	Usage: RESET_FAN_SCALING
gcode = 
	SET_FAN_SCALING SCALE=1.0 BOOST=0 MAXIMUM=255 MINIMUM=0

[gcode_macro m106]
description = Wraps M106 to implement scaling overrides.
rename_existing = M106.6245197
gcode = 
	{% set S = params.S|default(255)|int %}
	{% set scale = printer["gcode_macro set_fan_scaling"] %}
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=real_speed VALUE="{S}"
	M106.6245197 S{((((S + scale.boost) * scale.scale) | round | int,
	scale.minimum) | max, scale.maximum) | min}

[gcode_macro _load_unload]
gcode = 
	{% set saved_extruder = printer.toolhead.extruder %}
	{% set EXTRUDER = params.EXTRUDER|default(saved_extruder)|lower %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% set BEEPS = params.BEEPS|default(8)|int if "output_pin beeper" in printer
	else 0 %}
	{% set default_minimum = km.load_min_temp if km.load_min_temp else
	(printer.configfile.settings[EXTRUDER].min_extrude_temp + 5) %}
	{% if 'MINIMUM' in params %}
	{% set MINIMUM = params.MINIMUM|int %}
	
	{% elif printer.pause_resume.is_paused and printer[EXTRUDER].target == 0 and
	printer["gcode_macro resume"].saved_extruder_temp %}
	{% set MINIMUM = printer["gcode_macro resume"].saved_extruder_temp %}
	
	{% elif printer[EXTRUDER].target > default_minimum %}
	{% set MINIMUM = printer[EXTRUDER].target %}
	{% else %}
	{% set MINIMUM = default_minimum %}
	{% endif %}
	{% if MINIMUM < printer.configfile.settings[EXTRUDER].min_extrude_temp %}
	{ action_raise_error("Extrude below minimum temp.") }
	{% elif printer.pause_resume.is_paused %}
	
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"
	{% endif %}
	{% set SPEED = params.SPEED|default(km.load_speed)|int %}
	{% set priming_length = km.load_priming_length %}
	{% set LENGTH = params.LENGTH|default(km.load_length)|float - priming_length%}
	{% if LENGTH < 0 %}
	{% set priming_length = (priming_length + LENGTH, 0)|max %}
	{% set LENGTH = 0 %}
	{% endif %}
	SAVE_GCODE_STATE NAME=_KM_LOAD_UNLOAD
	{% if EXTRUDER != saved_extruder%}
	ACTIVATE_EXTRUDER EXTRUDER={EXTRUDER}
	{% endif %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	{% if not printer.extruder.can_extrude or
	printer[EXTRUDER].target < default_minimum %}
	{action_respond_info("Preheating %s to %d" | format(EXTRUDER, MINIMUM))}
	M109 S{MINIMUM}
	{% endif %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS={"filament_load"
	if params.LOAD|int else "filament_unload"}
	M83
	{% set priming_speed = (km.load_priming_speed, SPEED)|min %}
	{% if params.LOAD|int %}
	G0 E{LENGTH} F{SPEED}
	G0 E{priming_length} F{priming_speed}
	G0 E{'%.4f' % -printer["gcode_macro resume"].saved_e} F{km.load_speed}
	{% else %}
	{% set pre_prime_distance = 5.0 %}
	{% set shaping_moves = 5 %}
	{% set shaping_distance = (shaping_moves * (1 + shaping_moves)/20) %}
	
	G0 E{pre_prime_distance} F{SPEED}
	G4 P500
	G0 E{'%.4f' % -(priming_length - shaping_distance)} F{SPEED}
	
	
	{% for i in range(1, shaping_moves + 1) %}
	G0 E2 F{priming_speed}
	G0 E-{2 + (0.1 * i)} F{priming_speed}
	{% endfor %}
	
	G0 E{'%.4f' % -(LENGTH + pre_prime_distance)} F{SPEED}
	{% endif %}
	RESTORE_GCODE_STATE NAME=_KM_LOAD_UNLOAD
	
	
	{% for i in range(BEEPS) %}
	M300 P100
	G4 P200
	{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro LOAD_FILAMENT]
description = Loads filament to the extruder.
	Usage: LOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]
	[EXTRUDER=<extruder>] [MINIMUM=<temperature>]
	[BEEPS=<beep count on completion>]
gcode = 
	_LOAD_UNLOAD LOAD=1{% for k in params
	%}{' '~k~'="'~params[k]~'"'}{% endfor %}
	
	
	{% set dummy = None if True else "
	M109
	{% set dummy = params.LENGTH|default(variable_load_length)|float %}
	{% set dummy = params.SPEED|default(variable_load_speed)|float %}
	{% set dummy = params.EXTRUDER|default(current extruder) %}
	{% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}
	{% set dummy = params.BEEPS|default(10)|int %}
	" %}

[gcode_macro UNLOAD_FILAMENT]
description = Unloads filament from the extruder.
	Usage: UNLOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]
	[EXTRUDER=<extruder>] [MINIMUM=<temperature>]
	[BEEPS=<beep count on completion>]
gcode = 
	_LOAD_UNLOAD LOAD=0{% for k in params
	%}{' '~k~'="'~params[k]~'"'}{% endfor %}
	
	
	{% set dummy = None if True else "
	M109
	{% set dummy = params.LENGTH|default(variable_load_length)|float %}
	{% set dummy = params.SPEED|default(variable_load_speed)|float %}
	{% set dummy = params.EXTRUDER|default(default extruder) %}
	{% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}
	{% set dummy = params.BEEPS|default(10)|int %}
	" %}

[gcode_macro _pause_inner_m700]
gcode = 
	{% set extruder = "extruder" ~ params.T|replace('0', '')
	if "T" in params else printer.toolhead.extruder %}
	{% if extruder != printer.toolhead.extruder%}
	ACTIVATE_EXTRUDER EXTRUDER={extruder}
	{% endif %}
	
	{% set z_param = (' Z="%f"' % params.Z) if 'Z' in params else "" %}
	
	{% if printer.idle_timeout.state|string == "Printing" %}
	PAUSE B="{0}" P=2{z_param}
	{% elif not printer.pause_resume.is_paused%}
	PARK B="{0}" P=2{z_param}
	{% endif %}

[gcode_macro m701]
description = Pauses/parks the toolhead then loads filament to the extruder.
	Usage: M701 [L<distance>] [Z<pos>] [T<extruder>]
gcode = 
	{% if 'U' in params %}
	{% if not 'L' in params %}
	RESPOND TYPE=error MSG="Argument \"U\" substituted for missing \"L\"."
	{% set dummy = params.__setitem__("L", params.U) %}
	{% else %}
	RESPOND TYPE=error MSG="Invalid argument \"U\" ignored."
	{% endif %}
	{% endif %}
	
	_PAUSE_INNER_M700 {% for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	LOAD_FILAMENT BEEPS="{10}" LENGTH={
	params.L|default(printer["gcode_macro _km_globals"].load_length)|float}

[gcode_macro m702]
description = Pauses/parks the toolhead then unloads filament from the extruder.
	Usage: M702 [U<distance>] [Z<pos>] [T<extruder>]
gcode = 
	{% if 'L' in params %}
	{% if not 'U' in params %}
	RESPOND TYPE=error MSG="Argument \"L\" substituted for missing \"U\"."
	{% set dummy = params.__setitem__("U", params.L) %}
	{% else %}
	RESPOND TYPE=error MSG="Invalid argument \"L\" ignored."
	{% endif %}
	{% endif %}
	
	_PAUSE_INNER_M700 {% for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	UNLOAD_FILAMENT BEEPS="{10}" LENGTH={
	params.U|default(printer["gcode_macro _km_globals"].load_length)|float}

[gcode_macro _km_globals]
variable_bed_surface_max_name_length = 10
variable_bed_surfaces = ['default']
variable_load_length = 90.0
variable_load_min_temp = 0
variable_load_priming_length = 20.0
variable_load_priming_speed = 200
variable_load_speed = 1200
variable_menu_show_octoprint = True
variable_menu_show_sdcard = True
variable_menu_temperature = [
	{'name' : 'PLA',  'extruder' : 200, 'bed' : 60},
	{'name' : 'PETG', 'extruder' : 230, 'bed' : 85},
	{'name' : 'ABS',  'extruder' : 245, 'bed' : 110}]
variable_park_x = 0.0
variable_park_y = 0.0
variable_park_z = 20.0
variable_print_min = ()
variable_print_max = ()
variable_pressure_advance_scale = -1.0
variable_probe_mesh_padding = 5.0
variable_probe_min_count = 3
variable_probe_count_scale = 1.0
variable_start_bed_heat_delay = 2000
variable_start_bed_heat_overshoot = 2.0
variable_start_clear_adjustments_at_end = True
variable_start_end_park_y = 0.0
variable_start_extruder_preheat_scale = 0.5
variable_start_extruder_probing_temp = 0
variable_start_home_z_at_temp = True
variable_start_level_bed_at_temp = True
variable_start_purge_clearance = 2.0
variable_start_purge_length = 0.0
variable_start_purge_prime_length = 12.0
variable_start_quad_gantry_level_at_temp = True
variable_start_random_placement_max = 0
variable_start_random_placement_padding = 10.0
variable_start_try_saved_surface_mesh = False
variable_start_z_tilt_adjust_at_temp = True
variable_travel_speed_xy = 3000
variable_travel_speed_z = 600
description = Initializes our globals, including any _km_options overrides.
gcode = 
	
	
	
	
	
	
	
	
	{% set required_sections = {"heater_bed" : None,
	"extruder" : None,
	"gcode_macro _km_options" : None,
	"idle_timeout" : ("gcode", "_KM_IDLE_TIMEOUT"),
	"pause_resume" : None,
	"respond" : None,
	"save_variables" : None,
	"virtual_sdcard" :
	("on_error_gcode", "CANCEL_PRINT")
	} %}
	{% set warn_removed = {
	"start_extruder_set_target_before_level" :
	"The start_extruder_set_target_before_level option has been removed. "
	"Use the start_extruder_probing_temp option instead to set a fixed "
	"probing temperature.",
	"start_gcode_before_print" :
	"The start_gcode_before_print option has been removed. The same effect "
	"can now be achieved by inserting custom gcode before the "
	"_PRINT_START_PHASE_PURGE line in your slicer's start gcode, or by "
	"wrapping the _PRINT_START_PHASE_PURGE macro. See the Slicer "
	"Configuration section in the readme for more information.",
	"velocity_decel_scale" :
	"The velocity_decel_scale option has been removed. Klipper's input "
	"shaping provides a superior mechanism for improving print quality "
	"at higher speeds.",
	} %}
	{% set output = [] %}
	{% for s in required_sections %}
	{% set f = required_sections[s][0] if required_sections[s] else None %}
	{% set v = required_sections[s][1] if required_sections[s] else None %}
	{% if s not in printer.configfile.config %}
	{% set dummy = output.append("Missing [%s] section.\n" | format(s)) %}
	{% elif f and
	(v not in printer.configfile.config[s][f]|default("")|upper) %}
	{% set dummy = output.append("Missing %s in %s for [%s] section.\n"
	| format(v, f, s)) %}
	{% endif %}
	{% endfor %}
	{% if output %}
	{ action_emergency_stop((
	"required printer.cfg section(s) missing:\n"
	~ output | join("\n")) ~
	"See readme: https://github.com/jschuh/klipper-macros\x23klipper-setup")
	}
	{% endif %}
	
	
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_level_bed_at_temp VALUE="{
	1 if printer.bed_mesh is defined else 0}"
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_quad_gantry_level_at_temp VALUE="{
	1 if printer.quad_gantry_level is defined else 0}"
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_z_tilt_adjust_at_temp VALUE="{
	1 if printer.z_tilt is defined else 0}"
	{% set toolhead = printer.toolhead %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=print_min VALUE="{
	(toolhead.axis_minimum.x, toolhead.axis_minimum.y)}"
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=print_max VALUE="{
	(toolhead.axis_maximum.x, toolhead.axis_maximum.y)}"
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_end_park_y VALUE="{
	toolhead.axis_maximum.y}"
	{% set settings = printer.configfile.settings %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_home_z_at_temp VALUE="{
	1 if ("stepper_z" in settings and
	settings.stepper_z.endstop_pin.split()|join("")|lower ==
	"probe:z_virtual_endstop") else 0}"
	
	{% set options = printer["gcode_macro _km_options"] %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	
	{% if options.park_x|default("")|string|lower == "min" %}
	{% set dummy = options.__setitem__("park_x",
	printer.configfile.settings.stepper_x.position_min) %}
	{% elif options.park_x|default("")|string|lower == "max" %}
	{% set dummy = options.__setitem__("park_x",
	printer.configfile.settings.stepper_x.position_max) %}
	{% endif %}
	{% if options.park_y|default("")|string|lower == "min" %}
	{% set dummy = options.__setitem__("park_y",
	printer.configfile.settings.stepper_y.position_min) %}
	{% elif options.park_y|default("")|string|lower == "max" %}
	{% set dummy = options.__setitem__("park_y",
	printer.configfile.settings.stepper_y.position_max) %}
	{% endif %}
	{% if options.start_end_park_y|default("")|string|lower == "min" %}
	{% set dummy = options.__setitem__("start_end_park_y",
	printer.configfile.settings.stepper_y.position_min) %}
	{% elif options.start_end_park_y|default("")|string|lower == "max" %}
	{% set dummy = options.__setitem__("start_end_park_y",
	printer.configfile.settings.stepper_y.position_max) %}
	{% endif %}
	{% if options.park_z|default("")|string|lower == "min" %}
	{% set dummy = options.__setitem__("park_z",
	printer.configfile.settings.stepper_z.position_min) %}
	{% elif options.park_z|default("")|string|lower == "max" %}
	{% set dummy = options.__setitem__("park_z",
	printer.configfile.settings.stepper_z.position_max) %}
	{% endif %}
	
	
	{% for k in options %}
	{% if k not in km %}
	{% if k in warn_removed %}
	{action_respond_info(warn_removed[k])}
	{% else %}
	{% set dummy = output.append("%s is not valid for _KM_OPTIONS." |
	format(k)) %}
	{% endif %}
	{% elif km[k] is string %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k
	} VALUE="'{options[k]|replace('\\','\\\\')|replace('\'','\\\'')
	|replace('\"','\\\"')}'"
	{% elif km[k] is float %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k
	} VALUE="{options[k]|float}"
	{% elif km[k] is integer or km[k] is boolean %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k} VALUE="{options[k]|int}"
	{% elif km[k] is mapping %}
	{% if options[k] is not mapping %}
	{% set dummy = output.append("%s requires a mapping type." |
	format(k)) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k
	} VALUE="{options[k]|replace('\"','\\\"')}"
	{% elif km[k] is sequence %}
	{% if options[k] is not sequence %}
	{% set dummy = output.append("%s requires a sequence type." |
	format(k)) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k
	} VALUE="{options[k]|replace('\"','\\\"')}"
	{% else %}
	{% set dummy = output.append("%s is not a valid type for _KM_OPTIONS." |
	format(k)) %}
	{% endif %}
	{% endfor %}
	
	{% if "homing_override" in printer.configfile.config %}
	{% for l in printer.configfile.config.homing_override.gcode.split("\n") %}
	{% if " g28 " in (" " ~ l.split("\x23")[0].split(";")[0]|lower ~ " ") %}
	{% set dummy = output.append(
	"G28 in [homing_override] gcode. Replace with G28.6245197 to "
	"fix recursive macro call.\n"
	"See readme: https://github.com/jschuh/klipper-macros\x23g28") %}
	{% endif %}
	{% endfor %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=check_km_config VARIABLE=load_errors VALUE="{
	output|replace('\"','\\\"')}"
	M400

[delayed_gcode INIT_GLOBALS]
initial_duration = 1
gcode = 
	LIST_MACROS SILENT=1
	_KM_GLOBALS
	
	CHECK_KM_CONFIG
	_INIT_SURFACES
	BED_MESH_CHECK
	
	SET_DRAW_PARAMS WIDTH="{printer.configfile.settings.extruder.nozzle_diameter}"
	
	_KM_OPTIONS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready

[gcode_macro check_km_config]
variable_load_errors = []
description = Checks global variables and throws an error on any invalid values.
	Does nothing if the config has no errors.
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set toolhead = printer.toolhead %}
	{% set output = load_errors %}
	{% if km.park_x > toolhead.axis_maximum.x or
	km.park_x < toolhead.axis_minimum.x %}
	{% set dummy = output.append("park_x is invalid.") %}
	{% endif %}
	{% if km.park_y > toolhead.axis_maximum.y or
	km.park_y < toolhead.axis_minimum.y %}
	{% set dummy = output.append("park_y is invalid.") %}
	{% endif %}
	{% if km.park_z > toolhead.axis_maximum.z or
	km.park_z < toolhead.axis_minimum.z %}
	{% set dummy = output.append("park_z is invalid.") %}
	{% endif %}
	{% if km.print_max[0] > toolhead.axis_maximum.x or
	km.print_max[1] > toolhead.axis_maximum.y %}
	{% set dummy = output.append("print_max is invalid.") %}
	{% endif %}
	{% if km.print_min[0] < toolhead.axis_minimum.x or
	km.print_min[1] < toolhead.axis_minimum.y %}
	{% set dummy = output.append("print_min is invalid.") %}
	{% endif %}
	{% if km.start_extruder_preheat_scale > 1.0 or
	km.start_extruder_preheat_scale < 0.0 %}
	{% set dummy = output.append("extruder_preheat_scale is invalid.") %}
	{% endif %}
	{% if km.load_length >
	printer.configfile.settings["extruder"].max_extrude_only_distance %}
	{% set dummy = output.append(
	"load_length exceeds max_extrude_only_distance.") %}
	{% endif %}
	{% if km.load_length < km.load_priming_length %}
	{% set dummy = output.append(
	"load_length is shorter than load_priming_length.") %}
	{% endif %}
	{% if km.load_length < 0.0 %}
	{% set dummy = output.append("load_length is negative.") %}
	{% endif %}
	{% if km.load_priming_length < 0.0 %}
	{% set dummy = output.append("load_priming_length is negative.") %}
	{% endif %}
	
	
	{% if output %}
	{ action_raise_error(output|sort|join('\nError: ')) }
	{% endif %}
	M400

[gcode_macro kmvars]
description = Lists global variables used by klipper-macros.
	Usage: KMVARS [SEARCH=<search_string>]
gcode = 
	{% set SEARCH = params.SEARCH|default(params.S|default(""))|lower %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set output = [] %}
	{% for k in km %}
	{% if SEARCH in k %}
	{% set dummy = output.append(k ~ ": " ~ km[k]) %}
	{% endif %}
	{% endfor %}
	{ action_respond_info(output|sort|join('\n')) }

[gcode_macro check_macro_docs]
description = Lists macros lacking proper documentation.
	Usage: CHECK_MACRO_DOCS [USAGE=<0|1>] [HIDDEN=<1|0>] [RENAMED=<1|0>]
gcode = 
	{% set USAGE = params.USAGE|default(0)|int %}
	{% set HIDDEN = params.HIDDEN|default(0)|int %}
	{% set RENAMED = params.RENAMED|default(0)|int %}
	{% set output = [] %}
	{%set config = printer.configfile.config %}
	{% for k in config|sort %}
	{% if k.startswith("gcode_macro") %}
	{% set name = k.split()[1] %}
	{% set desc = config[k].description|default("") %}
	{% set is_renamed = config[k].rename_existing|default("") %}
	{% if (not desc or (USAGE and not "Usage: "~name.upper() in desc)) and
	(HIDDEN or not name.startswith('_')) and (RENAMED or is_renamed) %}
	{% set dummy = output.append("%s&nbsp;%s: missing %s."
	| format("*" if is_renamed else "&nbsp;", name,
	"description" if not desc else "usage")) %}
	{% endif %}
	{% endif %}
	{% endfor %}
	{action_respond_info(output|join("\n"))}

[gcode_macro listvars]
description = Lists per-macro variables with a name containing SEARCH. This is
	useful for debugging macros by allowing you to probe printer state. Be very
	careful, however, as an overly broad SEARCH parameter can take a long time
	to process and potentially hang or crash klipper.
	Usage: LISTVARS SEARCH=<search_string>
gcode = 
	
	{% if 'SEARCH' not in params and 'S' not in params %}
	{ action_raise_error("Must provide a SEARCH parameter.") }
	{% endif %}
	{% set SEARCH = params.SEARCH|default(params.S)|lower %}
	{% set ns = namespace() %}
	{% set output = [] %}
	{% for item in printer %}
	{% if item is not string %}
	{% set ns.path = ['printer', "[%s]" % (item|string), ''] %}
	{% elif ' ' in item %}
	{% set ns.path = ['printer', "['%s']" % (item), ''] %}
	{% else %}
	{% set ns.path = ['printer.', item, ''] %}
	{% endif %}
	
	{% if SEARCH in ns.path|lower %}
	{% set dummy = output.append(ns.path|join) %}
	{% endif %}
	
	{% if printer[item].items() %}
	{% for childkey, child in printer[item].items() recursive %}
	{% set ns.path = ns.path[:loop.depth|int + 1] %}
	{% if childkey is not string %}
	{% set null = ns.path.append("[%s]" % (childkey|string)) %}
	{% elif ' ' in childkey %}
	{% set null = ns.path.append("['%s']" % (childkey)) %}
	{% else %}
	{% set null = ns.path.append(".%s" % (childkey)) %}
	{% endif %}
	
	{% if child is mapping  %}
	{loop(child.items())}
	{% else %}
	{% if SEARCH in ns.path|lower %}
	{% set dummy = output.append("%s : %s" % (ns.path|join, child)) %}
	{% endif %}
	{% endif %}
	{% endfor %}
	{% endif %}
	{% endfor %}
	{ action_respond_info(output|join("\n")) }

[gcode_macro list_macros]
description = Lists registered macros (and optionally show variable state).
	Usage: LISTVARS SEARCH=<search_string> VARS=<0|1> SILENT=<0|1>
variable_macros = {}
gcode = 
	
	{% if not macros %}
	{% set renames = {} %}
	{% for k in printer.configfile.config %}
	{% if k.lower().startswith("gcode_macro") and
	printer.configfile.config[k].rename_existing %}
	{% set name = k.split(None, 1)[1] | lower %}
	{% set dummy = renames.__setitem__(name,
	[printer.configfile.config[k].rename_existing|lower] +
	renames[name]|default([])) %}
	{% endif %}
	{% endfor %}
	{% for k in printer %}
	{% if k.lower().startswith("gcode_macro") %}
	{% set name = k.split(None, 1)[1] | lower %}
	{% set dummy = macros.__setitem__(name, renames[name]|default([])) %}
	{% endif %}
	{% endfor %}
	{% endif %}
	
	{% if params.SILENT|default(0)|int == 0 %}
	_LIST_MACROS_DISPLAY {rawparams}
	{% endif %}

[gcode_macro _list_macros_display]
gcode = 
	{% set SEARCH = params.SEARCH | default(params.S) | default("") | lower %}
	{% set VARS = params.VARS | default(params.V) | default(0) | int != 0 %}
	
	{% set macros = printer["gcode_macro list_macros"].macros %}
	{% set output = [] %}
	{% for k in macros %}
	{% if SEARCH in k | lower %}
	{% set line = k ~ ((" (renames: %s)" % (macros[k]|join(","))) if macros[k]
	else "") %}
	{% set outvars = [] %}
	{% if VARS %}
	{% for v in printer["gcode_macro " ~ k] | sort %}
	{% set dummy = outvars.append("\n* %s: %s" %
	(v, printer["gcode_macro " ~ k][v]|string)) %}
	{% endfor %}
	{% endif %}
	{% set dummy = output.append(line + outvars | join("")) %}
	{% endif %}
	{% endfor %}
	{ action_respond_info(output | sort | join("\n")) }

[gcode_macro set_heater_temperature_scaled]
gcode = 
	{% set HEATER = params.HEATER.lower() %}
	{% set TARGET = params.TARGET|default(0.0)|float %}
	{% set scaled_heaters =
	printer["gcode_macro set_heater_scaling"].scaled_heaters %}
	{% if HEATER in scaled_heaters %}
	{% set scales = scaled_heaters[HEATER] %}
	{% set dummy = scales.__setitem__("real_target", TARGET) %}
	{%if TARGET > 0.0 %}
	{% set TARGET = (((TARGET + scales.bump) * scales.scale, scales.minimum)
	| max, scales.maximum)|min %}
	{% endif %}
	{% endif %}
	SET_HEATER_TEMPERATURE HEATER="{HEATER}" TARGET={TARGET}

[gcode_macro temperature_wait_scaled]
gcode = 
	{% set SENSOR = params.SENSOR.lower() %}
	{% set heater = SENSOR if not SENSOR.startswith("heater_generic") else
	SENSOR.split()[1] %}
	{% set scaled_heaters =
	printer["gcode_macro set_heater_scaling"].scaled_heaters %}
	{% if heater in scaled_heaters %}
	{% set scales = scaled_heaters[heater] %}
	{% if "MINIMUM" in params and MINIMUM > 0.0 %}
	{% set MINIMUM = (((MINIMUM + scales.bump) * scales.scale, scales.minimum)
	| max, scales.maximum)|min %}
	{% endif %}
	{% if "MAXIMUM" in params and MAXIMUM > 0.0 %}
	{% set MAXIMUM = (((MAXIMUM + scales.bump) * scales.scale, scales.minimum)
	| max, scales.maximum)|min %}
	{% endif %}
	{% else %}
	{% set settings = printer.configfile.settings[SENSOR] %}
	{% set MINIMUM = params.MINIMUM|default(settings.min_temp) %}
	{% set MAXIMUM = params.MAXIMUM|default(settings.max_temp) %}
	{% endif %}
	{% if printer[sensor].temperature < MINIMUM or
	printer[sensor].temperature > MAXIMUM %}
	TEMPERATURE_WAIT SENSOR="{SENSOR}" MINIMUM={MINIMUM} MAXIMUM={MAXIMUM}
	{% endif %}

[gcode_macro _gcode_wait_wrapper_inner]
gcode = 
	
	
	{% set sensor = params.HEATER if params.HEATER in
	printer.heaters.available_heaters
	else ("heater_generic " ~ params.HEATER) %}
	{% set target = printer[sensor].target %}
	{% if 'R' in params and target > 0.0 %}
	{% set T = params.T|default("") %}
	M{params.M}.6245197 S{target} { (" T"~T) if T else "" }
	{% elif printer[sensor].temperature < target %}
	TEMPERATURE_WAIT SENSOR="{sensor}" MINIMUM={target}
	{% endif %}

[gcode_macro _gcode_wait_wrapper]
gcode = 
	{% set target = params.S | default(params.R | default(0))| float %}
	SET_HEATER_TEMPERATURE_SCALED HEATER="{params.HEATER}" TARGET={target}
	_GCODE_WAIT_WRAPPER_INNER{%
	for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}

[gcode_macro m109]
rename_existing = M109.6245197
gcode = 
	{% set extruder = "extruder" ~ params.T|replace('0', '')
	if "T" in params else printer.toolhead.extruder %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating
	_GCODE_WAIT_WRAPPER HEATER={extruder}{%
	for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro m190]
rename_existing = M190.6245197
gcode = 
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=bed_heating
	_GCODE_WAIT_WRAPPER HEATER=heater_bed {%
	for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro m191]
description = Sets chamber temperature (with wait for heating).
	Usage: M191 [S<temp>]
gcode = 
	
	{% if "R" in params %}
	{% set dummy = params.__setitem__("S", params.R) %}
	{% endif %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=chamber_heating
	_GCODE_WAIT_WRAPPER HEATER=chamber {%
	for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro m104]
rename_existing = M104.6245197
gcode = 
	{% set extruder = "extruder" ~ params.T|replace('0', '')
	if "T" in params else printer.toolhead.extruder %}
	SET_HEATER_TEMPERATURE_SCALED HEATER={extruder} TARGET={params.S|default(0)}

[gcode_macro m140]
rename_existing = M140.6245197
gcode = 
	SET_HEATER_TEMPERATURE_SCALED HEATER=heater_bed TARGET={params.S|default(0)}

[gcode_macro m141]
description = Sets chamber temperature.
	Usage: M141 [S<temp>]
gcode = 
	SET_HEATER_TEMPERATURE_SCALED HEATER=chamber TARGET={params.S|default(0)}

[gcode_macro _check_heater_params]
gcode = 
	{% set HEATER = params.HEATER|lower %}
	{% set sensor = params.HEATER %}
	{% if HEATER not in printer.heaters.available_heaters %}
	{% set sensor = "heater_generic " ~ HEATER %}
	{% if sensor not in printer.heaters.available_heaters %}
	{ action_raise_error("The value '%s' is not valid for HEATER"
	| format(HEATER)) }
	{% endif %}
	{% endif %}
	{% set settings = printer.configfile.settings[sensor] %}
	{% set scaled_heaters =
	printer["gcode_macro set_heater_scaling"].scaled_heaters %}
	{% if HEATER is in scaled_heaters %}
	{% set scales = scaled_heaters[HEATER] %}
	{% else %}
	{% set scales = { "scale": 1.0, "bump": 0.0, "minimum": settings.min_temp,
	"maximum": settings.max_temp,
	"real_target": printer[sensor].target} %}
	{% endif %}
	{% set SCALE = params.SCALE|default(scales.scale)|float %}
	{% set BUMP = params.BUMP|default(scales.bump)|float %}
	{% set MINIMUM = params.MINIMUM|default(scales.minimum)|float %}
	{% set MAXIMUM = params.MAXIMUM|default(scales.maximum)|float %}
	
	{% if SCALE <= 0 %}
	{ action_raise_error("SCALE must be a positive value.") }
	{% elif MINIMUM < settings.min_temp or MINIMUM > settings.max_temp %}
	{ action_raise_error("MINIMUM must be between %.1f and %.1f" |
	format(settings.min_temp, settings.max_temp)) }
	{% elif MAXIMUM < settings.min_temp or MAXIMUM > settings.max_temp %}
	{ action_raise_error("MAXIMUM must be between %.1f and %.1f" |
	format(settings.min_temp, settings.max_temp)) }
	{% elif MINIMUM >= MAXIMUM %}
	{ action_raise_error("MINIMUM must be less than MAXIMUM.") }
	{% elif "TARGET" in params and (params.TARGET|float < MINIMUM or
	params.TARGET|float > MAXIMUM) %}
	{ action_raise_error("TARGET must be between %.1f and %.1f" |
	format(settings.min_temp, settings.max_temp)) }
	{% endif %}

[gcode_macro set_heater_scaling]
description = Sets scaling parameters for heater. If a new target temperature is
	passed it will be adjusted to the scaling parameters.
	Usage: SET_HEATER_SCALING [HEATER=<heater>] [SCALE=<scale_factor>]
	[BUMP=<degrees>] [MAXIMUM=<degrees>]
	[MINIMUM=<degrees>] [TARGET=<temp>]
variable_scaled_heaters = {}
gcode = 
	
	{% if "HEATER" is not in params %}
	{% set output = [] %}
	{% for h in scaled_heaters %}
	{% set dummy = output.append(
	"%s: Scale: %.2f Bump: %.1f Minimum:%.1f Maximum: %.1f"
	| format(h, scaled_heaters[h].scale, scaled_heaters[h].bump,
	scaled_heaters[h].minimum, scaled_heaters[h].maximum)) %}
	{% endfor %}
	{% if output %}}{action_respond_info(output|join('\n'))}{% endif %}
	{% else %}
	
	{% set HEATER = params.HEATER.lower() %}
	{% set settings = printer.configfile.settings[HEATER] %}
	{% if HEATER is not in scaled_heaters %}
	{% set dummy = scaled_heaters.__setitem__(HEATER, {"scale": 1.0,
	"bump": 0.0, "minimum": settings.min_temp,
	"maximum": settings.max_temp,
	"real_target": printer[HEATER].target}) %}
	{% endif %}
	_CHECK_HEATER_PARAMS{% for k in params %}{' '~k~'='~params[k]}{% endfor %}
	{% set scales = scaled_heaters[HEATER] %}
	{% set SCALE = params.SCALE|default(scales.scale)|float %}
	{% set BUMP = params.BUMP|default(scales.bump)|float %}
	{% set MAXIMUM = params.MAXIMUM|default(scales.maximum)|float %}
	{% set MINIMUM = params.MINIMUM|default(scales.minimum)|float %}
	{% set TARGET = params.TARGET|default(scales.real_target)|float %}
	{% set dummy = scales.__setitem__("scale", SCALE) %}
	{% set dummy = scales.__setitem__("bump", BUMP) %}
	{% set dummy = scales.__setitem__("maximum", MAXIMUM) %}
	{% set dummy = scales.__setitem__("minimum", MINIMUM) %}
	{% set dummy = scales.__setitem__("real_target", TARGET) %}
	
	{% set settings = printer.configfile.settings[HEATER] %}
	{% if SCALE != 1.0 or BUMP != 0.0 or MINIMUM != settings.min_temp or
	MAXIMUM != settings.max_temp %}
	{% set dummy = scaled_heaters.__setitem__(HEATER, scales) %}
	{% else %}
	{% set dummy = scaled_heaters.__delitem__(HEATER) %}
	{% endif %}
	SET_HEATER_TEMPERATURE_SCALED HEATER={HEATER} TARGET={TARGET}
	{action_respond_info(
	"%s: Scale: %.2f Bump: %.1f Minimum:%.1f Maximum: %.1f Target: %.1f"
	| format(HEATER, SCALE, BUMP, MINIMUM, MAXIMUM, TARGET))}
	{% endif %}
	
	{% set dummy = None if True else "
	{% set dummy = params.HEATER|default(e.g. extruder) %}
	{% set dummy = params.SCALE|default(1.0)|float %}
	{% set dummy = params.BUMP|default(0.0)|float %}
	{% set dummy = params.MAXIMUM|default(max_temp)|float %}
	{% set dummy = params.MINIMUM|default(min_temp)|float %}
	{% set dummy = params.TARGET|default(current target)|float %}
	" %}

[gcode_macro reset_heater_scaling]
description = Clears scaling for heater (or all heaters if none specified).
	Usage: RESET_HEATER_SCALING [HEATER=<heater>]
gcode = 
	{% if "HEATER" in params %}
	{% set HEATER = params.HEATER.lower() %}
	{% if HEATER not in printer.heaters.available_heaters %}
	{ action_raise_error("The value '%s' is not valid for HEATER"
	| format(HEATER)) }
	{% endif %}
	{% set settings = printer.configfile.settings[HEATER] %}
	SET_HEATER_SCALING HEATER={HEATER
	} SCALE=1.0 BUMP=0.0 MINIMUM={settings.min_temp
	} MAXIMUM={settings.max_temp}
	{% else %}
	
	SET_GCODE_VARIABLE MACRO=set_heater_scaling VARIABLE=scaled_heaters VALUE={
	"{}"}
	{% endif %}

[gcode_macro _km_idle_timeout]
gcode = 
	{% if printer.pause_resume.is_paused %}
	{action_respond_info("Extruder powered down on idle timeout.")}
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{
	printer[printer.toolhead.extruder].target}"
	M104; Turn off extruder but leave the bed on.
	{% else %}
	TURN_OFF_HEATERS
	M107; turn off fan
	M84
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready
	{% endif %}

[gcode_macro _check_kinematic_limits]
gcode = 
	{% set toolhead = printer.toolhead %}
	{% if params.X and (params.X|float < toolhead.axis_minimum.x or
	params.X|float > toolhead.axis_maximum.x) %}
	{action_raise_error("X[%.3f] must be between %.3f and %.3f."
	| format(params.X|float, toolhead.axis_minimum.x,
	toolhead.axis_maximum.x))}
	{% elif params.Y and (params.Y|float < toolhead.axis_minimum.y or
	params.Y|float > toolhead.axis_maximum.y) %}
	{action_raise_error("Y[%.3f] must be between %.3f and %.3f."
	| format(params.Y|float, toolhead.axis_minimum.y,
	toolhead.axis_maximum.y))}
	{% elif params.Z and (params.Z|float < toolhead.axis_minimum.z or
	params.Z|float > toolhead.axis_maximum.z) %}
	{action_raise_error("Z[%.3f] must be between %.3f and %.3f."
	| format(params.Z|float, toolhead.axis_minimum.z,
	toolhead.axis_maximum.z))}
	{% elif params.E and (params.E|float|abs > printer.configfile.settings[
	"extruder"].max_extrude_only_distance) %}
	{action_raise_error("E[%.4f] exceeds max_extrude_only_distance[%.4f]."
	| format(params.E|float|abs, printer.configfile.settings[
	"extruder"].max_extrude_only_distance))}
	{% endif %}

[gcode_macro lazy_home]
description = Homes the specified axes. If lazy is true, already homed axes
	are skipped.
	Usage: LAZY_HOME [LAZY=<1|0>] [AXES=<axes_string>]
gcode = 
	
	LIST_MACROS SILENT=1
	_LAZY_HOME_INNER {rawparams}

[gcode_macro _lazy_home_inner]
gcode = 
	
	{% set G28 = (printer["gcode_macro list_macros"].macros.g28|
	default(["g28"],True))[-1] %}
	{% set axes = 'XYZ'|select('in', params.AXES|default("XYZ")|upper|list) %}
	{% if not axes %}
	{% set axes = 'XYZ' %}
	{% endif %}
	{% if params.LAZY|default(1)|int %}
	{% set axes = axes|reject('in', printer.toolhead.homed_axes|upper)|join() %}
	{% endif %}
	
	{% if axes %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing
	{G28}{% for k in axes %}{' ' ~ k}{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status
	{% endif %}

[gcode_macro g28]
description = Wraps the G28 command to add the Marlin "O" parameter so that
	already homed axes will not be homed again. See the Klipper documentation on
	G28 for the behavior of the other parameters.
	Usage: G28 [O] ...
rename_existing = G28.6245197
gcode = 
	{% set axes = 'XYZ'|select('in', params)|join() %}
	LAZY_HOME LAZY={('O' in params)|int}{%if axes%} AXES={axes}{%endif%}

[gcode_macro before_layer_change]
description = Add this to the "before layer change" input box in the slicer.
	Usage: BEFORE_LAYER_CHANGE HEIGHT=<current_height> LAYER=<current_layer>
gcode = 
	{% set height = params.HEIGHT|default(printer.toolhead.position.z)|float %}
	{% set layer = params.LAYER|default(-1)|int + 1 %}
	{% if height >= 0.0 and layer >= 0 %}
	SET_PRINT_STATS_INFO CURRENT_LAYER="{layer}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{height}"
	{% if printer["gcode_macro _km_layer_run"].clearance_z < height %}
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{
	height}"
	{% endif %}
	{% endif %}

[gcode_macro after_layer_change]
description = Add this to the "after layer change" input box in the slicer.
	Usage: AFTER_LAYER_CHANGE
gcode = 
	_KM_LAYER_RUN

[gcode_macro gcode_at_layer]
description = Schedules the specified g-code command to be run at the specified
	layer. LAYER=next will cause the command to run at the next layer change.
	Usage: GCODE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } COMMAND=<gcode>
	[CANCEL=<0|1>]
gcode = 
	{% set tot_layers = printer.print_stats.info.total_layer %}
	{% if params|length > 0 %}
	_KM_CHECK_IS_PRINTING
	
	{% set CANCEL = params.CANCEL|default(0)|int != 0 %}
	{% set COMMAND = params.COMMAND|default(None) %}
	{% if COMMAND %}
	{% set COMMAND = COMMAND.lstrip().split(None, 1) %}
	{% set COMMAND = " ".join([COMMAND[0]|upper] + COMMAND[1:]) %}
	{% endif %}
	
	{% if "LAYER" in params %}
	{% set cmd_container = "commands_layer" %}
	{% set cur_layer = printer.print_stats.info.current_layer|int %}
	{% if "HEIGHT" in params %}
	{action_raise_error("Conflicting HEIGHT and LAYER arguments provided.")}
	{% elif params.LAYER|string|lower == "next" %}
	{% set LAYER = cur_layer + 1 %}
	{% else %}
	{% set LAYER = params.LAYER|int %}
	{% endif %}
	{% if LAYER <= cur_layer %}
	{action_raise_error("LAYER[%i] must be above current print layer[%i]."
	| format(LAYER, cur_layer))}
	{% elif tot_layers and LAYER > tot_layers %}
	{action_raise_error("LAYER[%i] must not be above top layer[%i]."
	| format(LAYER, tot_layers))}
	{% endif %}
	{% set key = LAYER %}
	
	{% elif "HEIGHT" in params %}
	{% set cmd_container = "commands_height" %}
	{% set HEIGHT = params.HEIGHT|float %}
	{% set cur_height = printer["gcode_macro _km_layer_run"].cur_height %}
	{% if HEIGHT <= cur_height %}
	{action_raise_error(
	"HEIGHT[%.3f] must be above current print height[%.3f].")
	| format(HEIGHT, cur_height)}
	{% elif HEIGHT >= printer.toolhead.axis_maximum.z %}
	{action_raise_error(
	"HEIGHT[%.3f] must be below maximum Z height[%.3f].")
	| format(HEIGHT, printer.toolhead.axis_maximum.z)}
	{% endif %}
	{% set key = HEIGHT %}
	
	{% else %}
	{action_raise_error("No HEIGHT or LAYER argument provided.")}
	{% endif %}
	
	{% set commands = printer["gcode_macro _km_layer_run"][cmd_container] %}
	{% if key not in commands and not CANCEL %}
	{% set dummy = commands.__setitem__(key, []) %}
	{% endif %}
	
	{% if CANCEL %}
	{% if key in commands %}
	{% set pos = ("%i"|format(key)) if key is integer else
	("%.3fmm"|format(key)) %}
	{% if COMMAND %}
	{% set dummy = commands[key].remove(COMMAND) %}
	{% if commands[key]|length == 0 %}
	{% set dummy = commands.__delitem__(key) %}
	{% endif %}
	{action_respond_info("Cancelled %s %s:\n* %s" |
	format("layer" if k is integer else "height",
	pos, COMMAND))}
	{% else %}
	{% set dummy = commands.__delitem__(key) %}
	{action_respond_info("Cancelled all commands at %s %s." |
	format("layer" if k is integer else "height",
	pos))}
	{% endif %}
	{% endif %}
	{% elif not COMMAND %}
	{action_raise_error("No COMMAND argument provided.")}
	{% elif COMMAND in commands[key] %}
	{action_raise_error("Duplicate command previously scheduled.")}
	{% else %}
	{% set dummy = commands[key].append(COMMAND) %}
	{% set pos = ("%i"|format(key)) if key is integer else
	("%.3fmm"|format(key)) %}
	{action_respond_info("%s %s:\n* %s" |
	format("layer" if key is integer else "height",
	pos, COMMAND))}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE={cmd_container} VALUE="{
	commands|replace('\"','\\\"')}"
	_UPDATE_LAYER_COMPAT
	
	
	{% else %}
	{% set output = [] %}
	{% set commands = printer["gcode_macro _km_layer_run"].commands_layer %}
	{% for key in commands|list|sort %}
	{% set dummy = output.append("layer %i:" | format(key)) %}
	{% for c in commands[key] %}
	{% set dummy = output.append("* %s" | format(c)) %}
	{% endfor %}
	{% endfor %}
	{% set commands = printer["gcode_macro _km_layer_run"].commands_height %}
	{% for key in commands|list|sort %}
	{% set dummy = output.append("height %.3fmm:" | format(key)) %}
	{% for c in commands[key] %}
	{% set dummy = output.append("* %s" | format(c)) %}
	{% endfor %}
	{% endfor %}
	{action_respond_info(output|join('\n'))}
	{% endif %}

[gcode_macro _km_layer_run]
description = Runs pending commands for the current layer change.
	Usage: _KM_LAYER_RUN
variable_cur_height = 0.0
variable_clearance_z = 0.0
variable_commands_layer = {}
variable_commands_height = {}
gcode = 
	{% set cur_layer = printer.print_stats.info.current_layer %}
	{% for key in commands_layer | select("<=", cur_layer) | sort %}
	{action_respond_info("Executing scheduled commands at layer %d:\n%s" |
	format(key, commands_layer[key]|join('\n')))}
	{% for c in commands_layer[key] %}
	{c}
	{% endfor %}
	{% set dummy = commands_layer.__delitem__(key) %}
	{% endfor %}
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{
	commands_layer|replace('\"','\\\"')}"
	{% for key in commands_height | select("<=", cur_height) | sort %}
	{action_respond_info("Executing scheduled commands at height %.3f:\n%s" |
	format(key, commands_height[key]|join('\n')))}
	{% for c in commands_height[key] %}
	{c}
	{% endfor %}
	{% set dummy = commands_height.__delitem__(key) %}
	{% endfor %}
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{
	commands_height|replace('\"','\\\"')}"
	_UPDATE_LAYER_COMPAT

[gcode_macro init_layer_gcode]
description = Clears scheduled gcode commands and state for all layers.
	Usage: INIT_LAYER_GCODE LAYERS=<num>
gcode = 
	SET_PRINT_STATS_INFO TOTAL_LAYER="{params.LAYERS|int + 1}" CURRENT_LAYER="{0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"
	_UPDATE_LAYER_COMPAT

[gcode_macro _reset_layer_gcode]
description = Clears scheduled gcode commands and state for all layers.
	Usage: _RESET_LAYER_GCODE
gcode = 
	SET_PRINT_STATS_INFO TOTAL_LAYER="{0}" CURRENT_LAYER="{0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"
	_UPDATE_LAYER_COMPAT

[gcode_macro cancel_all_layer_gcode]
description = Clears all scheduled gcode commands.
	Usage: CANCEL_ALL_LAYER_GCODE
gcode = 
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"
	_UPDATE_LAYER_COMPAT

[gcode_macro _update_layer_compat]
gcode = 
	{% set next_layer = printer.print_stats.info.current_layer|int + 1 %}
	{% set commands_layer = printer["gcode_macro _km_layer_run"].commands_layer %}
	{% set keys = commands_layer | sort(reverse=True) %}
	
	{% set pause_next_layer = {'enable': False, 'call':
	printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer.call} %}
	{% if pause_next_layer.call in commands_layer[next_layer] | default([]) %}
	{% set dummy = pause_next_layer.__setitem__('enable', True) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{
	pause_next_layer|replace('\"','\\\"') }"
	
	
	{% set pause_at_layer = {'enable': False, 'layer': 0, 'call':
	printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer.call} %}
	{% if pause_next_layer.enable and
	pause_next_layer.call == pause_at_layer.call %}
	{% set keys = keys | reject("==", next_layer) %}
	{% endif %}
	
	
	
	
	{% for key in keys %}
	{% if pause_at_layer.call in commands_layer[key] %}
	{% set dummy = pause_at_layer.__setitem__('enable', True) %}
	{% set dummy = pause_at_layer.__setitem__('layer', key) %}
	{% endif %}
	{% endfor %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{
	pause_at_layer|replace('\"','\\\"') }"

[gcode_macro pause_next_layer]
description = Convenience macro to schedule the current print to pause at the
	next layer change. See PAUSE for additional arguments.
	Usage: PAUSE_NEXT_LAYER ...
gcode = 
	_CHECK_KINEMATIC_LIMITS{% for k in params%}{' ' ~k~ '=' ~ params[k]
	}{% endfor %}
	GCODE_AT_LAYER LAYER=NEXT COMMAND="PAUSE{% for k in params %}{
	' ' ~ k ~ '=' ~ params[k]}{% endfor %}"

[gcode_macro pause_at_layer]
description = Convenience macro to schedule the current print to pause at the
	specified layer change. LAYER=next will cause the command to run at the next
	layer change. See PAUSE for additional arguments.
	Usage: PAUSE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...
gcode = 
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	" %}
	{% set filtered_params = params|reject('in',['HEIGHT','LAYER'])|list|sort %}
	_CHECK_KINEMATIC_LIMITS{% for k in filtered_params%}{' ' ~k~ '=' ~ params[k]
	}{% endfor %}
	GCODE_AT_LAYER {% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor
	%} COMMAND="PAUSE{% for k in filtered_params %}{
	' ' ~ k ~ '=' ~ params[k]}{% endfor %}"

[gcode_macro speed_at_layer]
description = Convenience macro to schedule a feedrate adjustment at the
	specified layer change. LAYER=next will cause the command to run at the next
	layer change. (SPEED parameter behaves the same as the M220 S parameter.)
	Usage: SPEED_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } SPEED=<percentage>
gcode = 
	{% set SPEED = params.SPEED|default(0)|int %}
	{% if SPEED < 1 or SPEED > 500 %}
	{action_raise_error("SPEED[%i] parameter between 1 and 500 is required."
	% SPEED)}
	{% endif %}
	GCODE_AT_LAYER {% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor %} COMMAND="M220 S{SPEED|int}"
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	{% set dummy = params.SPEED|default(percentage)|int %}
	" %}

[gcode_macro flow_at_layer]
description = Convenience macro to schedule a flow percentage adjustment at the
	specified layer change. LAYER=next will cause the command to run at the next
	layer change. (FLOW parameter behaves the same as the M221 S parameter.)
	Usage: FLOW_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } FLOW=<percentage>
gcode = 
	{% set FLOW = params.FLOW|default(0)|int %}
	{% if FLOW < 1 or FLOW > 500 %}
	{action_raise_error("FLOW[%i] parameter between 1 and 500 is required."
	% FLOW)}
	{% endif %}
	GCODE_AT_LAYER {% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor %} COMMAND="M221 S{FLOW|int}"
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	{% set dummy = params.FLOW|default(percentage)|int %}
	" %}

[gcode_macro fan_at_layer]
description = Convenience macro to schedule a fan adjustment at the specified
	layer change. LAYER=next will cause the command to run at the next layer
	change. See SET_FAN_SCALING for additional arguments.
	Usage: FAN_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...
gcode = 
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	{% set dummy = params.SCALE|default(1.0)|float %}
	{% set dummy = params.BUMP|default(0)|int %}
	{% set dummy = params.MAXIMUM|default(0)|int %}
	{% set dummy = params.MINIMUM|default(255)|int %}
	{% set dummy = params.SPEED|default(current speed)|int %}
	" %}
	{% set filtered_params = params|reject('in',['HEIGHT','LAYER'])|list|sort %}
	{% if filtered_params|length == 0 %}
	{action_raise_error("No fan parameters provided.")}
	{% endif %}
	_CHECK_FAN_PARAMS{% for k in filtered_params %}{' '~k~'='~params[k]
	}{% endfor %}
	GCODE_AT_LAYER {% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor
	%} COMMAND="SET_FAN_SCALING{% for k in filtered_params %}{
	' ' ~ k ~ '=' ~ params[k]}{% endfor %}"

[gcode_macro heater_at_layer]
description = Convenience macro to schedule a heater adjustment at the specified
	layer change. LAYER=next will cause the command to run at the next layer
	change. See SET_HEATER_SCALING for additional arguments.
	Usage: HEATER_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...
gcode = 
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	{% set dummy = params.HEATER|default(e.g. extruder) %}
	{% set dummy = params.SCALE|default(1.0)|float %}
	{% set dummy = params.BUMP|default(0.0)|float %}
	{% set dummy = params.MAXIMUM|default(max_temp)|float %}
	{% set dummy = params.MINIMUM|default(min_temp)|float %}
	{% set dummy = params.TARGET|default(current target)|float %}
	" %}
	{% set filtered_params = params|reject('in',['HEIGHT','LAYER'])|list|sort %}
	_CHECK_HEATER_PARAMS{% for k in filtered_params%}{' ' ~ k ~ '=' ~ params[k]
	}{% endfor %}
	GCODE_AT_LAYER{% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor
	%} COMMAND="SET_HEATER_SCALING{% for k in filtered_params %}{
	' ' ~ k ~ '=\\\"' ~ params[k]|replace('\\','\\\\')|replace('\'','\\\'')
	|replace('\"','\\\"') ~ '\\\"'
	}{% endfor %}"

[gcode_macro park]
description = Park the toolhead
	Usage: PARK [P=<0|1|2>] [X=<pos>] [Y=<pos>] [Z=<pos>] [LAZY=<1|0>]
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set LAZY = params.LAZY|default(1)|int %}
	{% if printer.toolhead.homed_axes != "xyz" %}
	{% if LAZY %}
	LAZY_HOME
	{% else %}
	{action_raise_error("Must home axes first.")}
	{% endif %}
	{% endif %}
	
	
	{% set P = (params.P|default(2))|int %}
	{% set X = params.X|default(km.park_x)|float %}
	{% set Y = params.Y|default(km.park_y)|float %}
	{% set Z = params.Z|default(km.park_z)|float %}
	
	M400
	_CHECK_KINEMATIC_LIMITS X="{X}" Y="{Y}" Z="{Z}"
	_PARK_INNER X="{X}" Y="{Y}" Z="{Z}" P="{P}" LAZY="{LAZY}"
	
	{% set dummy = None if True else "
	{% set dummy = params.P|default(mode=<0|1|2>)|int %}
	{% set dummy = params.X|default(X position)|int %}
	{% set dummy = params.Y|default(Y position)|int %}
	{% set dummy = params.Z|default(Z position)|int %}
	" %}

[gcode_macro _park_inner]
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set travel_speed_xy = km.travel_speed_xy %}
	{% set travel_speed_z = km.travel_speed_z %}
	
	{% set position = printer.gcode_move.gcode_position %}
	{% set origin = printer.gcode_move.homing_origin%}
	
	
	
	{% set clearance_z = (printer["gcode_macro _km_layer_run"].clearance_z,
	position.z) | max %}
	{% set P = params.P|int %}
	{% set X = params.X|float - origin.x %}
	{% set Y = params.Y|float - origin.y %}
	{% set Z = params.Z|float %}
	{% set LAZY = params.LAZY|int %}
	
	
	{% if P == 0 %}
	{% if clearance_z > Z %}
	{% set Z = clearance_z %}
	{% endif %}
	{% elif P == 1 %}
	{% set Z = Z - origin.z %}
	{% elif P == 2 %}
	{% set Z = Z + clearance_z %}
	{% else %}
	{action_raise_error("Invalid parameter P=%i. Value must be 0, 1, or 2." |
	format(P)) }
	{% endif %}
	
	
	{% set Z = ((Z, printer.toolhead.axis_maximum.z - origin.z)|min,
	printer.toolhead.axis_minimum.z - origin.z)|max %}
	
	
	{% if (not LAZY) or P != 2 or X != position.x or Y != position.y
	or Z < clearance_z %}
	SAVE_GCODE_STATE NAME=_KM_PARK
	G90
	G0 Z{Z} F{travel_speed_z}
	G0 X{X} Y{Y} F{travel_speed_xy}
	RESTORE_GCODE_STATE NAME=_KM_PARK MOVE=0
	{% endif %}

[gcode_macro g27]
description = Parks the toolhead.
	Usage: G27 [P=<0|1|2>]
gcode = 
	
	PARK P={params.P|default(0)} {% for k in params|reject("in", "GP") %}{
	' '~k~'="'~params[k]~'"'
	}{% endfor %}

[gcode_macro pause]
description = Pauses the current print.
	Usage: PAUSE [X=<pos>] [Y=<pos>] [Z=<pos>] [E=<retract_length>] [B=<beeps>]
rename_existing = _KM_PAUSE_BASE
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% set E = (params.E|default(5))|float %}
	
	{% set B = params.B|default(10)|int if "output_pin beeper" in printer else 0
	%}
	
	{% if printer.pause_resume.is_paused %}
	{ action_respond_info("Print already paused") }
	{% elif printer.idle_timeout.state | string == "Printing" or
	(printer.virtual_sdcard|default({})).is_active|default(False) %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pausing RESET_STACK=1
	{% set position = printer.gcode_move.gcode_position %}
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_x VALUE="{position.x}"
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_y VALUE="{position.y}"
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_z VALUE="{position.z}"
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{E}"
	SAVE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE
	_KM_PAUSE_BASE
	M83
	{% if printer.extruder.can_extrude %}
	G1 E{'%.4f' % -E} F{km.load_speed}
	{% endif %}
	PARK P=2{% for k in params|select("in", "XYZ") %}{
	' '~k~'="'~params[k]~'"'}{% endfor %}
	
	{% for i in range(B) %}
	M300 P100
	G4 P200
	{% endfor %}
	{% else %}
	{ action_respond_info("Print not in progress") }
	{% endif %}

[gcode_macro m600]
description = Pauses the current print.
	Usage: M600 [B<beeps>] [E<pos>] [L<pos>] [R<temp>] [U<pos>] [X<pos>] [Y<pos>]
	[Z<pos>]
gcode = 
	PAUSE B="{0}" P=2{% for k in params|select("in", "EXYZ") %}{
	' '~k~'="'~params[k]~'"'}{% endfor %}
	UNLOAD_FILAMENT{% if 'U' in params %} LENGTH={params.U}{% endif
	%} BEEPS="{params.B|default(10)|int}"
	{% if 'R' in params %}M109 S{params.R}{% endif %}

[gcode_macro m601]
description = Pauses the current print.
	Usage: M601
gcode = 
	PAUSE

[gcode_macro m602]
description = Resumes the currently paused print.
	Usage: M602
gcode = 
	RESUME

[gcode_macro m24]
rename_existing = M24.6245197
gcode = 
	{% if printer.pause_resume.is_paused %}
	RESUME
	{% else %}
	M24.6245197
	{% endif %}

[gcode_macro m25]
rename_existing = M25.6245197
gcode = 
	PAUSE

[gcode_macro resume]
description = Resumes the currently paused print.
	Usage: RESUME [E<pos>]
rename_existing = _KM_RESUME_BASE
variable_saved_extruder_temp = 0
variable_saved_x = 0.0
variable_saved_y = 0.0
variable_saved_z = 0.0
variable_saved_e = 0.0
gcode = 
	{% if printer.pause_resume.is_paused %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% set extruder = printer[printer.toolhead.extruder] %}
	{% if extruder.target <= printer.configfile.settings[
	printer.toolhead.extruder].min_temp
	| float + 0.5 %}
	M109 S{saved_extruder_temp}
	{% endif %}
	
	
	
	{% if 'E' not in params and not saved_e %}
	{% set saved_e = 5.0 %}
	G1 E{'%.4f' % -saved_e } F{km.load_speed}
	{% endif %}
	
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"
	G90
	
	G0 X{saved_x} Y{saved_y} F{km.travel_speed_xy}
	G0 Z{saved_z} F{km.travel_speed_z}
	G91
	
	G1 E{'%.4f' % (params.E|default(saved_e))} F{km.load_speed}
	RESTORE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE MOVE=1
	_KM_RESUME_BASE
	{% else %}
	{ action_respond_info("Printer is not paused.") }
	{% endif %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=printing RESET_STACK=1

[gcode_macro clear_pause]
description = Clears the current pause state.
	Usage: CLEAR_PAUSE
rename_existing = _KM_CLEAR_PAUSE
gcode = 
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"
	_KM_CLEAR_PAUSE

[gcode_macro print_start]
description = Inserted by slicer at start of print. Rather than using this macro
	directly you should configure your slicer as instructed in the readme.
	Usage: PRINT_START BED=<temp> EXTRUDER=<temp> [CHAMBER=<temp>]
	[MESH_MIN=<x,y>] [MESH_MAX=<x,y>] [LAYERS=<num>]
	[NOZZLE_SIZE=<mm>]
gcode = 
	{action_respond_info(
	"This file is using an old The PRINT_START format. This print will run "
	"fine, but you should update your slicer config to take advantage of the "
	"phased PRINT_START macros. The slicer documentation is here:\n"
	"https://github.com/jschuh/klipper-macros\x23slicer-configuration"
	)}
	
	_PRINT_START_PHASE_INIT {rawparams}
	_PRINT_START_PHASE_PREHEAT
	_PRINT_START_PHASE_PROBING
	_PRINT_START_PHASE_EXTRUDER
	_PRINT_START_PHASE_PURGE

[gcode_macro _print_start_phase_init]
description = Inserted by slicer at start of print. Initializes PRINT_START
	phases.
	Usage: See PRINT_START.
gcode = 
	CHECK_KM_CONFIG
	SET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{False}"
	_KM_APPLY_PRINT_OFFSET RESET=1
	_PRINT_START_PHASE_CHECK PHASE=none
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% if not params.BED %}
	{% set dummy = params.__setitem__('BED', params.BED_TEMP|int) %}
	{% endif %}
	{% if not params.EXTRUDER %}
	{% set dummy = params.__setitem__('EXTRUDER', params.EXTRUDER_TEMP|int) %}
	{% endif %}
	
	
	PRINT_START_SET PRINT_START_PHASE="init" {% for k in params %}{' %s=\"%s\"' %
	(k,params[k]|replace('\\','\\\\')|replace('\'','\\\'')|replace('\"','\\\"'))
	}{% endfor %}
	
	
	_km_check_and_set_print_bounds
	
	M107
	CLEAR_PAUSE
	
	M140 S{params.BED}
	{% if params.CHAMBER %}M141 S{params.CHAMBER|int}{% endif %}
	{% if printer.bed_mesh %}BED_MESH_CLEAR{% endif %}
	
	{% if km.start_try_saved_surface_mesh and printer.bed_mesh %}
	LOAD_SURFACE_MESH
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="preheat"

[gcode_macro _print_start_phase_preheat]
description = Inserted by slicer at start of print. Handles the bed and chamber
	heating phases and ends when both are stabilized at their target temperatures.
	Usage: See PRINT_START.
gcode = 
	_PRINT_START_PHASE_CHECK PHASE=preheat
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set BED = print.BED|int %}
	{% set EXTRUDER = print.EXTRUDER|int %}
	{% set CHAMBER = print.CHAMBER|default(0)|int %}
	{% set LAYERS = print.LAYERS|default(0)|int %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% set bed_at_target = (BED + 0.4 - printer.heater_bed.temperature) |
	abs <= 0.6 %}
	PRINT_START_SET BED_AT_TARGET={1 if bed_at_target else 0}
	{% set start_level_bed_at_temp = km.start_level_bed_at_temp and
	not printer.bed_mesh.profile_name %}
	{% set actions_at_temp = start_level_bed_at_temp or
	km.start_quad_gantry_level_at_temp or
	km.start_z_tilt_adjust_at_temp or
	(km.start_home_z_at_temp and not bed_at_target) %}
	{% set bed_overshoot = (BED + (km.start_bed_heat_overshoot if
	(BED and not bed_at_target) else 0.0),
	printer.configfile.settings.heater_bed.max_temp ) | min %}
	
	INIT_LAYER_GCODE LAYERS="{LAYERS}"
	{% if CHAMBER > 0.0 %}
	M141 S{CHAMBER}
	{% endif %}
	
	M140 S{bed_overshoot}
	{% if actions_at_temp %}
	
	
	M104 S{km.start_extruder_probing_temp if km.start_extruder_probing_temp > 0
	else (km.start_extruder_preheat_scale * EXTRUDER)|round(0,'ceil')|int}
	{% else %}
	M104 S{EXTRUDER}
	{% endif %}
	
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing RESET_STACK=1
	G28
	G90
	{% if BED > 0.0 %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=bed_heating RESET_STACK=1
	
	{% if not bed_at_target %}
	PARK
	
	M190 S{bed_overshoot}
	G4 P{km.start_bed_heat_delay / 2}
	M190 R{BED}
	G4 P{km.start_bed_heat_delay / 2}
	{% endif %}
	{% endif %}
	
	{% if CHAMBER > 0.0 %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=chamber_heating RESET_STACK=1
	_KM_PARK_IF_NEEDED HEATER="chamber" RANGE=ABOVE
	M191 S{CHAMBER}
	{% endif %}
	
	{% if BED > 0.0 and bed_at_target%}
	M190 R{BED}
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="probing"

[gcode_macro _print_start_phase_probing]
description = Inserted by slicer at start of print. Performs probing (including
	mesh bed level) and other operations that should be run when the bed and
	chamber are stabilized at their target temps.
	Usage: See PRINT_START.
gcode = 
	_PRINT_START_PHASE_CHECK PHASE=probing
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set MESH_MIN = print.MESH_MIN|default(None) %}
	{% set MESH_MAX = print.MESH_MAX|default(None) %}
	
	{% if km.start_random_placement_max > 0 and print.PRINT_MIN and MESH_MIN %}
	{% set PRINT_MIN = print.PRINT_MIN.split(",")|map('float')|list %}
	{% set PRINT_MAX = print.PRINT_MAX.split(",")|map('float')|list %}
	{% set x_offset = (((km.print_max[0] - km.print_min[0] - PRINT_MAX[0] +
	PRINT_MIN[0] - 2 * km.start_random_placement_padding)|int,
	km.start_random_placement_max * 2)|min, 0)|max %}
	{% set y_offset = (((km.print_max[1] - km.print_min[1] - PRINT_MAX[1] +
	PRINT_MIN[1] - 2 * km.start_random_placement_padding)|int,
	km.start_random_placement_max * 2)|min, 0)|max %}
	{% if x_offset > 0 %}
	{% set x_offset = range(x_offset)|random + km.print_min[0] -
	PRINT_MIN[0] + km.start_random_placement_padding %}
	{% endif %}
	{% if y_offset > 0 %}
	{% set y_offset = range(y_offset)|random + km.print_min[1] -
	PRINT_MIN[1] + km.start_random_placement_padding %}
	{% endif %}
	
	
	{% set MESH_MIN = MESH_MIN.split(",")|map('float')|list %}
	{% set MESH_MAX = MESH_MAX.split(",")|map('float')|list %}
	{% set MESH_MIN_NEW = (MESH_MIN[0] + x_offset, MESH_MIN[1] + y_offset) %}
	{% set MESH_MAX_NEW = (MESH_MAX[0] + x_offset, MESH_MAX[1] + y_offset) %}
	{action_respond_info(
	"Relocating print origin from (%.3f,%.3f) "|format(*MESH_MIN) +
	"to (%.3f,%.3f)"|format(*MESH_MIN_NEW))}
	{% set MESH_MIN = (MESH_MIN_NEW[0], MESH_MIN_NEW[1])|join(',') %}
	{% set MESH_MAX = (MESH_MAX_NEW[0], MESH_MAX_NEW[1])|join(',') %}
	PRINT_START_SET PRINT_OFFSET={"%d,%d" % (x_offset,y_offset)}
	{% endif %}
	
	{% set EXTRUDER = print.EXTRUDER|int %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set start_level_bed_at_temp = km.start_level_bed_at_temp and
	not printer.bed_mesh.profile_name %}
	{% set start_home_z_at_temp = km.start_home_z_at_temp and
	not print.BED_AT_TARGET|int %}
	{% set actions_at_temp = start_level_bed_at_temp or
	km.start_quad_gantry_level_at_temp or
	km.start_z_tilt_adjust_at_temp or
	start_home_z_at_temp %}
	{% if actions_at_temp %}
	{% if km.start_extruder_probing_temp > 0 %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating RESET_STACK=1
	_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=2
	M109 R{km.start_extruder_probing_temp}
	{% else %}
	M104 S{EXTRUDER}
	{% endif %}
	{% if start_home_z_at_temp %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing RESET_STACK=1
	G28 Z
	{% endif %}
	{% if km.start_z_tilt_adjust_at_temp %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=calibrating_z RESET_STACK=1
	Z_TILT_ADJUST
	{% endif %}
	{% if km.start_quad_gantry_level_at_temp %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=leveling_gantry RESET_STACK=1
	QUAD_GANTRY_LEVEL
	{% endif %}
	{% if start_level_bed_at_temp %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=meshing RESET_STACK=1
	_km_mesh_if_needed {% if MESH_MIN %} MESH_MIN={MESH_MIN}{% endif
	%}{% if MESH_MAX %} MESH_MAX={MESH_MAX}{% endif %}
	{% endif %}
	{% if km.start_extruder_probing_temp > 0 %}
	M104 S{EXTRUDER}
	{% endif %}
	G4
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="extruder"

[gcode_macro _print_start_phase_extruder]
description = Inserted by slicer at start of print. Preheats the extruder.
	Usage: See PRINT_START.
gcode = 
	_PRINT_START_PHASE_CHECK PHASE=extruder
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set EXTRUDER = print.EXTRUDER|default(print.EXTRUDER_TEMP)|float %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	
	{% if EXTRUDER > 0 %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating RESET_STACK=1
	_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=ABOVE
	M109 S{EXTRUDER}
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="purge"

[gcode_macro _print_start_phase_purge]
description = Inserted by slicer at start of print. Generates purge lines.
	Usage: See PRINT_START.
gcode = 
	_PRINT_START_PHASE_CHECK PHASE=purge
	
	_KM_APPLY_PRINT_OFFSET
	
	_APPLY_BED_SURFACE_OFFSET
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set MESH_MIN = print.MESH_MIN|default(None) %}
	{% set MESH_MAX = print.MESH_MAX|default(None) %}
	{% set NOZZLE_SIZE = print.NOZZLE_SIZE|default(print.NOZZLE_SIZE)|
	default(printer.configfile.settings.extruder.nozzle_diameter)|float %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% if km.start_purge_length > 0.0 and printer.extruder.can_extrude %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=purging RESET_STACK=1
	DRAW_PURGE_LINE WIDTH="{NOZZLE_SIZE * 1.25}" HEIGHT="{NOZZLE_SIZE * 0.625
	}"{% if MESH_MIN %} PRINT_MIN={MESH_MIN}{% endif
	%}{% if MESH_MAX %} PRINT_MAX={MESH_MAX}{% endif %}
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="printing"
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=printing RESET_STACK=1

[gcode_macro _km_park_if_needed]
description = Parks the extruder if the current temperature of the supplied
	heater is not within the specified target range.
	Usage: _KM_PARK_IF_NEEDED HEATER=<heater> RANGE=[<percentage>|ABOVE|BELOW]
gcode = 
	
	{% set HEATER = params.HEATER if params.HEATER in
	printer.heaters.available_heaters else
	("heater_generic " ~ params.HEATER) %}
	{% set RANGE = (params.RANGE|default(1))|string|upper %}
	
	{% if printer[HEATER].target %}
	{% if RANGE == "ABOVE" %}
	{% if printer[HEATER].temperature < printer[HEATER].target %}
	PARK
	{% endif %}
	{% elif RANGE == "BELOW" %}
	{% if printer[HEATER].temperature > printer[HEATER].target %}
	PARK
	{% endif %}
	{% elif (printer[HEATER].temperature - printer[HEATER].target)|abs >
	(printer[HEATER].target * RANGE|float * 0.01)|abs %}
	PARK
	{% endif %}
	{% endif %}

[gcode_macro _km_apply_print_offset]
variable_offset = []
gcode = 
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% if params.RESET|default(0)|int and offset and
	not printer["gcode_macro _km_save_state"].is_ephemeral%}
	{% set PRINT_OFFSET = [offset.pop(0) * -1, offset.pop() * -1] %}
	{% elif print.PRINT_OFFSET and not offset and
	not printer["gcode_macro _km_save_state"].is_ephemeral %}
	{% set PRINT_OFFSET = print.PRINT_OFFSET.split(",")|map('float')|list %}
	{% set dummy = offset.extend(PRINT_OFFSET) %}
	{% endif %}
	
	{% if PRINT_OFFSET %}
	_KM_SET_GCODE_OFFSET_BASE {"X_ADJUST=%.2f Y_ADJUST=%.2f"|
	format(*PRINT_OFFSET)}
	{% endif %}

[gcode_macro _km_mesh_if_needed]
gcode = 
	
	
	
	{% if not printer.bed_mesh.profile_name %}
	BED_MESH_CALIBRATE_FAST {rawparams}
	{% endif %}

[gcode_macro print_start_set]
description = Inserted by slicer to set values used by PRINT_START.
	Usage: PRINT_START_SET <VARIABLE>=<value>
variable_print = {}
gcode = 
	{%for k in params %}
	{% set dummy = print.__setitem__(k|upper, params[k]) %}
	{% endfor %}

[gcode_macro _print_start_phase_check]
gcode = 
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set PRINT_START_PHASE = print.PRINT_START_PHASE|default("none") %}
	{% if PRINT_START_PHASE != params.PHASE %}
	
	SET_GCODE_VARIABLE MACRO=print_start_set VARIABLE=print VALUE="{{}}"
	{% if params.PHASE != 'none' %}
	{% set error = "PRINT_START phase error. Expected '%s' but found '%s'" %
	(params.PHASE, PRINT_START_PHASE) %}
	
	{% if not 'virtual_sdcard' in printer or
	not printer.virtual_sdcard.is_active or 'CANCEL_PRINT' not in
	printer.configfile.settings.virtual_sdcard.on_error_gcode|
	default("")|upper %}
	{action_respond_info(error)}
	CANCEL_PRINT
	{% else %}
	{action_raise_error(error)}
	{% endif %}
	{% else %}
	{ action_respond_info("Expected phase '%s' but found '%s'. Resetting."
	% (params.PHASE, PRINT_START_PHASE)) }
	{% endif %}
	{% endif %}

[gcode_macro print_end]
description = Inserted by slicer at end of print.
	Usage: PRINT_END
gcode = 
	_KM_CHECK_IS_PRINTING
	M400
	_PRINT_END_INNER
	
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% if km.start_clear_adjustments_at_end != 0 %}
	RESET_HEATER_SCALING
	RESET_FAN_SCALING
	M220 S100
	M221 S100
	{% endif %}
	_RESET_LAYER_GCODE
	_RESET_VELOCITY_LIMITS
	TURN_OFF_HEATERS
	M107; turn off fan
	{% if printer.bed_mesh %}BED_MESH_CLEAR{% endif %}
	
	{% if printer.toolhead.homed_axes|lower == "xyz" %}
	PARK Y="{km.start_end_park_y}"
	{% endif %}
	M84
	CLEAR_PAUSE
	SET_GCODE_VARIABLE MACRO=print_start_set VARIABLE=print VALUE="{{}}"
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready RESET_STACK=1

[gcode_macro _print_end_inner]
variable_cancelled = False
gcode = 
	SET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{False}"
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set toolhead = printer.toolhead %}
	{% set origin = printer.gcode_move.homing_origin%}
	{% set max_x = km.print_max[0] - origin.x %}
	{% set max_y = km.print_max[1] - origin.y %}
	{% set max_z = toolhead.axis_maximum.z - origin.z %}
	
	{% if not cancelled %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=completing
	{% endif %}
	
	{% if printer.extruder.can_extrude %}
	
	{% if not printer.pause_resume.is_paused and not cancelled and
	toolhead.homed_axes|lower == "xyz" %}
	{% set x_safe = (max_x - toolhead.position.x, 2.0)|min %}
	{% set y_safe = (max_y - toolhead.position.y, 2.0)|min %}
	{% set z_safe = (max_z - toolhead.position.z, 2.0)|min %}
	G91
	G0 Z{z_safe} E-1.0 F{km.travel_speed_z * 2}
	G0 X{x_safe} Y{y_safe} E-1.0 F{km.travel_speed_xy}
	
	_KM_APPLY_PRINT_OFFSET RESET=1
	{% endif %}
	
	
	G92 E0
	G1 E-5.0 F3600
	M400
	{% endif %}

[gcode_macro _km_check_is_printing]
variable_debug_state = False
description = Throws an error if print is not currently in progress.
gcode = 
	{% if not debug_state and
	printer.idle_timeout.state|string != "Printing" and
	not (printer.virtual_sdcard|default({})).is_active|default(False) and
	not printer.pause_resume.is_paused %}
	{ action_raise_error("No active print.") }
	{% endif %}

[gcode_macro _km_check_and_set_print_bounds]
description = Validates all print bounds and caches their values.
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set print = printer["gcode_macro print_start_set"].print %}
	
	
	{% if print.MESH_MIN %}
	{% set MESH_MIN = print.MESH_MIN.split(",")|map('float')|list %}
	{% set MESH_MAX = print.MESH_MAX.split(",")|map('float')|list %}
	{%if MESH_MIN[0] < km.print_min[0] or MESH_MIN[1] < km.print_min[1] %}
	{action_raise_error("MESH_MIN %s is outside the printable bounds" %
	(MESH_MIN|string, km.print_min|string))}
	{%elif MESH_MAX[0] > km.print_max[0] or MESH_MAX[1] > km.print_max[1] %}
	{action_raise_error("MESH_MAX %s is outside the printable bounds %s" %
	(MESH_MAX|string, km.print_max|string))}
	{% endif %}
	{% endif %}
	
	
	{% set points = [] %}
	{% if print.MODEL_MIN or print.MODEL_MAX %}
	{% set MODEL_MIN = print.MODEL_MIN.split(",")|map('float')|list %}
	{% set MODEL_MAX = print.MODEL_MAX.split(",")|map('float')|list %}
	{% set points = [MODEL_MIN, MODEL_MAX] %}
	{% endif %}
	{% if (printer.exclude_object|default({})).objects %}
	{% set points = printer.exclude_object.objects|selectattr('polygon')|
	map(attribute='polygon')|sum(start=points) %}
	{% set points_len = points|length %}
	{% if points_len >= 2 %}
	{% set x_coords = (points|map(attribute=0)|sort|list)[0::points_len-1] %}
	{% set y_coords = (points|map(attribute=1)|sort|list)[0::points_len-1] %}
	{% set MODEL_MIN = (x_coords[0],y_coords[0])|map('float')|list %}
	{% set MODEL_MAX = (x_coords[1],y_coords[1])|map('float')|list %}
	PRINT_START_SET MODEL_MIN="{MODEL_MIN|join(',')
	}" MODEL_MAX="{MODEL_MAX|join(',')}"
	{% endif %}
	{% endif %}
	
	{% if MODEL_MIN %}
	
	{% if MODEL_MIN[0] < km.print_min[0] or MODEL_MIN[1] < km.print_min[1] %}
	{action_raise_error("MODEL_MIN %s is outside the printable bounds" %
	(MODEL_MIN|string, km.print_min|string))}
	{% elif MODEL_MAX[0] > km.print_max[0] or MODEL_MAX[1] > km.print_max[1] %}
	{action_raise_error("MODEL_MAX %s is outside the printable bounds %s" %
	(MODEL_MAX|string, km.print_max|string))}
	{% endif %}
	{% endif %}
	
	
	{% if MESH_MIN and MODEL_MIN %}
	PRINT_START_SET PRINT_MIN="{((MODEL_MIN[0],MESH_MIN[0])|min,
	(MODEL_MIN[1],MESH_MIN[1])|min)|join(',')
	}" PRINT_MAX="{((MODEL_MAX[0],MESH_MAX[0])|max,
	(MODEL_MAX[1],MESH_MAX[1])|max)|join(',')}"
	{% else %}
	PRINT_START_SET PRINT_MIN="{km.print_min|join(',')
	}" PRINT_MAX="{km.print_max|join(',')}"
	{% endif %}

[gcode_macro _km_save_state]
description = Tracks gcode state.
variable_state_set = {}
variable_is_ephemeral = 0
gcode = 
	{% if params.SAVE|int %}
	{% set dummy = state_set.__setitem__(params.NAME, None) %}
	{% else %}
	{% set dummy = state_set.__delitem__(params.NAME) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=_km_save_state VARIABLE=is_ephemeral VALUE="{
	1 if state_set|length > 0 else 0 }"

[gcode_macro save_gcode_state]
description = Wraps SAVE_GCODE_STATE to track persistence state.
	Usage: See Klipper documentation
rename_existing = _KM_SAVE_GCODE_STATE
gcode = 
	_KM_SAVE_GCODE_STATE {rawparams}
	{% set NAME = params.NAME|default("default") %}
	_km_save_state NAME={NAME} SAVE=1

[gcode_macro restore_gcode_state]
description = Wraps RESTORE_GCODE_STATE to track persistence state.
	Usage: See Klipper documentation
rename_existing = _KM_RESTORE_GCODE_STATE
gcode = 
	_KM_RESTORE_GCODE_STATE {rawparams}
	{% set NAME = params.NAME|default("default") %}
	_km_save_state NAME={NAME} SAVE=0

[gcode_macro _abort_on_gcode_state]
gcode = 
	{% set save_state = printer["gcode_macro _km_save_state"] %}
	{% if save_state.is_ephemeral %}
	{action_raise_error("Encountered unexpected save state " +
	save_state.state_set|list|sort|string)}
	{% endif %}

[gcode_macro _km_print_status]
variable_last_status = 'none'
variable_status_stack = []
variable_command_list = {}
variable_status_list = [
	'ready',
	'filament_load',
	'filament_unload',
	'bed_heating',
	'chamber_heating',
	'homing',
	'leveling_gantry',
	'calibrating_z',
	'meshing',
	'extruder_heating',
	'purging',
	'printing',
	'pausing',
	'cancelling',
	'completing',
	]
gcode = 
	{% set ACTION = params.ACTION|trim|upper %}
	{% set STATUS = params.STATUS|default("")|trim|lower %}
	
	
	{% if ACTION == "ADD_EVENT" %}
	{% set COMMAND = params.COMMAND %}
	{% set ARGS = params.ARGS|default(0)|int != 0 %}
	{% set TYPE = params.TYPE|default('ENTER')|trim|upper %}
	{% set WHEN = params.WHEN|default('PRINTING')|trim|upper %}
	{% set FILTER_ENTER =
	(params.FILTER_ENTER|default("")|trim|lower).split(',')|
	select()|unique|list %}
	{% set FILTER_LEAVE =
	(params.FILTER_LEAVE|default("")|trim|lower).split(',')|
	select()|unique|list %}
	
	{% set STATUSES = STATUS.split(',')|map('trim')|list %}
	{% for s in (STATUSES if STATUSES[0] != 'all' else status_list) %}
	{% if not s in command_list %}
	{% set dummy = command_list.__setitem__(s,[]) %}
	{% endif %}
	{% set dummy = command_list[s].append({'cmd':COMMAND, 'args':ARGS,
	'type':TYPE, 'when':WHEN,
	'filt_e':FILTER_ENTER,
	'filt_l':FILTER_LEAVE}) %}
	{% endfor %}
	
	
	{% elif ACTION == "CHANGE" %}
	{% if params.RESET_STACK|default(0)|int %}
	{% for dummy in range(status_stack|length) %}
	{% set dummy = status_stack.pop() %}
	{% endfor %}
	
	
	{% elif STATUS == "pop_status" %}
	{% set STATUS = (status_stack|default(['ready'], True)).pop() %}
	{% endif %}
	
	{% if STATUS not in status_list %}
	{action_raise_error("Status '%s' not valid."|format(STATUS))}
	{% endif %}
	
	{% if STATUS != last_status %}
	{% set is_printing =
	printer["gcode_macro print_start_set"].print.PRINT_START_PHASE|
	default("")|length != 0 %}
	{% set print_states = ('ALWAYS', 'PRINTING' if is_printing else 'IDLE') %}
	
	{% for c in command_list[last_status]|default([]) %}
	{% if c.type in ('BOTH','LEAVE') and c.when in print_states and
	(not c.filt_l or STATUS in c.filt_l) %}
	M400
	{c.cmd}{% if c.args %} TYPE=LEAVE WHEN={print_states[1]
	} LAST_STATUS={last_status} NEXT_STATUS={STATUS}{% endif %}
	{% endif %}
	{% endfor %}
	
	{% for c in command_list[STATUS]|default([]) %}
	{% if c.type in ('BOTH','ENTER') and c.when in print_states and
	(not c.filt_e or STATUS in c.filt_e) %}
	M400
	{c.cmd}{% if c.args %} TYPE=ENTER WHEN={print_states[1]
	} LAST_STATUS={last_status} NEXT_STATUS={STATUS}{% endif %}
	{% endif %}
	{% endfor %}
	SET_GCODE_VARIABLE MACRO=_km_print_status VARIABLE=last_status VALUE="'{
	STATUS}'"
	{% endif %}
	
	
	{% elif ACTION == "PUSH_STATUS" %}
	{% set dummy = status_stack.append(last_status) %}
	
	
	{% else %}
	{action_raise_error("Action '%s' not valid."|format(ACTION))}
	{% endif %}

[gcode_macro gcode_on_print_status]
description = Adds a gcode command for a status event.
	Usage: GCODE_ON_PRINT_STATUS STATUS=<status> COMMAND=<gcode> [ARGS=<1|0>]
	[WHEN=<PRINTING|IDLE|ALWAYS>]
	[TYPE=<ENTER|LEAVE|BOTH>]
	[FILTER_ENTER=<status list>]
	[FILTER_LEAVE=<status list>]
gcode = 
	{% set STATUS = (params.STATUS|lower).split(',')|map('trim')|list %}
	{% set TYPE = params.TYPE|default('ENTER')|trim|upper %}
	{% set WHEN = params.WHEN|default('PRINTING')|trim|upper %}
	{% set FILTER_ENTER =
	(params.FILTER_ENTER|default("")|trim|lower).split(',')|select()|list %}
	{% set FILTER_LEAVE =
	(params.FILTER_LEAVE|default("")|trim|lower).split(',')|select()|list %}
	
	
	{% set status_list = printer["gcode_macro _km_print_status"].status_list %}
	{% for s in STATUS %}
	{% if not (s in status_list or s == 'all' and STATUS|length == 1) %}
	{action_raise_error("STATUS parameter '%s' not valid."|format(s))}
	{% endif %}
	{% endfor %}
	
	{% if TYPE not in ('ENTER', 'LEAVE', 'BOTH') %}
	{action_raise_error("TYPE paramater '%s' not valid."|format(TYPE))}
	{% elif WHEN not in ('PRINTING', 'IDLE', 'ALWAYS') %}
	{action_raise_error("WHEN parameter '%s' not valid."|format(WHEN))}
	{% elif TYPE == 'ENTER' and FILTER_LEAVE %}
	{action_raise_error("FILTER_LEAVE not valid with TYPE=ENTER.")}
	{% elif TYPE == 'LEAVE' and FILTER_ENTER %}
	{action_raise_error("FILTER_ENTER not valid with TYPE=LEAVE.")}
	{% endif %}
	{% for f in FILTER_ENTER %}
	{% if f not in status_list %}
	{action_raise_error("FILTER_ENTER parameter '%s' not valid."|format(f))}
	{% endif %}
	{% endfor %}
	{% for f in FILTER_LEAVE %}
	{% if f not in status_list %}
	{action_raise_error("FILTER_LEAVE parameter '%s' not valid."|format(f))}
	{% endif %}
	{% endfor %}
	
	
	_KM_PRINT_STATUS ACTION=ADD_EVENT {rawparams}

[gcode_macro m201]
description = Sets maximum accelleration.
	Usage: M201 [X<accel>] [Y<accel>]
variable_max_accel = 1.7976931348623157e+308
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% if 'X' in params or 'Y' in params %}
	{% set accel = (params.X|default(params.Y)|float,
	params.Y|default(params.X)|float)|min %}
	SET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{accel}"
	{% else %}
	SET_VELOCITY_LIMIT
	{% endif %}

[gcode_macro m203]
description = Sets maximum velocity.
	Usage: M203 [X<velocity>] [Y<velocity>]
gcode = 
	{% if 'X' in params or 'Y' in params %}
	{% set velocity = (params.X|default(params.Y)|float,
	params.Y|default(params.X)|float)|min %}
	SET_VELOCITY_LIMIT VELOCITY="{velocity}"
	{% else %}
	SET_VELOCITY_LIMIT
	{% endif %}

[gcode_macro m205]
description = Sets square corner velocity.
	Usage: M203 [X<velocity>] [Y<velocity>]
gcode = 
	{% if 'X' in params or 'Y' in params %}
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY="{
	(params.X|default(0)|float, params.Y|default(0)|float)|min}"
	{% else %}
	SET_VELOCITY_LIMIT
	{% endif %}

[gcode_macro m900]
description = Sets pressure advance.
	Usage: M900 [K<advance>] [T<extruder_index>]
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% if km.pressure_advance_scale > 0.0 %}
	{% set extruder = "extruder" ~ params.T|replace('0', '')
	if "T" in params else printer.toolhead.extruder %}
	{% if 'K' in params %}
	SET_PRESSURE_ADVANCE EXTRUDER="{extruder}" ADVANCE="{
	params.K|float * km.pressure_advance_scale}"
	{% endif %}
	{% endif %}

[gcode_macro _reset_velocity_limits]
description = Sets maximum accelleration.
	Usage: M204 [S<accel>] [P<accel> T<accel>]
gcode = 
	SET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{1.7976931348623157e+308}"

[gcode_macro bed_mesh_calibrate]
rename_existing = _KM_BED_MESH_CALIBRATE_BASE
description = Wraps BED_MESH_CALIBRATE, scaling probe count to specified area.
	Usage: See Klipper documentation.
gcode = 
	BED_MESH_CALIBRATE_FAST{%for k in params%}{' '~k~'="'~params[k]~'"'}{%endfor%}

[gcode_macro g29]
gcode = 
	BED_MESH_CALIBRATE

[idle_timeout]
gcode = 
	_KM_IDLE_TIMEOUT

[respond]

[gcode_macro PRINT_START]
rename_existing = KM_PRINT_START
gcode = 
	
	STATUS_HOMING
	KM_PRINT_START {rawparams}
	STATUS_PRINTING

[board_pins EBB36_G0B1_v1.2]
mcu = ebbcan
aliases = 
aliases_step = 
	EXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15
aliases_limitsw = 
	LIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6
aliases_bltouch = 
	PROBE_1=PB9,PROBE_2=PB8
aliases_fans = 
	FAN0=PA1,FAN1=PA0
aliases_thermistors = 
	TH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7
aliases_heaters = 
	HE0=PB13
aliases_rgb = 
	RGBLED=PD3
aliases_adxl = 
	ADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11
aliases_i2c = 
	AUX0=PB3,AUX1=PB4

[neopixel sb_leds]
pin = ebbcan:RGBLED
chain_count = 2
color_order = GRB
initial_red = 0.0
initial_green = 0.0
initial_blue = 0.0
initial_white = 1.0

[save_variables]
filename = ~/printer_data/variables.cfg

[mcu CB1]
serial = /tmp/klipper_host_mcu

[mcu]
canbus_uuid = f94e10a9add8

[mcu ebbcan]
canbus_uuid = 57244ec148c0

[printer]
kinematics = corexy
max_velocity = 600
max_accel = 10000
max_accel_to_decel = 5000
max_z_velocity = 5
max_z_accel = 100

[stepper_x]
step_pin = PE2
dir_pin = !PB4
enable_pin = !PC11
microsteps = 16
rotation_distance = 40
endstop_pin = !ebbcan:LIMIT_2
position_endstop = 220
position_min = -4
position_max = 220
homing_speed = 50

[tmc2209 stepper_x]
uart_pin = PC10
diag_pin = PF3
run_current = 1.1

[tmc2209 stepper_y]
uart_pin = PF13
diag_pin = PF4
run_current = 1.1

[tmc2209 stepper_z]
uart_pin = PF9
diag_pin = PF5
run_current = 0.650

[tmc2209 extruder]
uart_pin = ebbcan:EXT_UART
diag_pin = ebbcan:LIMIT_3
run_current = 0.650

[stepper_y]
step_pin = PF12
dir_pin = !PF11
enable_pin = !PB3
microsteps = 16
rotation_distance = 40
endstop_pin = ^PF3
position_endstop = 220
position_min = -4
position_max = 220
homing_speed = 50

[stepper_z]
step_pin = PD7
dir_pin = !PD6
enable_pin = !PF10
microsteps = 16
rotation_distance = 8
endstop_pin = probe:z_virtual_endstop
position_max = 300
position_min = -3

[heater_bed]
heater_pin = PB7
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PA0
min_temp = 0
max_temp = 130
control = pid
pid_kp = 63.528
pid_ki = 0.875
pid_kd = 1153.041

[temperature_sensor raspberry_pi]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor mcu_temp]
sensor_type = temperature_mcu
min_temp = 0
max_temp = 100

[controller_fan MCU_Fan]
pin = PE6
heater = extruder
fan_speed = 1

[heater_fan heatbreak_cooling_fan]
pin = ebbcan:FAN0
kick_start_time = 0.25
heater = extruder
heater_temp = 50.0
fan_speed = 1

[fan]
pin = ebbcan:FAN1

[safe_z_home]
home_xy_position = 140, 140
speed = 100
z_hop = 10
z_hop_speed = 20

[extruder]
step_pin = ebbcan:EXT_STEP
dir_pin = ebbcan:EXT_DIR
enable_pin = !ebbcan:EXT_EN
microsteps = 16
rotation_distance = 4.71
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.750
max_extrude_only_distance = 101.0
heater_pin = ebbcan:HE0
sensor_type = ATC Semitec 104NT-4-R025H42G
sensor_pin = ebbcan:TH0
min_temp = 0
max_temp = 300
max_extrude_cross_section = 5
pressure_advance = 0.02
control = pid
pid_kp = 20.603
pid_ki = 0.988
pid_kd = 107.392

[bltouch]
sensor_pin = ebbcan:PROBE_2
control_pin = ebbcan:PROBE_1
x_offset = -40
y_offset = -17
samples = 2
samples_tolerance = 0.015
samples_tolerance_retries = 5
z_offset = 2.849

[bed_mesh]
speed = 100
horizontal_move_z = 5
mesh_min = 10, 27
mesh_max = 173, 200
probe_count = 5, 5
algorithm = bicubic
fade_start = 1
fade_end = 10

[bed_screws]
screw1 = 55,55
screw2 = 200,55
screw3 = 200,205
screw4 = 55,205

[screws_tilt_adjust]
screw1 = 65,55
screw1_name = front left screw
screw2 = 218,55
screw2_name = front right screw
screw3 = 218,215
screw3_name = rear right screw
screw4 = 65,215
screw4_name = rear left screw
horizontal_move_z = 10
speed = 50
screw_thread = CW-M4

[display]
lcd_type = st7920
cs_pin = PB12
sclk_pin = PB13
sid_pin = PB15
encoder_pins = ^PB14, ^PB10
click_pin = ^!PB2

[exclude_object]

[firmware_retraction]
retract_length = 0.4
retract_speed = 20
unretract_extra_length = 0
unretract_speed = 10

[input_shaper]
shaper_type_x = 2hump_ei
shaper_freq_x = 86.2
shaper_type_y = zv
shaper_freq_y = 44.8

[gcode_arcs]
resolution = 1.0

[adxl345]
cs_pin = ebbcan:ADXL_CS
spi_software_sclk_pin = ebbcan:ADXL_SCLK
spi_software_mosi_pin = ebbcan:ADXL_MOSI
spi_software_miso_pin = ebbcan:ADXL_MISO

[resonance_tester]
accel_chip = adxl345
probe_points = 
	120,120,20

[bed_mesh default]
version = 1
points = 
	0.027500, 0.058750, 0.091250, 0.182500
	-0.003750, 0.061250, 0.072500, 0.125000
	0.021250, 0.016250, 0.013750, 0.033750
	-0.023750, -0.018750, -0.036250, -0.037500
x_count = 4
y_count = 4
mesh_x_pps = 2
mesh_y_pps = 2
algo = bicubic
tension = 0.2
min_x = 48.75
max_x = 171.24
min_y = 48.75
max_y = 171.24
=======================
Extruder max_extrude_ratio=2.078758
mcu 'mcu': Starting CAN connect
Created a socket
webhooks client 281473550759488: New connection
webhooks client 281473550759488: Client info {'program': 'Moonraker', 'version': 'v0.8.0-92-g504a3a7'}
Loaded MCU 'mcu' 109 commands (v0.11.0-241-gffb5105b / gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2)
MCU 'mcu' config: ADC_MAX=4095 BUS_PINS_i2c1_PA9_PA10=PA9,PA10 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_i2c2_PB13_PB14=PB13,PB14 BUS_PINS_i2c3_PB3_PB4=PB3,PB4 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3=PB4,PB5,PB3 CANBUS_BRIDGE=1 CLOCK_FREQ=64000000 MCU=stm32g0b1xx PWM_MAX=255 RECEIVE_WINDOW=192 RESERVE_PINS_CAN=PD12,PD13 RESERVE_PINS_USB=PA11,PA12 RESERVE_PINS_crystal=PF0,PF1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
mcu 'CB1': Starting connect
Loaded MCU 'CB1' 113 commands (v0.11.0-241-gffb5105b / gcc: (Debian 10.2.1-6) 10.2.1 20210110 binutils: (GNU Binutils for Debian) 2.35.2)
MCU 'CB1' config: ADC_MAX=4095 CLOCK_FREQ=50000000 MCU=linux PCA9685_MAX=4096 PWM_MAX=32768 STATS_SUMSQ_BASE=256
mcu 'ebbcan': Starting CAN connect
Created a socket
Loaded MCU 'ebbcan' 109 commands (v0.11.0-241-gffb5105b / gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2)
MCU 'ebbcan' config: ADC_MAX=4095 BUS_PINS_i2c1_PA9_PA10=PA9,PA10 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_i2c2_PB13_PB14=PB13,PB14 BUS_PINS_i2c3_PB3_PB4=PB3,PB4 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3=PB4,PB5,PB3 CANBUS_FREQUENCY=1000000 CLOCK_FREQ=64000000 MCU=stm32g0b1xx PWM_MAX=255 RECEIVE_WINDOW=192 RESERVE_PINS_CAN=PB0,PB1 RESERVE_PINS_crystal=PF0,PF1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
mcu_temperature 'mcu' nominal base=-268.847262 slope=1298.126801
Sending MCU 'mcu' printer configuration...
Configured MCU 'mcu' (1024 moves)
Sending MCU 'CB1' printer configuration...
Configured MCU 'CB1' (1024 moves)
Sending MCU 'ebbcan' printer configuration...
Configured MCU 'ebbcan' (1024 moves)
Starting heater checks for heater_bed
bed_mesh: generated points
Index |  Tool Adjusted  |   Probe
  0   | (50.0, 44.0)    | (10.0, 27.0)
  1   | (90.8, 44.0)    | (50.8, 27.0)
  2   | (131.5, 44.0)   | (91.5, 27.0)
  3   | (172.2, 44.0)   | (132.2, 27.0)
  4   | (213.0, 44.0)   | (173.0, 27.0)
  5   | (213.0, 87.2)   | (173.0, 70.2)
  6   | (172.2, 87.2)   | (132.2, 70.2)
  7   | (131.5, 87.2)   | (91.5, 70.2)
  8   | (90.8, 87.2)    | (50.8, 70.2)
  9   | (50.0, 87.2)    | (10.0, 70.2)
  10  | (50.0, 130.5)   | (10.0, 113.5)
  11  | (90.8, 130.5)   | (50.8, 113.5)
  12  | (131.5, 130.5)  | (91.5, 113.5)
  13  | (172.2, 130.5)  | (132.2, 113.5)
  14  | (213.0, 130.5)  | (173.0, 113.5)
  15  | (213.0, 173.8)  | (173.0, 156.8)
  16  | (172.2, 173.8)  | (132.2, 156.8)
  17  | (131.5, 173.8)  | (91.5, 156.8)
  18  | (90.8, 173.8)   | (50.8, 156.8)
  19  | (50.0, 173.8)   | (10.0, 156.8)
  20  | (50.0, 217.0)   | (10.0, 200.0)
  21  | (90.8, 217.0)   | (50.8, 200.0)
  22  | (131.5, 217.0)  | (91.5, 200.0)
  23  | (172.2, 217.0)  | (132.2, 200.0)
  24  | (213.0, 217.0)  | (173.0, 200.0)
Starting heater checks for extruder
Stats 295.6: gcodein=0  mcu: mcu_awake=0.049 mcu_task_avg=0.000015 mcu_task_stddev=0.000012 bytes_write=3036 bytes_read=5701 bytes_retransmit=0 bytes_invalid=0 send_seq=220 receive_seq=217 retransmit_seq=0 srtt=0.002 rttvar=0.002 rto=0.025 ready_bytes=1663 upcoming_bytes=80 freq=64005137 CB1: mcu_awake=0.004 mcu_task_avg=0.000027 mcu_task_stddev=0.000017 bytes_write=819 bytes_read=4523 bytes_retransmit=0 bytes_invalid=0 send_seq=112 receive_seq=112 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49997502 adj=49981480 ebbcan: mcu_awake=0.010 mcu_task_avg=0.000018 mcu_task_stddev=0.000019 bytes_write=1423 bytes_read=4754 bytes_retransmit=0 bytes_invalid=0 send_seq=144 receive_seq=144 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001695 adj=63999151  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=59.4 mcu_temp: temp=35.2 sysload=0.60 cputime=45.189 memavail=692640 print_time=0.010 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
webhooks: registering remote method 'shutdown_machine' for connection id: 281473550759488
webhooks: registering remote method 'reboot_machine' for connection id: 281473550759488
webhooks: registering remote method 'pause_job_queue' for connection id: 281473550759488
webhooks: registering remote method 'start_job_queue' for connection id: 281473550759488
Active bed surface: default; offset: -0.050
Stats 296.7: gcodein=0  mcu: mcu_awake=0.049 mcu_task_avg=0.000015 mcu_task_stddev=0.000012 bytes_write=4960 bytes_read=6009 bytes_retransmit=0 bytes_invalid=0 send_seq=256 receive_seq=256 retransmit_seq=0 srtt=0.003 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64002940 CB1: mcu_awake=0.004 mcu_task_avg=0.000027 mcu_task_stddev=0.000017 bytes_write=825 bytes_read=4539 bytes_retransmit=0 bytes_invalid=0 send_seq=113 receive_seq=113 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49998589 adj=50000824 ebbcan: mcu_awake=0.010 mcu_task_avg=0.000018 mcu_task_stddev=0.000019 bytes_write=1429 bytes_read=4830 bytes_retransmit=0 bytes_invalid=0 send_seq=145 receive_seq=145 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001101 adj=63994520  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=58.9 mcu_temp: temp=35.4 sysload=0.60 cputime=45.451 memavail=687892 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 297.7: gcodein=0  mcu: mcu_awake=0.049 mcu_task_avg=0.000015 mcu_task_stddev=0.000012 bytes_write=4966 bytes_read=6126 bytes_retransmit=0 bytes_invalid=0 send_seq=257 receive_seq=257 retransmit_seq=0 srtt=0.003 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64002096 CB1: mcu_awake=0.004 mcu_task_avg=0.000027 mcu_task_stddev=0.000017 bytes_write=831 bytes_read=4555 bytes_retransmit=0 bytes_invalid=0 send_seq=114 receive_seq=114 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999004 adj=50004279 ebbcan: mcu_awake=0.010 mcu_task_avg=0.000018 mcu_task_stddev=0.000019 bytes_write=1435 bytes_read=4891 bytes_retransmit=0 bytes_invalid=0 send_seq=146 receive_seq=146 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000863 adj=63998547  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=60.2 mcu_temp: temp=35.7 sysload=0.60 cputime=45.527 memavail=687972 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 298.7: gcodein=0  mcu: mcu_awake=0.049 mcu_task_avg=0.000015 mcu_task_stddev=0.000012 bytes_write=4972 bytes_read=6229 bytes_retransmit=0 bytes_invalid=0 send_seq=258 receive_seq=258 retransmit_seq=0 srtt=0.003 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001722 CB1: mcu_awake=0.004 mcu_task_avg=0.000027 mcu_task_stddev=0.000017 bytes_write=837 bytes_read=4571 bytes_retransmit=0 bytes_invalid=0 send_seq=115 receive_seq=115 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999238 adj=50004669 ebbcan: mcu_awake=0.010 mcu_task_avg=0.000018 mcu_task_stddev=0.000019 bytes_write=1441 bytes_read=4952 bytes_retransmit=0 bytes_invalid=0 send_seq=147 receive_seq=147 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000599 adj=63999900  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=58.0 mcu_temp: temp=35.7 sysload=0.60 cputime=45.566 memavail=688780 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 299.7: gcodein=0  mcu: mcu_awake=0.105 mcu_task_avg=0.000039 mcu_task_stddev=0.000174 bytes_write=4978 bytes_read=6364 bytes_retransmit=0 bytes_invalid=0 send_seq=259 receive_seq=259 retransmit_seq=0 srtt=0.002 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001627 CB1: mcu_awake=0.004 mcu_task_avg=0.000027 mcu_task_stddev=0.000017 bytes_write=843 bytes_read=4587 bytes_retransmit=0 bytes_invalid=0 send_seq=116 receive_seq=116 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999474 adj=50004131 ebbcan: mcu_awake=0.005 mcu_task_avg=0.000016 mcu_task_stddev=0.000038 bytes_write=1447 bytes_read=5043 bytes_retransmit=0 bytes_invalid=0 send_seq=148 receive_seq=148 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000716 adj=63999968  heater_bed: target=0 temp=25.3 pwm=0.000 raspberry_pi: temp=56.3 mcu_temp: temp=35.6 sysload=0.60 cputime=45.628 memavail=689196 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
Stats 300.7: gcodein=0  mcu: mcu_awake=0.105 mcu_task_avg=0.000039 mcu_task_stddev=0.000174 bytes_write=4984 bytes_read=6481 bytes_retransmit=0 bytes_invalid=0 send_seq=260 receive_seq=260 retransmit_seq=0 srtt=0.002 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001602 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000012 bytes_write=849 bytes_read=4616 bytes_retransmit=0 bytes_invalid=0 send_seq=117 receive_seq=117 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999777 adj=50003388 ebbcan: mcu_awake=0.005 mcu_task_avg=0.000016 mcu_task_stddev=0.000038 bytes_write=1453 bytes_read=5104 bytes_retransmit=0 bytes_invalid=0 send_seq=149 receive_seq=149 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000696 adj=64000243  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=56.1 mcu_temp: temp=35.6 sysload=0.63 cputime=45.690 memavail=689324 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
Stats 301.7: gcodein=0  mcu: mcu_awake=0.105 mcu_task_avg=0.000039 mcu_task_stddev=0.000174 bytes_write=4990 bytes_read=6584 bytes_retransmit=0 bytes_invalid=0 send_seq=261 receive_seq=261 retransmit_seq=0 srtt=0.002 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001571 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000012 bytes_write=855 bytes_read=4632 bytes_retransmit=0 bytes_invalid=0 send_seq=118 receive_seq=118 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999739 adj=50003008 ebbcan: mcu_awake=0.005 mcu_task_avg=0.000016 mcu_task_stddev=0.000038 bytes_write=1459 bytes_read=5165 bytes_retransmit=0 bytes_invalid=0 send_seq=150 receive_seq=150 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000652 adj=63999977  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=56.0 mcu_temp: temp=35.6 sysload=0.63 cputime=45.741 memavail=688848 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
Stats 302.7: gcodein=0  mcu: mcu_awake=0.105 mcu_task_avg=0.000039 mcu_task_stddev=0.000174 bytes_write=5002 bytes_read=6702 bytes_retransmit=0 bytes_invalid=0 send_seq=263 receive_seq=262 retransmit_seq=0 srtt=0.002 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001451 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000012 bytes_write=861 bytes_read=4648 bytes_retransmit=0 bytes_invalid=0 send_seq=119 receive_seq=119 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999729 adj=50001848 ebbcan: mcu_awake=0.005 mcu_task_avg=0.000016 mcu_task_stddev=0.000038 bytes_write=1465 bytes_read=5241 bytes_retransmit=0 bytes_invalid=0 send_seq=151 receive_seq=151 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000585 adj=63999726  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=57.3 mcu_temp: temp=35.5 sysload=0.63 cputime=45.784 memavail=688712 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 303.7: gcodein=0  mcu: mcu_awake=0.105 mcu_task_avg=0.000039 mcu_task_stddev=0.000174 bytes_write=5008 bytes_read=6835 bytes_retransmit=0 bytes_invalid=0 send_seq=264 receive_seq=264 retransmit_seq=0 srtt=0.001 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001366 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000012 bytes_write=867 bytes_read=4664 bytes_retransmit=0 bytes_invalid=0 send_seq=120 receive_seq=120 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999738 adj=50001523 ebbcan: mcu_awake=0.005 mcu_task_avg=0.000016 mcu_task_stddev=0.000038 bytes_write=1471 bytes_read=5302 bytes_retransmit=0 bytes_invalid=0 send_seq=152 receive_seq=152 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000553 adj=64000048  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=56.6 mcu_temp: temp=35.7 sysload=0.63 cputime=45.833 memavail=688928 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 304.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5014 bytes_read=6953 bytes_retransmit=0 bytes_invalid=0 send_seq=265 receive_seq=265 retransmit_seq=0 srtt=0.001 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001344 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000012 bytes_write=873 bytes_read=4680 bytes_retransmit=0 bytes_invalid=0 send_seq=121 receive_seq=121 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999674 adj=50000845 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1499 bytes_read=5395 bytes_retransmit=0 bytes_invalid=0 send_seq=155 receive_seq=155 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000530 adj=63999739  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=56.3 mcu_temp: temp=35.8 sysload=0.63 cputime=45.892 memavail=688788 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 305.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5020 bytes_read=7071 bytes_retransmit=0 bytes_invalid=0 send_seq=266 receive_seq=266 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001307 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=879 bytes_read=4709 bytes_retransmit=0 bytes_invalid=0 send_seq=122 receive_seq=122 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999663 adj=50000128 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1526 bytes_read=5489 bytes_retransmit=0 bytes_invalid=0 send_seq=158 receive_seq=158 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000558 adj=63999604  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=57.5 mcu_temp: temp=35.7 sysload=0.66 cputime=45.934 memavail=689068 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 306.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5026 bytes_read=7188 bytes_retransmit=0 bytes_invalid=0 send_seq=267 receive_seq=267 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001275 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=885 bytes_read=4725 bytes_retransmit=0 bytes_invalid=0 send_seq=123 receive_seq=123 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999649 adj=49999765 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1532 bytes_read=5550 bytes_retransmit=0 bytes_invalid=0 send_seq=159 receive_seq=159 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000514 adj=63999679  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=57.4 mcu_temp: temp=35.8 sysload=0.66 cputime=45.980 memavail=689408 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 307.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5032 bytes_read=7291 bytes_retransmit=0 bytes_invalid=0 send_seq=268 receive_seq=268 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001261 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=891 bytes_read=4741 bytes_retransmit=0 bytes_invalid=0 send_seq=124 receive_seq=124 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999646 adj=49999531 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1538 bytes_read=5611 bytes_retransmit=0 bytes_invalid=0 send_seq=160 receive_seq=160 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000477 adj=63999530  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=57.3 mcu_temp: temp=35.6 sysload=0.66 cputime=46.018 memavail=689412 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 308.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5038 bytes_read=7423 bytes_retransmit=0 bytes_invalid=0 send_seq=269 receive_seq=269 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001269 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=897 bytes_read=4757 bytes_retransmit=0 bytes_invalid=0 send_seq=125 receive_seq=125 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999540 adj=49999344 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1544 bytes_read=5687 bytes_retransmit=0 bytes_invalid=0 send_seq=161 receive_seq=161 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000453 adj=63999359  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=57.3 mcu_temp: temp=36.0 sysload=0.66 cputime=46.063 memavail=689488 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
Stats 309.7: gcodein=0  mcu: mcu_awake=0.006 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5044 bytes_read=7541 bytes_retransmit=0 bytes_invalid=0 send_seq=270 receive_seq=270 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001294 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=903 bytes_read=4773 bytes_retransmit=0 bytes_invalid=0 send_seq=126 receive_seq=126 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999465 adj=49998670 ebbcan: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000015 bytes_write=1550 bytes_read=5762 bytes_retransmit=0 bytes_invalid=0 send_seq=162 receive_seq=162 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000437 adj=63999179  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=56.5 mcu_temp: temp=35.7 sysload=0.66 cputime=46.102 memavail=689620 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 310.7: gcodein=0  mcu: mcu_awake=0.006 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5050 bytes_read=7644 bytes_retransmit=0 bytes_invalid=0 send_seq=271 receive_seq=271 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001293 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=909 bytes_read=4802 bytes_retransmit=0 bytes_invalid=0 send_seq=127 receive_seq=127 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999404 adj=49998180 ebbcan: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000015 bytes_write=1556 bytes_read=5823 bytes_retransmit=0 bytes_invalid=0 send_seq=163 receive_seq=163 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000424 adj=63998983  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=57.9 mcu_temp: temp=35.6 sysload=0.69 cputime=46.138 memavail=690092 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
Stats 311.7: gcodein=0  mcu: mcu_awake=0.006 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5056 bytes_read=7776 bytes_retransmit=0 bytes_invalid=0 send_seq=272 receive_seq=272 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001288 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=915 bytes_read=4818 bytes_retransmit=0 bytes_invalid=0 send_seq=128 receive_seq=128 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999352 adj=49997953 ebbcan: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000015 bytes_write=1562 bytes_read=5899 bytes_retransmit=0 bytes_invalid=0 send_seq=164 receive_seq=164 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000430 adj=63998963  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=57.8 mcu_temp: temp=35.8 sysload=0.69 cputime=46.189 memavail=690424 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 312.7: gcodein=0  mcu: mcu_awake=0.006 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5062 bytes_read=7879 bytes_retransmit=0 bytes_invalid=0 send_seq=273 receive_seq=273 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001272 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=921 bytes_read=4834 bytes_retransmit=0 bytes_invalid=0 send_seq=129 receive_seq=129 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999321 adj=49997812 ebbcan: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000015 bytes_write=1568 bytes_read=5960 bytes_retransmit=0 bytes_invalid=0 send_seq=165 receive_seq=165 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000425 adj=63999062  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=57.4 mcu_temp: temp=36.0 sysload=0.69 cputime=46.225 memavail=690424 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 313.7: gcodein=0  mcu: mcu_awake=0.006 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5068 bytes_read=7982 bytes_retransmit=0 bytes_invalid=0 send_seq=274 receive_seq=274 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001290 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=927 bytes_read=4850 bytes_retransmit=0 bytes_invalid=0 send_seq=130 receive_seq=130 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999296 adj=49997849 ebbcan: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000015 bytes_write=1574 bytes_read=6021 bytes_retransmit=0 bytes_invalid=0 send_seq=166 receive_seq=166 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000422 adj=63999148  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=56.8 mcu_temp: temp=35.8 sysload=0.69 cputime=46.276 memavail=690380 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 314.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5074 bytes_read=8129 bytes_retransmit=0 bytes_invalid=0 send_seq=275 receive_seq=275 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001302 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=933 bytes_read=4866 bytes_retransmit=0 bytes_invalid=0 send_seq=131 receive_seq=131 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999276 adj=49997748 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1580 bytes_read=6111 bytes_retransmit=0 bytes_invalid=0 send_seq=167 receive_seq=167 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000433 adj=63999025  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=55.5 mcu_temp: temp=36.0 sysload=0.69 cputime=46.337 memavail=690948 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 315.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5080 bytes_read=8232 bytes_retransmit=0 bytes_invalid=0 send_seq=276 receive_seq=276 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001283 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000011 bytes_write=939 bytes_read=4895 bytes_retransmit=0 bytes_invalid=0 send_seq=132 receive_seq=132 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999241 adj=49997708 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1592 bytes_read=6188 bytes_retransmit=0 bytes_invalid=0 send_seq=169 receive_seq=169 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000414 adj=63999043  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=57.2 mcu_temp: temp=35.8 sysload=0.63 cputime=46.374 memavail=691440 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 316.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5086 bytes_read=8335 bytes_retransmit=0 bytes_invalid=0 send_seq=277 receive_seq=277 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001276 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000011 bytes_write=945 bytes_read=4911 bytes_retransmit=0 bytes_invalid=0 send_seq=133 receive_seq=133 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999208 adj=49997729 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1598 bytes_read=6249 bytes_retransmit=0 bytes_invalid=0 send_seq=170 receive_seq=170 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000422 adj=63999074  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=57.9 mcu_temp: temp=36.0 sysload=0.63 cputime=46.416 memavail=691244 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
Stats 317.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5092 bytes_read=8467 bytes_retransmit=0 bytes_invalid=0 send_seq=278 receive_seq=278 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001263 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000011 bytes_write=951 bytes_read=4927 bytes_retransmit=0 bytes_invalid=0 send_seq=134 receive_seq=134 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999213 adj=49997690 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1604 bytes_read=6325 bytes_retransmit=0 bytes_invalid=0 send_seq=171 receive_seq=171 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000415 adj=63999181  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=55.6 mcu_temp: temp=35.9 sysload=0.63 cputime=46.475 memavail=691764 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 318.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5098 bytes_read=8570 bytes_retransmit=0 bytes_invalid=0 send_seq=279 receive_seq=279 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001256 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000011 bytes_write=957 bytes_read=4943 bytes_retransmit=0 bytes_invalid=0 send_seq=135 receive_seq=135 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999190 adj=49997917 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1610 bytes_read=6386 bytes_retransmit=0 bytes_invalid=0 send_seq=172 receive_seq=172 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000410 adj=63999212  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=57.4 mcu_temp: temp=35.9 sysload=0.63 cputime=46.512 memavail=691780 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 319.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5138 bytes_read=8698 bytes_retransmit=0 bytes_invalid=0 send_seq=282 receive_seq=282 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001258 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000011 bytes_write=963 bytes_read=4959 bytes_retransmit=0 bytes_invalid=0 send_seq=136 receive_seq=136 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999205 adj=49997882 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1616 bytes_read=6461 bytes_retransmit=0 bytes_invalid=0 send_seq=173 receive_seq=173 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000414 adj=63999209  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=57.2 mcu_temp: temp=36.0 sysload=0.63 cputime=46.561 memavail=691536 print_time=35.747 buffer_time=0.101 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Attempting MCU 'CB1' config_reset command
b'Got EOF when reading from device'
Attempting MCU 'ebbcan' reset command
Attempting MCU 'mcu' reset command
webhooks client 281473550759488: Disconnected
Restarting printer
Start printer at Mon Aug 21 00:42:34 2023 (1692578554.2 321.1)
===== Config file =====
[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancels the current print.
	Usage: CANCEL_PRINT
rename_existing = _KM_CANCEL_PRINT_BASE
gcode = 
	_KM_CHECK_IS_PRINTING
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=cancelling RESET_STACK=1
	SET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{True}"
	PRINT_END
	_KM_CANCEL_PRINT_BASE
	{% if printer.pause_resume.is_paused %}
	RESTORE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE MOVE=0
	{% endif %}
	CLEAR_PAUSE
	_KM_APPLY_PRINT_OFFSET RESET=1
	{% if 'virtual_sdcard' in printer and not printer.virtual_sdcard.is_active %}
	SDCARD_RESET_FILE
	{% endif %}

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
variable_restore_idle_timeout = 0
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set idle_timeout = client.idle_timeout|default(0) %}
	
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE={printer[printer.toolhead.extruder].target}
	
	{% if idle_timeout > 0 %}
	SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
	SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
	{% endif %}
	PAUSE_BASE
	_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
variable_last_extruder_temp = 0
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move = client.speed_move|default(velocity) %}
	
	
	{% if printer['gcode_macro PAUSE'].restore_idle_timeout > 0 %}
	SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro PAUSE'].restore_idle_timeout}
	{% endif %}
	M109 S{last_extruder_temp}
	_CLIENT_EXTRUDE
	RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	_KM_CHECK_IS_PRINTING
	{% set pause_next_layer =
	printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE | default(1) | int != 0 %}
	{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VALUE="{
	{ 'enable': False, 'call': MACRO }}" VARIABLE=pause_next_layer
	GCODE_AT_LAYER COMMAND="{MACRO|replace('\"','\\\"')
	}" CANCEL="{0 if ENABLE else 1}" LAYER="next"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	_KM_CHECK_IS_PRINTING
	{% set pause_at_layer =
	printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	
	{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined else
	params.LAYER is defined %}
	{% set LAYER = params.LAYER |
	default((pause_at_layer.layer|int,
	printer.print_stats.info.current_layer|int + 1)|max)%}
	{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}
	
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{
	{ 'enable': False, 'layer': 0, 'call': MACRO }}"
	{% if ENABLE and pause_at_layer.enable %}
	
	GCODE_AT_LAYER COMMAND="{pause_at_layer.call|replace('\"','\\\"')
	}" CANCEL="{1}" LAYER="{pause_at_layer.layer}"
	{% endif %}
	
	GCODE_AT_LAYER COMMAND="{MACRO|replace('\"','\\\"')
	}" CANCEL="{0 if ENABLE else 1}" LAYER="{LAYER}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = _KM_SET_PRINT_STATS_INFO
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	_KM_SET_PRINT_STATS_INFO {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.extruder.can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[gcode_macro _km_options]
variable_load_length = 90.0
variable_menu_temperature = [
	{'name' : 'PLA',  'extruder' : 200.0, 'bed' : 60.0},
	{'name' : 'PETG', 'extruder' : 230.0, 'bed' : 85.0},
	{'name' : 'ABS',  'extruder' : 245.0, 'bed' : 110.0, 'chamber' : 60}]
variable_start_purge_length = 50
variable_start_extruder_probing_temp = 150
variable_park_x = 200.0
variable_park_y = 200.0
gcode = 

[gcode_macro bed_mesh_calibrate_fast]
description = Wraps BED_MESH_CALIBRATE, scaling probe count to specified area.
	Usage: See Klipper documentation.
gcode = 
	
	BED_MESH_CHECK ABORT=1
	
	
	{% set calibrate_cmd =
	(printer["gcode_macro list_macros"].macros.bed_mesh_calibrate|
	default(["bed_mesh_calibrate"],True))[-1] %}
	
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set probe_mesh_padding = km.probe_mesh_padding %}
	{% set probe_min_count = km.probe_min_count %}
	{% set probe_count_scale = km.probe_count_scale %}
	{% set bed_mesh = printer.configfile.settings.bed_mesh %}
	
	
	{%if "mesh_radius" not in bed_mesh and
	"MESH_RADIUS" not in params %}
	{% set safe_min_x = bed_mesh.mesh_min[0] %}
	{% set safe_min_y = bed_mesh.mesh_min[1] %}
	{% set safe_max_x = bed_mesh.mesh_max[0] %}
	{% set safe_max_y = bed_mesh.mesh_max[1] %}
	
	
	{% if "MESH_MIN" in params %}
	{% set mesh_min_x = (params.MESH_MIN.split(",")[0]|float -
	probe_mesh_padding, safe_min_x)|max %}
	{% set mesh_min_y = (params.MESH_MIN.split(",")[1]|float -
	probe_mesh_padding, safe_min_y)|max %}
	{% else %}
	{% set mesh_min_x = safe_min_x %}
	{% set mesh_min_y = safe_min_y %}
	{% endif %}
	{% if "MESH_MAX" in params %}
	{% set mesh_max_x = (params.MESH_MAX.split(",")[0]|float +
	probe_mesh_padding, safe_max_x)|min %}
	{% set mesh_max_y = (params.MESH_MAX.split(",")[1]|float +
	probe_mesh_padding, safe_max_y)|min %}
	{% else %}
	{% set mesh_max_x = safe_max_x %}
	{% set mesh_max_y = safe_max_y %}
	{% endif %}
	
	{% set probe_count = bed_mesh.probe_count if not params.PROBE_COUNT else
	params.PROBE_COUNT.split(",")|map('int')|list %}
	
	{% if "PROBE_COUNT" not in params %}
	{% set max_x_probes = probe_count[0] %}
	{% set max_y_probes = probe_count[-1] %}
	
	{% set x_probes = (max_x_probes * (mesh_max_x - mesh_min_x) /
	(safe_max_x - safe_min_x) * probe_count_scale)
	| round(0) | int %}
	{% set x_probes = ((x_probes, probe_min_count)|max, max_x_probes)|min %}
	
	{% set y_probes = (max_y_probes * (mesh_max_y - mesh_min_y ) /
	(safe_max_y - safe_min_y) * probe_count_scale )
	| round(0) | int %}
	{% set y_probes = ((y_probes, probe_min_count)|max, max_y_probes)|min %}
	
	{% if x_probes > 6 and y_probes < 4 %}
	{% set y_probes = 4 %}
	{% elif y_probes > 6 and x_probes < 4 %}
	{% set x_probes = 4 %}
	{% endif %}
	{% set probe_count = [x_probes,y_probes] %}
	{% elif probe_count|length == 1 %}
	{% set dummy = probe_count.append(probe_count[0]) %}
	{% endif %}
	
	
	
	
	
	
	
	{% if "relative_reference_index" in bed_mesh %}
	{% set row = (bed_mesh.relative_reference_index / bed_mesh.probe_count[0]
	)|int%}
	{% set rrf_x = (((safe_max_x - safe_min_x) /
	(bed_mesh.probe_count[0] - 1))|round(2, 'floor')) *
	(bed_mesh.relative_reference_index %
	bed_mesh.probe_count[-1]) %}
	{% if row % 2 %}
	{% set rrf_x = safe_max_x - rrf_x %}
	{% else %}
	{% set rrf_x = safe_min_x + rrf_x %}
	{% endif %}
	{% set rrf_y = (((safe_max_y - safe_min_y) /
	(bed_mesh.probe_count[-1] - 1))|round(2, 'floor')) *
	row + safe_min_x %}
	{% set x_dist = (mesh_max_x - mesh_min_x) / (probe_count[0] - 1) %}
	{% set y_dist = (mesh_max_y - mesh_min_y) / (probe_count[1] - 1) %}
	{% set rrf = {'x':0, 'y':0, 'dist':safe_max_x**2+safe_max_y**2,'pos':0} %}
	{% for row in range(probe_count[1])%}
	{% for col in range(probe_count[0])%}
	{% if row % 2 %}
	{% set x = mesh_max_x - col * x_dist %}
	{% else %}
	{% set x = mesh_min_x + col * x_dist %}
	{% endif %}
	{% set y = mesh_min_y + row * y_dist %}
	{% set dist = ((x - rrf_x)**2 + (y - rrf_y)**2)**0.5 %}
	{% if dist < rrf.dist %}
	{% set dummy = rrf.__setitem__("dist", dist) %}
	{% set dummy = rrf.__setitem__("x", x) %}
	{% set dummy = rrf.__setitem__("y", y) %}
	{% set dummy = rrf.__setitem__("pos", row * probe_count[1] + col) %}
	{% endif %}
	{% endfor %}
	{% endfor %}
	{% if rrf.x != rrf_x or rrf.y != rrf_y %}
	{action_respond_info("relative_reference_index remapped to"
	" %d (%.2f,%.2f) from %d (%.2f,%.2f)" %
	(rrf.pos, rrf.x, rrf.y,
	bed_mesh.relative_reference_index, rrf_x, rrf_y))}
	{% endif %}
	{% set dummy = params.__setitem__("RELATIVE_REFERENCE_INDEX", rrf.pos) %}
	{% endif %}
	
	{% set dummy = params.__setitem__("MESH_MIN", mesh_min_x~","~mesh_min_y) %}
	{% set dummy = params.__setitem__("MESH_MAX", mesh_max_x~","~mesh_max_y) %}
	{% set dummy = params.__setitem__("PROBE_COUNT", probe_count|join(',')) %}
	
	{% if probe_count[0] > 6 or probe_count[1]|default(0) > 6 %}
	{% set dummy = params.__setitem__("ALGORITHM", "bicubic") %}
	{% endif %}
	
	{% if "MESH_MIN" in params or "MESH_MAX" in params %}
	BED_MESH_CHECK {rawparams}
	{% endif %}
	{% else %}
	
	{% set dummy = params.__delitem__("MESH_MIN") %}
	{% set dummy = params.__delitem__("MESH_MAX") %}
	{% endif %}
	
	{% if "MESH_MIN" in params or "MESH_MAX" in params %}
	BED_MESH_CHECK ABORT=1{%for k in params%}{' '~k~'="'~params[k]~'"'}{%
	endfor%}
	{% endif %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=meshing
	{calibrate_cmd}{%for k in params%}{' '~k~'="'~params[k]~'"'}{%endfor%}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro bed_mesh_check]
description = Warns if bed_mesh config may generate an invalid mesh.
	Usage: BED_MESH_CHECK [MESH_MIN=<x,y>] [MESH_MAX=<x,y>] [ABORT=<0|1>]
gcode = 
	{% if printer.bed_mesh is defined %}
	{% set action = action_respond_info if params.ABORT|default(0)|int == 0 else
	action_raise_error %}
	{% set settings = printer.configfile.settings %}
	{% set x_min = settings.stepper_x.position_min %}
	{% set y_min = settings.stepper_y.position_min %}
	{% set x_max = settings.stepper_x.position_max %}
	{% set y_max = settings.stepper_y.position_max %}
	
	{% set label = "[bed_mesh] config" %}
	{% if "MESH_MIN" in params %}
	{% set label = "BED_MESH_CALIBRATE params" %}
	{% set mesh_min_x = params.MESH_MIN.split(",")[0]|float %}
	{% set mesh_min_y = params.MESH_MIN.split(",")[1]|float %}
	{% else %}
	{% set mesh_min_x = settings.bed_mesh.mesh_min[0] %}
	{% set mesh_min_y = settings.bed_mesh.mesh_min[1] %}
	{% endif %}
	{% if "MESH_MAX" in params %}
	{% set label = "BED_MESH_CALIBRATE params" %}
	{% set mesh_max_x = params.MESH_MAX.split(",")[0]|float %}
	{% set mesh_max_y = params.MESH_MAX.split(",")[1]|float %}
	{% else %}
	{% set mesh_max_x = settings.bed_mesh.mesh_max[0] %}
	{% set mesh_max_y = settings.bed_mesh.mesh_max[1] %}
	{% endif %}
	
	{% if "bltouch" in settings %}
	{% set x_offset = settings.bltouch.x_offset %}
	{% set y_offset = settings.bltouch.y_offset %}
	{% set probe = "bltouch" %}
	{% elif "probe" in settings %}
	{% set x_offset = settings.probe.x_offset %}
	{% set y_offset = settings.probe.y_offset %}
	{% set probe = "probe" %}
	{% else %}
	{% set x_offset = 0.0 %}
	{% set y_offset = 0.0 %}
	{% endif %}
	
	{% set output = [] %}
	{% set warn =
	"* mesh_%s (%f, %f) adjusted by " ~ probe ~
	".%s_offset (%f) can move out of range for "
	"stepper_%s.position_%s (%f)." %}
	{% if x_offset > 0 and (mesh_min_x - x_offset) < x_min %}
	{% set dummy = output.append(warn % ('min', mesh_min_x, mesh_min_y,
	'x', x_offset, 'x', 'min', x_min)) %}
	{% elif x_offset < 0 and (mesh_max_x - x_offset) > x_max %}
	{% set dummy = output.append(warn % ('max', mesh_max_x, mesh_max_y,
	'x', x_offset, 'x', 'max', x_max)) %}
	{% endif %}
	{% if y_offset > 0 and (mesh_min_y - y_offset) < y_min %}
	{% set dummy = output.append(warn % ('min', mesh_min_x, mesh_min_y,
	'y', y_offset, 'y', 'min', y_min)) %}
	{% elif y_offset < 0 and (mesh_max_y - y_offset) > y_max %}
	{% set dummy = output.append(warn % ('max', mesh_max_x, mesh_max_y,
	'y', y_offset, 'y', 'max', y_max)) %}
	{% endif %}
	
	{% if output %}
	{ action(
	"Warning: The following issue(s) were detected in your " ~ label ~
	":\n" ~ output|join("\n")) }
	{% endif %}
	{% endif %}

[gcode_macro _apply_bed_surface_offset]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% if surfaces.active %}
	SET_SURFACE_ACTIVE SURFACE={surfaces.active}
	{% endif %}

[gcode_macro _init_surfaces]
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% if "bed_surfaces" in printer.save_variables.variables %}
	{% set old_surfaces = printer.save_variables.variables.bed_surfaces %}
	{% else %}
	{% set old_surfaces = { 'active' : '', 'available' : {} } %}
	{% endif %}
	{% set settings = printer.configfile.settings %}
	{% set new_probe_z = (settings.probe | default(settings.bltouch) |
	default(settings.smart_effector) | default({})
	).z_offset|default(0.0)|float %}
	{% set new_endstop_z = (settings.stepper_z | default({})).position_endstop |
	default(0.0)|float %}
	{% if 'endstop_z' not in old_surfaces %}
	{% set dummy = old_surfaces.__setitem__('endstop_z', new_endstop_z) %}
	{% endif %}
	{% if 'probe_z' not in old_surfaces %}
	{% set dummy = old_surfaces.__setitem__('probe_z', new_probe_z) %}
	{% endif %}
	{% set surfaces = { 'active' : '', 'available' : {},
	'endstop_z' : old_surfaces.endstop_z,
	'probe_z' : old_surfaces.probe_z } %}
	{% for s in km.bed_surfaces %}
	{% set s = s.split()|join(' ')|lower %}
	{% if s|length > km.bed_surface_max_name_length or
	s|list|select("in", " \r\n\"\'")|list %}
	{action_raise_error('Invalid surface name "%s". Name must be %d or fewer '
	'characters and must not include space or quotation characters'
	| format(s, km.bed_surface_max_name_length))}
	{% endif %}
	{% if s in old_surfaces.available %}
	{% set dummy = surfaces.available.__setitem__(s,
	old_surfaces.available[s]) %}
	{% else %}
	{% set dummy = surfaces.available.__setitem__(s, {'offset' : 0.0}) %}
	{% endif %}
	{% endfor %}
	{% if old_surfaces.active in surfaces.available %}
	{% set dummy = surfaces.__setitem__('active', old_surfaces.active) %}
	{% elif km.bed_surfaces %}
	{% set dummy = surfaces.__setitem__('active', km.bed_surfaces[0]|lower) %}
	{% endif %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	_APPLY_BED_SURFACE_OFFSET
	{% if new_probe_z != surfaces.probe_z or
	new_endstop_z != surfaces.endstop_z %}
	{ action_respond_info(
	'Z probe offset or endstop position changed. Run ADJUST_SURFACE_OFFSETS '
	'to adjust the offset for all saved surfaces by the change differential, '
	'or run ADJUST_SURFACE_OFFSETS IGNORE=1 to hide this message without '
	'making changes.') }
	{% endif %}

[gcode_macro adjust_surface_offsets]
description = Adjusts surface offsets to account for changes in the Z endstop
	position or probe Z offset.
	Usage: ADJUST_SURFACE_OFFSETS [IGNORE]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% set settings = printer.configfile.settings %}
	{% set new_probe_z = (settings.probe | default(settings.bltouch) |
	default(settings.smart_effector) | default({})
	).z_offset|default(0.0)|float %}
	{% set new_endstop_z = (settings.stepper_z | default({})).position_endstop |
	default(0.0)|float %}
	{% set diff = (surfaces.probe_z - new_probe_z +
	surfaces.endstop_z - new_endstop_z)|round(6) %}
	{% if not params.IGNORE|default(0)|int %}
	{% for s in surfaces.available %}
	{% set offset = (surfaces.available[s].offset - diff)|round(6) %}
	{% set dummy = surfaces.available.__setitem__(s, {'offset' : offset}) %}
	{% endfor %}
	{ action_respond_info("All bed surfaces now adjusted by %1.4f"|
	format(diff))}
	{% elif diff != 0 %}
	{ action_respond_info("Status cleared without adjustment") }
	{% endif %}
	{% set dummy = surfaces.__setitem__('endstop_z', new_endstop_z| round(6)) %}
	{% set dummy = surfaces.__setitem__('probe_z', new_probe_z|round(6)) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"

[gcode_macro set_surface_offset]
description = Sets the offset for a surface and moves the toolhead (if homed).
	Usage: SET_SURFACE_OFFSET [OFFSET=<offset>] [SURFACE=<surface>]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}
	{% if SURFACE not in surfaces.available %}
	{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }
	{% endif %}
	{% set active = surfaces.available[SURFACE] %}
	
	{% set OFFSET = params.OFFSET|default(active.offset)|float %}
	{% if OFFSET != active.offset %}
	{% set dummy = surfaces.available[SURFACE].__setitem__("offset", OFFSET) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	{% if SURFACE == surfaces.active %}
	_km_set_gcode_offset_base Z="{OFFSET}" MOVE={
	1 if printer.toolhead.homed_axes == 'xyz' else 0}
	{% endif %}
	{% endif %}
	{ action_respond_info("Bed surface: %s Offset: %.3f"
	| format(SURFACE, OFFSET)) }
	
	{% set dummy = None if True else "
	{% set dummy = params.SURFACE|default(active surface) %}
	{% set dummy = params.OFFSET|default(none)|float %}
	" %}

[gcode_macro set_surface_active]
description = Sets the active bed surface and moves the toolhead (if homed). If
	no SURFACE argument is present the available surfaces are listed and the
	active one is preceded by a "*".
	Usage: SET_SURFACE_ACTIVE [SURFACE=<surface>]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% if "SURFACE" in params %}
	{% set SURFACE = params.SURFACE|lower %}
	{% if SURFACE not in surfaces.available %}
	{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }
	{% endif %}
	{% if SURFACE != surfaces.active %}
	{% set dummy = surfaces.__setitem__("active", SURFACE) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	{% endif %}
	{% if surfaces.available[SURFACE].offset !=
	printer.gcode_move.homing_origin.z %}
	_km_set_gcode_offset_base Z="{surfaces.available[SURFACE].offset
	}" MOVE={1 if printer.toolhead.homed_axes == 'xyz' else 0}
	{% endif %}
	{action_respond_info("Active bed surface: %s; offset: %.3f"
	| format(SURFACE, surfaces.available[SURFACE].offset))}
	{% else %}
	{% set output = [] %}
	{% for s in surfaces.available|list|sort %}
	{% set dummy = output.append("%s&nbsp;%s - offset: %.3f"
	| format("*" if s == surfaces.active else "&nbsp;",
	s, surfaces.available[s].offset)) %}
	{% endfor %}
	{action_respond_info(output|join('\n'))}
	{% endif %}
	
	{% set dummy = None if True else "
	{% set dummy = params.SURFACE|default(none) %}
	" %}

[gcode_macro set_gcode_offset]
description = Wraps SET_GCODE_OFFSET to update the current bed sheet offset.
	Usage: SET_GCODE_OFFSET [X=<pos>|X_ADJUST=<adjust>]
	[Y=<pos>|Y_ADJUST=<adjust>]
	[Z=<pos>|Z_ADJUST=<adjust>]
	[MOVE=1 [MOVE_SPEED=<speed>]]
rename_existing = _KM_SET_GCODE_OFFSET_BASE
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% if surfaces.active and
	not printer["gcode_macro _km_save_state"].is_ephemeral %}
	{% set Z = params.Z|default(0.0)|float|round(6) %}
	{% set Z_ADJUST = params.Z_ADJUST|default(0.0)|float %}
	{% if 'Z' in params and
	Z != surfaces.available[surfaces.active].offset %}
	{% set dummy = surfaces.available[surfaces.active].__setitem__("offset",
	Z) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	{% elif Z_ADJUST != 0.0 %}
	{% set dummy = surfaces.available[surfaces.active].__setitem__(
	"offset", (Z_ADJUST + printer.gcode_move.homing_origin.z)|round(6)) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	{% endif %}
	{% endif %}
	_km_set_gcode_offset_base{% for k in params%}{' '~k~'="'~params[k]~'"'
	}{% endfor %}

[gcode_macro make_surface_mesh]
description = Generates and saves a mesh to automatically load in PRINT_START.
	Usage: MAKE_SURFACE_MESH [SURFACE=<surface>] [BED=<probing temperature>]
	[EXTRUDER=<probing temperature>]
	[MESH_MULTIPLIER=<integer multiple of mesh density>]
	[bed_mesh_calibrate parameters]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}
	{% if SURFACE not in surfaces.available %}
	{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }
	{% endif %}
	{% set dummy = params.__setitem__('PROFILE', SURFACE) %}
	{% set BED = params.BED|default(70) | int %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set EXTRUDER = params.EXTRUDER|default(km.start_extruder_probing_temp) |
	int %}
	{% set MESH_MULTIPLIER = (params.MESH_MULTIPLIER|default(2)|int, 1)|max %}
	
	M104 S{EXTRUDER}
	M140 S{BED}
	G28
	
	
	{% if surfaces.available[SURFACE].offset !=
	printer.gcode_move.homing_origin.z %}
	_km_set_gcode_offset_base Z="{surfaces.available[SURFACE].offset
	}" MOVE=1
	{% endif %}
	
	
	{% if BED > 0 %}
	{action_respond_info("Stabilizing bed at %iC" | format(BED,))}
	_KM_PARK_IF_NEEDED HEATER=heater_bed RANGE=0.5
	{% if BED < (printer.heater_bed.temperature - 0.2) %}
	M190 R{BED}
	G4 P{((km.start_bed_heat_delay * 10, 30000)|min,
	km.start_bed_heat_delay)|max}
	{% else %}
	G4 P{km.start_bed_heat_delay}
	{% endif %}
	M190 R{BED}
	{% endif %}
	
	{% if EXTRUDER > 0 %}
	_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=2
	M109 R{km.start_extruder_probing_temp}
	{% endif %}
	
	{% if km.start_home_z_at_temp and not bed_at_target %}
	G28 Z
	{% endif %}
	
	
	
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count
	if not params.PROBE_COUNT else
	params.PROBE_COUNT.split(",")|map('int')|list %}
	{% set dummy = params.__setitem__('PROBE_COUNT',(
	MESH_MULTIPLIER * (probe_count[0] - 1) + 1,
	MESH_MULTIPLIER * (probe_count[-1] - 1) + 1,)|join(',')) %}
	
	BED_MESH_CLEAR
	BED_MESH_CALIBRATE_FAST {%
	for k in params|reject('in',['BED','SURFACE'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor %}
	SAVE_CONFIG
	
	
	{% set dummy = None if True else "
	{% set dummy = params.MESH_MULTIPLIER|default(2) %}
	{% set dummy = params.SURFACE|default(active surface) %}
	" %}

[gcode_macro load_surface_mesh]
description = Attempts to load a mesh associated with the specified surface.
	Usage: LOAD_SURFACE_MESH [SURFACE=<surface>]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}
	{% if SURFACE != surfaces.active %}
	SET_SURFACE_ACTIVE SURFACE={SURFACE}
	{% endif %}
	
	{% if SURFACE in printer.bed_mesh.profiles %}
	{% set mesh = printer.bed_mesh.profiles[SURFACE].mesh_params %}
	{% set default = printer.configfile.settings.bed_mesh %}
	
	{% if mesh.min_x <= (default.mesh_min[0] + 0.5) and
	mesh.min_y <= (default.mesh_min[1] + 0.5) and
	mesh.max_x >= (default.mesh_max[0] - 0.5) and
	mesh.max_y >= (default.mesh_max[1] - 0.5) and
	mesh.x_count >= default.probe_count[0] and
	mesh.y_count >= default.probe_count[-1] %}
	
	BED_MESH_PROFILE LOAD={SURFACE}
	{action_respond_info("Loaded mesh: %s" | format(SURFACE,))}
	{% endif %}
	{% endif %}

[gcode_macro m300]
description = Emits and audible beep.
	Usage: M300 [P<duration>] [S<frequency>]
gcode = 
	{% set settings = printer.configfile.settings %}
	{% if "output_pin beeper" in printer %}
	{% set P = (params.P|default(100)|int, 0)|max %}
	{% set S = (params.S|default(1000)|int, 1)|max %}
	SET_PIN PIN=beeper VALUE={% if settings["output_pin beeper"].pwm %}{
	settings["output_pin beeper"].scale|default(1.0) * 0.5
	} CYCLE_TIME={ 1.0 / S }{% else %}1{% endif %}
	G4 P{P}
	SET_PIN PIN=beeper VALUE=0
	{% else %}
	{action_respond_info(
	"M300 is disabled. To enable create an [output_pin beeper] config.")}
	{% endif %}

[gcode_macro set_draw_params]
description = Sets the default parameters used by DRAW_LINE_TO.
	Usage: SET_DRAW_PARAMS [HEIGHT=<mm>] [WIDTH=<mm>] [FEEDRATE=<mm/m>]
variable_height = 0.2
variable_width = 0.0
variable_feedrate = 1200
gcode = 
	{% set dparams = printer["gcode_macro set_draw_params"] %}
	{% for k in params %}
	{% set kl = k|lower %}
	{% if kl in dparams %}
	{% if dparams[kl] is float %}
	{% set v = params[k]|float %}
	{% elif dparams[kl] is integer %}
	{% set v = params[k]|int %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=set_draw_params VARIABLE={kl} VALUE="{v}"
	{% endif %}
	{% endfor %}

[gcode_macro draw_line_to]
description = Extrudes a line of filament at the specified height and width from
	the current coordinate to the supplied XY coordinate. (The height is used only
	to calculate the extrusion volume.)
	Usage: DRAW_LINE_TO [X=<pos>] [Y=<pos>] [HEIGHT=<mm>] [WIDTH=<mm>]
	[FEEDRATE=<mm/m>]
gcode = 
	{% set dparams = printer["gcode_macro set_draw_params"] %}
	{% set position = printer.gcode_move.gcode_position %}
	{% set X = params.X|default(position.x)|float %}
	{% set Y = params.Y|default(position.y)|float %}
	{% set HEIGHT = params.HEIGHT|default(dparams.height)|float %}
	{% set WIDTH = params.WIDTH|default(dparams.width)|float %}
	{% set FEEDRATE = params.FEEDRATE|default(dparams.feedrate)|int %}
	
	{% set distance = ((X - position.x) ** 2 + (Y - position.y) ** 2) ** 0.5 %}
	
	{% set filament_area = 3.14159 *
	(printer.configfile.settings[
	printer.toolhead.extruder].filament_diameter ** 2) / 4 %}
	{% set E = distance * ((WIDTH * HEIGHT) / filament_area) %}
	
	
	_KM_SAVE_GCODE_STATE NAME=_KM_PURGE
	G90
	G92 E0.0
	G1 X{"%.3f" % X} Y{"%.3f" % Y} E{"%.5f" % E} F{FEEDRATE}
	_KM_RESTORE_GCODE_STATE NAME=_KM_PURGE MOVE=0

[gcode_macro draw_purge_line]
description = Purges the specified length of filament as a line (or rows of
	lines) in front of the supplied print area. If no print area is specified the
	purge lines are drawn at the front edge of the maximum printable area. If no
	printable area is set it defaults to the XY axis limits.
	Usage: DRAW_PURGE_LINE [PRINT_MIN=<X,Y>] [PRINT_MAX=<X,Y>] [HEIGHT=<mm>]
	[WIDTH=<mm>] [LENGTH=<mm>]
gcode = 
	
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set origin = printer.gcode_move.homing_origin %}
	{% set dummy = km.__setitem__('print_min', (km.print_min[0] - origin.x,
	km.print_min[1] - origin.y)) %}
	{% set dummy = km.__setitem__('print_max', (km.print_max[0] - origin.x,
	km.print_max[1] - origin.y)) %}
	
	{% if "PRINT_MIN" in params %}
	{% set PRINT_MIN = (
	(params.PRINT_MIN.split(",")[0]|float, km.print_min[0])|max,
	(params.PRINT_MIN.split(",")[1]|float, km.print_min[1])|max
	) %}
	{% else %}
	{% set PRINT_MIN = km.print_min %}
	{% endif %}
	{% if "PRINT_MAX" in params %}
	{% set PRINT_MAX = (
	(params.PRINT_MAX.split(",")[0]|float, km.print_max[0])|min,
	(params.PRINT_MAX.split(",")[1]|float, km.print_max[1])|min
	) %}
	{% else %}
	{% set PRINT_MAX = km.print_max %}
	{% endif %}
	{% set extruder = printer.toolhead.extruder|string %}
	{% set HEIGHT = params.HEIGHT|default(
	printer.configfile.settings[extruder].nozzle_diameter * 0.625)|float %}
	{% set WIDTH = params.WIDTH|default(
	printer.configfile.settings[extruder].nozzle_diameter * 1.25)|float %}
	{% set LENGTH = params.LENGTH|default(km.start_purge_length)|float %}
	
	{% set dparams = printer["gcode_macro set_draw_params"] %}
	{% set filament_area = 3.14159 *
	(printer.configfile.settings[extruder].filament_diameter ** 2) / 4 %}
	{% set purge_length = (LENGTH * filament_area) / (WIDTH * HEIGHT) %}
	{% set printable_length = PRINT_MAX[0] - PRINT_MIN[0] %}
	{% set purge_rows = (purge_length / printable_length)|round(0,'ceil')|int %}
	{% set printable_inset = (printable_length - purge_length / purge_rows) / 2 %}
	{% set PRINT_MIN = (PRINT_MIN[0] + printable_inset, PRINT_MIN[1]) %}
	{% set PRINT_MAX = (PRINT_MAX[0] - printable_inset, PRINT_MAX[1]) %}
	
	{% set y_start = (km.print_min[1], PRINT_MIN[1] - km.start_purge_clearance -
	(purge_rows + 0.5) * WIDTH )|max %}
	G90
	
	G1 X{"%.3f" % (PRINT_MIN[0] - 30, km.print_min[0])|max} Y{
	"%.3f" % (y_start - 10, km.print_min[1])|max} F{km.travel_speed_xy}
	
	G1 X{"%.3f" % (PRINT_MIN[0] - 2, km.print_min[0])|max} Y{"%.3f" % y_start} Z{
	"%.4f" % HEIGHT} F{km.travel_speed_xy}
	
	G92 E0.0
	G1 E{"%.3f" % km.start_purge_prime_length} F{km.load_priming_speed}
	G92 E0.0
	
	G1 X{"%.3f" % PRINT_MIN[0]} F{km.travel_speed_xy}
	{% for n in range(purge_rows - 1) %}
	{% set x_pos = PRINT_MIN[0] if n % 2 else PRINT_MAX[0] %}
	DRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{
	WIDTH * n + y_start}"
	DRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{
	WIDTH * (n + 1) + y_start}"
	{% endfor %}
	{% set x_pos = PRINT_MAX[0] if purge_rows % 2 else PRINT_MIN[0] %}
	DRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{
	WIDTH * (purge_rows - 1) + y_start}"
	G92 E0.0

[gcode_macro _check_fan_params]
gcode = 
	{% set MAXIMUM = params.MAXIMUM|default(
	printer["gcode_macro set_fan_scaling"].maximum)|int %}
	{% set MINIMUM = params.MINIMUM|default(
	printer["gcode_macro set_fan_scaling"].minimum)|int %}
	
	{% if params.SCALE and params.SCALE|float <= 0 %}
	{ action_raise_error("SCALE must be a positive value.") }
	{% elif MINIMUM < 0 or MINIMUM > 255 %}
	{ action_raise_error("MINIMUM must be between 0 and 255.") }
	{% elif MAXIMUM < 0 or MAXIMUM > 255 %}
	{ action_raise_error("MAXIMUM must be between 0 and 255.") }
	{% elif params.SPEED and (params.SPEED|int < 0 or params.SPEED|int > 255) %}
	{ action_raise_error("SPEED must be between 0 and 255.") }
	{% elif params.BOOST and (params.BOOST|int < 0 or params.BOOST|int > 255) %}
	{ action_raise_error("BOOST must be between 0 and 255.") }
	{% elif MINIMUM > MAXIMUM %}
	{ action_raise_error("MINIMUM must be less than or equal to MAXIMUM.") }
	{% endif %}

[gcode_macro set_fan_scaling]
description = Sets fan scaling factors applied to M106 command. If a speed is
	provided it will be adjusted according to the scaling parameters.
	Usage: SET_FAN_SCALING [SCALE=<scale>] [BOOST=<boost>] [MAXIMUM=<max>]
	[MINIMUM=<min>] [SPEED=<speed>]
variable_scale = 1.0
variable_boost = 0
variable_minimum = 0
variable_maximum = 255
variable_real_speed = 0
gcode = 
	_CHECK_FAN_PARAMS{% for k in params %}{' '~k~'='~params[k]}{% endfor %}
	{% set SCALE = params.SCALE|default(scale)|float %}
	{% set BOOST = params.BOOST|default(boost)|float %}
	{% set MAXIMUM = params.MAXIMUM|default(maximum)|int %}
	{% set MINIMUM = params.MINIMUM|default(minimum)|int %}
	{% set SPEED = params.SPEED|default(real_speed)|int %}
	
	{% if SCALE != 1.0 or BOOST != 0 or MAXIMUM != 255 or MINIMUM != 0 %}
	{action_respond_info("Fan: Scale: %.2f Minimum:%i Maximum: %i Speed: %i"|
	format(SCALE, MINIMUM, MAXIMUM, SPEED))}
	{% endif %}
	
	
	{% if params|length > 0 %}
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=scale VALUE="{SCALE}"
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=boost VALUE="{BOOST}"
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=minimum VALUE="{MINIMUM}"
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=maximum VALUE="{MAXIMUM}"
	
	M106 S{SPEED}
	{% endif %}
	
	{% set dummy = None if True else "
	{% set dummy = params.SCALE|default(1.0)|float %}
	{% set dummy = params.BUMP|default(0)|int %}
	{% set dummy = params.MAXIMUM|default(255)|int %}
	{% set dummy = params.MINIMUM|default(0)|int %}
	{% set dummy = params.SPEED|default(current speed)|int %}
	" %}

[gcode_macro reset_fan_scaling]
description = Clears all fan scaling factors.
	Usage: RESET_FAN_SCALING
gcode = 
	SET_FAN_SCALING SCALE=1.0 BOOST=0 MAXIMUM=255 MINIMUM=0

[gcode_macro m106]
description = Wraps M106 to implement scaling overrides.
rename_existing = M106.6245197
gcode = 
	{% set S = params.S|default(255)|int %}
	{% set scale = printer["gcode_macro set_fan_scaling"] %}
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=real_speed VALUE="{S}"
	M106.6245197 S{((((S + scale.boost) * scale.scale) | round | int,
	scale.minimum) | max, scale.maximum) | min}

[gcode_macro _load_unload]
gcode = 
	{% set saved_extruder = printer.toolhead.extruder %}
	{% set EXTRUDER = params.EXTRUDER|default(saved_extruder)|lower %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% set BEEPS = params.BEEPS|default(8)|int if "output_pin beeper" in printer
	else 0 %}
	{% set default_minimum = km.load_min_temp if km.load_min_temp else
	(printer.configfile.settings[EXTRUDER].min_extrude_temp + 5) %}
	{% if 'MINIMUM' in params %}
	{% set MINIMUM = params.MINIMUM|int %}
	
	{% elif printer.pause_resume.is_paused and printer[EXTRUDER].target == 0 and
	printer["gcode_macro resume"].saved_extruder_temp %}
	{% set MINIMUM = printer["gcode_macro resume"].saved_extruder_temp %}
	
	{% elif printer[EXTRUDER].target > default_minimum %}
	{% set MINIMUM = printer[EXTRUDER].target %}
	{% else %}
	{% set MINIMUM = default_minimum %}
	{% endif %}
	{% if MINIMUM < printer.configfile.settings[EXTRUDER].min_extrude_temp %}
	{ action_raise_error("Extrude below minimum temp.") }
	{% elif printer.pause_resume.is_paused %}
	
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"
	{% endif %}
	{% set SPEED = params.SPEED|default(km.load_speed)|int %}
	{% set priming_length = km.load_priming_length %}
	{% set LENGTH = params.LENGTH|default(km.load_length)|float - priming_length%}
	{% if LENGTH < 0 %}
	{% set priming_length = (priming_length + LENGTH, 0)|max %}
	{% set LENGTH = 0 %}
	{% endif %}
	SAVE_GCODE_STATE NAME=_KM_LOAD_UNLOAD
	{% if EXTRUDER != saved_extruder%}
	ACTIVATE_EXTRUDER EXTRUDER={EXTRUDER}
	{% endif %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	{% if not printer.extruder.can_extrude or
	printer[EXTRUDER].target < default_minimum %}
	{action_respond_info("Preheating %s to %d" | format(EXTRUDER, MINIMUM))}
	M109 S{MINIMUM}
	{% endif %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS={"filament_load"
	if params.LOAD|int else "filament_unload"}
	M83
	{% set priming_speed = (km.load_priming_speed, SPEED)|min %}
	{% if params.LOAD|int %}
	G0 E{LENGTH} F{SPEED}
	G0 E{priming_length} F{priming_speed}
	G0 E{'%.4f' % -printer["gcode_macro resume"].saved_e} F{km.load_speed}
	{% else %}
	{% set pre_prime_distance = 5.0 %}
	{% set shaping_moves = 5 %}
	{% set shaping_distance = (shaping_moves * (1 + shaping_moves)/20) %}
	
	G0 E{pre_prime_distance} F{SPEED}
	G4 P500
	G0 E{'%.4f' % -(priming_length - shaping_distance)} F{SPEED}
	
	
	{% for i in range(1, shaping_moves + 1) %}
	G0 E2 F{priming_speed}
	G0 E-{2 + (0.1 * i)} F{priming_speed}
	{% endfor %}
	
	G0 E{'%.4f' % -(LENGTH + pre_prime_distance)} F{SPEED}
	{% endif %}
	RESTORE_GCODE_STATE NAME=_KM_LOAD_UNLOAD
	
	
	{% for i in range(BEEPS) %}
	M300 P100
	G4 P200
	{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro LOAD_FILAMENT]
description = Loads filament to the extruder.
	Usage: LOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]
	[EXTRUDER=<extruder>] [MINIMUM=<temperature>]
	[BEEPS=<beep count on completion>]
gcode = 
	_LOAD_UNLOAD LOAD=1{% for k in params
	%}{' '~k~'="'~params[k]~'"'}{% endfor %}
	
	
	{% set dummy = None if True else "
	M109
	{% set dummy = params.LENGTH|default(variable_load_length)|float %}
	{% set dummy = params.SPEED|default(variable_load_speed)|float %}
	{% set dummy = params.EXTRUDER|default(current extruder) %}
	{% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}
	{% set dummy = params.BEEPS|default(10)|int %}
	" %}

[gcode_macro UNLOAD_FILAMENT]
description = Unloads filament from the extruder.
	Usage: UNLOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]
	[EXTRUDER=<extruder>] [MINIMUM=<temperature>]
	[BEEPS=<beep count on completion>]
gcode = 
	_LOAD_UNLOAD LOAD=0{% for k in params
	%}{' '~k~'="'~params[k]~'"'}{% endfor %}
	
	
	{% set dummy = None if True else "
	M109
	{% set dummy = params.LENGTH|default(variable_load_length)|float %}
	{% set dummy = params.SPEED|default(variable_load_speed)|float %}
	{% set dummy = params.EXTRUDER|default(default extruder) %}
	{% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}
	{% set dummy = params.BEEPS|default(10)|int %}
	" %}

[gcode_macro _pause_inner_m700]
gcode = 
	{% set extruder = "extruder" ~ params.T|replace('0', '')
	if "T" in params else printer.toolhead.extruder %}
	{% if extruder != printer.toolhead.extruder%}
	ACTIVATE_EXTRUDER EXTRUDER={extruder}
	{% endif %}
	
	{% set z_param = (' Z="%f"' % params.Z) if 'Z' in params else "" %}
	
	{% if printer.idle_timeout.state|string == "Printing" %}
	PAUSE B="{0}" P=2{z_param}
	{% elif not printer.pause_resume.is_paused%}
	PARK B="{0}" P=2{z_param}
	{% endif %}

[gcode_macro m701]
description = Pauses/parks the toolhead then loads filament to the extruder.
	Usage: M701 [L<distance>] [Z<pos>] [T<extruder>]
gcode = 
	{% if 'U' in params %}
	{% if not 'L' in params %}
	RESPOND TYPE=error MSG="Argument \"U\" substituted for missing \"L\"."
	{% set dummy = params.__setitem__("L", params.U) %}
	{% else %}
	RESPOND TYPE=error MSG="Invalid argument \"U\" ignored."
	{% endif %}
	{% endif %}
	
	_PAUSE_INNER_M700 {% for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	LOAD_FILAMENT BEEPS="{10}" LENGTH={
	params.L|default(printer["gcode_macro _km_globals"].load_length)|float}

[gcode_macro m702]
description = Pauses/parks the toolhead then unloads filament from the extruder.
	Usage: M702 [U<distance>] [Z<pos>] [T<extruder>]
gcode = 
	{% if 'L' in params %}
	{% if not 'U' in params %}
	RESPOND TYPE=error MSG="Argument \"L\" substituted for missing \"U\"."
	{% set dummy = params.__setitem__("U", params.L) %}
	{% else %}
	RESPOND TYPE=error MSG="Invalid argument \"L\" ignored."
	{% endif %}
	{% endif %}
	
	_PAUSE_INNER_M700 {% for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	UNLOAD_FILAMENT BEEPS="{10}" LENGTH={
	params.U|default(printer["gcode_macro _km_globals"].load_length)|float}

[gcode_macro _km_globals]
variable_bed_surface_max_name_length = 10
variable_bed_surfaces = ['default']
variable_load_length = 90.0
variable_load_min_temp = 0
variable_load_priming_length = 20.0
variable_load_priming_speed = 200
variable_load_speed = 1200
variable_menu_show_octoprint = True
variable_menu_show_sdcard = True
variable_menu_temperature = [
	{'name' : 'PLA',  'extruder' : 200, 'bed' : 60},
	{'name' : 'PETG', 'extruder' : 230, 'bed' : 85},
	{'name' : 'ABS',  'extruder' : 245, 'bed' : 110}]
variable_park_x = 0.0
variable_park_y = 0.0
variable_park_z = 20.0
variable_print_min = ()
variable_print_max = ()
variable_pressure_advance_scale = -1.0
variable_probe_mesh_padding = 5.0
variable_probe_min_count = 3
variable_probe_count_scale = 1.0
variable_start_bed_heat_delay = 2000
variable_start_bed_heat_overshoot = 2.0
variable_start_clear_adjustments_at_end = True
variable_start_end_park_y = 0.0
variable_start_extruder_preheat_scale = 0.5
variable_start_extruder_probing_temp = 0
variable_start_home_z_at_temp = True
variable_start_level_bed_at_temp = True
variable_start_purge_clearance = 2.0
variable_start_purge_length = 0.0
variable_start_purge_prime_length = 12.0
variable_start_quad_gantry_level_at_temp = True
variable_start_random_placement_max = 0
variable_start_random_placement_padding = 10.0
variable_start_try_saved_surface_mesh = False
variable_start_z_tilt_adjust_at_temp = True
variable_travel_speed_xy = 3000
variable_travel_speed_z = 600
description = Initializes our globals, including any _km_options overrides.
gcode = 
	
	
	
	
	
	
	
	
	{% set required_sections = {"heater_bed" : None,
	"extruder" : None,
	"gcode_macro _km_options" : None,
	"idle_timeout" : ("gcode", "_KM_IDLE_TIMEOUT"),
	"pause_resume" : None,
	"respond" : None,
	"save_variables" : None,
	"virtual_sdcard" :
	("on_error_gcode", "CANCEL_PRINT")
	} %}
	{% set warn_removed = {
	"start_extruder_set_target_before_level" :
	"The start_extruder_set_target_before_level option has been removed. "
	"Use the start_extruder_probing_temp option instead to set a fixed "
	"probing temperature.",
	"start_gcode_before_print" :
	"The start_gcode_before_print option has been removed. The same effect "
	"can now be achieved by inserting custom gcode before the "
	"_PRINT_START_PHASE_PURGE line in your slicer's start gcode, or by "
	"wrapping the _PRINT_START_PHASE_PURGE macro. See the Slicer "
	"Configuration section in the readme for more information.",
	"velocity_decel_scale" :
	"The velocity_decel_scale option has been removed. Klipper's input "
	"shaping provides a superior mechanism for improving print quality "
	"at higher speeds.",
	} %}
	{% set output = [] %}
	{% for s in required_sections %}
	{% set f = required_sections[s][0] if required_sections[s] else None %}
	{% set v = required_sections[s][1] if required_sections[s] else None %}
	{% if s not in printer.configfile.config %}
	{% set dummy = output.append("Missing [%s] section.\n" | format(s)) %}
	{% elif f and
	(v not in printer.configfile.config[s][f]|default("")|upper) %}
	{% set dummy = output.append("Missing %s in %s for [%s] section.\n"
	| format(v, f, s)) %}
	{% endif %}
	{% endfor %}
	{% if output %}
	{ action_emergency_stop((
	"required printer.cfg section(s) missing:\n"
	~ output | join("\n")) ~
	"See readme: https://github.com/jschuh/klipper-macros\x23klipper-setup")
	}
	{% endif %}
	
	
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_level_bed_at_temp VALUE="{
	1 if printer.bed_mesh is defined else 0}"
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_quad_gantry_level_at_temp VALUE="{
	1 if printer.quad_gantry_level is defined else 0}"
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_z_tilt_adjust_at_temp VALUE="{
	1 if printer.z_tilt is defined else 0}"
	{% set toolhead = printer.toolhead %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=print_min VALUE="{
	(toolhead.axis_minimum.x, toolhead.axis_minimum.y)}"
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=print_max VALUE="{
	(toolhead.axis_maximum.x, toolhead.axis_maximum.y)}"
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_end_park_y VALUE="{
	toolhead.axis_maximum.y}"
	{% set settings = printer.configfile.settings %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_home_z_at_temp VALUE="{
	1 if ("stepper_z" in settings and
	settings.stepper_z.endstop_pin.split()|join("")|lower ==
	"probe:z_virtual_endstop") else 0}"
	
	{% set options = printer["gcode_macro _km_options"] %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	
	{% if options.park_x|default("")|string|lower == "min" %}
	{% set dummy = options.__setitem__("park_x",
	printer.configfile.settings.stepper_x.position_min) %}
	{% elif options.park_x|default("")|string|lower == "max" %}
	{% set dummy = options.__setitem__("park_x",
	printer.configfile.settings.stepper_x.position_max) %}
	{% endif %}
	{% if options.park_y|default("")|string|lower == "min" %}
	{% set dummy = options.__setitem__("park_y",
	printer.configfile.settings.stepper_y.position_min) %}
	{% elif options.park_y|default("")|string|lower == "max" %}
	{% set dummy = options.__setitem__("park_y",
	printer.configfile.settings.stepper_y.position_max) %}
	{% endif %}
	{% if options.start_end_park_y|default("")|string|lower == "min" %}
	{% set dummy = options.__setitem__("start_end_park_y",
	printer.configfile.settings.stepper_y.position_min) %}
	{% elif options.start_end_park_y|default("")|string|lower == "max" %}
	{% set dummy = options.__setitem__("start_end_park_y",
	printer.configfile.settings.stepper_y.position_max) %}
	{% endif %}
	{% if options.park_z|default("")|string|lower == "min" %}
	{% set dummy = options.__setitem__("park_z",
	printer.configfile.settings.stepper_z.position_min) %}
	{% elif options.park_z|default("")|string|lower == "max" %}
	{% set dummy = options.__setitem__("park_z",
	printer.configfile.settings.stepper_z.position_max) %}
	{% endif %}
	
	
	{% for k in options %}
	{% if k not in km %}
	{% if k in warn_removed %}
	{action_respond_info(warn_removed[k])}
	{% else %}
	{% set dummy = output.append("%s is not valid for _KM_OPTIONS." |
	format(k)) %}
	{% endif %}
	{% elif km[k] is string %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k
	} VALUE="'{options[k]|replace('\\','\\\\')|replace('\'','\\\'')
	|replace('\"','\\\"')}'"
	{% elif km[k] is float %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k
	} VALUE="{options[k]|float}"
	{% elif km[k] is integer or km[k] is boolean %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k} VALUE="{options[k]|int}"
	{% elif km[k] is mapping %}
	{% if options[k] is not mapping %}
	{% set dummy = output.append("%s requires a mapping type." |
	format(k)) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k
	} VALUE="{options[k]|replace('\"','\\\"')}"
	{% elif km[k] is sequence %}
	{% if options[k] is not sequence %}
	{% set dummy = output.append("%s requires a sequence type." |
	format(k)) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k
	} VALUE="{options[k]|replace('\"','\\\"')}"
	{% else %}
	{% set dummy = output.append("%s is not a valid type for _KM_OPTIONS." |
	format(k)) %}
	{% endif %}
	{% endfor %}
	
	{% if "homing_override" in printer.configfile.config %}
	{% for l in printer.configfile.config.homing_override.gcode.split("\n") %}
	{% if " g28 " in (" " ~ l.split("\x23")[0].split(";")[0]|lower ~ " ") %}
	{% set dummy = output.append(
	"G28 in [homing_override] gcode. Replace with G28.6245197 to "
	"fix recursive macro call.\n"
	"See readme: https://github.com/jschuh/klipper-macros\x23g28") %}
	{% endif %}
	{% endfor %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=check_km_config VARIABLE=load_errors VALUE="{
	output|replace('\"','\\\"')}"
	M400

[delayed_gcode INIT_GLOBALS]
initial_duration = 1
gcode = 
	LIST_MACROS SILENT=1
	_KM_GLOBALS
	
	CHECK_KM_CONFIG
	_INIT_SURFACES
	BED_MESH_CHECK
	
	SET_DRAW_PARAMS WIDTH="{printer.configfile.settings.extruder.nozzle_diameter}"
	
	_KM_OPTIONS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready

[gcode_macro check_km_config]
variable_load_errors = []
description = Checks global variables and throws an error on any invalid values.
	Does nothing if the config has no errors.
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set toolhead = printer.toolhead %}
	{% set output = load_errors %}
	{% if km.park_x > toolhead.axis_maximum.x or
	km.park_x < toolhead.axis_minimum.x %}
	{% set dummy = output.append("park_x is invalid.") %}
	{% endif %}
	{% if km.park_y > toolhead.axis_maximum.y or
	km.park_y < toolhead.axis_minimum.y %}
	{% set dummy = output.append("park_y is invalid.") %}
	{% endif %}
	{% if km.park_z > toolhead.axis_maximum.z or
	km.park_z < toolhead.axis_minimum.z %}
	{% set dummy = output.append("park_z is invalid.") %}
	{% endif %}
	{% if km.print_max[0] > toolhead.axis_maximum.x or
	km.print_max[1] > toolhead.axis_maximum.y %}
	{% set dummy = output.append("print_max is invalid.") %}
	{% endif %}
	{% if km.print_min[0] < toolhead.axis_minimum.x or
	km.print_min[1] < toolhead.axis_minimum.y %}
	{% set dummy = output.append("print_min is invalid.") %}
	{% endif %}
	{% if km.start_extruder_preheat_scale > 1.0 or
	km.start_extruder_preheat_scale < 0.0 %}
	{% set dummy = output.append("extruder_preheat_scale is invalid.") %}
	{% endif %}
	{% if km.load_length >
	printer.configfile.settings["extruder"].max_extrude_only_distance %}
	{% set dummy = output.append(
	"load_length exceeds max_extrude_only_distance.") %}
	{% endif %}
	{% if km.load_length < km.load_priming_length %}
	{% set dummy = output.append(
	"load_length is shorter than load_priming_length.") %}
	{% endif %}
	{% if km.load_length < 0.0 %}
	{% set dummy = output.append("load_length is negative.") %}
	{% endif %}
	{% if km.load_priming_length < 0.0 %}
	{% set dummy = output.append("load_priming_length is negative.") %}
	{% endif %}
	
	
	{% if output %}
	{ action_raise_error(output|sort|join('\nError: ')) }
	{% endif %}
	M400

[gcode_macro kmvars]
description = Lists global variables used by klipper-macros.
	Usage: KMVARS [SEARCH=<search_string>]
gcode = 
	{% set SEARCH = params.SEARCH|default(params.S|default(""))|lower %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set output = [] %}
	{% for k in km %}
	{% if SEARCH in k %}
	{% set dummy = output.append(k ~ ": " ~ km[k]) %}
	{% endif %}
	{% endfor %}
	{ action_respond_info(output|sort|join('\n')) }

[gcode_macro check_macro_docs]
description = Lists macros lacking proper documentation.
	Usage: CHECK_MACRO_DOCS [USAGE=<0|1>] [HIDDEN=<1|0>] [RENAMED=<1|0>]
gcode = 
	{% set USAGE = params.USAGE|default(0)|int %}
	{% set HIDDEN = params.HIDDEN|default(0)|int %}
	{% set RENAMED = params.RENAMED|default(0)|int %}
	{% set output = [] %}
	{%set config = printer.configfile.config %}
	{% for k in config|sort %}
	{% if k.startswith("gcode_macro") %}
	{% set name = k.split()[1] %}
	{% set desc = config[k].description|default("") %}
	{% set is_renamed = config[k].rename_existing|default("") %}
	{% if (not desc or (USAGE and not "Usage: "~name.upper() in desc)) and
	(HIDDEN or not name.startswith('_')) and (RENAMED or is_renamed) %}
	{% set dummy = output.append("%s&nbsp;%s: missing %s."
	| format("*" if is_renamed else "&nbsp;", name,
	"description" if not desc else "usage")) %}
	{% endif %}
	{% endif %}
	{% endfor %}
	{action_respond_info(output|join("\n"))}

[gcode_macro listvars]
description = Lists per-macro variables with a name containing SEARCH. This is
	useful for debugging macros by allowing you to probe printer state. Be very
	careful, however, as an overly broad SEARCH parameter can take a long time
	to process and potentially hang or crash klipper.
	Usage: LISTVARS SEARCH=<search_string>
gcode = 
	
	{% if 'SEARCH' not in params and 'S' not in params %}
	{ action_raise_error("Must provide a SEARCH parameter.") }
	{% endif %}
	{% set SEARCH = params.SEARCH|default(params.S)|lower %}
	{% set ns = namespace() %}
	{% set output = [] %}
	{% for item in printer %}
	{% if item is not string %}
	{% set ns.path = ['printer', "[%s]" % (item|string), ''] %}
	{% elif ' ' in item %}
	{% set ns.path = ['printer', "['%s']" % (item), ''] %}
	{% else %}
	{% set ns.path = ['printer.', item, ''] %}
	{% endif %}
	
	{% if SEARCH in ns.path|lower %}
	{% set dummy = output.append(ns.path|join) %}
	{% endif %}
	
	{% if printer[item].items() %}
	{% for childkey, child in printer[item].items() recursive %}
	{% set ns.path = ns.path[:loop.depth|int + 1] %}
	{% if childkey is not string %}
	{% set null = ns.path.append("[%s]" % (childkey|string)) %}
	{% elif ' ' in childkey %}
	{% set null = ns.path.append("['%s']" % (childkey)) %}
	{% else %}
	{% set null = ns.path.append(".%s" % (childkey)) %}
	{% endif %}
	
	{% if child is mapping  %}
	{loop(child.items())}
	{% else %}
	{% if SEARCH in ns.path|lower %}
	{% set dummy = output.append("%s : %s" % (ns.path|join, child)) %}
	{% endif %}
	{% endif %}
	{% endfor %}
	{% endif %}
	{% endfor %}
	{ action_respond_info(output|join("\n")) }

[gcode_macro list_macros]
description = Lists registered macros (and optionally show variable state).
	Usage: LISTVARS SEARCH=<search_string> VARS=<0|1> SILENT=<0|1>
variable_macros = {}
gcode = 
	
	{% if not macros %}
	{% set renames = {} %}
	{% for k in printer.configfile.config %}
	{% if k.lower().startswith("gcode_macro") and
	printer.configfile.config[k].rename_existing %}
	{% set name = k.split(None, 1)[1] | lower %}
	{% set dummy = renames.__setitem__(name,
	[printer.configfile.config[k].rename_existing|lower] +
	renames[name]|default([])) %}
	{% endif %}
	{% endfor %}
	{% for k in printer %}
	{% if k.lower().startswith("gcode_macro") %}
	{% set name = k.split(None, 1)[1] | lower %}
	{% set dummy = macros.__setitem__(name, renames[name]|default([])) %}
	{% endif %}
	{% endfor %}
	{% endif %}
	
	{% if params.SILENT|default(0)|int == 0 %}
	_LIST_MACROS_DISPLAY {rawparams}
	{% endif %}

[gcode_macro _list_macros_display]
gcode = 
	{% set SEARCH = params.SEARCH | default(params.S) | default("") | lower %}
	{% set VARS = params.VARS | default(params.V) | default(0) | int != 0 %}
	
	{% set macros = printer["gcode_macro list_macros"].macros %}
	{% set output = [] %}
	{% for k in macros %}
	{% if SEARCH in k | lower %}
	{% set line = k ~ ((" (renames: %s)" % (macros[k]|join(","))) if macros[k]
	else "") %}
	{% set outvars = [] %}
	{% if VARS %}
	{% for v in printer["gcode_macro " ~ k] | sort %}
	{% set dummy = outvars.append("\n* %s: %s" %
	(v, printer["gcode_macro " ~ k][v]|string)) %}
	{% endfor %}
	{% endif %}
	{% set dummy = output.append(line + outvars | join("")) %}
	{% endif %}
	{% endfor %}
	{ action_respond_info(output | sort | join("\n")) }

[gcode_macro set_heater_temperature_scaled]
gcode = 
	{% set HEATER = params.HEATER.lower() %}
	{% set TARGET = params.TARGET|default(0.0)|float %}
	{% set scaled_heaters =
	printer["gcode_macro set_heater_scaling"].scaled_heaters %}
	{% if HEATER in scaled_heaters %}
	{% set scales = scaled_heaters[HEATER] %}
	{% set dummy = scales.__setitem__("real_target", TARGET) %}
	{%if TARGET > 0.0 %}
	{% set TARGET = (((TARGET + scales.bump) * scales.scale, scales.minimum)
	| max, scales.maximum)|min %}
	{% endif %}
	{% endif %}
	SET_HEATER_TEMPERATURE HEATER="{HEATER}" TARGET={TARGET}

[gcode_macro temperature_wait_scaled]
gcode = 
	{% set SENSOR = params.SENSOR.lower() %}
	{% set heater = SENSOR if not SENSOR.startswith("heater_generic") else
	SENSOR.split()[1] %}
	{% set scaled_heaters =
	printer["gcode_macro set_heater_scaling"].scaled_heaters %}
	{% if heater in scaled_heaters %}
	{% set scales = scaled_heaters[heater] %}
	{% if "MINIMUM" in params and MINIMUM > 0.0 %}
	{% set MINIMUM = (((MINIMUM + scales.bump) * scales.scale, scales.minimum)
	| max, scales.maximum)|min %}
	{% endif %}
	{% if "MAXIMUM" in params and MAXIMUM > 0.0 %}
	{% set MAXIMUM = (((MAXIMUM + scales.bump) * scales.scale, scales.minimum)
	| max, scales.maximum)|min %}
	{% endif %}
	{% else %}
	{% set settings = printer.configfile.settings[SENSOR] %}
	{% set MINIMUM = params.MINIMUM|default(settings.min_temp) %}
	{% set MAXIMUM = params.MAXIMUM|default(settings.max_temp) %}
	{% endif %}
	{% if printer[sensor].temperature < MINIMUM or
	printer[sensor].temperature > MAXIMUM %}
	TEMPERATURE_WAIT SENSOR="{SENSOR}" MINIMUM={MINIMUM} MAXIMUM={MAXIMUM}
	{% endif %}

[gcode_macro _gcode_wait_wrapper_inner]
gcode = 
	
	
	{% set sensor = params.HEATER if params.HEATER in
	printer.heaters.available_heaters
	else ("heater_generic " ~ params.HEATER) %}
	{% set target = printer[sensor].target %}
	{% if 'R' in params and target > 0.0 %}
	{% set T = params.T|default("") %}
	M{params.M}.6245197 S{target} { (" T"~T) if T else "" }
	{% elif printer[sensor].temperature < target %}
	TEMPERATURE_WAIT SENSOR="{sensor}" MINIMUM={target}
	{% endif %}

[gcode_macro _gcode_wait_wrapper]
gcode = 
	{% set target = params.S | default(params.R | default(0))| float %}
	SET_HEATER_TEMPERATURE_SCALED HEATER="{params.HEATER}" TARGET={target}
	_GCODE_WAIT_WRAPPER_INNER{%
	for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}

[gcode_macro m109]
rename_existing = M109.6245197
gcode = 
	{% set extruder = "extruder" ~ params.T|replace('0', '')
	if "T" in params else printer.toolhead.extruder %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating
	_GCODE_WAIT_WRAPPER HEATER={extruder}{%
	for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro m190]
rename_existing = M190.6245197
gcode = 
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=bed_heating
	_GCODE_WAIT_WRAPPER HEATER=heater_bed {%
	for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro m191]
description = Sets chamber temperature (with wait for heating).
	Usage: M191 [S<temp>]
gcode = 
	
	{% if "R" in params %}
	{% set dummy = params.__setitem__("S", params.R) %}
	{% endif %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=chamber_heating
	_GCODE_WAIT_WRAPPER HEATER=chamber {%
	for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro m104]
rename_existing = M104.6245197
gcode = 
	{% set extruder = "extruder" ~ params.T|replace('0', '')
	if "T" in params else printer.toolhead.extruder %}
	SET_HEATER_TEMPERATURE_SCALED HEATER={extruder} TARGET={params.S|default(0)}

[gcode_macro m140]
rename_existing = M140.6245197
gcode = 
	SET_HEATER_TEMPERATURE_SCALED HEATER=heater_bed TARGET={params.S|default(0)}

[gcode_macro m141]
description = Sets chamber temperature.
	Usage: M141 [S<temp>]
gcode = 
	SET_HEATER_TEMPERATURE_SCALED HEATER=chamber TARGET={params.S|default(0)}

[gcode_macro _check_heater_params]
gcode = 
	{% set HEATER = params.HEATER|lower %}
	{% set sensor = params.HEATER %}
	{% if HEATER not in printer.heaters.available_heaters %}
	{% set sensor = "heater_generic " ~ HEATER %}
	{% if sensor not in printer.heaters.available_heaters %}
	{ action_raise_error("The value '%s' is not valid for HEATER"
	| format(HEATER)) }
	{% endif %}
	{% endif %}
	{% set settings = printer.configfile.settings[sensor] %}
	{% set scaled_heaters =
	printer["gcode_macro set_heater_scaling"].scaled_heaters %}
	{% if HEATER is in scaled_heaters %}
	{% set scales = scaled_heaters[HEATER] %}
	{% else %}
	{% set scales = { "scale": 1.0, "bump": 0.0, "minimum": settings.min_temp,
	"maximum": settings.max_temp,
	"real_target": printer[sensor].target} %}
	{% endif %}
	{% set SCALE = params.SCALE|default(scales.scale)|float %}
	{% set BUMP = params.BUMP|default(scales.bump)|float %}
	{% set MINIMUM = params.MINIMUM|default(scales.minimum)|float %}
	{% set MAXIMUM = params.MAXIMUM|default(scales.maximum)|float %}
	
	{% if SCALE <= 0 %}
	{ action_raise_error("SCALE must be a positive value.") }
	{% elif MINIMUM < settings.min_temp or MINIMUM > settings.max_temp %}
	{ action_raise_error("MINIMUM must be between %.1f and %.1f" |
	format(settings.min_temp, settings.max_temp)) }
	{% elif MAXIMUM < settings.min_temp or MAXIMUM > settings.max_temp %}
	{ action_raise_error("MAXIMUM must be between %.1f and %.1f" |
	format(settings.min_temp, settings.max_temp)) }
	{% elif MINIMUM >= MAXIMUM %}
	{ action_raise_error("MINIMUM must be less than MAXIMUM.") }
	{% elif "TARGET" in params and (params.TARGET|float < MINIMUM or
	params.TARGET|float > MAXIMUM) %}
	{ action_raise_error("TARGET must be between %.1f and %.1f" |
	format(settings.min_temp, settings.max_temp)) }
	{% endif %}

[gcode_macro set_heater_scaling]
description = Sets scaling parameters for heater. If a new target temperature is
	passed it will be adjusted to the scaling parameters.
	Usage: SET_HEATER_SCALING [HEATER=<heater>] [SCALE=<scale_factor>]
	[BUMP=<degrees>] [MAXIMUM=<degrees>]
	[MINIMUM=<degrees>] [TARGET=<temp>]
variable_scaled_heaters = {}
gcode = 
	
	{% if "HEATER" is not in params %}
	{% set output = [] %}
	{% for h in scaled_heaters %}
	{% set dummy = output.append(
	"%s: Scale: %.2f Bump: %.1f Minimum:%.1f Maximum: %.1f"
	| format(h, scaled_heaters[h].scale, scaled_heaters[h].bump,
	scaled_heaters[h].minimum, scaled_heaters[h].maximum)) %}
	{% endfor %}
	{% if output %}}{action_respond_info(output|join('\n'))}{% endif %}
	{% else %}
	
	{% set HEATER = params.HEATER.lower() %}
	{% set settings = printer.configfile.settings[HEATER] %}
	{% if HEATER is not in scaled_heaters %}
	{% set dummy = scaled_heaters.__setitem__(HEATER, {"scale": 1.0,
	"bump": 0.0, "minimum": settings.min_temp,
	"maximum": settings.max_temp,
	"real_target": printer[HEATER].target}) %}
	{% endif %}
	_CHECK_HEATER_PARAMS{% for k in params %}{' '~k~'='~params[k]}{% endfor %}
	{% set scales = scaled_heaters[HEATER] %}
	{% set SCALE = params.SCALE|default(scales.scale)|float %}
	{% set BUMP = params.BUMP|default(scales.bump)|float %}
	{% set MAXIMUM = params.MAXIMUM|default(scales.maximum)|float %}
	{% set MINIMUM = params.MINIMUM|default(scales.minimum)|float %}
	{% set TARGET = params.TARGET|default(scales.real_target)|float %}
	{% set dummy = scales.__setitem__("scale", SCALE) %}
	{% set dummy = scales.__setitem__("bump", BUMP) %}
	{% set dummy = scales.__setitem__("maximum", MAXIMUM) %}
	{% set dummy = scales.__setitem__("minimum", MINIMUM) %}
	{% set dummy = scales.__setitem__("real_target", TARGET) %}
	
	{% set settings = printer.configfile.settings[HEATER] %}
	{% if SCALE != 1.0 or BUMP != 0.0 or MINIMUM != settings.min_temp or
	MAXIMUM != settings.max_temp %}
	{% set dummy = scaled_heaters.__setitem__(HEATER, scales) %}
	{% else %}
	{% set dummy = scaled_heaters.__delitem__(HEATER) %}
	{% endif %}
	SET_HEATER_TEMPERATURE_SCALED HEATER={HEATER} TARGET={TARGET}
	{action_respond_info(
	"%s: Scale: %.2f Bump: %.1f Minimum:%.1f Maximum: %.1f Target: %.1f"
	| format(HEATER, SCALE, BUMP, MINIMUM, MAXIMUM, TARGET))}
	{% endif %}
	
	{% set dummy = None if True else "
	{% set dummy = params.HEATER|default(e.g. extruder) %}
	{% set dummy = params.SCALE|default(1.0)|float %}
	{% set dummy = params.BUMP|default(0.0)|float %}
	{% set dummy = params.MAXIMUM|default(max_temp)|float %}
	{% set dummy = params.MINIMUM|default(min_temp)|float %}
	{% set dummy = params.TARGET|default(current target)|float %}
	" %}

[gcode_macro reset_heater_scaling]
description = Clears scaling for heater (or all heaters if none specified).
	Usage: RESET_HEATER_SCALING [HEATER=<heater>]
gcode = 
	{% if "HEATER" in params %}
	{% set HEATER = params.HEATER.lower() %}
	{% if HEATER not in printer.heaters.available_heaters %}
	{ action_raise_error("The value '%s' is not valid for HEATER"
	| format(HEATER)) }
	{% endif %}
	{% set settings = printer.configfile.settings[HEATER] %}
	SET_HEATER_SCALING HEATER={HEATER
	} SCALE=1.0 BUMP=0.0 MINIMUM={settings.min_temp
	} MAXIMUM={settings.max_temp}
	{% else %}
	
	SET_GCODE_VARIABLE MACRO=set_heater_scaling VARIABLE=scaled_heaters VALUE={
	"{}"}
	{% endif %}

[gcode_macro _km_idle_timeout]
gcode = 
	{% if printer.pause_resume.is_paused %}
	{action_respond_info("Extruder powered down on idle timeout.")}
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{
	printer[printer.toolhead.extruder].target}"
	M104; Turn off extruder but leave the bed on.
	{% else %}
	TURN_OFF_HEATERS
	M107; turn off fan
	M84
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready
	{% endif %}

[gcode_macro _check_kinematic_limits]
gcode = 
	{% set toolhead = printer.toolhead %}
	{% if params.X and (params.X|float < toolhead.axis_minimum.x or
	params.X|float > toolhead.axis_maximum.x) %}
	{action_raise_error("X[%.3f] must be between %.3f and %.3f."
	| format(params.X|float, toolhead.axis_minimum.x,
	toolhead.axis_maximum.x))}
	{% elif params.Y and (params.Y|float < toolhead.axis_minimum.y or
	params.Y|float > toolhead.axis_maximum.y) %}
	{action_raise_error("Y[%.3f] must be between %.3f and %.3f."
	| format(params.Y|float, toolhead.axis_minimum.y,
	toolhead.axis_maximum.y))}
	{% elif params.Z and (params.Z|float < toolhead.axis_minimum.z or
	params.Z|float > toolhead.axis_maximum.z) %}
	{action_raise_error("Z[%.3f] must be between %.3f and %.3f."
	| format(params.Z|float, toolhead.axis_minimum.z,
	toolhead.axis_maximum.z))}
	{% elif params.E and (params.E|float|abs > printer.configfile.settings[
	"extruder"].max_extrude_only_distance) %}
	{action_raise_error("E[%.4f] exceeds max_extrude_only_distance[%.4f]."
	| format(params.E|float|abs, printer.configfile.settings[
	"extruder"].max_extrude_only_distance))}
	{% endif %}

[gcode_macro lazy_home]
description = Homes the specified axes. If lazy is true, already homed axes
	are skipped.
	Usage: LAZY_HOME [LAZY=<1|0>] [AXES=<axes_string>]
gcode = 
	
	LIST_MACROS SILENT=1
	_LAZY_HOME_INNER {rawparams}

[gcode_macro _lazy_home_inner]
gcode = 
	
	{% set G28 = (printer["gcode_macro list_macros"].macros.g28|
	default(["g28"],True))[-1] %}
	{% set axes = 'XYZ'|select('in', params.AXES|default("XYZ")|upper|list) %}
	{% if not axes %}
	{% set axes = 'XYZ' %}
	{% endif %}
	{% if params.LAZY|default(1)|int %}
	{% set axes = axes|reject('in', printer.toolhead.homed_axes|upper)|join() %}
	{% endif %}
	
	{% if axes %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing
	{G28}{% for k in axes %}{' ' ~ k}{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status
	{% endif %}

[gcode_macro g28]
description = Wraps the G28 command to add the Marlin "O" parameter so that
	already homed axes will not be homed again. See the Klipper documentation on
	G28 for the behavior of the other parameters.
	Usage: G28 [O] ...
rename_existing = G28.6245197
gcode = 
	{% set axes = 'XYZ'|select('in', params)|join() %}
	LAZY_HOME LAZY={('O' in params)|int}{%if axes%} AXES={axes}{%endif%}

[gcode_macro before_layer_change]
description = Add this to the "before layer change" input box in the slicer.
	Usage: BEFORE_LAYER_CHANGE HEIGHT=<current_height> LAYER=<current_layer>
gcode = 
	{% set height = params.HEIGHT|default(printer.toolhead.position.z)|float %}
	{% set layer = params.LAYER|default(-1)|int + 1 %}
	{% if height >= 0.0 and layer >= 0 %}
	SET_PRINT_STATS_INFO CURRENT_LAYER="{layer}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{height}"
	{% if printer["gcode_macro _km_layer_run"].clearance_z < height %}
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{
	height}"
	{% endif %}
	{% endif %}

[gcode_macro after_layer_change]
description = Add this to the "after layer change" input box in the slicer.
	Usage: AFTER_LAYER_CHANGE
gcode = 
	_KM_LAYER_RUN

[gcode_macro gcode_at_layer]
description = Schedules the specified g-code command to be run at the specified
	layer. LAYER=next will cause the command to run at the next layer change.
	Usage: GCODE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } COMMAND=<gcode>
	[CANCEL=<0|1>]
gcode = 
	{% set tot_layers = printer.print_stats.info.total_layer %}
	{% if params|length > 0 %}
	_KM_CHECK_IS_PRINTING
	
	{% set CANCEL = params.CANCEL|default(0)|int != 0 %}
	{% set COMMAND = params.COMMAND|default(None) %}
	{% if COMMAND %}
	{% set COMMAND = COMMAND.lstrip().split(None, 1) %}
	{% set COMMAND = " ".join([COMMAND[0]|upper] + COMMAND[1:]) %}
	{% endif %}
	
	{% if "LAYER" in params %}
	{% set cmd_container = "commands_layer" %}
	{% set cur_layer = printer.print_stats.info.current_layer|int %}
	{% if "HEIGHT" in params %}
	{action_raise_error("Conflicting HEIGHT and LAYER arguments provided.")}
	{% elif params.LAYER|string|lower == "next" %}
	{% set LAYER = cur_layer + 1 %}
	{% else %}
	{% set LAYER = params.LAYER|int %}
	{% endif %}
	{% if LAYER <= cur_layer %}
	{action_raise_error("LAYER[%i] must be above current print layer[%i]."
	| format(LAYER, cur_layer))}
	{% elif tot_layers and LAYER > tot_layers %}
	{action_raise_error("LAYER[%i] must not be above top layer[%i]."
	| format(LAYER, tot_layers))}
	{% endif %}
	{% set key = LAYER %}
	
	{% elif "HEIGHT" in params %}
	{% set cmd_container = "commands_height" %}
	{% set HEIGHT = params.HEIGHT|float %}
	{% set cur_height = printer["gcode_macro _km_layer_run"].cur_height %}
	{% if HEIGHT <= cur_height %}
	{action_raise_error(
	"HEIGHT[%.3f] must be above current print height[%.3f].")
	| format(HEIGHT, cur_height)}
	{% elif HEIGHT >= printer.toolhead.axis_maximum.z %}
	{action_raise_error(
	"HEIGHT[%.3f] must be below maximum Z height[%.3f].")
	| format(HEIGHT, printer.toolhead.axis_maximum.z)}
	{% endif %}
	{% set key = HEIGHT %}
	
	{% else %}
	{action_raise_error("No HEIGHT or LAYER argument provided.")}
	{% endif %}
	
	{% set commands = printer["gcode_macro _km_layer_run"][cmd_container] %}
	{% if key not in commands and not CANCEL %}
	{% set dummy = commands.__setitem__(key, []) %}
	{% endif %}
	
	{% if CANCEL %}
	{% if key in commands %}
	{% set pos = ("%i"|format(key)) if key is integer else
	("%.3fmm"|format(key)) %}
	{% if COMMAND %}
	{% set dummy = commands[key].remove(COMMAND) %}
	{% if commands[key]|length == 0 %}
	{% set dummy = commands.__delitem__(key) %}
	{% endif %}
	{action_respond_info("Cancelled %s %s:\n* %s" |
	format("layer" if k is integer else "height",
	pos, COMMAND))}
	{% else %}
	{% set dummy = commands.__delitem__(key) %}
	{action_respond_info("Cancelled all commands at %s %s." |
	format("layer" if k is integer else "height",
	pos))}
	{% endif %}
	{% endif %}
	{% elif not COMMAND %}
	{action_raise_error("No COMMAND argument provided.")}
	{% elif COMMAND in commands[key] %}
	{action_raise_error("Duplicate command previously scheduled.")}
	{% else %}
	{% set dummy = commands[key].append(COMMAND) %}
	{% set pos = ("%i"|format(key)) if key is integer else
	("%.3fmm"|format(key)) %}
	{action_respond_info("%s %s:\n* %s" |
	format("layer" if key is integer else "height",
	pos, COMMAND))}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE={cmd_container} VALUE="{
	commands|replace('\"','\\\"')}"
	_UPDATE_LAYER_COMPAT
	
	
	{% else %}
	{% set output = [] %}
	{% set commands = printer["gcode_macro _km_layer_run"].commands_layer %}
	{% for key in commands|list|sort %}
	{% set dummy = output.append("layer %i:" | format(key)) %}
	{% for c in commands[key] %}
	{% set dummy = output.append("* %s" | format(c)) %}
	{% endfor %}
	{% endfor %}
	{% set commands = printer["gcode_macro _km_layer_run"].commands_height %}
	{% for key in commands|list|sort %}
	{% set dummy = output.append("height %.3fmm:" | format(key)) %}
	{% for c in commands[key] %}
	{% set dummy = output.append("* %s" | format(c)) %}
	{% endfor %}
	{% endfor %}
	{action_respond_info(output|join('\n'))}
	{% endif %}

[gcode_macro _km_layer_run]
description = Runs pending commands for the current layer change.
	Usage: _KM_LAYER_RUN
variable_cur_height = 0.0
variable_clearance_z = 0.0
variable_commands_layer = {}
variable_commands_height = {}
gcode = 
	{% set cur_layer = printer.print_stats.info.current_layer %}
	{% for key in commands_layer | select("<=", cur_layer) | sort %}
	{action_respond_info("Executing scheduled commands at layer %d:\n%s" |
	format(key, commands_layer[key]|join('\n')))}
	{% for c in commands_layer[key] %}
	{c}
	{% endfor %}
	{% set dummy = commands_layer.__delitem__(key) %}
	{% endfor %}
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{
	commands_layer|replace('\"','\\\"')}"
	{% for key in commands_height | select("<=", cur_height) | sort %}
	{action_respond_info("Executing scheduled commands at height %.3f:\n%s" |
	format(key, commands_height[key]|join('\n')))}
	{% for c in commands_height[key] %}
	{c}
	{% endfor %}
	{% set dummy = commands_height.__delitem__(key) %}
	{% endfor %}
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{
	commands_height|replace('\"','\\\"')}"
	_UPDATE_LAYER_COMPAT

[gcode_macro init_layer_gcode]
description = Clears scheduled gcode commands and state for all layers.
	Usage: INIT_LAYER_GCODE LAYERS=<num>
gcode = 
	SET_PRINT_STATS_INFO TOTAL_LAYER="{params.LAYERS|int + 1}" CURRENT_LAYER="{0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"
	_UPDATE_LAYER_COMPAT

[gcode_macro _reset_layer_gcode]
description = Clears scheduled gcode commands and state for all layers.
	Usage: _RESET_LAYER_GCODE
gcode = 
	SET_PRINT_STATS_INFO TOTAL_LAYER="{0}" CURRENT_LAYER="{0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"
	_UPDATE_LAYER_COMPAT

[gcode_macro cancel_all_layer_gcode]
description = Clears all scheduled gcode commands.
	Usage: CANCEL_ALL_LAYER_GCODE
gcode = 
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"
	_UPDATE_LAYER_COMPAT

[gcode_macro _update_layer_compat]
gcode = 
	{% set next_layer = printer.print_stats.info.current_layer|int + 1 %}
	{% set commands_layer = printer["gcode_macro _km_layer_run"].commands_layer %}
	{% set keys = commands_layer | sort(reverse=True) %}
	
	{% set pause_next_layer = {'enable': False, 'call':
	printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer.call} %}
	{% if pause_next_layer.call in commands_layer[next_layer] | default([]) %}
	{% set dummy = pause_next_layer.__setitem__('enable', True) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{
	pause_next_layer|replace('\"','\\\"') }"
	
	
	{% set pause_at_layer = {'enable': False, 'layer': 0, 'call':
	printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer.call} %}
	{% if pause_next_layer.enable and
	pause_next_layer.call == pause_at_layer.call %}
	{% set keys = keys | reject("==", next_layer) %}
	{% endif %}
	
	
	
	
	{% for key in keys %}
	{% if pause_at_layer.call in commands_layer[key] %}
	{% set dummy = pause_at_layer.__setitem__('enable', True) %}
	{% set dummy = pause_at_layer.__setitem__('layer', key) %}
	{% endif %}
	{% endfor %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{
	pause_at_layer|replace('\"','\\\"') }"

[gcode_macro pause_next_layer]
description = Convenience macro to schedule the current print to pause at the
	next layer change. See PAUSE for additional arguments.
	Usage: PAUSE_NEXT_LAYER ...
gcode = 
	_CHECK_KINEMATIC_LIMITS{% for k in params%}{' ' ~k~ '=' ~ params[k]
	}{% endfor %}
	GCODE_AT_LAYER LAYER=NEXT COMMAND="PAUSE{% for k in params %}{
	' ' ~ k ~ '=' ~ params[k]}{% endfor %}"

[gcode_macro pause_at_layer]
description = Convenience macro to schedule the current print to pause at the
	specified layer change. LAYER=next will cause the command to run at the next
	layer change. See PAUSE for additional arguments.
	Usage: PAUSE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...
gcode = 
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	" %}
	{% set filtered_params = params|reject('in',['HEIGHT','LAYER'])|list|sort %}
	_CHECK_KINEMATIC_LIMITS{% for k in filtered_params%}{' ' ~k~ '=' ~ params[k]
	}{% endfor %}
	GCODE_AT_LAYER {% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor
	%} COMMAND="PAUSE{% for k in filtered_params %}{
	' ' ~ k ~ '=' ~ params[k]}{% endfor %}"

[gcode_macro speed_at_layer]
description = Convenience macro to schedule a feedrate adjustment at the
	specified layer change. LAYER=next will cause the command to run at the next
	layer change. (SPEED parameter behaves the same as the M220 S parameter.)
	Usage: SPEED_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } SPEED=<percentage>
gcode = 
	{% set SPEED = params.SPEED|default(0)|int %}
	{% if SPEED < 1 or SPEED > 500 %}
	{action_raise_error("SPEED[%i] parameter between 1 and 500 is required."
	% SPEED)}
	{% endif %}
	GCODE_AT_LAYER {% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor %} COMMAND="M220 S{SPEED|int}"
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	{% set dummy = params.SPEED|default(percentage)|int %}
	" %}

[gcode_macro flow_at_layer]
description = Convenience macro to schedule a flow percentage adjustment at the
	specified layer change. LAYER=next will cause the command to run at the next
	layer change. (FLOW parameter behaves the same as the M221 S parameter.)
	Usage: FLOW_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } FLOW=<percentage>
gcode = 
	{% set FLOW = params.FLOW|default(0)|int %}
	{% if FLOW < 1 or FLOW > 500 %}
	{action_raise_error("FLOW[%i] parameter between 1 and 500 is required."
	% FLOW)}
	{% endif %}
	GCODE_AT_LAYER {% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor %} COMMAND="M221 S{FLOW|int}"
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	{% set dummy = params.FLOW|default(percentage)|int %}
	" %}

[gcode_macro fan_at_layer]
description = Convenience macro to schedule a fan adjustment at the specified
	layer change. LAYER=next will cause the command to run at the next layer
	change. See SET_FAN_SCALING for additional arguments.
	Usage: FAN_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...
gcode = 
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	{% set dummy = params.SCALE|default(1.0)|float %}
	{% set dummy = params.BUMP|default(0)|int %}
	{% set dummy = params.MAXIMUM|default(0)|int %}
	{% set dummy = params.MINIMUM|default(255)|int %}
	{% set dummy = params.SPEED|default(current speed)|int %}
	" %}
	{% set filtered_params = params|reject('in',['HEIGHT','LAYER'])|list|sort %}
	{% if filtered_params|length == 0 %}
	{action_raise_error("No fan parameters provided.")}
	{% endif %}
	_CHECK_FAN_PARAMS{% for k in filtered_params %}{' '~k~'='~params[k]
	}{% endfor %}
	GCODE_AT_LAYER {% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor
	%} COMMAND="SET_FAN_SCALING{% for k in filtered_params %}{
	' ' ~ k ~ '=' ~ params[k]}{% endfor %}"

[gcode_macro heater_at_layer]
description = Convenience macro to schedule a heater adjustment at the specified
	layer change. LAYER=next will cause the command to run at the next layer
	change. See SET_HEATER_SCALING for additional arguments.
	Usage: HEATER_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...
gcode = 
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	{% set dummy = params.HEATER|default(e.g. extruder) %}
	{% set dummy = params.SCALE|default(1.0)|float %}
	{% set dummy = params.BUMP|default(0.0)|float %}
	{% set dummy = params.MAXIMUM|default(max_temp)|float %}
	{% set dummy = params.MINIMUM|default(min_temp)|float %}
	{% set dummy = params.TARGET|default(current target)|float %}
	" %}
	{% set filtered_params = params|reject('in',['HEIGHT','LAYER'])|list|sort %}
	_CHECK_HEATER_PARAMS{% for k in filtered_params%}{' ' ~ k ~ '=' ~ params[k]
	}{% endfor %}
	GCODE_AT_LAYER{% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor
	%} COMMAND="SET_HEATER_SCALING{% for k in filtered_params %}{
	' ' ~ k ~ '=\\\"' ~ params[k]|replace('\\','\\\\')|replace('\'','\\\'')
	|replace('\"','\\\"') ~ '\\\"'
	}{% endfor %}"

[gcode_macro park]
description = Park the toolhead
	Usage: PARK [P=<0|1|2>] [X=<pos>] [Y=<pos>] [Z=<pos>] [LAZY=<1|0>]
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set LAZY = params.LAZY|default(1)|int %}
	{% if printer.toolhead.homed_axes != "xyz" %}
	{% if LAZY %}
	LAZY_HOME
	{% else %}
	{action_raise_error("Must home axes first.")}
	{% endif %}
	{% endif %}
	
	
	{% set P = (params.P|default(2))|int %}
	{% set X = params.X|default(km.park_x)|float %}
	{% set Y = params.Y|default(km.park_y)|float %}
	{% set Z = params.Z|default(km.park_z)|float %}
	
	M400
	_CHECK_KINEMATIC_LIMITS X="{X}" Y="{Y}" Z="{Z}"
	_PARK_INNER X="{X}" Y="{Y}" Z="{Z}" P="{P}" LAZY="{LAZY}"
	
	{% set dummy = None if True else "
	{% set dummy = params.P|default(mode=<0|1|2>)|int %}
	{% set dummy = params.X|default(X position)|int %}
	{% set dummy = params.Y|default(Y position)|int %}
	{% set dummy = params.Z|default(Z position)|int %}
	" %}

[gcode_macro _park_inner]
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set travel_speed_xy = km.travel_speed_xy %}
	{% set travel_speed_z = km.travel_speed_z %}
	
	{% set position = printer.gcode_move.gcode_position %}
	{% set origin = printer.gcode_move.homing_origin%}
	
	
	
	{% set clearance_z = (printer["gcode_macro _km_layer_run"].clearance_z,
	position.z) | max %}
	{% set P = params.P|int %}
	{% set X = params.X|float - origin.x %}
	{% set Y = params.Y|float - origin.y %}
	{% set Z = params.Z|float %}
	{% set LAZY = params.LAZY|int %}
	
	
	{% if P == 0 %}
	{% if clearance_z > Z %}
	{% set Z = clearance_z %}
	{% endif %}
	{% elif P == 1 %}
	{% set Z = Z - origin.z %}
	{% elif P == 2 %}
	{% set Z = Z + clearance_z %}
	{% else %}
	{action_raise_error("Invalid parameter P=%i. Value must be 0, 1, or 2." |
	format(P)) }
	{% endif %}
	
	
	{% set Z = ((Z, printer.toolhead.axis_maximum.z - origin.z)|min,
	printer.toolhead.axis_minimum.z - origin.z)|max %}
	
	
	{% if (not LAZY) or P != 2 or X != position.x or Y != position.y
	or Z < clearance_z %}
	SAVE_GCODE_STATE NAME=_KM_PARK
	G90
	G0 Z{Z} F{travel_speed_z}
	G0 X{X} Y{Y} F{travel_speed_xy}
	RESTORE_GCODE_STATE NAME=_KM_PARK MOVE=0
	{% endif %}

[gcode_macro g27]
description = Parks the toolhead.
	Usage: G27 [P=<0|1|2>]
gcode = 
	
	PARK P={params.P|default(0)} {% for k in params|reject("in", "GP") %}{
	' '~k~'="'~params[k]~'"'
	}{% endfor %}

[gcode_macro pause]
description = Pauses the current print.
	Usage: PAUSE [X=<pos>] [Y=<pos>] [Z=<pos>] [E=<retract_length>] [B=<beeps>]
rename_existing = _KM_PAUSE_BASE
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% set E = (params.E|default(5))|float %}
	
	{% set B = params.B|default(10)|int if "output_pin beeper" in printer else 0
	%}
	
	{% if printer.pause_resume.is_paused %}
	{ action_respond_info("Print already paused") }
	{% elif printer.idle_timeout.state | string == "Printing" or
	(printer.virtual_sdcard|default({})).is_active|default(False) %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pausing RESET_STACK=1
	{% set position = printer.gcode_move.gcode_position %}
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_x VALUE="{position.x}"
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_y VALUE="{position.y}"
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_z VALUE="{position.z}"
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{E}"
	SAVE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE
	_KM_PAUSE_BASE
	M83
	{% if printer.extruder.can_extrude %}
	G1 E{'%.4f' % -E} F{km.load_speed}
	{% endif %}
	PARK P=2{% for k in params|select("in", "XYZ") %}{
	' '~k~'="'~params[k]~'"'}{% endfor %}
	
	{% for i in range(B) %}
	M300 P100
	G4 P200
	{% endfor %}
	{% else %}
	{ action_respond_info("Print not in progress") }
	{% endif %}

[gcode_macro m600]
description = Pauses the current print.
	Usage: M600 [B<beeps>] [E<pos>] [L<pos>] [R<temp>] [U<pos>] [X<pos>] [Y<pos>]
	[Z<pos>]
gcode = 
	PAUSE B="{0}" P=2{% for k in params|select("in", "EXYZ") %}{
	' '~k~'="'~params[k]~'"'}{% endfor %}
	UNLOAD_FILAMENT{% if 'U' in params %} LENGTH={params.U}{% endif
	%} BEEPS="{params.B|default(10)|int}"
	{% if 'R' in params %}M109 S{params.R}{% endif %}

[gcode_macro m601]
description = Pauses the current print.
	Usage: M601
gcode = 
	PAUSE

[gcode_macro m602]
description = Resumes the currently paused print.
	Usage: M602
gcode = 
	RESUME

[gcode_macro m24]
rename_existing = M24.6245197
gcode = 
	{% if printer.pause_resume.is_paused %}
	RESUME
	{% else %}
	M24.6245197
	{% endif %}

[gcode_macro m25]
rename_existing = M25.6245197
gcode = 
	PAUSE

[gcode_macro resume]
description = Resumes the currently paused print.
	Usage: RESUME [E<pos>]
rename_existing = _KM_RESUME_BASE
variable_saved_extruder_temp = 0
variable_saved_x = 0.0
variable_saved_y = 0.0
variable_saved_z = 0.0
variable_saved_e = 0.0
gcode = 
	{% if printer.pause_resume.is_paused %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% set extruder = printer[printer.toolhead.extruder] %}
	{% if extruder.target <= printer.configfile.settings[
	printer.toolhead.extruder].min_temp
	| float + 0.5 %}
	M109 S{saved_extruder_temp}
	{% endif %}
	
	
	
	{% if 'E' not in params and not saved_e %}
	{% set saved_e = 5.0 %}
	G1 E{'%.4f' % -saved_e } F{km.load_speed}
	{% endif %}
	
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"
	G90
	
	G0 X{saved_x} Y{saved_y} F{km.travel_speed_xy}
	G0 Z{saved_z} F{km.travel_speed_z}
	G91
	
	G1 E{'%.4f' % (params.E|default(saved_e))} F{km.load_speed}
	RESTORE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE MOVE=1
	_KM_RESUME_BASE
	{% else %}
	{ action_respond_info("Printer is not paused.") }
	{% endif %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=printing RESET_STACK=1

[gcode_macro clear_pause]
description = Clears the current pause state.
	Usage: CLEAR_PAUSE
rename_existing = _KM_CLEAR_PAUSE
gcode = 
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"
	_KM_CLEAR_PAUSE

[gcode_macro print_start]
description = Inserted by slicer at start of print. Rather than using this macro
	directly you should configure your slicer as instructed in the readme.
	Usage: PRINT_START BED=<temp> EXTRUDER=<temp> [CHAMBER=<temp>]
	[MESH_MIN=<x,y>] [MESH_MAX=<x,y>] [LAYERS=<num>]
	[NOZZLE_SIZE=<mm>]
gcode = 
	{action_respond_info(
	"This file is using an old The PRINT_START format. This print will run "
	"fine, but you should update your slicer config to take advantage of the "
	"phased PRINT_START macros. The slicer documentation is here:\n"
	"https://github.com/jschuh/klipper-macros\x23slicer-configuration"
	)}
	
	_PRINT_START_PHASE_INIT {rawparams}
	_PRINT_START_PHASE_PREHEAT
	_PRINT_START_PHASE_PROBING
	_PRINT_START_PHASE_EXTRUDER
	_PRINT_START_PHASE_PURGE

[gcode_macro _print_start_phase_init]
description = Inserted by slicer at start of print. Initializes PRINT_START
	phases.
	Usage: See PRINT_START.
gcode = 
	CHECK_KM_CONFIG
	SET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{False}"
	_KM_APPLY_PRINT_OFFSET RESET=1
	_PRINT_START_PHASE_CHECK PHASE=none
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% if not params.BED %}
	{% set dummy = params.__setitem__('BED', params.BED_TEMP|int) %}
	{% endif %}
	{% if not params.EXTRUDER %}
	{% set dummy = params.__setitem__('EXTRUDER', params.EXTRUDER_TEMP|int) %}
	{% endif %}
	
	
	PRINT_START_SET PRINT_START_PHASE="init" {% for k in params %}{' %s=\"%s\"' %
	(k,params[k]|replace('\\','\\\\')|replace('\'','\\\'')|replace('\"','\\\"'))
	}{% endfor %}
	
	
	_km_check_and_set_print_bounds
	
	M107
	CLEAR_PAUSE
	
	M140 S{params.BED}
	{% if params.CHAMBER %}M141 S{params.CHAMBER|int}{% endif %}
	{% if printer.bed_mesh %}BED_MESH_CLEAR{% endif %}
	
	{% if km.start_try_saved_surface_mesh and printer.bed_mesh %}
	LOAD_SURFACE_MESH
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="preheat"

[gcode_macro _print_start_phase_preheat]
description = Inserted by slicer at start of print. Handles the bed and chamber
	heating phases and ends when both are stabilized at their target temperatures.
	Usage: See PRINT_START.
gcode = 
	_PRINT_START_PHASE_CHECK PHASE=preheat
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set BED = print.BED|int %}
	{% set EXTRUDER = print.EXTRUDER|int %}
	{% set CHAMBER = print.CHAMBER|default(0)|int %}
	{% set LAYERS = print.LAYERS|default(0)|int %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% set bed_at_target = (BED + 0.4 - printer.heater_bed.temperature) |
	abs <= 0.6 %}
	PRINT_START_SET BED_AT_TARGET={1 if bed_at_target else 0}
	{% set start_level_bed_at_temp = km.start_level_bed_at_temp and
	not printer.bed_mesh.profile_name %}
	{% set actions_at_temp = start_level_bed_at_temp or
	km.start_quad_gantry_level_at_temp or
	km.start_z_tilt_adjust_at_temp or
	(km.start_home_z_at_temp and not bed_at_target) %}
	{% set bed_overshoot = (BED + (km.start_bed_heat_overshoot if
	(BED and not bed_at_target) else 0.0),
	printer.configfile.settings.heater_bed.max_temp ) | min %}
	
	INIT_LAYER_GCODE LAYERS="{LAYERS}"
	{% if CHAMBER > 0.0 %}
	M141 S{CHAMBER}
	{% endif %}
	
	M140 S{bed_overshoot}
	{% if actions_at_temp %}
	
	
	M104 S{km.start_extruder_probing_temp if km.start_extruder_probing_temp > 0
	else (km.start_extruder_preheat_scale * EXTRUDER)|round(0,'ceil')|int}
	{% else %}
	M104 S{EXTRUDER}
	{% endif %}
	
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing RESET_STACK=1
	G28
	G90
	{% if BED > 0.0 %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=bed_heating RESET_STACK=1
	
	{% if not bed_at_target %}
	PARK
	
	M190 S{bed_overshoot}
	G4 P{km.start_bed_heat_delay / 2}
	M190 R{BED}
	G4 P{km.start_bed_heat_delay / 2}
	{% endif %}
	{% endif %}
	
	{% if CHAMBER > 0.0 %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=chamber_heating RESET_STACK=1
	_KM_PARK_IF_NEEDED HEATER="chamber" RANGE=ABOVE
	M191 S{CHAMBER}
	{% endif %}
	
	{% if BED > 0.0 and bed_at_target%}
	M190 R{BED}
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="probing"

[gcode_macro _print_start_phase_probing]
description = Inserted by slicer at start of print. Performs probing (including
	mesh bed level) and other operations that should be run when the bed and
	chamber are stabilized at their target temps.
	Usage: See PRINT_START.
gcode = 
	_PRINT_START_PHASE_CHECK PHASE=probing
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set MESH_MIN = print.MESH_MIN|default(None) %}
	{% set MESH_MAX = print.MESH_MAX|default(None) %}
	
	{% if km.start_random_placement_max > 0 and print.PRINT_MIN and MESH_MIN %}
	{% set PRINT_MIN = print.PRINT_MIN.split(",")|map('float')|list %}
	{% set PRINT_MAX = print.PRINT_MAX.split(",")|map('float')|list %}
	{% set x_offset = (((km.print_max[0] - km.print_min[0] - PRINT_MAX[0] +
	PRINT_MIN[0] - 2 * km.start_random_placement_padding)|int,
	km.start_random_placement_max * 2)|min, 0)|max %}
	{% set y_offset = (((km.print_max[1] - km.print_min[1] - PRINT_MAX[1] +
	PRINT_MIN[1] - 2 * km.start_random_placement_padding)|int,
	km.start_random_placement_max * 2)|min, 0)|max %}
	{% if x_offset > 0 %}
	{% set x_offset = range(x_offset)|random + km.print_min[0] -
	PRINT_MIN[0] + km.start_random_placement_padding %}
	{% endif %}
	{% if y_offset > 0 %}
	{% set y_offset = range(y_offset)|random + km.print_min[1] -
	PRINT_MIN[1] + km.start_random_placement_padding %}
	{% endif %}
	
	
	{% set MESH_MIN = MESH_MIN.split(",")|map('float')|list %}
	{% set MESH_MAX = MESH_MAX.split(",")|map('float')|list %}
	{% set MESH_MIN_NEW = (MESH_MIN[0] + x_offset, MESH_MIN[1] + y_offset) %}
	{% set MESH_MAX_NEW = (MESH_MAX[0] + x_offset, MESH_MAX[1] + y_offset) %}
	{action_respond_info(
	"Relocating print origin from (%.3f,%.3f) "|format(*MESH_MIN) +
	"to (%.3f,%.3f)"|format(*MESH_MIN_NEW))}
	{% set MESH_MIN = (MESH_MIN_NEW[0], MESH_MIN_NEW[1])|join(',') %}
	{% set MESH_MAX = (MESH_MAX_NEW[0], MESH_MAX_NEW[1])|join(',') %}
	PRINT_START_SET PRINT_OFFSET={"%d,%d" % (x_offset,y_offset)}
	{% endif %}
	
	{% set EXTRUDER = print.EXTRUDER|int %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set start_level_bed_at_temp = km.start_level_bed_at_temp and
	not printer.bed_mesh.profile_name %}
	{% set start_home_z_at_temp = km.start_home_z_at_temp and
	not print.BED_AT_TARGET|int %}
	{% set actions_at_temp = start_level_bed_at_temp or
	km.start_quad_gantry_level_at_temp or
	km.start_z_tilt_adjust_at_temp or
	start_home_z_at_temp %}
	{% if actions_at_temp %}
	{% if km.start_extruder_probing_temp > 0 %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating RESET_STACK=1
	_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=2
	M109 R{km.start_extruder_probing_temp}
	{% else %}
	M104 S{EXTRUDER}
	{% endif %}
	{% if start_home_z_at_temp %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing RESET_STACK=1
	G28 Z
	{% endif %}
	{% if km.start_z_tilt_adjust_at_temp %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=calibrating_z RESET_STACK=1
	Z_TILT_ADJUST
	{% endif %}
	{% if km.start_quad_gantry_level_at_temp %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=leveling_gantry RESET_STACK=1
	QUAD_GANTRY_LEVEL
	{% endif %}
	{% if start_level_bed_at_temp %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=meshing RESET_STACK=1
	_km_mesh_if_needed {% if MESH_MIN %} MESH_MIN={MESH_MIN}{% endif
	%}{% if MESH_MAX %} MESH_MAX={MESH_MAX}{% endif %}
	{% endif %}
	{% if km.start_extruder_probing_temp > 0 %}
	M104 S{EXTRUDER}
	{% endif %}
	G4
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="extruder"

[gcode_macro _print_start_phase_extruder]
description = Inserted by slicer at start of print. Preheats the extruder.
	Usage: See PRINT_START.
gcode = 
	_PRINT_START_PHASE_CHECK PHASE=extruder
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set EXTRUDER = print.EXTRUDER|default(print.EXTRUDER_TEMP)|float %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	
	{% if EXTRUDER > 0 %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating RESET_STACK=1
	_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=ABOVE
	M109 S{EXTRUDER}
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="purge"

[gcode_macro _print_start_phase_purge]
description = Inserted by slicer at start of print. Generates purge lines.
	Usage: See PRINT_START.
gcode = 
	_PRINT_START_PHASE_CHECK PHASE=purge
	
	_KM_APPLY_PRINT_OFFSET
	
	_APPLY_BED_SURFACE_OFFSET
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set MESH_MIN = print.MESH_MIN|default(None) %}
	{% set MESH_MAX = print.MESH_MAX|default(None) %}
	{% set NOZZLE_SIZE = print.NOZZLE_SIZE|default(print.NOZZLE_SIZE)|
	default(printer.configfile.settings.extruder.nozzle_diameter)|float %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% if km.start_purge_length > 0.0 and printer.extruder.can_extrude %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=purging RESET_STACK=1
	DRAW_PURGE_LINE WIDTH="{NOZZLE_SIZE * 1.25}" HEIGHT="{NOZZLE_SIZE * 0.625
	}"{% if MESH_MIN %} PRINT_MIN={MESH_MIN}{% endif
	%}{% if MESH_MAX %} PRINT_MAX={MESH_MAX}{% endif %}
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="printing"
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=printing RESET_STACK=1

[gcode_macro _km_park_if_needed]
description = Parks the extruder if the current temperature of the supplied
	heater is not within the specified target range.
	Usage: _KM_PARK_IF_NEEDED HEATER=<heater> RANGE=[<percentage>|ABOVE|BELOW]
gcode = 
	
	{% set HEATER = params.HEATER if params.HEATER in
	printer.heaters.available_heaters else
	("heater_generic " ~ params.HEATER) %}
	{% set RANGE = (params.RANGE|default(1))|string|upper %}
	
	{% if printer[HEATER].target %}
	{% if RANGE == "ABOVE" %}
	{% if printer[HEATER].temperature < printer[HEATER].target %}
	PARK
	{% endif %}
	{% elif RANGE == "BELOW" %}
	{% if printer[HEATER].temperature > printer[HEATER].target %}
	PARK
	{% endif %}
	{% elif (printer[HEATER].temperature - printer[HEATER].target)|abs >
	(printer[HEATER].target * RANGE|float * 0.01)|abs %}
	PARK
	{% endif %}
	{% endif %}

[gcode_macro _km_apply_print_offset]
variable_offset = []
gcode = 
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% if params.RESET|default(0)|int and offset and
	not printer["gcode_macro _km_save_state"].is_ephemeral%}
	{% set PRINT_OFFSET = [offset.pop(0) * -1, offset.pop() * -1] %}
	{% elif print.PRINT_OFFSET and not offset and
	not printer["gcode_macro _km_save_state"].is_ephemeral %}
	{% set PRINT_OFFSET = print.PRINT_OFFSET.split(",")|map('float')|list %}
	{% set dummy = offset.extend(PRINT_OFFSET) %}
	{% endif %}
	
	{% if PRINT_OFFSET %}
	_KM_SET_GCODE_OFFSET_BASE {"X_ADJUST=%.2f Y_ADJUST=%.2f"|
	format(*PRINT_OFFSET)}
	{% endif %}

[gcode_macro _km_mesh_if_needed]
gcode = 
	
	
	
	{% if not printer.bed_mesh.profile_name %}
	BED_MESH_CALIBRATE_FAST {rawparams}
	{% endif %}

[gcode_macro print_start_set]
description = Inserted by slicer to set values used by PRINT_START.
	Usage: PRINT_START_SET <VARIABLE>=<value>
variable_print = {}
gcode = 
	{%for k in params %}
	{% set dummy = print.__setitem__(k|upper, params[k]) %}
	{% endfor %}

[gcode_macro _print_start_phase_check]
gcode = 
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set PRINT_START_PHASE = print.PRINT_START_PHASE|default("none") %}
	{% if PRINT_START_PHASE != params.PHASE %}
	
	SET_GCODE_VARIABLE MACRO=print_start_set VARIABLE=print VALUE="{{}}"
	{% if params.PHASE != 'none' %}
	{% set error = "PRINT_START phase error. Expected '%s' but found '%s'" %
	(params.PHASE, PRINT_START_PHASE) %}
	
	{% if not 'virtual_sdcard' in printer or
	not printer.virtual_sdcard.is_active or 'CANCEL_PRINT' not in
	printer.configfile.settings.virtual_sdcard.on_error_gcode|
	default("")|upper %}
	{action_respond_info(error)}
	CANCEL_PRINT
	{% else %}
	{action_raise_error(error)}
	{% endif %}
	{% else %}
	{ action_respond_info("Expected phase '%s' but found '%s'. Resetting."
	% (params.PHASE, PRINT_START_PHASE)) }
	{% endif %}
	{% endif %}

[gcode_macro print_end]
description = Inserted by slicer at end of print.
	Usage: PRINT_END
gcode = 
	_KM_CHECK_IS_PRINTING
	M400
	_PRINT_END_INNER
	
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% if km.start_clear_adjustments_at_end != 0 %}
	RESET_HEATER_SCALING
	RESET_FAN_SCALING
	M220 S100
	M221 S100
	{% endif %}
	_RESET_LAYER_GCODE
	_RESET_VELOCITY_LIMITS
	TURN_OFF_HEATERS
	M107; turn off fan
	{% if printer.bed_mesh %}BED_MESH_CLEAR{% endif %}
	
	{% if printer.toolhead.homed_axes|lower == "xyz" %}
	PARK Y="{km.start_end_park_y}"
	{% endif %}
	M84
	CLEAR_PAUSE
	SET_GCODE_VARIABLE MACRO=print_start_set VARIABLE=print VALUE="{{}}"
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready RESET_STACK=1

[gcode_macro _print_end_inner]
variable_cancelled = False
gcode = 
	SET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{False}"
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set toolhead = printer.toolhead %}
	{% set origin = printer.gcode_move.homing_origin%}
	{% set max_x = km.print_max[0] - origin.x %}
	{% set max_y = km.print_max[1] - origin.y %}
	{% set max_z = toolhead.axis_maximum.z - origin.z %}
	
	{% if not cancelled %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=completing
	{% endif %}
	
	{% if printer.extruder.can_extrude %}
	
	{% if not printer.pause_resume.is_paused and not cancelled and
	toolhead.homed_axes|lower == "xyz" %}
	{% set x_safe = (max_x - toolhead.position.x, 2.0)|min %}
	{% set y_safe = (max_y - toolhead.position.y, 2.0)|min %}
	{% set z_safe = (max_z - toolhead.position.z, 2.0)|min %}
	G91
	G0 Z{z_safe} E-1.0 F{km.travel_speed_z * 2}
	G0 X{x_safe} Y{y_safe} E-1.0 F{km.travel_speed_xy}
	
	_KM_APPLY_PRINT_OFFSET RESET=1
	{% endif %}
	
	
	G92 E0
	G1 E-5.0 F3600
	M400
	{% endif %}

[gcode_macro _km_check_is_printing]
variable_debug_state = False
description = Throws an error if print is not currently in progress.
gcode = 
	{% if not debug_state and
	printer.idle_timeout.state|string != "Printing" and
	not (printer.virtual_sdcard|default({})).is_active|default(False) and
	not printer.pause_resume.is_paused %}
	{ action_raise_error("No active print.") }
	{% endif %}

[gcode_macro _km_check_and_set_print_bounds]
description = Validates all print bounds and caches their values.
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set print = printer["gcode_macro print_start_set"].print %}
	
	
	{% if print.MESH_MIN %}
	{% set MESH_MIN = print.MESH_MIN.split(",")|map('float')|list %}
	{% set MESH_MAX = print.MESH_MAX.split(",")|map('float')|list %}
	{%if MESH_MIN[0] < km.print_min[0] or MESH_MIN[1] < km.print_min[1] %}
	{action_raise_error("MESH_MIN %s is outside the printable bounds" %
	(MESH_MIN|string, km.print_min|string))}
	{%elif MESH_MAX[0] > km.print_max[0] or MESH_MAX[1] > km.print_max[1] %}
	{action_raise_error("MESH_MAX %s is outside the printable bounds %s" %
	(MESH_MAX|string, km.print_max|string))}
	{% endif %}
	{% endif %}
	
	
	{% set points = [] %}
	{% if print.MODEL_MIN or print.MODEL_MAX %}
	{% set MODEL_MIN = print.MODEL_MIN.split(",")|map('float')|list %}
	{% set MODEL_MAX = print.MODEL_MAX.split(",")|map('float')|list %}
	{% set points = [MODEL_MIN, MODEL_MAX] %}
	{% endif %}
	{% if (printer.exclude_object|default({})).objects %}
	{% set points = printer.exclude_object.objects|selectattr('polygon')|
	map(attribute='polygon')|sum(start=points) %}
	{% set points_len = points|length %}
	{% if points_len >= 2 %}
	{% set x_coords = (points|map(attribute=0)|sort|list)[0::points_len-1] %}
	{% set y_coords = (points|map(attribute=1)|sort|list)[0::points_len-1] %}
	{% set MODEL_MIN = (x_coords[0],y_coords[0])|map('float')|list %}
	{% set MODEL_MAX = (x_coords[1],y_coords[1])|map('float')|list %}
	PRINT_START_SET MODEL_MIN="{MODEL_MIN|join(',')
	}" MODEL_MAX="{MODEL_MAX|join(',')}"
	{% endif %}
	{% endif %}
	
	{% if MODEL_MIN %}
	
	{% if MODEL_MIN[0] < km.print_min[0] or MODEL_MIN[1] < km.print_min[1] %}
	{action_raise_error("MODEL_MIN %s is outside the printable bounds" %
	(MODEL_MIN|string, km.print_min|string))}
	{% elif MODEL_MAX[0] > km.print_max[0] or MODEL_MAX[1] > km.print_max[1] %}
	{action_raise_error("MODEL_MAX %s is outside the printable bounds %s" %
	(MODEL_MAX|string, km.print_max|string))}
	{% endif %}
	{% endif %}
	
	
	{% if MESH_MIN and MODEL_MIN %}
	PRINT_START_SET PRINT_MIN="{((MODEL_MIN[0],MESH_MIN[0])|min,
	(MODEL_MIN[1],MESH_MIN[1])|min)|join(',')
	}" PRINT_MAX="{((MODEL_MAX[0],MESH_MAX[0])|max,
	(MODEL_MAX[1],MESH_MAX[1])|max)|join(',')}"
	{% else %}
	PRINT_START_SET PRINT_MIN="{km.print_min|join(',')
	}" PRINT_MAX="{km.print_max|join(',')}"
	{% endif %}

[gcode_macro _km_save_state]
description = Tracks gcode state.
variable_state_set = {}
variable_is_ephemeral = 0
gcode = 
	{% if params.SAVE|int %}
	{% set dummy = state_set.__setitem__(params.NAME, None) %}
	{% else %}
	{% set dummy = state_set.__delitem__(params.NAME) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=_km_save_state VARIABLE=is_ephemeral VALUE="{
	1 if state_set|length > 0 else 0 }"

[gcode_macro save_gcode_state]
description = Wraps SAVE_GCODE_STATE to track persistence state.
	Usage: See Klipper documentation
rename_existing = _KM_SAVE_GCODE_STATE
gcode = 
	_KM_SAVE_GCODE_STATE {rawparams}
	{% set NAME = params.NAME|default("default") %}
	_km_save_state NAME={NAME} SAVE=1

[gcode_macro restore_gcode_state]
description = Wraps RESTORE_GCODE_STATE to track persistence state.
	Usage: See Klipper documentation
rename_existing = _KM_RESTORE_GCODE_STATE
gcode = 
	_KM_RESTORE_GCODE_STATE {rawparams}
	{% set NAME = params.NAME|default("default") %}
	_km_save_state NAME={NAME} SAVE=0

[gcode_macro _abort_on_gcode_state]
gcode = 
	{% set save_state = printer["gcode_macro _km_save_state"] %}
	{% if save_state.is_ephemeral %}
	{action_raise_error("Encountered unexpected save state " +
	save_state.state_set|list|sort|string)}
	{% endif %}

[gcode_macro _km_print_status]
variable_last_status = 'none'
variable_status_stack = []
variable_command_list = {}
variable_status_list = [
	'ready',
	'filament_load',
	'filament_unload',
	'bed_heating',
	'chamber_heating',
	'homing',
	'leveling_gantry',
	'calibrating_z',
	'meshing',
	'extruder_heating',
	'purging',
	'printing',
	'pausing',
	'cancelling',
	'completing',
	]
gcode = 
	{% set ACTION = params.ACTION|trim|upper %}
	{% set STATUS = params.STATUS|default("")|trim|lower %}
	
	
	{% if ACTION == "ADD_EVENT" %}
	{% set COMMAND = params.COMMAND %}
	{% set ARGS = params.ARGS|default(0)|int != 0 %}
	{% set TYPE = params.TYPE|default('ENTER')|trim|upper %}
	{% set WHEN = params.WHEN|default('PRINTING')|trim|upper %}
	{% set FILTER_ENTER =
	(params.FILTER_ENTER|default("")|trim|lower).split(',')|
	select()|unique|list %}
	{% set FILTER_LEAVE =
	(params.FILTER_LEAVE|default("")|trim|lower).split(',')|
	select()|unique|list %}
	
	{% set STATUSES = STATUS.split(',')|map('trim')|list %}
	{% for s in (STATUSES if STATUSES[0] != 'all' else status_list) %}
	{% if not s in command_list %}
	{% set dummy = command_list.__setitem__(s,[]) %}
	{% endif %}
	{% set dummy = command_list[s].append({'cmd':COMMAND, 'args':ARGS,
	'type':TYPE, 'when':WHEN,
	'filt_e':FILTER_ENTER,
	'filt_l':FILTER_LEAVE}) %}
	{% endfor %}
	
	
	{% elif ACTION == "CHANGE" %}
	{% if params.RESET_STACK|default(0)|int %}
	{% for dummy in range(status_stack|length) %}
	{% set dummy = status_stack.pop() %}
	{% endfor %}
	
	
	{% elif STATUS == "pop_status" %}
	{% set STATUS = (status_stack|default(['ready'], True)).pop() %}
	{% endif %}
	
	{% if STATUS not in status_list %}
	{action_raise_error("Status '%s' not valid."|format(STATUS))}
	{% endif %}
	
	{% if STATUS != last_status %}
	{% set is_printing =
	printer["gcode_macro print_start_set"].print.PRINT_START_PHASE|
	default("")|length != 0 %}
	{% set print_states = ('ALWAYS', 'PRINTING' if is_printing else 'IDLE') %}
	
	{% for c in command_list[last_status]|default([]) %}
	{% if c.type in ('BOTH','LEAVE') and c.when in print_states and
	(not c.filt_l or STATUS in c.filt_l) %}
	M400
	{c.cmd}{% if c.args %} TYPE=LEAVE WHEN={print_states[1]
	} LAST_STATUS={last_status} NEXT_STATUS={STATUS}{% endif %}
	{% endif %}
	{% endfor %}
	
	{% for c in command_list[STATUS]|default([]) %}
	{% if c.type in ('BOTH','ENTER') and c.when in print_states and
	(not c.filt_e or STATUS in c.filt_e) %}
	M400
	{c.cmd}{% if c.args %} TYPE=ENTER WHEN={print_states[1]
	} LAST_STATUS={last_status} NEXT_STATUS={STATUS}{% endif %}
	{% endif %}
	{% endfor %}
	SET_GCODE_VARIABLE MACRO=_km_print_status VARIABLE=last_status VALUE="'{
	STATUS}'"
	{% endif %}
	
	
	{% elif ACTION == "PUSH_STATUS" %}
	{% set dummy = status_stack.append(last_status) %}
	
	
	{% else %}
	{action_raise_error("Action '%s' not valid."|format(ACTION))}
	{% endif %}

[gcode_macro gcode_on_print_status]
description = Adds a gcode command for a status event.
	Usage: GCODE_ON_PRINT_STATUS STATUS=<status> COMMAND=<gcode> [ARGS=<1|0>]
	[WHEN=<PRINTING|IDLE|ALWAYS>]
	[TYPE=<ENTER|LEAVE|BOTH>]
	[FILTER_ENTER=<status list>]
	[FILTER_LEAVE=<status list>]
gcode = 
	{% set STATUS = (params.STATUS|lower).split(',')|map('trim')|list %}
	{% set TYPE = params.TYPE|default('ENTER')|trim|upper %}
	{% set WHEN = params.WHEN|default('PRINTING')|trim|upper %}
	{% set FILTER_ENTER =
	(params.FILTER_ENTER|default("")|trim|lower).split(',')|select()|list %}
	{% set FILTER_LEAVE =
	(params.FILTER_LEAVE|default("")|trim|lower).split(',')|select()|list %}
	
	
	{% set status_list = printer["gcode_macro _km_print_status"].status_list %}
	{% for s in STATUS %}
	{% if not (s in status_list or s == 'all' and STATUS|length == 1) %}
	{action_raise_error("STATUS parameter '%s' not valid."|format(s))}
	{% endif %}
	{% endfor %}
	
	{% if TYPE not in ('ENTER', 'LEAVE', 'BOTH') %}
	{action_raise_error("TYPE paramater '%s' not valid."|format(TYPE))}
	{% elif WHEN not in ('PRINTING', 'IDLE', 'ALWAYS') %}
	{action_raise_error("WHEN parameter '%s' not valid."|format(WHEN))}
	{% elif TYPE == 'ENTER' and FILTER_LEAVE %}
	{action_raise_error("FILTER_LEAVE not valid with TYPE=ENTER.")}
	{% elif TYPE == 'LEAVE' and FILTER_ENTER %}
	{action_raise_error("FILTER_ENTER not valid with TYPE=LEAVE.")}
	{% endif %}
	{% for f in FILTER_ENTER %}
	{% if f not in status_list %}
	{action_raise_error("FILTER_ENTER parameter '%s' not valid."|format(f))}
	{% endif %}
	{% endfor %}
	{% for f in FILTER_LEAVE %}
	{% if f not in status_list %}
	{action_raise_error("FILTER_LEAVE parameter '%s' not valid."|format(f))}
	{% endif %}
	{% endfor %}
	
	
	_KM_PRINT_STATUS ACTION=ADD_EVENT {rawparams}

[gcode_macro m201]
description = Sets maximum accelleration.
	Usage: M201 [X<accel>] [Y<accel>]
variable_max_accel = 1.7976931348623157e+308
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% if 'X' in params or 'Y' in params %}
	{% set accel = (params.X|default(params.Y)|float,
	params.Y|default(params.X)|float)|min %}
	SET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{accel}"
	{% else %}
	SET_VELOCITY_LIMIT
	{% endif %}

[gcode_macro m203]
description = Sets maximum velocity.
	Usage: M203 [X<velocity>] [Y<velocity>]
gcode = 
	{% if 'X' in params or 'Y' in params %}
	{% set velocity = (params.X|default(params.Y)|float,
	params.Y|default(params.X)|float)|min %}
	SET_VELOCITY_LIMIT VELOCITY="{velocity}"
	{% else %}
	SET_VELOCITY_LIMIT
	{% endif %}

[gcode_macro m205]
description = Sets square corner velocity.
	Usage: M203 [X<velocity>] [Y<velocity>]
gcode = 
	{% if 'X' in params or 'Y' in params %}
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY="{
	(params.X|default(0)|float, params.Y|default(0)|float)|min}"
	{% else %}
	SET_VELOCITY_LIMIT
	{% endif %}

[gcode_macro m900]
description = Sets pressure advance.
	Usage: M900 [K<advance>] [T<extruder_index>]
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% if km.pressure_advance_scale > 0.0 %}
	{% set extruder = "extruder" ~ params.T|replace('0', '')
	if "T" in params else printer.toolhead.extruder %}
	{% if 'K' in params %}
	SET_PRESSURE_ADVANCE EXTRUDER="{extruder}" ADVANCE="{
	params.K|float * km.pressure_advance_scale}"
	{% endif %}
	{% endif %}

[gcode_macro _reset_velocity_limits]
description = Sets maximum accelleration.
	Usage: M204 [S<accel>] [P<accel> T<accel>]
gcode = 
	SET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{1.7976931348623157e+308}"

[gcode_macro bed_mesh_calibrate]
rename_existing = _KM_BED_MESH_CALIBRATE_BASE
description = Wraps BED_MESH_CALIBRATE, scaling probe count to specified area.
	Usage: See Klipper documentation.
gcode = 
	BED_MESH_CALIBRATE_FAST{%for k in params%}{' '~k~'="'~params[k]~'"'}{%endfor%}

[gcode_macro g29]
gcode = 
	BED_MESH_CALIBRATE

[idle_timeout]
gcode = 
	_KM_IDLE_TIMEOUT

[respond]

[gcode_macro PRINT_START]
rename_existing = KM_PRINT_START
gcode = 
	
	STATUS_HOMING
	KM_PRINT_START {rawparams}
	STATUS_PRINTING

[board_pins EBB36_G0B1_v1.2]
mcu = ebbcan
aliases = 
aliases_step = 
	EXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15
aliases_limitsw = 
	LIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6
aliases_bltouch = 
	PROBE_1=PB9,PROBE_2=PB8
aliases_fans = 
	FAN0=PA1,FAN1=PA0
aliases_thermistors = 
	TH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7
aliases_heaters = 
	HE0=PB13
aliases_rgb = 
	RGBLED=PD3
aliases_adxl = 
	ADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11
aliases_i2c = 
	AUX0=PB3,AUX1=PB4

[neopixel sb_leds]
pin = ebbcan:RGBLED
chain_count = 3
color_order = GRB
initial_red = 0.0
initial_green = 0.0
initial_blue = 0.0
initial_white = 1.0

[save_variables]
filename = ~/printer_data/variables.cfg

[mcu CB1]
serial = /tmp/klipper_host_mcu

[mcu]
canbus_uuid = f94e10a9add8

[mcu ebbcan]
canbus_uuid = 57244ec148c0

[printer]
kinematics = corexy
max_velocity = 600
max_accel = 10000
max_accel_to_decel = 5000
max_z_velocity = 5
max_z_accel = 100

[stepper_x]
step_pin = PE2
dir_pin = !PB4
enable_pin = !PC11
microsteps = 16
rotation_distance = 40
endstop_pin = !ebbcan:LIMIT_2
position_endstop = 220
position_min = -4
position_max = 220
homing_speed = 50

[tmc2209 stepper_x]
uart_pin = PC10
diag_pin = PF3
run_current = 1.1

[tmc2209 stepper_y]
uart_pin = PF13
diag_pin = PF4
run_current = 1.1

[tmc2209 stepper_z]
uart_pin = PF9
diag_pin = PF5
run_current = 0.650

[tmc2209 extruder]
uart_pin = ebbcan:EXT_UART
diag_pin = ebbcan:LIMIT_3
run_current = 0.650

[stepper_y]
step_pin = PF12
dir_pin = !PF11
enable_pin = !PB3
microsteps = 16
rotation_distance = 40
endstop_pin = ^PF3
position_endstop = 220
position_min = -4
position_max = 220
homing_speed = 50

[stepper_z]
step_pin = PD7
dir_pin = !PD6
enable_pin = !PF10
microsteps = 16
rotation_distance = 8
endstop_pin = probe:z_virtual_endstop
position_max = 300
position_min = -3

[heater_bed]
heater_pin = PB7
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PA0
min_temp = 0
max_temp = 130
control = pid
pid_kp = 63.528
pid_ki = 0.875
pid_kd = 1153.041

[temperature_sensor raspberry_pi]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor mcu_temp]
sensor_type = temperature_mcu
min_temp = 0
max_temp = 100

[controller_fan MCU_Fan]
pin = PE6
heater = extruder
fan_speed = 1

[heater_fan heatbreak_cooling_fan]
pin = ebbcan:FAN0
kick_start_time = 0.25
heater = extruder
heater_temp = 50.0
fan_speed = 1

[fan]
pin = ebbcan:FAN1

[safe_z_home]
home_xy_position = 140, 140
speed = 100
z_hop = 10
z_hop_speed = 20

[extruder]
step_pin = ebbcan:EXT_STEP
dir_pin = ebbcan:EXT_DIR
enable_pin = !ebbcan:EXT_EN
microsteps = 16
rotation_distance = 4.71
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.750
max_extrude_only_distance = 101.0
heater_pin = ebbcan:HE0
sensor_type = ATC Semitec 104NT-4-R025H42G
sensor_pin = ebbcan:TH0
min_temp = 0
max_temp = 300
max_extrude_cross_section = 5
pressure_advance = 0.02
control = pid
pid_kp = 20.603
pid_ki = 0.988
pid_kd = 107.392

[bltouch]
sensor_pin = ebbcan:PROBE_2
control_pin = ebbcan:PROBE_1
x_offset = -40
y_offset = -17
samples = 2
samples_tolerance = 0.015
samples_tolerance_retries = 5
z_offset = 2.849

[bed_mesh]
speed = 100
horizontal_move_z = 5
mesh_min = 10, 27
mesh_max = 173, 200
probe_count = 5, 5
algorithm = bicubic
fade_start = 1
fade_end = 10

[bed_screws]
screw1 = 55,55
screw2 = 200,55
screw3 = 200,205
screw4 = 55,205

[screws_tilt_adjust]
screw1 = 65,55
screw1_name = front left screw
screw2 = 218,55
screw2_name = front right screw
screw3 = 218,215
screw3_name = rear right screw
screw4 = 65,215
screw4_name = rear left screw
horizontal_move_z = 10
speed = 50
screw_thread = CW-M4

[display]
lcd_type = st7920
cs_pin = PB12
sclk_pin = PB13
sid_pin = PB15
encoder_pins = ^PB14, ^PB10
click_pin = ^!PB2

[exclude_object]

[firmware_retraction]
retract_length = 0.4
retract_speed = 20
unretract_extra_length = 0
unretract_speed = 10

[input_shaper]
shaper_type_x = 2hump_ei
shaper_freq_x = 86.2
shaper_type_y = zv
shaper_freq_y = 44.8

[gcode_arcs]
resolution = 1.0

[adxl345]
cs_pin = ebbcan:ADXL_CS
spi_software_sclk_pin = ebbcan:ADXL_SCLK
spi_software_mosi_pin = ebbcan:ADXL_MOSI
spi_software_miso_pin = ebbcan:ADXL_MISO

[resonance_tester]
accel_chip = adxl345
probe_points = 
	120,120,20

[bed_mesh default]
version = 1
points = 
	0.027500, 0.058750, 0.091250, 0.182500
	-0.003750, 0.061250, 0.072500, 0.125000
	0.021250, 0.016250, 0.013750, 0.033750
	-0.023750, -0.018750, -0.036250, -0.037500
x_count = 4
y_count = 4
mesh_x_pps = 2
mesh_y_pps = 2
algo = bicubic
tension = 0.2
min_x = 48.75
max_x = 171.24
min_y = 48.75
max_y = 171.24
=======================
Extruder max_extrude_ratio=2.078758
mcu 'mcu': Starting CAN connect
Created a socket
webhooks client 281473561863264: New connection
webhooks client 281473561863264: Client info {'program': 'Moonraker', 'version': 'v0.8.0-92-g504a3a7'}
Loaded MCU 'mcu' 109 commands (v0.11.0-241-gffb5105b / gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2)
MCU 'mcu' config: ADC_MAX=4095 BUS_PINS_i2c1_PA9_PA10=PA9,PA10 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_i2c2_PB13_PB14=PB13,PB14 BUS_PINS_i2c3_PB3_PB4=PB3,PB4 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3=PB4,PB5,PB3 CANBUS_BRIDGE=1 CLOCK_FREQ=64000000 MCU=stm32g0b1xx PWM_MAX=255 RECEIVE_WINDOW=192 RESERVE_PINS_CAN=PD12,PD13 RESERVE_PINS_USB=PA11,PA12 RESERVE_PINS_crystal=PF0,PF1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
mcu 'CB1': Starting connect
Loaded MCU 'CB1' 113 commands (v0.11.0-241-gffb5105b / gcc: (Debian 10.2.1-6) 10.2.1 20210110 binutils: (GNU Binutils for Debian) 2.35.2)
MCU 'CB1' config: ADC_MAX=4095 CLOCK_FREQ=50000000 MCU=linux PCA9685_MAX=4096 PWM_MAX=32768 STATS_SUMSQ_BASE=256
mcu 'ebbcan': Starting CAN connect
Created a socket
Loaded MCU 'ebbcan' 109 commands (v0.11.0-241-gffb5105b / gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2)
MCU 'ebbcan' config: ADC_MAX=4095 BUS_PINS_i2c1_PA9_PA10=PA9,PA10 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_i2c2_PB13_PB14=PB13,PB14 BUS_PINS_i2c3_PB3_PB4=PB3,PB4 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3=PB4,PB5,PB3 CANBUS_FREQUENCY=1000000 CLOCK_FREQ=64000000 MCU=stm32g0b1xx PWM_MAX=255 RECEIVE_WINDOW=192 RESERVE_PINS_CAN=PB0,PB1 RESERVE_PINS_crystal=PF0,PF1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
mcu_temperature 'mcu' nominal base=-268.847262 slope=1298.126801
Sending MCU 'mcu' printer configuration...
Configured MCU 'mcu' (1024 moves)
Sending MCU 'CB1' printer configuration...
Configured MCU 'CB1' (1024 moves)
Sending MCU 'ebbcan' printer configuration...
Configured MCU 'ebbcan' (1024 moves)
Starting heater checks for heater_bed
bed_mesh: generated points
Index |  Tool Adjusted  |   Probe
  0   | (50.0, 44.0)    | (10.0, 27.0)
  1   | (90.8, 44.0)    | (50.8, 27.0)
  2   | (131.5, 44.0)   | (91.5, 27.0)
  3   | (172.2, 44.0)   | (132.2, 27.0)
  4   | (213.0, 44.0)   | (173.0, 27.0)
  5   | (213.0, 87.2)   | (173.0, 70.2)
  6   | (172.2, 87.2)   | (132.2, 70.2)
  7   | (131.5, 87.2)   | (91.5, 70.2)
  8   | (90.8, 87.2)    | (50.8, 70.2)
  9   | (50.0, 87.2)    | (10.0, 70.2)
  10  | (50.0, 130.5)   | (10.0, 113.5)
  11  | (90.8, 130.5)   | (50.8, 113.5)
  12  | (131.5, 130.5)  | (91.5, 113.5)
  13  | (172.2, 130.5)  | (132.2, 113.5)
  14  | (213.0, 130.5)  | (173.0, 113.5)
  15  | (213.0, 173.8)  | (173.0, 156.8)
  16  | (172.2, 173.8)  | (132.2, 156.8)
  17  | (131.5, 173.8)  | (91.5, 156.8)
  18  | (90.8, 173.8)   | (50.8, 156.8)
  19  | (50.0, 173.8)   | (10.0, 156.8)
  20  | (50.0, 217.0)   | (10.0, 200.0)
  21  | (90.8, 217.0)   | (50.8, 200.0)
  22  | (131.5, 217.0)  | (91.5, 200.0)
  23  | (172.2, 217.0)  | (132.2, 200.0)
  24  | (213.0, 217.0)  | (173.0, 200.0)
Starting heater checks for extruder
Stats 332.0: gcodein=0  mcu: mcu_awake=0.029 mcu_task_avg=0.000016 mcu_task_stddev=0.000011 bytes_write=3745 bytes_read=5673 bytes_retransmit=0 bytes_invalid=0 send_seq=228 receive_seq=225 retransmit_seq=0 srtt=0.004 rttvar=0.002 rto=0.025 ready_bytes=1039 upcoming_bytes=30 freq=64004986 CB1: mcu_awake=0.004 mcu_task_avg=0.000026 mcu_task_stddev=0.000017 bytes_write=819 bytes_read=4523 bytes_retransmit=0 bytes_invalid=0 send_seq=112 receive_seq=112 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999925 adj=49994949 ebbcan: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=1484 bytes_read=4788 bytes_retransmit=0 bytes_invalid=0 send_seq=157 receive_seq=157 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64002424 adj=63999192  heater_bed: target=0 temp=0.0 pwm=0.000 raspberry_pi: temp=59.5 mcu_temp: temp=0.0 sysload=0.71 cputime=55.238 memavail=691336 print_time=0.010 buffer_time=0.000 print_stall=0 extruder: target=0 temp=0.0 pwm=0.000
webhooks: registering remote method 'shutdown_machine' for connection id: 281473561863264
webhooks: registering remote method 'reboot_machine' for connection id: 281473561863264
webhooks: registering remote method 'pause_job_queue' for connection id: 281473561863264
webhooks: registering remote method 'start_job_queue' for connection id: 281473561863264
Active bed surface: default; offset: -0.050
Stats 333.2: gcodein=0  mcu: mcu_awake=0.029 mcu_task_avg=0.000016 mcu_task_stddev=0.000011 bytes_write=4966 bytes_read=5950 bytes_retransmit=0 bytes_invalid=0 send_seq=253 receive_seq=253 retransmit_seq=0 srtt=0.003 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64002705 CB1: mcu_awake=0.004 mcu_task_avg=0.000026 mcu_task_stddev=0.000017 bytes_write=825 bytes_read=4539 bytes_retransmit=0 bytes_invalid=0 send_seq=113 receive_seq=113 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999777 adj=49997040 ebbcan: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=1490 bytes_read=4864 bytes_retransmit=0 bytes_invalid=0 send_seq=158 receive_seq=158 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000399 adj=63995963  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=58.5 mcu_temp: temp=35.3 sysload=0.71 cputime=55.542 memavail=688192 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
Stats 334.2: gcodein=0  mcu: mcu_awake=0.029 mcu_task_avg=0.000016 mcu_task_stddev=0.000011 bytes_write=4972 bytes_read=6068 bytes_retransmit=0 bytes_invalid=0 send_seq=254 receive_seq=254 retransmit_seq=0 srtt=0.002 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64002508 CB1: mcu_awake=0.004 mcu_task_avg=0.000026 mcu_task_stddev=0.000017 bytes_write=831 bytes_read=4555 bytes_retransmit=0 bytes_invalid=0 send_seq=114 receive_seq=114 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999426 adj=50000116 ebbcan: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=1496 bytes_read=4940 bytes_retransmit=0 bytes_invalid=0 send_seq=159 receive_seq=159 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000427 adj=63997543  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=60.2 mcu_temp: temp=35.8 sysload=0.71 cputime=55.627 memavail=687804 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
Stats 335.2: gcodein=0  mcu: mcu_awake=0.124 mcu_task_avg=0.000030 mcu_task_stddev=0.000141 bytes_write=4978 bytes_read=6202 bytes_retransmit=0 bytes_invalid=0 send_seq=255 receive_seq=255 retransmit_seq=0 srtt=0.002 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001921 CB1: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000014 bytes_write=837 bytes_read=4584 bytes_retransmit=0 bytes_invalid=0 send_seq=115 receive_seq=115 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999262 adj=49999104 ebbcan: mcu_awake=0.014 mcu_task_avg=0.000018 mcu_task_stddev=0.000024 bytes_write=1502 bytes_read=5016 bytes_retransmit=0 bytes_invalid=0 send_seq=160 receive_seq=160 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000603 adj=63998088  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=59.4 mcu_temp: temp=35.6 sysload=0.71 cputime=55.661 memavail=689600 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
Stats 336.2: gcodein=0  mcu: mcu_awake=0.124 mcu_task_avg=0.000030 mcu_task_stddev=0.000141 bytes_write=4990 bytes_read=6321 bytes_retransmit=0 bytes_invalid=0 send_seq=257 receive_seq=257 retransmit_seq=0 srtt=0.002 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001610 CB1: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000014 bytes_write=843 bytes_read=4600 bytes_retransmit=0 bytes_invalid=0 send_seq=116 receive_seq=116 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999259 adj=49999467 ebbcan: mcu_awake=0.014 mcu_task_avg=0.000018 mcu_task_stddev=0.000024 bytes_write=1508 bytes_read=5077 bytes_retransmit=0 bytes_invalid=0 send_seq=161 receive_seq=161 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000538 adj=63999923  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=58.9 mcu_temp: temp=35.8 sysload=0.81 cputime=55.701 memavail=693264 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 337.2: gcodein=0  mcu: mcu_awake=0.124 mcu_task_avg=0.000030 mcu_task_stddev=0.000141 bytes_write=4996 bytes_read=6439 bytes_retransmit=0 bytes_invalid=0 send_seq=258 receive_seq=258 retransmit_seq=0 srtt=0.002 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001536 CB1: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000014 bytes_write=849 bytes_read=4616 bytes_retransmit=0 bytes_invalid=0 send_seq=117 receive_seq=117 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999345 adj=49999700 ebbcan: mcu_awake=0.014 mcu_task_avg=0.000018 mcu_task_stddev=0.000024 bytes_write=1514 bytes_read=5153 bytes_retransmit=0 bytes_invalid=0 send_seq=162 receive_seq=162 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000600 adj=64000309  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=58.4 mcu_temp: temp=35.8 sysload=0.81 cputime=55.765 memavail=693536 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
Stats 338.2: gcodein=0  mcu: mcu_awake=0.124 mcu_task_avg=0.000030 mcu_task_stddev=0.000141 bytes_write=5002 bytes_read=6556 bytes_retransmit=0 bytes_invalid=0 send_seq=259 receive_seq=259 retransmit_seq=0 srtt=0.001 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001436 CB1: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000014 bytes_write=855 bytes_read=4632 bytes_retransmit=0 bytes_invalid=0 send_seq=118 receive_seq=118 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999312 adj=49999690 ebbcan: mcu_awake=0.014 mcu_task_avg=0.000018 mcu_task_stddev=0.000024 bytes_write=1520 bytes_read=5214 bytes_retransmit=0 bytes_invalid=0 send_seq=163 receive_seq=163 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000584 adj=64000349  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=56.8 mcu_temp: temp=36.1 sysload=0.81 cputime=55.809 memavail=693672 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 339.2: gcodein=0  mcu: mcu_awake=0.124 mcu_task_avg=0.000030 mcu_task_stddev=0.000141 bytes_write=5008 bytes_read=6659 bytes_retransmit=0 bytes_invalid=0 send_seq=260 receive_seq=260 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001362 CB1: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000014 bytes_write=861 bytes_read=4648 bytes_retransmit=0 bytes_invalid=0 send_seq=119 receive_seq=119 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999678 adj=49999452 ebbcan: mcu_awake=0.014 mcu_task_avg=0.000018 mcu_task_stddev=0.000024 bytes_write=1551 bytes_read=5293 bytes_retransmit=0 bytes_invalid=0 send_seq=166 receive_seq=166 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000532 adj=64000303  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=57.9 mcu_temp: temp=35.8 sysload=0.81 cputime=55.851 memavail=693768 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
Stats 340.2: gcodein=0  mcu: mcu_awake=0.006 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5014 bytes_read=6792 bytes_retransmit=0 bytes_invalid=0 send_seq=261 receive_seq=261 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001315 CB1: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000014 bytes_write=867 bytes_read=4664 bytes_retransmit=0 bytes_invalid=0 send_seq=120 receive_seq=120 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999610 adj=50000540 ebbcan: mcu_awake=0.002 mcu_task_avg=0.000013 mcu_task_stddev=0.000015 bytes_write=1557 bytes_read=5383 bytes_retransmit=0 bytes_invalid=0 send_seq=167 receive_seq=167 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000562 adj=64000101  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=58.3 mcu_temp: temp=36.0 sysload=0.81 cputime=55.902 memavail=693632 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 341.2: gcodein=0  mcu: mcu_awake=0.006 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5020 bytes_read=6909 bytes_retransmit=0 bytes_invalid=0 send_seq=262 receive_seq=262 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001335 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000015 bytes_write=873 bytes_read=4693 bytes_retransmit=0 bytes_invalid=0 send_seq=121 receive_seq=121 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999529 adj=49999952 ebbcan: mcu_awake=0.002 mcu_task_avg=0.000013 mcu_task_stddev=0.000015 bytes_write=1563 bytes_read=5444 bytes_retransmit=0 bytes_invalid=0 send_seq=168 receive_seq=168 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000526 adj=64000143  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=56.6 mcu_temp: temp=35.9 sysload=0.75 cputime=55.938 memavail=693620 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 342.2: gcodein=0  mcu: mcu_awake=0.006 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5026 bytes_read=7012 bytes_retransmit=0 bytes_invalid=0 send_seq=263 receive_seq=263 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001345 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000015 bytes_write=879 bytes_read=4709 bytes_retransmit=0 bytes_invalid=0 send_seq=122 receive_seq=122 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999552 adj=49999245 ebbcan: mcu_awake=0.002 mcu_task_avg=0.000013 mcu_task_stddev=0.000015 bytes_write=1593 bytes_read=5523 bytes_retransmit=0 bytes_invalid=0 send_seq=171 receive_seq=171 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000502 adj=63999709  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=58.1 mcu_temp: temp=35.9 sysload=0.75 cputime=55.981 memavail=693464 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 343.2: gcodein=0  mcu: mcu_awake=0.006 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5032 bytes_read=7130 bytes_retransmit=0 bytes_invalid=0 send_seq=264 receive_seq=264 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001313 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000015 bytes_write=885 bytes_read=4725 bytes_retransmit=0 bytes_invalid=0 send_seq=123 receive_seq=123 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999529 adj=49999114 ebbcan: mcu_awake=0.002 mcu_task_avg=0.000013 mcu_task_stddev=0.000015 bytes_write=1599 bytes_read=5599 bytes_retransmit=0 bytes_invalid=0 send_seq=172 receive_seq=172 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000496 adj=63999446  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=58.0 mcu_temp: temp=35.8 sysload=0.75 cputime=56.027 memavail=692804 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
Stats 344.2: gcodein=0  mcu: mcu_awake=0.006 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5038 bytes_read=7247 bytes_retransmit=0 bytes_invalid=0 send_seq=265 receive_seq=265 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001281 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000015 bytes_write=891 bytes_read=4741 bytes_retransmit=0 bytes_invalid=0 send_seq=124 receive_seq=124 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999504 adj=49998974 ebbcan: mcu_awake=0.002 mcu_task_avg=0.000013 mcu_task_stddev=0.000015 bytes_write=1605 bytes_read=5660 bytes_retransmit=0 bytes_invalid=0 send_seq=173 receive_seq=173 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000475 adj=63999486  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=58.6 mcu_temp: temp=35.8 sysload=0.75 cputime=56.063 memavail=693856 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 345.2: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5044 bytes_read=7365 bytes_retransmit=0 bytes_invalid=0 send_seq=266 receive_seq=266 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001258 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000015 bytes_write=897 bytes_read=4757 bytes_retransmit=0 bytes_invalid=0 send_seq=125 receive_seq=125 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999515 adj=49998858 ebbcan: mcu_awake=0.002 mcu_task_avg=0.000013 mcu_task_stddev=0.000015 bytes_write=1611 bytes_read=5735 bytes_retransmit=0 bytes_invalid=0 send_seq=174 receive_seq=174 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000489 adj=63999465  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=57.7 mcu_temp: temp=36.0 sysload=0.75 cputime=56.106 memavail=694396 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
Stats 346.2: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5050 bytes_read=7483 bytes_retransmit=0 bytes_invalid=0 send_seq=267 receive_seq=267 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001240 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=903 bytes_read=4786 bytes_retransmit=0 bytes_invalid=0 send_seq=126 receive_seq=126 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999490 adj=49998906 ebbcan: mcu_awake=0.002 mcu_task_avg=0.000013 mcu_task_stddev=0.000015 bytes_write=1617 bytes_read=5811 bytes_retransmit=0 bytes_invalid=0 send_seq=175 receive_seq=175 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000471 adj=63999567  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=58.1 mcu_temp: temp=36.0 sysload=0.69 cputime=56.142 memavail=694172 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 347.2: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5056 bytes_read=7600 bytes_retransmit=0 bytes_invalid=0 send_seq=268 receive_seq=268 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001229 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=909 bytes_read=4802 bytes_retransmit=0 bytes_invalid=0 send_seq=127 receive_seq=127 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999469 adj=49998761 ebbcan: mcu_awake=0.002 mcu_task_avg=0.000013 mcu_task_stddev=0.000015 bytes_write=1623 bytes_read=5872 bytes_retransmit=0 bytes_invalid=0 send_seq=176 receive_seq=176 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000461 adj=63999488  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=58.1 mcu_temp: temp=36.1 sysload=0.69 cputime=56.187 memavail=694172 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
Stats 348.2: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5062 bytes_read=7703 bytes_retransmit=0 bytes_invalid=0 send_seq=269 receive_seq=269 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001223 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=915 bytes_read=4818 bytes_retransmit=0 bytes_invalid=0 send_seq=128 receive_seq=128 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999460 adj=49998642 ebbcan: mcu_awake=0.002 mcu_task_avg=0.000013 mcu_task_stddev=0.000015 bytes_write=1629 bytes_read=5933 bytes_retransmit=0 bytes_invalid=0 send_seq=177 receive_seq=177 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000476 adj=63999434  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=57.9 mcu_temp: temp=36.0 sysload=0.69 cputime=56.225 memavail=693728 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 349.2: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5068 bytes_read=7835 bytes_retransmit=0 bytes_invalid=0 send_seq=270 receive_seq=270 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001258 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=921 bytes_read=4834 bytes_retransmit=0 bytes_invalid=0 send_seq=129 receive_seq=129 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999455 adj=49998584 ebbcan: mcu_awake=0.002 mcu_task_avg=0.000013 mcu_task_stddev=0.000015 bytes_write=1635 bytes_read=6009 bytes_retransmit=0 bytes_invalid=0 send_seq=178 receive_seq=178 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000464 adj=63999489  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=58.6 mcu_temp: temp=36.1 sysload=0.69 cputime=56.268 memavail=693928 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
Stats 350.2: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5074 bytes_read=7953 bytes_retransmit=0 bytes_invalid=0 send_seq=271 receive_seq=271 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001254 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=927 bytes_read=4850 bytes_retransmit=0 bytes_invalid=0 send_seq=130 receive_seq=130 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999453 adj=49998383 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1641 bytes_read=6084 bytes_retransmit=0 bytes_invalid=0 send_seq=179 receive_seq=179 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000464 adj=63999173  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=57.9 mcu_temp: temp=36.1 sysload=0.69 cputime=56.305 memavail=693924 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 351.2: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5080 bytes_read=8056 bytes_retransmit=0 bytes_invalid=0 send_seq=272 receive_seq=272 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001242 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000010 bytes_write=933 bytes_read=4879 bytes_retransmit=0 bytes_invalid=0 send_seq=131 receive_seq=131 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999452 adj=49998415 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1647 bytes_read=6145 bytes_retransmit=0 bytes_invalid=0 send_seq=180 receive_seq=180 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000464 adj=63999206  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=58.5 mcu_temp: temp=36.1 sysload=0.63 cputime=56.340 memavail=693792 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 352.2: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5086 bytes_read=8188 bytes_retransmit=0 bytes_invalid=0 send_seq=273 receive_seq=273 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001231 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000010 bytes_write=939 bytes_read=4895 bytes_retransmit=0 bytes_invalid=0 send_seq=132 receive_seq=132 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999455 adj=49998480 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1659 bytes_read=6237 bytes_retransmit=0 bytes_invalid=0 send_seq=182 receive_seq=182 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000462 adj=63999278  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=58.1 mcu_temp: temp=36.1 sysload=0.63 cputime=56.392 memavail=694172 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 353.2: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5092 bytes_read=8291 bytes_retransmit=0 bytes_invalid=0 send_seq=274 receive_seq=274 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001223 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000010 bytes_write=945 bytes_read=4911 bytes_retransmit=0 bytes_invalid=0 send_seq=133 receive_seq=133 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999457 adj=49998547 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1665 bytes_read=6298 bytes_retransmit=0 bytes_invalid=0 send_seq=183 receive_seq=183 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000452 adj=63999317  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=57.8 mcu_temp: temp=36.0 sysload=0.63 cputime=56.428 memavail=694308 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 354.2: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5098 bytes_read=8394 bytes_retransmit=0 bytes_invalid=0 send_seq=275 receive_seq=275 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001226 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000010 bytes_write=951 bytes_read=4927 bytes_retransmit=0 bytes_invalid=0 send_seq=134 receive_seq=134 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999472 adj=49998585 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1671 bytes_read=6359 bytes_retransmit=0 bytes_invalid=0 send_seq=184 receive_seq=184 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000457 adj=63999288  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=58.5 mcu_temp: temp=36.1 sysload=0.63 cputime=56.481 memavail=694092 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 355.2: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5104 bytes_read=8541 bytes_retransmit=0 bytes_invalid=0 send_seq=276 receive_seq=276 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001217 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000010 bytes_write=957 bytes_read=4943 bytes_retransmit=0 bytes_invalid=0 send_seq=135 receive_seq=135 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999471 adj=49998648 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1677 bytes_read=6449 bytes_retransmit=0 bytes_invalid=0 send_seq=185 receive_seq=185 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000445 adj=63999287  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=57.4 mcu_temp: temp=36.1 sysload=0.63 cputime=56.529 memavail=694748 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 356.2: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5110 bytes_read=8644 bytes_retransmit=0 bytes_invalid=0 send_seq=277 receive_seq=277 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001216 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000011 bytes_write=963 bytes_read=4972 bytes_retransmit=0 bytes_invalid=0 send_seq=136 receive_seq=136 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999486 adj=49998694 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1683 bytes_read=6510 bytes_retransmit=0 bytes_invalid=0 send_seq=186 receive_seq=186 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000439 adj=63999249  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=57.8 mcu_temp: temp=36.2 sysload=0.58 cputime=56.570 memavail=694780 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 357.2: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5116 bytes_read=8747 bytes_retransmit=0 bytes_invalid=0 send_seq=278 receive_seq=278 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001224 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000011 bytes_write=969 bytes_read=4988 bytes_retransmit=0 bytes_invalid=0 send_seq=137 receive_seq=137 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999505 adj=49998753 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1689 bytes_read=6571 bytes_retransmit=0 bytes_invalid=0 send_seq=187 receive_seq=187 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000446 adj=63999213  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=57.7 mcu_temp: temp=36.3 sysload=0.58 cputime=56.625 memavail=694780 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 358.2: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5122 bytes_read=8879 bytes_retransmit=0 bytes_invalid=0 send_seq=279 receive_seq=279 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001224 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000011 bytes_write=975 bytes_read=5004 bytes_retransmit=0 bytes_invalid=0 send_seq=138 receive_seq=138 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999524 adj=49998791 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1695 bytes_read=6647 bytes_retransmit=0 bytes_invalid=0 send_seq=188 receive_seq=188 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000457 adj=63999210  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=56.9 mcu_temp: temp=36.2 sysload=0.58 cputime=56.689 memavail=694068 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
Stats 359.2: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5128 bytes_read=8982 bytes_retransmit=0 bytes_invalid=0 send_seq=280 receive_seq=280 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001218 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000011 bytes_write=981 bytes_read=5020 bytes_retransmit=0 bytes_invalid=0 send_seq=139 receive_seq=139 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999525 adj=49998858 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1701 bytes_read=6708 bytes_retransmit=0 bytes_invalid=0 send_seq=189 receive_seq=189 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000450 adj=63999285  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=56.7 mcu_temp: temp=36.1 sysload=0.58 cputime=56.725 memavail=694392 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 360.2: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5134 bytes_read=9100 bytes_retransmit=0 bytes_invalid=0 send_seq=281 receive_seq=281 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001212 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000011 bytes_write=987 bytes_read=5036 bytes_retransmit=0 bytes_invalid=0 send_seq=140 receive_seq=140 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999523 adj=49998831 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1707 bytes_read=6769 bytes_retransmit=0 bytes_invalid=0 send_seq=190 receive_seq=190 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000442 adj=63999274  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=57.2 mcu_temp: temp=36.1 sysload=0.58 cputime=56.760 memavail=694404 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
Stats 361.2: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5140 bytes_read=9232 bytes_retransmit=0 bytes_invalid=0 send_seq=282 receive_seq=282 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001206 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000012 bytes_write=993 bytes_read=5065 bytes_retransmit=0 bytes_invalid=0 send_seq=141 receive_seq=141 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999522 adj=49998789 ebbcan: mcu_awake=0.002 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1713 bytes_read=6859 bytes_retransmit=0 bytes_invalid=0 send_seq=191 receive_seq=191 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000437 adj=63999247  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=57.5 mcu_temp: temp=36.0 sysload=0.61 cputime=56.810 memavail=694512 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
Stats 362.2: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5146 bytes_read=9335 bytes_retransmit=0 bytes_invalid=0 send_seq=283 receive_seq=283 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001206 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000012 bytes_write=999 bytes_read=5081 bytes_retransmit=0 bytes_invalid=0 send_seq=142 receive_seq=142 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999526 adj=49998761 ebbcan: mcu_awake=0.002 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1719 bytes_read=6920 bytes_retransmit=0 bytes_invalid=0 send_seq=192 receive_seq=192 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000432 adj=63999249  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=57.8 mcu_temp: temp=36.1 sysload=0.61 cputime=56.845 memavail=694512 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 363.2: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5152 bytes_read=9438 bytes_retransmit=0 bytes_invalid=0 send_seq=284 receive_seq=284 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001208 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000012 bytes_write=1005 bytes_read=5097 bytes_retransmit=0 bytes_invalid=0 send_seq=143 receive_seq=143 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999544 adj=49998747 ebbcan: mcu_awake=0.002 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1725 bytes_read=6981 bytes_retransmit=0 bytes_invalid=0 send_seq=193 receive_seq=193 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000434 adj=63999212  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=58.1 mcu_temp: temp=36.2 sysload=0.61 cputime=56.897 memavail=694284 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
Stats 364.2: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5158 bytes_read=9570 bytes_retransmit=0 bytes_invalid=0 send_seq=285 receive_seq=285 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001203 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000012 bytes_write=1011 bytes_read=5113 bytes_retransmit=0 bytes_invalid=0 send_seq=144 receive_seq=144 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999548 adj=49998838 ebbcan: mcu_awake=0.002 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1731 bytes_read=7057 bytes_retransmit=0 bytes_invalid=0 send_seq=194 receive_seq=194 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000430 adj=63999211  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=57.2 mcu_temp: temp=36.2 sysload=0.61 cputime=56.933 memavail=694284 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 365.2: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5164 bytes_read=9688 bytes_retransmit=0 bytes_invalid=0 send_seq=286 receive_seq=286 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001201 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000012 bytes_write=1017 bytes_read=5129 bytes_retransmit=0 bytes_invalid=0 send_seq=145 receive_seq=145 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999552 adj=49998845 ebbcan: mcu_awake=0.002 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1737 bytes_read=7118 bytes_retransmit=0 bytes_invalid=0 send_seq=195 receive_seq=195 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000427 adj=63999229  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=58.1 mcu_temp: temp=36.0 sysload=0.61 cputime=56.975 memavail=694292 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 366.2: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5170 bytes_read=9791 bytes_retransmit=0 bytes_invalid=0 send_seq=287 receive_seq=287 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001195 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000011 bytes_write=1023 bytes_read=5158 bytes_retransmit=0 bytes_invalid=0 send_seq=146 receive_seq=146 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999553 adj=49998828 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1743 bytes_read=7193 bytes_retransmit=0 bytes_invalid=0 send_seq=196 receive_seq=196 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000423 adj=63999214  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=58.1 mcu_temp: temp=36.3 sysload=0.56 cputime=57.020 memavail=694292 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 367.2: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5176 bytes_read=9923 bytes_retransmit=0 bytes_invalid=0 send_seq=288 receive_seq=288 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001204 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000011 bytes_write=1029 bytes_read=5174 bytes_retransmit=0 bytes_invalid=0 send_seq=147 receive_seq=147 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999558 adj=49998758 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1749 bytes_read=7269 bytes_retransmit=0 bytes_invalid=0 send_seq=197 receive_seq=197 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000421 adj=63999152  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=58.3 mcu_temp: temp=36.3 sysload=0.56 cputime=57.057 memavail=694560 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
Stats 368.2: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5182 bytes_read=10026 bytes_retransmit=0 bytes_invalid=0 send_seq=289 receive_seq=289 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001213 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000011 bytes_write=1035 bytes_read=5190 bytes_retransmit=0 bytes_invalid=0 send_seq=148 receive_seq=148 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999707 adj=49998707 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1755 bytes_read=7330 bytes_retransmit=0 bytes_invalid=0 send_seq=198 receive_seq=198 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000424 adj=63999080  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=58.8 mcu_temp: temp=36.1 sysload=0.56 cputime=57.111 memavail=694320 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 369.2: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5188 bytes_read=10129 bytes_retransmit=0 bytes_invalid=0 send_seq=290 receive_seq=290 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001207 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000011 bytes_write=1041 bytes_read=5206 bytes_retransmit=0 bytes_invalid=0 send_seq=149 receive_seq=149 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999694 adj=49999919 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1761 bytes_read=7391 bytes_retransmit=0 bytes_invalid=0 send_seq=199 receive_seq=199 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000420 adj=63999058  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=57.2 mcu_temp: temp=36.2 sysload=0.56 cputime=57.145 memavail=694320 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 370.2: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5194 bytes_read=10276 bytes_retransmit=0 bytes_invalid=0 send_seq=291 receive_seq=291 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001204 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000011 bytes_write=1047 bytes_read=5222 bytes_retransmit=0 bytes_invalid=0 send_seq=150 receive_seq=150 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999695 adj=49999553 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1767 bytes_read=7467 bytes_retransmit=0 bytes_invalid=0 send_seq=200 receive_seq=200 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000417 adj=63999112  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=58.4 mcu_temp: temp=36.2 sysload=0.56 cputime=57.184 memavail=694068 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 371.2: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5200 bytes_read=10379 bytes_retransmit=0 bytes_invalid=0 send_seq=292 receive_seq=292 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001201 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000016 bytes_write=1053 bytes_read=5251 bytes_retransmit=0 bytes_invalid=0 send_seq=151 receive_seq=151 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999697 adj=49999379 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1773 bytes_read=7542 bytes_retransmit=0 bytes_invalid=0 send_seq=201 receive_seq=201 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000414 adj=63999138  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=58.4 mcu_temp: temp=36.2 sysload=0.52 cputime=57.230 memavail=694076 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 372.2: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5206 bytes_read=10482 bytes_retransmit=0 bytes_invalid=0 send_seq=293 receive_seq=293 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001198 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000016 bytes_write=1059 bytes_read=5267 bytes_retransmit=0 bytes_invalid=0 send_seq=152 receive_seq=152 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999698 adj=49999272 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1779 bytes_read=7603 bytes_retransmit=0 bytes_invalid=0 send_seq=202 receive_seq=202 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000413 adj=63999165  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=57.2 mcu_temp: temp=36.2 sysload=0.52 cputime=57.265 memavail=694080 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
Stats 373.2: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5212 bytes_read=10614 bytes_retransmit=0 bytes_invalid=0 send_seq=294 receive_seq=294 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001201 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000016 bytes_write=1065 bytes_read=5283 bytes_retransmit=0 bytes_invalid=0 send_seq=153 receive_seq=153 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999706 adj=49999169 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1785 bytes_read=7679 bytes_retransmit=0 bytes_invalid=0 send_seq=203 receive_seq=203 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000416 adj=63999200  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=58.0 mcu_temp: temp=36.2 sysload=0.52 cputime=57.317 memavail=694080 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 374.2: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5218 bytes_read=10717 bytes_retransmit=0 bytes_invalid=0 send_seq=295 receive_seq=295 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001197 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000016 bytes_write=1071 bytes_read=5299 bytes_retransmit=0 bytes_invalid=0 send_seq=154 receive_seq=154 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999719 adj=49999125 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1791 bytes_read=7740 bytes_retransmit=0 bytes_invalid=0 send_seq=204 receive_seq=204 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000414 adj=63999202  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=57.0 mcu_temp: temp=36.3 sysload=0.52 cputime=57.352 memavail=694080 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.7 pwm=0.000
Stats 375.2: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5224 bytes_read=10820 bytes_retransmit=0 bytes_invalid=0 send_seq=296 receive_seq=296 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001197 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000016 bytes_write=1083 bytes_read=5331 bytes_retransmit=0 bytes_invalid=0 send_seq=156 receive_seq=156 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999774 adj=49999187 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1797 bytes_read=7801 bytes_retransmit=0 bytes_invalid=0 send_seq=205 receive_seq=205 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000412 adj=63999217  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=57.4 mcu_temp: temp=36.1 sysload=0.52 cputime=57.389 memavail=693832 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 376.2: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5230 bytes_read=10967 bytes_retransmit=0 bytes_invalid=0 send_seq=297 receive_seq=297 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001203 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000011 bytes_write=1089 bytes_read=5360 bytes_retransmit=0 bytes_invalid=0 send_seq=157 receive_seq=157 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999801 adj=49999611 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1803 bytes_read=7891 bytes_retransmit=0 bytes_invalid=0 send_seq=206 receive_seq=206 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000410 adj=63999198  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=57.6 mcu_temp: temp=36.3 sysload=0.80 cputime=57.437 memavail=693840 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 377.2: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5236 bytes_read=11070 bytes_retransmit=0 bytes_invalid=0 send_seq=298 receive_seq=298 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001205 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000011 bytes_write=1095 bytes_read=5376 bytes_retransmit=0 bytes_invalid=0 send_seq=158 receive_seq=158 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999830 adj=49999635 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1809 bytes_read=7952 bytes_retransmit=0 bytes_invalid=0 send_seq=207 receive_seq=207 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000413 adj=63999125  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=57.8 mcu_temp: temp=36.3 sysload=0.80 cputime=57.472 memavail=693840 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 378.2: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5242 bytes_read=11173 bytes_retransmit=0 bytes_invalid=0 send_seq=299 receive_seq=299 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001210 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000011 bytes_write=1101 bytes_read=5392 bytes_retransmit=0 bytes_invalid=0 send_seq=159 receive_seq=159 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999867 adj=49999706 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1815 bytes_read=8013 bytes_retransmit=0 bytes_invalid=0 send_seq=208 receive_seq=208 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000416 adj=63999163  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=57.8 mcu_temp: temp=36.4 sysload=0.80 cputime=57.528 memavail=693840 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 379.2: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5248 bytes_read=11305 bytes_retransmit=0 bytes_invalid=0 send_seq=300 receive_seq=300 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001206 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000011 bytes_write=1107 bytes_read=5408 bytes_retransmit=0 bytes_invalid=0 send_seq=160 receive_seq=160 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999895 adj=49999836 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1821 bytes_read=8089 bytes_retransmit=0 bytes_invalid=0 send_seq=209 receive_seq=209 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000414 adj=63999153  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=56.8 mcu_temp: temp=36.2 sysload=0.80 cputime=57.566 memavail=693844 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 398.2: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5368 bytes_read=13480 bytes_retransmit=0 bytes_invalid=0 send_seq=320 receive_seq=320 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001191 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000015 bytes_write=1221 bytes_read=5764 bytes_retransmit=0 bytes_invalid=0 send_seq=179 receive_seq=179 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000440 adj=50000547 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1935 bytes_read=9376 bytes_retransmit=0 bytes_invalid=0 send_seq=228 receive_seq=228 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000407 adj=63999160  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=57.4 mcu_temp: temp=36.5 sysload=0.86 cputime=58.416 memavail=691572 print_time=78.867 buffer_time=0.590 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Attempting MCU 'CB1' config_reset command
b'Got EOF when reading from device'
Attempting MCU 'ebbcan' reset command
Attempting MCU 'mcu' reset command
webhooks client 281473561863264: Disconnected
Restarting printer
Start printer at Mon Aug 21 00:43:53 2023 (1692578633.2 400.1)
===== Config file =====
[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancels the current print.
	Usage: CANCEL_PRINT
rename_existing = _KM_CANCEL_PRINT_BASE
gcode = 
	_KM_CHECK_IS_PRINTING
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=cancelling RESET_STACK=1
	SET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{True}"
	PRINT_END
	_KM_CANCEL_PRINT_BASE
	{% if printer.pause_resume.is_paused %}
	RESTORE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE MOVE=0
	{% endif %}
	CLEAR_PAUSE
	_KM_APPLY_PRINT_OFFSET RESET=1
	{% if 'virtual_sdcard' in printer and not printer.virtual_sdcard.is_active %}
	SDCARD_RESET_FILE
	{% endif %}

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
variable_restore_idle_timeout = 0
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set idle_timeout = client.idle_timeout|default(0) %}
	
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE={printer[printer.toolhead.extruder].target}
	
	{% if idle_timeout > 0 %}
	SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
	SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
	{% endif %}
	PAUSE_BASE
	_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
variable_last_extruder_temp = 0
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move = client.speed_move|default(velocity) %}
	
	
	{% if printer['gcode_macro PAUSE'].restore_idle_timeout > 0 %}
	SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro PAUSE'].restore_idle_timeout}
	{% endif %}
	M109 S{last_extruder_temp}
	_CLIENT_EXTRUDE
	RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	_KM_CHECK_IS_PRINTING
	{% set pause_next_layer =
	printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE | default(1) | int != 0 %}
	{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VALUE="{
	{ 'enable': False, 'call': MACRO }}" VARIABLE=pause_next_layer
	GCODE_AT_LAYER COMMAND="{MACRO|replace('\"','\\\"')
	}" CANCEL="{0 if ENABLE else 1}" LAYER="next"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	_KM_CHECK_IS_PRINTING
	{% set pause_at_layer =
	printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	
	{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined else
	params.LAYER is defined %}
	{% set LAYER = params.LAYER |
	default((pause_at_layer.layer|int,
	printer.print_stats.info.current_layer|int + 1)|max)%}
	{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}
	
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{
	{ 'enable': False, 'layer': 0, 'call': MACRO }}"
	{% if ENABLE and pause_at_layer.enable %}
	
	GCODE_AT_LAYER COMMAND="{pause_at_layer.call|replace('\"','\\\"')
	}" CANCEL="{1}" LAYER="{pause_at_layer.layer}"
	{% endif %}
	
	GCODE_AT_LAYER COMMAND="{MACRO|replace('\"','\\\"')
	}" CANCEL="{0 if ENABLE else 1}" LAYER="{LAYER}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = _KM_SET_PRINT_STATS_INFO
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	_KM_SET_PRINT_STATS_INFO {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.extruder.can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[gcode_macro _km_options]
variable_load_length = 90.0
variable_menu_temperature = [
	{'name' : 'PLA',  'extruder' : 200.0, 'bed' : 60.0},
	{'name' : 'PETG', 'extruder' : 230.0, 'bed' : 85.0},
	{'name' : 'ABS',  'extruder' : 245.0, 'bed' : 110.0, 'chamber' : 60}]
variable_start_purge_length = 50
variable_start_extruder_probing_temp = 150
variable_park_x = 200.0
variable_park_y = 200.0
gcode = 

[gcode_macro bed_mesh_calibrate_fast]
description = Wraps BED_MESH_CALIBRATE, scaling probe count to specified area.
	Usage: See Klipper documentation.
gcode = 
	
	BED_MESH_CHECK ABORT=1
	
	
	{% set calibrate_cmd =
	(printer["gcode_macro list_macros"].macros.bed_mesh_calibrate|
	default(["bed_mesh_calibrate"],True))[-1] %}
	
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set probe_mesh_padding = km.probe_mesh_padding %}
	{% set probe_min_count = km.probe_min_count %}
	{% set probe_count_scale = km.probe_count_scale %}
	{% set bed_mesh = printer.configfile.settings.bed_mesh %}
	
	
	{%if "mesh_radius" not in bed_mesh and
	"MESH_RADIUS" not in params %}
	{% set safe_min_x = bed_mesh.mesh_min[0] %}
	{% set safe_min_y = bed_mesh.mesh_min[1] %}
	{% set safe_max_x = bed_mesh.mesh_max[0] %}
	{% set safe_max_y = bed_mesh.mesh_max[1] %}
	
	
	{% if "MESH_MIN" in params %}
	{% set mesh_min_x = (params.MESH_MIN.split(",")[0]|float -
	probe_mesh_padding, safe_min_x)|max %}
	{% set mesh_min_y = (params.MESH_MIN.split(",")[1]|float -
	probe_mesh_padding, safe_min_y)|max %}
	{% else %}
	{% set mesh_min_x = safe_min_x %}
	{% set mesh_min_y = safe_min_y %}
	{% endif %}
	{% if "MESH_MAX" in params %}
	{% set mesh_max_x = (params.MESH_MAX.split(",")[0]|float +
	probe_mesh_padding, safe_max_x)|min %}
	{% set mesh_max_y = (params.MESH_MAX.split(",")[1]|float +
	probe_mesh_padding, safe_max_y)|min %}
	{% else %}
	{% set mesh_max_x = safe_max_x %}
	{% set mesh_max_y = safe_max_y %}
	{% endif %}
	
	{% set probe_count = bed_mesh.probe_count if not params.PROBE_COUNT else
	params.PROBE_COUNT.split(",")|map('int')|list %}
	
	{% if "PROBE_COUNT" not in params %}
	{% set max_x_probes = probe_count[0] %}
	{% set max_y_probes = probe_count[-1] %}
	
	{% set x_probes = (max_x_probes * (mesh_max_x - mesh_min_x) /
	(safe_max_x - safe_min_x) * probe_count_scale)
	| round(0) | int %}
	{% set x_probes = ((x_probes, probe_min_count)|max, max_x_probes)|min %}
	
	{% set y_probes = (max_y_probes * (mesh_max_y - mesh_min_y ) /
	(safe_max_y - safe_min_y) * probe_count_scale )
	| round(0) | int %}
	{% set y_probes = ((y_probes, probe_min_count)|max, max_y_probes)|min %}
	
	{% if x_probes > 6 and y_probes < 4 %}
	{% set y_probes = 4 %}
	{% elif y_probes > 6 and x_probes < 4 %}
	{% set x_probes = 4 %}
	{% endif %}
	{% set probe_count = [x_probes,y_probes] %}
	{% elif probe_count|length == 1 %}
	{% set dummy = probe_count.append(probe_count[0]) %}
	{% endif %}
	
	
	
	
	
	
	
	{% if "relative_reference_index" in bed_mesh %}
	{% set row = (bed_mesh.relative_reference_index / bed_mesh.probe_count[0]
	)|int%}
	{% set rrf_x = (((safe_max_x - safe_min_x) /
	(bed_mesh.probe_count[0] - 1))|round(2, 'floor')) *
	(bed_mesh.relative_reference_index %
	bed_mesh.probe_count[-1]) %}
	{% if row % 2 %}
	{% set rrf_x = safe_max_x - rrf_x %}
	{% else %}
	{% set rrf_x = safe_min_x + rrf_x %}
	{% endif %}
	{% set rrf_y = (((safe_max_y - safe_min_y) /
	(bed_mesh.probe_count[-1] - 1))|round(2, 'floor')) *
	row + safe_min_x %}
	{% set x_dist = (mesh_max_x - mesh_min_x) / (probe_count[0] - 1) %}
	{% set y_dist = (mesh_max_y - mesh_min_y) / (probe_count[1] - 1) %}
	{% set rrf = {'x':0, 'y':0, 'dist':safe_max_x**2+safe_max_y**2,'pos':0} %}
	{% for row in range(probe_count[1])%}
	{% for col in range(probe_count[0])%}
	{% if row % 2 %}
	{% set x = mesh_max_x - col * x_dist %}
	{% else %}
	{% set x = mesh_min_x + col * x_dist %}
	{% endif %}
	{% set y = mesh_min_y + row * y_dist %}
	{% set dist = ((x - rrf_x)**2 + (y - rrf_y)**2)**0.5 %}
	{% if dist < rrf.dist %}
	{% set dummy = rrf.__setitem__("dist", dist) %}
	{% set dummy = rrf.__setitem__("x", x) %}
	{% set dummy = rrf.__setitem__("y", y) %}
	{% set dummy = rrf.__setitem__("pos", row * probe_count[1] + col) %}
	{% endif %}
	{% endfor %}
	{% endfor %}
	{% if rrf.x != rrf_x or rrf.y != rrf_y %}
	{action_respond_info("relative_reference_index remapped to"
	" %d (%.2f,%.2f) from %d (%.2f,%.2f)" %
	(rrf.pos, rrf.x, rrf.y,
	bed_mesh.relative_reference_index, rrf_x, rrf_y))}
	{% endif %}
	{% set dummy = params.__setitem__("RELATIVE_REFERENCE_INDEX", rrf.pos) %}
	{% endif %}
	
	{% set dummy = params.__setitem__("MESH_MIN", mesh_min_x~","~mesh_min_y) %}
	{% set dummy = params.__setitem__("MESH_MAX", mesh_max_x~","~mesh_max_y) %}
	{% set dummy = params.__setitem__("PROBE_COUNT", probe_count|join(',')) %}
	
	{% if probe_count[0] > 6 or probe_count[1]|default(0) > 6 %}
	{% set dummy = params.__setitem__("ALGORITHM", "bicubic") %}
	{% endif %}
	
	{% if "MESH_MIN" in params or "MESH_MAX" in params %}
	BED_MESH_CHECK {rawparams}
	{% endif %}
	{% else %}
	
	{% set dummy = params.__delitem__("MESH_MIN") %}
	{% set dummy = params.__delitem__("MESH_MAX") %}
	{% endif %}
	
	{% if "MESH_MIN" in params or "MESH_MAX" in params %}
	BED_MESH_CHECK ABORT=1{%for k in params%}{' '~k~'="'~params[k]~'"'}{%
	endfor%}
	{% endif %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=meshing
	{calibrate_cmd}{%for k in params%}{' '~k~'="'~params[k]~'"'}{%endfor%}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro bed_mesh_check]
description = Warns if bed_mesh config may generate an invalid mesh.
	Usage: BED_MESH_CHECK [MESH_MIN=<x,y>] [MESH_MAX=<x,y>] [ABORT=<0|1>]
gcode = 
	{% if printer.bed_mesh is defined %}
	{% set action = action_respond_info if params.ABORT|default(0)|int == 0 else
	action_raise_error %}
	{% set settings = printer.configfile.settings %}
	{% set x_min = settings.stepper_x.position_min %}
	{% set y_min = settings.stepper_y.position_min %}
	{% set x_max = settings.stepper_x.position_max %}
	{% set y_max = settings.stepper_y.position_max %}
	
	{% set label = "[bed_mesh] config" %}
	{% if "MESH_MIN" in params %}
	{% set label = "BED_MESH_CALIBRATE params" %}
	{% set mesh_min_x = params.MESH_MIN.split(",")[0]|float %}
	{% set mesh_min_y = params.MESH_MIN.split(",")[1]|float %}
	{% else %}
	{% set mesh_min_x = settings.bed_mesh.mesh_min[0] %}
	{% set mesh_min_y = settings.bed_mesh.mesh_min[1] %}
	{% endif %}
	{% if "MESH_MAX" in params %}
	{% set label = "BED_MESH_CALIBRATE params" %}
	{% set mesh_max_x = params.MESH_MAX.split(",")[0]|float %}
	{% set mesh_max_y = params.MESH_MAX.split(",")[1]|float %}
	{% else %}
	{% set mesh_max_x = settings.bed_mesh.mesh_max[0] %}
	{% set mesh_max_y = settings.bed_mesh.mesh_max[1] %}
	{% endif %}
	
	{% if "bltouch" in settings %}
	{% set x_offset = settings.bltouch.x_offset %}
	{% set y_offset = settings.bltouch.y_offset %}
	{% set probe = "bltouch" %}
	{% elif "probe" in settings %}
	{% set x_offset = settings.probe.x_offset %}
	{% set y_offset = settings.probe.y_offset %}
	{% set probe = "probe" %}
	{% else %}
	{% set x_offset = 0.0 %}
	{% set y_offset = 0.0 %}
	{% endif %}
	
	{% set output = [] %}
	{% set warn =
	"* mesh_%s (%f, %f) adjusted by " ~ probe ~
	".%s_offset (%f) can move out of range for "
	"stepper_%s.position_%s (%f)." %}
	{% if x_offset > 0 and (mesh_min_x - x_offset) < x_min %}
	{% set dummy = output.append(warn % ('min', mesh_min_x, mesh_min_y,
	'x', x_offset, 'x', 'min', x_min)) %}
	{% elif x_offset < 0 and (mesh_max_x - x_offset) > x_max %}
	{% set dummy = output.append(warn % ('max', mesh_max_x, mesh_max_y,
	'x', x_offset, 'x', 'max', x_max)) %}
	{% endif %}
	{% if y_offset > 0 and (mesh_min_y - y_offset) < y_min %}
	{% set dummy = output.append(warn % ('min', mesh_min_x, mesh_min_y,
	'y', y_offset, 'y', 'min', y_min)) %}
	{% elif y_offset < 0 and (mesh_max_y - y_offset) > y_max %}
	{% set dummy = output.append(warn % ('max', mesh_max_x, mesh_max_y,
	'y', y_offset, 'y', 'max', y_max)) %}
	{% endif %}
	
	{% if output %}
	{ action(
	"Warning: The following issue(s) were detected in your " ~ label ~
	":\n" ~ output|join("\n")) }
	{% endif %}
	{% endif %}

[gcode_macro _apply_bed_surface_offset]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% if surfaces.active %}
	SET_SURFACE_ACTIVE SURFACE={surfaces.active}
	{% endif %}

[gcode_macro _init_surfaces]
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% if "bed_surfaces" in printer.save_variables.variables %}
	{% set old_surfaces = printer.save_variables.variables.bed_surfaces %}
	{% else %}
	{% set old_surfaces = { 'active' : '', 'available' : {} } %}
	{% endif %}
	{% set settings = printer.configfile.settings %}
	{% set new_probe_z = (settings.probe | default(settings.bltouch) |
	default(settings.smart_effector) | default({})
	).z_offset|default(0.0)|float %}
	{% set new_endstop_z = (settings.stepper_z | default({})).position_endstop |
	default(0.0)|float %}
	{% if 'endstop_z' not in old_surfaces %}
	{% set dummy = old_surfaces.__setitem__('endstop_z', new_endstop_z) %}
	{% endif %}
	{% if 'probe_z' not in old_surfaces %}
	{% set dummy = old_surfaces.__setitem__('probe_z', new_probe_z) %}
	{% endif %}
	{% set surfaces = { 'active' : '', 'available' : {},
	'endstop_z' : old_surfaces.endstop_z,
	'probe_z' : old_surfaces.probe_z } %}
	{% for s in km.bed_surfaces %}
	{% set s = s.split()|join(' ')|lower %}
	{% if s|length > km.bed_surface_max_name_length or
	s|list|select("in", " \r\n\"\'")|list %}
	{action_raise_error('Invalid surface name "%s". Name must be %d or fewer '
	'characters and must not include space or quotation characters'
	| format(s, km.bed_surface_max_name_length))}
	{% endif %}
	{% if s in old_surfaces.available %}
	{% set dummy = surfaces.available.__setitem__(s,
	old_surfaces.available[s]) %}
	{% else %}
	{% set dummy = surfaces.available.__setitem__(s, {'offset' : 0.0}) %}
	{% endif %}
	{% endfor %}
	{% if old_surfaces.active in surfaces.available %}
	{% set dummy = surfaces.__setitem__('active', old_surfaces.active) %}
	{% elif km.bed_surfaces %}
	{% set dummy = surfaces.__setitem__('active', km.bed_surfaces[0]|lower) %}
	{% endif %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	_APPLY_BED_SURFACE_OFFSET
	{% if new_probe_z != surfaces.probe_z or
	new_endstop_z != surfaces.endstop_z %}
	{ action_respond_info(
	'Z probe offset or endstop position changed. Run ADJUST_SURFACE_OFFSETS '
	'to adjust the offset for all saved surfaces by the change differential, '
	'or run ADJUST_SURFACE_OFFSETS IGNORE=1 to hide this message without '
	'making changes.') }
	{% endif %}

[gcode_macro adjust_surface_offsets]
description = Adjusts surface offsets to account for changes in the Z endstop
	position or probe Z offset.
	Usage: ADJUST_SURFACE_OFFSETS [IGNORE]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% set settings = printer.configfile.settings %}
	{% set new_probe_z = (settings.probe | default(settings.bltouch) |
	default(settings.smart_effector) | default({})
	).z_offset|default(0.0)|float %}
	{% set new_endstop_z = (settings.stepper_z | default({})).position_endstop |
	default(0.0)|float %}
	{% set diff = (surfaces.probe_z - new_probe_z +
	surfaces.endstop_z - new_endstop_z)|round(6) %}
	{% if not params.IGNORE|default(0)|int %}
	{% for s in surfaces.available %}
	{% set offset = (surfaces.available[s].offset - diff)|round(6) %}
	{% set dummy = surfaces.available.__setitem__(s, {'offset' : offset}) %}
	{% endfor %}
	{ action_respond_info("All bed surfaces now adjusted by %1.4f"|
	format(diff))}
	{% elif diff != 0 %}
	{ action_respond_info("Status cleared without adjustment") }
	{% endif %}
	{% set dummy = surfaces.__setitem__('endstop_z', new_endstop_z| round(6)) %}
	{% set dummy = surfaces.__setitem__('probe_z', new_probe_z|round(6)) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"

[gcode_macro set_surface_offset]
description = Sets the offset for a surface and moves the toolhead (if homed).
	Usage: SET_SURFACE_OFFSET [OFFSET=<offset>] [SURFACE=<surface>]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}
	{% if SURFACE not in surfaces.available %}
	{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }
	{% endif %}
	{% set active = surfaces.available[SURFACE] %}
	
	{% set OFFSET = params.OFFSET|default(active.offset)|float %}
	{% if OFFSET != active.offset %}
	{% set dummy = surfaces.available[SURFACE].__setitem__("offset", OFFSET) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	{% if SURFACE == surfaces.active %}
	_km_set_gcode_offset_base Z="{OFFSET}" MOVE={
	1 if printer.toolhead.homed_axes == 'xyz' else 0}
	{% endif %}
	{% endif %}
	{ action_respond_info("Bed surface: %s Offset: %.3f"
	| format(SURFACE, OFFSET)) }
	
	{% set dummy = None if True else "
	{% set dummy = params.SURFACE|default(active surface) %}
	{% set dummy = params.OFFSET|default(none)|float %}
	" %}

[gcode_macro set_surface_active]
description = Sets the active bed surface and moves the toolhead (if homed). If
	no SURFACE argument is present the available surfaces are listed and the
	active one is preceded by a "*".
	Usage: SET_SURFACE_ACTIVE [SURFACE=<surface>]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% if "SURFACE" in params %}
	{% set SURFACE = params.SURFACE|lower %}
	{% if SURFACE not in surfaces.available %}
	{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }
	{% endif %}
	{% if SURFACE != surfaces.active %}
	{% set dummy = surfaces.__setitem__("active", SURFACE) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	{% endif %}
	{% if surfaces.available[SURFACE].offset !=
	printer.gcode_move.homing_origin.z %}
	_km_set_gcode_offset_base Z="{surfaces.available[SURFACE].offset
	}" MOVE={1 if printer.toolhead.homed_axes == 'xyz' else 0}
	{% endif %}
	{action_respond_info("Active bed surface: %s; offset: %.3f"
	| format(SURFACE, surfaces.available[SURFACE].offset))}
	{% else %}
	{% set output = [] %}
	{% for s in surfaces.available|list|sort %}
	{% set dummy = output.append("%s&nbsp;%s - offset: %.3f"
	| format("*" if s == surfaces.active else "&nbsp;",
	s, surfaces.available[s].offset)) %}
	{% endfor %}
	{action_respond_info(output|join('\n'))}
	{% endif %}
	
	{% set dummy = None if True else "
	{% set dummy = params.SURFACE|default(none) %}
	" %}

[gcode_macro set_gcode_offset]
description = Wraps SET_GCODE_OFFSET to update the current bed sheet offset.
	Usage: SET_GCODE_OFFSET [X=<pos>|X_ADJUST=<adjust>]
	[Y=<pos>|Y_ADJUST=<adjust>]
	[Z=<pos>|Z_ADJUST=<adjust>]
	[MOVE=1 [MOVE_SPEED=<speed>]]
rename_existing = _KM_SET_GCODE_OFFSET_BASE
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% if surfaces.active and
	not printer["gcode_macro _km_save_state"].is_ephemeral %}
	{% set Z = params.Z|default(0.0)|float|round(6) %}
	{% set Z_ADJUST = params.Z_ADJUST|default(0.0)|float %}
	{% if 'Z' in params and
	Z != surfaces.available[surfaces.active].offset %}
	{% set dummy = surfaces.available[surfaces.active].__setitem__("offset",
	Z) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	{% elif Z_ADJUST != 0.0 %}
	{% set dummy = surfaces.available[surfaces.active].__setitem__(
	"offset", (Z_ADJUST + printer.gcode_move.homing_origin.z)|round(6)) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	{% endif %}
	{% endif %}
	_km_set_gcode_offset_base{% for k in params%}{' '~k~'="'~params[k]~'"'
	}{% endfor %}

[gcode_macro make_surface_mesh]
description = Generates and saves a mesh to automatically load in PRINT_START.
	Usage: MAKE_SURFACE_MESH [SURFACE=<surface>] [BED=<probing temperature>]
	[EXTRUDER=<probing temperature>]
	[MESH_MULTIPLIER=<integer multiple of mesh density>]
	[bed_mesh_calibrate parameters]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}
	{% if SURFACE not in surfaces.available %}
	{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }
	{% endif %}
	{% set dummy = params.__setitem__('PROFILE', SURFACE) %}
	{% set BED = params.BED|default(70) | int %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set EXTRUDER = params.EXTRUDER|default(km.start_extruder_probing_temp) |
	int %}
	{% set MESH_MULTIPLIER = (params.MESH_MULTIPLIER|default(2)|int, 1)|max %}
	
	M104 S{EXTRUDER}
	M140 S{BED}
	G28
	
	
	{% if surfaces.available[SURFACE].offset !=
	printer.gcode_move.homing_origin.z %}
	_km_set_gcode_offset_base Z="{surfaces.available[SURFACE].offset
	}" MOVE=1
	{% endif %}
	
	
	{% if BED > 0 %}
	{action_respond_info("Stabilizing bed at %iC" | format(BED,))}
	_KM_PARK_IF_NEEDED HEATER=heater_bed RANGE=0.5
	{% if BED < (printer.heater_bed.temperature - 0.2) %}
	M190 R{BED}
	G4 P{((km.start_bed_heat_delay * 10, 30000)|min,
	km.start_bed_heat_delay)|max}
	{% else %}
	G4 P{km.start_bed_heat_delay}
	{% endif %}
	M190 R{BED}
	{% endif %}
	
	{% if EXTRUDER > 0 %}
	_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=2
	M109 R{km.start_extruder_probing_temp}
	{% endif %}
	
	{% if km.start_home_z_at_temp and not bed_at_target %}
	G28 Z
	{% endif %}
	
	
	
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count
	if not params.PROBE_COUNT else
	params.PROBE_COUNT.split(",")|map('int')|list %}
	{% set dummy = params.__setitem__('PROBE_COUNT',(
	MESH_MULTIPLIER * (probe_count[0] - 1) + 1,
	MESH_MULTIPLIER * (probe_count[-1] - 1) + 1,)|join(',')) %}
	
	BED_MESH_CLEAR
	BED_MESH_CALIBRATE_FAST {%
	for k in params|reject('in',['BED','SURFACE'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor %}
	SAVE_CONFIG
	
	
	{% set dummy = None if True else "
	{% set dummy = params.MESH_MULTIPLIER|default(2) %}
	{% set dummy = params.SURFACE|default(active surface) %}
	" %}

[gcode_macro load_surface_mesh]
description = Attempts to load a mesh associated with the specified surface.
	Usage: LOAD_SURFACE_MESH [SURFACE=<surface>]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}
	{% if SURFACE != surfaces.active %}
	SET_SURFACE_ACTIVE SURFACE={SURFACE}
	{% endif %}
	
	{% if SURFACE in printer.bed_mesh.profiles %}
	{% set mesh = printer.bed_mesh.profiles[SURFACE].mesh_params %}
	{% set default = printer.configfile.settings.bed_mesh %}
	
	{% if mesh.min_x <= (default.mesh_min[0] + 0.5) and
	mesh.min_y <= (default.mesh_min[1] + 0.5) and
	mesh.max_x >= (default.mesh_max[0] - 0.5) and
	mesh.max_y >= (default.mesh_max[1] - 0.5) and
	mesh.x_count >= default.probe_count[0] and
	mesh.y_count >= default.probe_count[-1] %}
	
	BED_MESH_PROFILE LOAD={SURFACE}
	{action_respond_info("Loaded mesh: %s" | format(SURFACE,))}
	{% endif %}
	{% endif %}

[gcode_macro m300]
description = Emits and audible beep.
	Usage: M300 [P<duration>] [S<frequency>]
gcode = 
	{% set settings = printer.configfile.settings %}
	{% if "output_pin beeper" in printer %}
	{% set P = (params.P|default(100)|int, 0)|max %}
	{% set S = (params.S|default(1000)|int, 1)|max %}
	SET_PIN PIN=beeper VALUE={% if settings["output_pin beeper"].pwm %}{
	settings["output_pin beeper"].scale|default(1.0) * 0.5
	} CYCLE_TIME={ 1.0 / S }{% else %}1{% endif %}
	G4 P{P}
	SET_PIN PIN=beeper VALUE=0
	{% else %}
	{action_respond_info(
	"M300 is disabled. To enable create an [output_pin beeper] config.")}
	{% endif %}

[gcode_macro set_draw_params]
description = Sets the default parameters used by DRAW_LINE_TO.
	Usage: SET_DRAW_PARAMS [HEIGHT=<mm>] [WIDTH=<mm>] [FEEDRATE=<mm/m>]
variable_height = 0.2
variable_width = 0.0
variable_feedrate = 1200
gcode = 
	{% set dparams = printer["gcode_macro set_draw_params"] %}
	{% for k in params %}
	{% set kl = k|lower %}
	{% if kl in dparams %}
	{% if dparams[kl] is float %}
	{% set v = params[k]|float %}
	{% elif dparams[kl] is integer %}
	{% set v = params[k]|int %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=set_draw_params VARIABLE={kl} VALUE="{v}"
	{% endif %}
	{% endfor %}

[gcode_macro draw_line_to]
description = Extrudes a line of filament at the specified height and width from
	the current coordinate to the supplied XY coordinate. (The height is used only
	to calculate the extrusion volume.)
	Usage: DRAW_LINE_TO [X=<pos>] [Y=<pos>] [HEIGHT=<mm>] [WIDTH=<mm>]
	[FEEDRATE=<mm/m>]
gcode = 
	{% set dparams = printer["gcode_macro set_draw_params"] %}
	{% set position = printer.gcode_move.gcode_position %}
	{% set X = params.X|default(position.x)|float %}
	{% set Y = params.Y|default(position.y)|float %}
	{% set HEIGHT = params.HEIGHT|default(dparams.height)|float %}
	{% set WIDTH = params.WIDTH|default(dparams.width)|float %}
	{% set FEEDRATE = params.FEEDRATE|default(dparams.feedrate)|int %}
	
	{% set distance = ((X - position.x) ** 2 + (Y - position.y) ** 2) ** 0.5 %}
	
	{% set filament_area = 3.14159 *
	(printer.configfile.settings[
	printer.toolhead.extruder].filament_diameter ** 2) / 4 %}
	{% set E = distance * ((WIDTH * HEIGHT) / filament_area) %}
	
	
	_KM_SAVE_GCODE_STATE NAME=_KM_PURGE
	G90
	G92 E0.0
	G1 X{"%.3f" % X} Y{"%.3f" % Y} E{"%.5f" % E} F{FEEDRATE}
	_KM_RESTORE_GCODE_STATE NAME=_KM_PURGE MOVE=0

[gcode_macro draw_purge_line]
description = Purges the specified length of filament as a line (or rows of
	lines) in front of the supplied print area. If no print area is specified the
	purge lines are drawn at the front edge of the maximum printable area. If no
	printable area is set it defaults to the XY axis limits.
	Usage: DRAW_PURGE_LINE [PRINT_MIN=<X,Y>] [PRINT_MAX=<X,Y>] [HEIGHT=<mm>]
	[WIDTH=<mm>] [LENGTH=<mm>]
gcode = 
	
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set origin = printer.gcode_move.homing_origin %}
	{% set dummy = km.__setitem__('print_min', (km.print_min[0] - origin.x,
	km.print_min[1] - origin.y)) %}
	{% set dummy = km.__setitem__('print_max', (km.print_max[0] - origin.x,
	km.print_max[1] - origin.y)) %}
	
	{% if "PRINT_MIN" in params %}
	{% set PRINT_MIN = (
	(params.PRINT_MIN.split(",")[0]|float, km.print_min[0])|max,
	(params.PRINT_MIN.split(",")[1]|float, km.print_min[1])|max
	) %}
	{% else %}
	{% set PRINT_MIN = km.print_min %}
	{% endif %}
	{% if "PRINT_MAX" in params %}
	{% set PRINT_MAX = (
	(params.PRINT_MAX.split(",")[0]|float, km.print_max[0])|min,
	(params.PRINT_MAX.split(",")[1]|float, km.print_max[1])|min
	) %}
	{% else %}
	{% set PRINT_MAX = km.print_max %}
	{% endif %}
	{% set extruder = printer.toolhead.extruder|string %}
	{% set HEIGHT = params.HEIGHT|default(
	printer.configfile.settings[extruder].nozzle_diameter * 0.625)|float %}
	{% set WIDTH = params.WIDTH|default(
	printer.configfile.settings[extruder].nozzle_diameter * 1.25)|float %}
	{% set LENGTH = params.LENGTH|default(km.start_purge_length)|float %}
	
	{% set dparams = printer["gcode_macro set_draw_params"] %}
	{% set filament_area = 3.14159 *
	(printer.configfile.settings[extruder].filament_diameter ** 2) / 4 %}
	{% set purge_length = (LENGTH * filament_area) / (WIDTH * HEIGHT) %}
	{% set printable_length = PRINT_MAX[0] - PRINT_MIN[0] %}
	{% set purge_rows = (purge_length / printable_length)|round(0,'ceil')|int %}
	{% set printable_inset = (printable_length - purge_length / purge_rows) / 2 %}
	{% set PRINT_MIN = (PRINT_MIN[0] + printable_inset, PRINT_MIN[1]) %}
	{% set PRINT_MAX = (PRINT_MAX[0] - printable_inset, PRINT_MAX[1]) %}
	
	{% set y_start = (km.print_min[1], PRINT_MIN[1] - km.start_purge_clearance -
	(purge_rows + 0.5) * WIDTH )|max %}
	G90
	
	G1 X{"%.3f" % (PRINT_MIN[0] - 30, km.print_min[0])|max} Y{
	"%.3f" % (y_start - 10, km.print_min[1])|max} F{km.travel_speed_xy}
	
	G1 X{"%.3f" % (PRINT_MIN[0] - 2, km.print_min[0])|max} Y{"%.3f" % y_start} Z{
	"%.4f" % HEIGHT} F{km.travel_speed_xy}
	
	G92 E0.0
	G1 E{"%.3f" % km.start_purge_prime_length} F{km.load_priming_speed}
	G92 E0.0
	
	G1 X{"%.3f" % PRINT_MIN[0]} F{km.travel_speed_xy}
	{% for n in range(purge_rows - 1) %}
	{% set x_pos = PRINT_MIN[0] if n % 2 else PRINT_MAX[0] %}
	DRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{
	WIDTH * n + y_start}"
	DRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{
	WIDTH * (n + 1) + y_start}"
	{% endfor %}
	{% set x_pos = PRINT_MAX[0] if purge_rows % 2 else PRINT_MIN[0] %}
	DRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{
	WIDTH * (purge_rows - 1) + y_start}"
	G92 E0.0

[gcode_macro _check_fan_params]
gcode = 
	{% set MAXIMUM = params.MAXIMUM|default(
	printer["gcode_macro set_fan_scaling"].maximum)|int %}
	{% set MINIMUM = params.MINIMUM|default(
	printer["gcode_macro set_fan_scaling"].minimum)|int %}
	
	{% if params.SCALE and params.SCALE|float <= 0 %}
	{ action_raise_error("SCALE must be a positive value.") }
	{% elif MINIMUM < 0 or MINIMUM > 255 %}
	{ action_raise_error("MINIMUM must be between 0 and 255.") }
	{% elif MAXIMUM < 0 or MAXIMUM > 255 %}
	{ action_raise_error("MAXIMUM must be between 0 and 255.") }
	{% elif params.SPEED and (params.SPEED|int < 0 or params.SPEED|int > 255) %}
	{ action_raise_error("SPEED must be between 0 and 255.") }
	{% elif params.BOOST and (params.BOOST|int < 0 or params.BOOST|int > 255) %}
	{ action_raise_error("BOOST must be between 0 and 255.") }
	{% elif MINIMUM > MAXIMUM %}
	{ action_raise_error("MINIMUM must be less than or equal to MAXIMUM.") }
	{% endif %}

[gcode_macro set_fan_scaling]
description = Sets fan scaling factors applied to M106 command. If a speed is
	provided it will be adjusted according to the scaling parameters.
	Usage: SET_FAN_SCALING [SCALE=<scale>] [BOOST=<boost>] [MAXIMUM=<max>]
	[MINIMUM=<min>] [SPEED=<speed>]
variable_scale = 1.0
variable_boost = 0
variable_minimum = 0
variable_maximum = 255
variable_real_speed = 0
gcode = 
	_CHECK_FAN_PARAMS{% for k in params %}{' '~k~'='~params[k]}{% endfor %}
	{% set SCALE = params.SCALE|default(scale)|float %}
	{% set BOOST = params.BOOST|default(boost)|float %}
	{% set MAXIMUM = params.MAXIMUM|default(maximum)|int %}
	{% set MINIMUM = params.MINIMUM|default(minimum)|int %}
	{% set SPEED = params.SPEED|default(real_speed)|int %}
	
	{% if SCALE != 1.0 or BOOST != 0 or MAXIMUM != 255 or MINIMUM != 0 %}
	{action_respond_info("Fan: Scale: %.2f Minimum:%i Maximum: %i Speed: %i"|
	format(SCALE, MINIMUM, MAXIMUM, SPEED))}
	{% endif %}
	
	
	{% if params|length > 0 %}
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=scale VALUE="{SCALE}"
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=boost VALUE="{BOOST}"
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=minimum VALUE="{MINIMUM}"
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=maximum VALUE="{MAXIMUM}"
	
	M106 S{SPEED}
	{% endif %}
	
	{% set dummy = None if True else "
	{% set dummy = params.SCALE|default(1.0)|float %}
	{% set dummy = params.BUMP|default(0)|int %}
	{% set dummy = params.MAXIMUM|default(255)|int %}
	{% set dummy = params.MINIMUM|default(0)|int %}
	{% set dummy = params.SPEED|default(current speed)|int %}
	" %}

[gcode_macro reset_fan_scaling]
description = Clears all fan scaling factors.
	Usage: RESET_FAN_SCALING
gcode = 
	SET_FAN_SCALING SCALE=1.0 BOOST=0 MAXIMUM=255 MINIMUM=0

[gcode_macro m106]
description = Wraps M106 to implement scaling overrides.
rename_existing = M106.6245197
gcode = 
	{% set S = params.S|default(255)|int %}
	{% set scale = printer["gcode_macro set_fan_scaling"] %}
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=real_speed VALUE="{S}"
	M106.6245197 S{((((S + scale.boost) * scale.scale) | round | int,
	scale.minimum) | max, scale.maximum) | min}

[gcode_macro _load_unload]
gcode = 
	{% set saved_extruder = printer.toolhead.extruder %}
	{% set EXTRUDER = params.EXTRUDER|default(saved_extruder)|lower %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% set BEEPS = params.BEEPS|default(8)|int if "output_pin beeper" in printer
	else 0 %}
	{% set default_minimum = km.load_min_temp if km.load_min_temp else
	(printer.configfile.settings[EXTRUDER].min_extrude_temp + 5) %}
	{% if 'MINIMUM' in params %}
	{% set MINIMUM = params.MINIMUM|int %}
	
	{% elif printer.pause_resume.is_paused and printer[EXTRUDER].target == 0 and
	printer["gcode_macro resume"].saved_extruder_temp %}
	{% set MINIMUM = printer["gcode_macro resume"].saved_extruder_temp %}
	
	{% elif printer[EXTRUDER].target > default_minimum %}
	{% set MINIMUM = printer[EXTRUDER].target %}
	{% else %}
	{% set MINIMUM = default_minimum %}
	{% endif %}
	{% if MINIMUM < printer.configfile.settings[EXTRUDER].min_extrude_temp %}
	{ action_raise_error("Extrude below minimum temp.") }
	{% elif printer.pause_resume.is_paused %}
	
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"
	{% endif %}
	{% set SPEED = params.SPEED|default(km.load_speed)|int %}
	{% set priming_length = km.load_priming_length %}
	{% set LENGTH = params.LENGTH|default(km.load_length)|float - priming_length%}
	{% if LENGTH < 0 %}
	{% set priming_length = (priming_length + LENGTH, 0)|max %}
	{% set LENGTH = 0 %}
	{% endif %}
	SAVE_GCODE_STATE NAME=_KM_LOAD_UNLOAD
	{% if EXTRUDER != saved_extruder%}
	ACTIVATE_EXTRUDER EXTRUDER={EXTRUDER}
	{% endif %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	{% if not printer.extruder.can_extrude or
	printer[EXTRUDER].target < default_minimum %}
	{action_respond_info("Preheating %s to %d" | format(EXTRUDER, MINIMUM))}
	M109 S{MINIMUM}
	{% endif %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS={"filament_load"
	if params.LOAD|int else "filament_unload"}
	M83
	{% set priming_speed = (km.load_priming_speed, SPEED)|min %}
	{% if params.LOAD|int %}
	G0 E{LENGTH} F{SPEED}
	G0 E{priming_length} F{priming_speed}
	G0 E{'%.4f' % -printer["gcode_macro resume"].saved_e} F{km.load_speed}
	{% else %}
	{% set pre_prime_distance = 5.0 %}
	{% set shaping_moves = 5 %}
	{% set shaping_distance = (shaping_moves * (1 + shaping_moves)/20) %}
	
	G0 E{pre_prime_distance} F{SPEED}
	G4 P500
	G0 E{'%.4f' % -(priming_length - shaping_distance)} F{SPEED}
	
	
	{% for i in range(1, shaping_moves + 1) %}
	G0 E2 F{priming_speed}
	G0 E-{2 + (0.1 * i)} F{priming_speed}
	{% endfor %}
	
	G0 E{'%.4f' % -(LENGTH + pre_prime_distance)} F{SPEED}
	{% endif %}
	RESTORE_GCODE_STATE NAME=_KM_LOAD_UNLOAD
	
	
	{% for i in range(BEEPS) %}
	M300 P100
	G4 P200
	{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro LOAD_FILAMENT]
description = Loads filament to the extruder.
	Usage: LOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]
	[EXTRUDER=<extruder>] [MINIMUM=<temperature>]
	[BEEPS=<beep count on completion>]
gcode = 
	_LOAD_UNLOAD LOAD=1{% for k in params
	%}{' '~k~'="'~params[k]~'"'}{% endfor %}
	
	
	{% set dummy = None if True else "
	M109
	{% set dummy = params.LENGTH|default(variable_load_length)|float %}
	{% set dummy = params.SPEED|default(variable_load_speed)|float %}
	{% set dummy = params.EXTRUDER|default(current extruder) %}
	{% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}
	{% set dummy = params.BEEPS|default(10)|int %}
	" %}

[gcode_macro UNLOAD_FILAMENT]
description = Unloads filament from the extruder.
	Usage: UNLOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]
	[EXTRUDER=<extruder>] [MINIMUM=<temperature>]
	[BEEPS=<beep count on completion>]
gcode = 
	_LOAD_UNLOAD LOAD=0{% for k in params
	%}{' '~k~'="'~params[k]~'"'}{% endfor %}
	
	
	{% set dummy = None if True else "
	M109
	{% set dummy = params.LENGTH|default(variable_load_length)|float %}
	{% set dummy = params.SPEED|default(variable_load_speed)|float %}
	{% set dummy = params.EXTRUDER|default(default extruder) %}
	{% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}
	{% set dummy = params.BEEPS|default(10)|int %}
	" %}

[gcode_macro _pause_inner_m700]
gcode = 
	{% set extruder = "extruder" ~ params.T|replace('0', '')
	if "T" in params else printer.toolhead.extruder %}
	{% if extruder != printer.toolhead.extruder%}
	ACTIVATE_EXTRUDER EXTRUDER={extruder}
	{% endif %}
	
	{% set z_param = (' Z="%f"' % params.Z) if 'Z' in params else "" %}
	
	{% if printer.idle_timeout.state|string == "Printing" %}
	PAUSE B="{0}" P=2{z_param}
	{% elif not printer.pause_resume.is_paused%}
	PARK B="{0}" P=2{z_param}
	{% endif %}

[gcode_macro m701]
description = Pauses/parks the toolhead then loads filament to the extruder.
	Usage: M701 [L<distance>] [Z<pos>] [T<extruder>]
gcode = 
	{% if 'U' in params %}
	{% if not 'L' in params %}
	RESPOND TYPE=error MSG="Argument \"U\" substituted for missing \"L\"."
	{% set dummy = params.__setitem__("L", params.U) %}
	{% else %}
	RESPOND TYPE=error MSG="Invalid argument \"U\" ignored."
	{% endif %}
	{% endif %}
	
	_PAUSE_INNER_M700 {% for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	LOAD_FILAMENT BEEPS="{10}" LENGTH={
	params.L|default(printer["gcode_macro _km_globals"].load_length)|float}

[gcode_macro m702]
description = Pauses/parks the toolhead then unloads filament from the extruder.
	Usage: M702 [U<distance>] [Z<pos>] [T<extruder>]
gcode = 
	{% if 'L' in params %}
	{% if not 'U' in params %}
	RESPOND TYPE=error MSG="Argument \"L\" substituted for missing \"U\"."
	{% set dummy = params.__setitem__("U", params.L) %}
	{% else %}
	RESPOND TYPE=error MSG="Invalid argument \"L\" ignored."
	{% endif %}
	{% endif %}
	
	_PAUSE_INNER_M700 {% for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	UNLOAD_FILAMENT BEEPS="{10}" LENGTH={
	params.U|default(printer["gcode_macro _km_globals"].load_length)|float}

[gcode_macro _km_globals]
variable_bed_surface_max_name_length = 10
variable_bed_surfaces = ['default']
variable_load_length = 90.0
variable_load_min_temp = 0
variable_load_priming_length = 20.0
variable_load_priming_speed = 200
variable_load_speed = 1200
variable_menu_show_octoprint = True
variable_menu_show_sdcard = True
variable_menu_temperature = [
	{'name' : 'PLA',  'extruder' : 200, 'bed' : 60},
	{'name' : 'PETG', 'extruder' : 230, 'bed' : 85},
	{'name' : 'ABS',  'extruder' : 245, 'bed' : 110}]
variable_park_x = 0.0
variable_park_y = 0.0
variable_park_z = 20.0
variable_print_min = ()
variable_print_max = ()
variable_pressure_advance_scale = -1.0
variable_probe_mesh_padding = 5.0
variable_probe_min_count = 3
variable_probe_count_scale = 1.0
variable_start_bed_heat_delay = 2000
variable_start_bed_heat_overshoot = 2.0
variable_start_clear_adjustments_at_end = True
variable_start_end_park_y = 0.0
variable_start_extruder_preheat_scale = 0.5
variable_start_extruder_probing_temp = 0
variable_start_home_z_at_temp = True
variable_start_level_bed_at_temp = True
variable_start_purge_clearance = 2.0
variable_start_purge_length = 0.0
variable_start_purge_prime_length = 12.0
variable_start_quad_gantry_level_at_temp = True
variable_start_random_placement_max = 0
variable_start_random_placement_padding = 10.0
variable_start_try_saved_surface_mesh = False
variable_start_z_tilt_adjust_at_temp = True
variable_travel_speed_xy = 3000
variable_travel_speed_z = 600
description = Initializes our globals, including any _km_options overrides.
gcode = 
	
	
	
	
	
	
	
	
	{% set required_sections = {"heater_bed" : None,
	"extruder" : None,
	"gcode_macro _km_options" : None,
	"idle_timeout" : ("gcode", "_KM_IDLE_TIMEOUT"),
	"pause_resume" : None,
	"respond" : None,
	"save_variables" : None,
	"virtual_sdcard" :
	("on_error_gcode", "CANCEL_PRINT")
	} %}
	{% set warn_removed = {
	"start_extruder_set_target_before_level" :
	"The start_extruder_set_target_before_level option has been removed. "
	"Use the start_extruder_probing_temp option instead to set a fixed "
	"probing temperature.",
	"start_gcode_before_print" :
	"The start_gcode_before_print option has been removed. The same effect "
	"can now be achieved by inserting custom gcode before the "
	"_PRINT_START_PHASE_PURGE line in your slicer's start gcode, or by "
	"wrapping the _PRINT_START_PHASE_PURGE macro. See the Slicer "
	"Configuration section in the readme for more information.",
	"velocity_decel_scale" :
	"The velocity_decel_scale option has been removed. Klipper's input "
	"shaping provides a superior mechanism for improving print quality "
	"at higher speeds.",
	} %}
	{% set output = [] %}
	{% for s in required_sections %}
	{% set f = required_sections[s][0] if required_sections[s] else None %}
	{% set v = required_sections[s][1] if required_sections[s] else None %}
	{% if s not in printer.configfile.config %}
	{% set dummy = output.append("Missing [%s] section.\n" | format(s)) %}
	{% elif f and
	(v not in printer.configfile.config[s][f]|default("")|upper) %}
	{% set dummy = output.append("Missing %s in %s for [%s] section.\n"
	| format(v, f, s)) %}
	{% endif %}
	{% endfor %}
	{% if output %}
	{ action_emergency_stop((
	"required printer.cfg section(s) missing:\n"
	~ output | join("\n")) ~
	"See readme: https://github.com/jschuh/klipper-macros\x23klipper-setup")
	}
	{% endif %}
	
	
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_level_bed_at_temp VALUE="{
	1 if printer.bed_mesh is defined else 0}"
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_quad_gantry_level_at_temp VALUE="{
	1 if printer.quad_gantry_level is defined else 0}"
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_z_tilt_adjust_at_temp VALUE="{
	1 if printer.z_tilt is defined else 0}"
	{% set toolhead = printer.toolhead %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=print_min VALUE="{
	(toolhead.axis_minimum.x, toolhead.axis_minimum.y)}"
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=print_max VALUE="{
	(toolhead.axis_maximum.x, toolhead.axis_maximum.y)}"
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_end_park_y VALUE="{
	toolhead.axis_maximum.y}"
	{% set settings = printer.configfile.settings %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_home_z_at_temp VALUE="{
	1 if ("stepper_z" in settings and
	settings.stepper_z.endstop_pin.split()|join("")|lower ==
	"probe:z_virtual_endstop") else 0}"
	
	{% set options = printer["gcode_macro _km_options"] %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	
	{% if options.park_x|default("")|string|lower == "min" %}
	{% set dummy = options.__setitem__("park_x",
	printer.configfile.settings.stepper_x.position_min) %}
	{% elif options.park_x|default("")|string|lower == "max" %}
	{% set dummy = options.__setitem__("park_x",
	printer.configfile.settings.stepper_x.position_max) %}
	{% endif %}
	{% if options.park_y|default("")|string|lower == "min" %}
	{% set dummy = options.__setitem__("park_y",
	printer.configfile.settings.stepper_y.position_min) %}
	{% elif options.park_y|default("")|string|lower == "max" %}
	{% set dummy = options.__setitem__("park_y",
	printer.configfile.settings.stepper_y.position_max) %}
	{% endif %}
	{% if options.start_end_park_y|default("")|string|lower == "min" %}
	{% set dummy = options.__setitem__("start_end_park_y",
	printer.configfile.settings.stepper_y.position_min) %}
	{% elif options.start_end_park_y|default("")|string|lower == "max" %}
	{% set dummy = options.__setitem__("start_end_park_y",
	printer.configfile.settings.stepper_y.position_max) %}
	{% endif %}
	{% if options.park_z|default("")|string|lower == "min" %}
	{% set dummy = options.__setitem__("park_z",
	printer.configfile.settings.stepper_z.position_min) %}
	{% elif options.park_z|default("")|string|lower == "max" %}
	{% set dummy = options.__setitem__("park_z",
	printer.configfile.settings.stepper_z.position_max) %}
	{% endif %}
	
	
	{% for k in options %}
	{% if k not in km %}
	{% if k in warn_removed %}
	{action_respond_info(warn_removed[k])}
	{% else %}
	{% set dummy = output.append("%s is not valid for _KM_OPTIONS." |
	format(k)) %}
	{% endif %}
	{% elif km[k] is string %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k
	} VALUE="'{options[k]|replace('\\','\\\\')|replace('\'','\\\'')
	|replace('\"','\\\"')}'"
	{% elif km[k] is float %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k
	} VALUE="{options[k]|float}"
	{% elif km[k] is integer or km[k] is boolean %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k} VALUE="{options[k]|int}"
	{% elif km[k] is mapping %}
	{% if options[k] is not mapping %}
	{% set dummy = output.append("%s requires a mapping type." |
	format(k)) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k
	} VALUE="{options[k]|replace('\"','\\\"')}"
	{% elif km[k] is sequence %}
	{% if options[k] is not sequence %}
	{% set dummy = output.append("%s requires a sequence type." |
	format(k)) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k
	} VALUE="{options[k]|replace('\"','\\\"')}"
	{% else %}
	{% set dummy = output.append("%s is not a valid type for _KM_OPTIONS." |
	format(k)) %}
	{% endif %}
	{% endfor %}
	
	{% if "homing_override" in printer.configfile.config %}
	{% for l in printer.configfile.config.homing_override.gcode.split("\n") %}
	{% if " g28 " in (" " ~ l.split("\x23")[0].split(";")[0]|lower ~ " ") %}
	{% set dummy = output.append(
	"G28 in [homing_override] gcode. Replace with G28.6245197 to "
	"fix recursive macro call.\n"
	"See readme: https://github.com/jschuh/klipper-macros\x23g28") %}
	{% endif %}
	{% endfor %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=check_km_config VARIABLE=load_errors VALUE="{
	output|replace('\"','\\\"')}"
	M400

[delayed_gcode INIT_GLOBALS]
initial_duration = 1
gcode = 
	LIST_MACROS SILENT=1
	_KM_GLOBALS
	
	CHECK_KM_CONFIG
	_INIT_SURFACES
	BED_MESH_CHECK
	
	SET_DRAW_PARAMS WIDTH="{printer.configfile.settings.extruder.nozzle_diameter}"
	
	_KM_OPTIONS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready

[gcode_macro check_km_config]
variable_load_errors = []
description = Checks global variables and throws an error on any invalid values.
	Does nothing if the config has no errors.
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set toolhead = printer.toolhead %}
	{% set output = load_errors %}
	{% if km.park_x > toolhead.axis_maximum.x or
	km.park_x < toolhead.axis_minimum.x %}
	{% set dummy = output.append("park_x is invalid.") %}
	{% endif %}
	{% if km.park_y > toolhead.axis_maximum.y or
	km.park_y < toolhead.axis_minimum.y %}
	{% set dummy = output.append("park_y is invalid.") %}
	{% endif %}
	{% if km.park_z > toolhead.axis_maximum.z or
	km.park_z < toolhead.axis_minimum.z %}
	{% set dummy = output.append("park_z is invalid.") %}
	{% endif %}
	{% if km.print_max[0] > toolhead.axis_maximum.x or
	km.print_max[1] > toolhead.axis_maximum.y %}
	{% set dummy = output.append("print_max is invalid.") %}
	{% endif %}
	{% if km.print_min[0] < toolhead.axis_minimum.x or
	km.print_min[1] < toolhead.axis_minimum.y %}
	{% set dummy = output.append("print_min is invalid.") %}
	{% endif %}
	{% if km.start_extruder_preheat_scale > 1.0 or
	km.start_extruder_preheat_scale < 0.0 %}
	{% set dummy = output.append("extruder_preheat_scale is invalid.") %}
	{% endif %}
	{% if km.load_length >
	printer.configfile.settings["extruder"].max_extrude_only_distance %}
	{% set dummy = output.append(
	"load_length exceeds max_extrude_only_distance.") %}
	{% endif %}
	{% if km.load_length < km.load_priming_length %}
	{% set dummy = output.append(
	"load_length is shorter than load_priming_length.") %}
	{% endif %}
	{% if km.load_length < 0.0 %}
	{% set dummy = output.append("load_length is negative.") %}
	{% endif %}
	{% if km.load_priming_length < 0.0 %}
	{% set dummy = output.append("load_priming_length is negative.") %}
	{% endif %}
	
	
	{% if output %}
	{ action_raise_error(output|sort|join('\nError: ')) }
	{% endif %}
	M400

[gcode_macro kmvars]
description = Lists global variables used by klipper-macros.
	Usage: KMVARS [SEARCH=<search_string>]
gcode = 
	{% set SEARCH = params.SEARCH|default(params.S|default(""))|lower %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set output = [] %}
	{% for k in km %}
	{% if SEARCH in k %}
	{% set dummy = output.append(k ~ ": " ~ km[k]) %}
	{% endif %}
	{% endfor %}
	{ action_respond_info(output|sort|join('\n')) }

[gcode_macro check_macro_docs]
description = Lists macros lacking proper documentation.
	Usage: CHECK_MACRO_DOCS [USAGE=<0|1>] [HIDDEN=<1|0>] [RENAMED=<1|0>]
gcode = 
	{% set USAGE = params.USAGE|default(0)|int %}
	{% set HIDDEN = params.HIDDEN|default(0)|int %}
	{% set RENAMED = params.RENAMED|default(0)|int %}
	{% set output = [] %}
	{%set config = printer.configfile.config %}
	{% for k in config|sort %}
	{% if k.startswith("gcode_macro") %}
	{% set name = k.split()[1] %}
	{% set desc = config[k].description|default("") %}
	{% set is_renamed = config[k].rename_existing|default("") %}
	{% if (not desc or (USAGE and not "Usage: "~name.upper() in desc)) and
	(HIDDEN or not name.startswith('_')) and (RENAMED or is_renamed) %}
	{% set dummy = output.append("%s&nbsp;%s: missing %s."
	| format("*" if is_renamed else "&nbsp;", name,
	"description" if not desc else "usage")) %}
	{% endif %}
	{% endif %}
	{% endfor %}
	{action_respond_info(output|join("\n"))}

[gcode_macro listvars]
description = Lists per-macro variables with a name containing SEARCH. This is
	useful for debugging macros by allowing you to probe printer state. Be very
	careful, however, as an overly broad SEARCH parameter can take a long time
	to process and potentially hang or crash klipper.
	Usage: LISTVARS SEARCH=<search_string>
gcode = 
	
	{% if 'SEARCH' not in params and 'S' not in params %}
	{ action_raise_error("Must provide a SEARCH parameter.") }
	{% endif %}
	{% set SEARCH = params.SEARCH|default(params.S)|lower %}
	{% set ns = namespace() %}
	{% set output = [] %}
	{% for item in printer %}
	{% if item is not string %}
	{% set ns.path = ['printer', "[%s]" % (item|string), ''] %}
	{% elif ' ' in item %}
	{% set ns.path = ['printer', "['%s']" % (item), ''] %}
	{% else %}
	{% set ns.path = ['printer.', item, ''] %}
	{% endif %}
	
	{% if SEARCH in ns.path|lower %}
	{% set dummy = output.append(ns.path|join) %}
	{% endif %}
	
	{% if printer[item].items() %}
	{% for childkey, child in printer[item].items() recursive %}
	{% set ns.path = ns.path[:loop.depth|int + 1] %}
	{% if childkey is not string %}
	{% set null = ns.path.append("[%s]" % (childkey|string)) %}
	{% elif ' ' in childkey %}
	{% set null = ns.path.append("['%s']" % (childkey)) %}
	{% else %}
	{% set null = ns.path.append(".%s" % (childkey)) %}
	{% endif %}
	
	{% if child is mapping  %}
	{loop(child.items())}
	{% else %}
	{% if SEARCH in ns.path|lower %}
	{% set dummy = output.append("%s : %s" % (ns.path|join, child)) %}
	{% endif %}
	{% endif %}
	{% endfor %}
	{% endif %}
	{% endfor %}
	{ action_respond_info(output|join("\n")) }

[gcode_macro list_macros]
description = Lists registered macros (and optionally show variable state).
	Usage: LISTVARS SEARCH=<search_string> VARS=<0|1> SILENT=<0|1>
variable_macros = {}
gcode = 
	
	{% if not macros %}
	{% set renames = {} %}
	{% for k in printer.configfile.config %}
	{% if k.lower().startswith("gcode_macro") and
	printer.configfile.config[k].rename_existing %}
	{% set name = k.split(None, 1)[1] | lower %}
	{% set dummy = renames.__setitem__(name,
	[printer.configfile.config[k].rename_existing|lower] +
	renames[name]|default([])) %}
	{% endif %}
	{% endfor %}
	{% for k in printer %}
	{% if k.lower().startswith("gcode_macro") %}
	{% set name = k.split(None, 1)[1] | lower %}
	{% set dummy = macros.__setitem__(name, renames[name]|default([])) %}
	{% endif %}
	{% endfor %}
	{% endif %}
	
	{% if params.SILENT|default(0)|int == 0 %}
	_LIST_MACROS_DISPLAY {rawparams}
	{% endif %}

[gcode_macro _list_macros_display]
gcode = 
	{% set SEARCH = params.SEARCH | default(params.S) | default("") | lower %}
	{% set VARS = params.VARS | default(params.V) | default(0) | int != 0 %}
	
	{% set macros = printer["gcode_macro list_macros"].macros %}
	{% set output = [] %}
	{% for k in macros %}
	{% if SEARCH in k | lower %}
	{% set line = k ~ ((" (renames: %s)" % (macros[k]|join(","))) if macros[k]
	else "") %}
	{% set outvars = [] %}
	{% if VARS %}
	{% for v in printer["gcode_macro " ~ k] | sort %}
	{% set dummy = outvars.append("\n* %s: %s" %
	(v, printer["gcode_macro " ~ k][v]|string)) %}
	{% endfor %}
	{% endif %}
	{% set dummy = output.append(line + outvars | join("")) %}
	{% endif %}
	{% endfor %}
	{ action_respond_info(output | sort | join("\n")) }

[gcode_macro set_heater_temperature_scaled]
gcode = 
	{% set HEATER = params.HEATER.lower() %}
	{% set TARGET = params.TARGET|default(0.0)|float %}
	{% set scaled_heaters =
	printer["gcode_macro set_heater_scaling"].scaled_heaters %}
	{% if HEATER in scaled_heaters %}
	{% set scales = scaled_heaters[HEATER] %}
	{% set dummy = scales.__setitem__("real_target", TARGET) %}
	{%if TARGET > 0.0 %}
	{% set TARGET = (((TARGET + scales.bump) * scales.scale, scales.minimum)
	| max, scales.maximum)|min %}
	{% endif %}
	{% endif %}
	SET_HEATER_TEMPERATURE HEATER="{HEATER}" TARGET={TARGET}

[gcode_macro temperature_wait_scaled]
gcode = 
	{% set SENSOR = params.SENSOR.lower() %}
	{% set heater = SENSOR if not SENSOR.startswith("heater_generic") else
	SENSOR.split()[1] %}
	{% set scaled_heaters =
	printer["gcode_macro set_heater_scaling"].scaled_heaters %}
	{% if heater in scaled_heaters %}
	{% set scales = scaled_heaters[heater] %}
	{% if "MINIMUM" in params and MINIMUM > 0.0 %}
	{% set MINIMUM = (((MINIMUM + scales.bump) * scales.scale, scales.minimum)
	| max, scales.maximum)|min %}
	{% endif %}
	{% if "MAXIMUM" in params and MAXIMUM > 0.0 %}
	{% set MAXIMUM = (((MAXIMUM + scales.bump) * scales.scale, scales.minimum)
	| max, scales.maximum)|min %}
	{% endif %}
	{% else %}
	{% set settings = printer.configfile.settings[SENSOR] %}
	{% set MINIMUM = params.MINIMUM|default(settings.min_temp) %}
	{% set MAXIMUM = params.MAXIMUM|default(settings.max_temp) %}
	{% endif %}
	{% if printer[sensor].temperature < MINIMUM or
	printer[sensor].temperature > MAXIMUM %}
	TEMPERATURE_WAIT SENSOR="{SENSOR}" MINIMUM={MINIMUM} MAXIMUM={MAXIMUM}
	{% endif %}

[gcode_macro _gcode_wait_wrapper_inner]
gcode = 
	
	
	{% set sensor = params.HEATER if params.HEATER in
	printer.heaters.available_heaters
	else ("heater_generic " ~ params.HEATER) %}
	{% set target = printer[sensor].target %}
	{% if 'R' in params and target > 0.0 %}
	{% set T = params.T|default("") %}
	M{params.M}.6245197 S{target} { (" T"~T) if T else "" }
	{% elif printer[sensor].temperature < target %}
	TEMPERATURE_WAIT SENSOR="{sensor}" MINIMUM={target}
	{% endif %}

[gcode_macro _gcode_wait_wrapper]
gcode = 
	{% set target = params.S | default(params.R | default(0))| float %}
	SET_HEATER_TEMPERATURE_SCALED HEATER="{params.HEATER}" TARGET={target}
	_GCODE_WAIT_WRAPPER_INNER{%
	for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}

[gcode_macro m109]
rename_existing = M109.6245197
gcode = 
	{% set extruder = "extruder" ~ params.T|replace('0', '')
	if "T" in params else printer.toolhead.extruder %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating
	_GCODE_WAIT_WRAPPER HEATER={extruder}{%
	for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro m190]
rename_existing = M190.6245197
gcode = 
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=bed_heating
	_GCODE_WAIT_WRAPPER HEATER=heater_bed {%
	for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro m191]
description = Sets chamber temperature (with wait for heating).
	Usage: M191 [S<temp>]
gcode = 
	
	{% if "R" in params %}
	{% set dummy = params.__setitem__("S", params.R) %}
	{% endif %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=chamber_heating
	_GCODE_WAIT_WRAPPER HEATER=chamber {%
	for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro m104]
rename_existing = M104.6245197
gcode = 
	{% set extruder = "extruder" ~ params.T|replace('0', '')
	if "T" in params else printer.toolhead.extruder %}
	SET_HEATER_TEMPERATURE_SCALED HEATER={extruder} TARGET={params.S|default(0)}

[gcode_macro m140]
rename_existing = M140.6245197
gcode = 
	SET_HEATER_TEMPERATURE_SCALED HEATER=heater_bed TARGET={params.S|default(0)}

[gcode_macro m141]
description = Sets chamber temperature.
	Usage: M141 [S<temp>]
gcode = 
	SET_HEATER_TEMPERATURE_SCALED HEATER=chamber TARGET={params.S|default(0)}

[gcode_macro _check_heater_params]
gcode = 
	{% set HEATER = params.HEATER|lower %}
	{% set sensor = params.HEATER %}
	{% if HEATER not in printer.heaters.available_heaters %}
	{% set sensor = "heater_generic " ~ HEATER %}
	{% if sensor not in printer.heaters.available_heaters %}
	{ action_raise_error("The value '%s' is not valid for HEATER"
	| format(HEATER)) }
	{% endif %}
	{% endif %}
	{% set settings = printer.configfile.settings[sensor] %}
	{% set scaled_heaters =
	printer["gcode_macro set_heater_scaling"].scaled_heaters %}
	{% if HEATER is in scaled_heaters %}
	{% set scales = scaled_heaters[HEATER] %}
	{% else %}
	{% set scales = { "scale": 1.0, "bump": 0.0, "minimum": settings.min_temp,
	"maximum": settings.max_temp,
	"real_target": printer[sensor].target} %}
	{% endif %}
	{% set SCALE = params.SCALE|default(scales.scale)|float %}
	{% set BUMP = params.BUMP|default(scales.bump)|float %}
	{% set MINIMUM = params.MINIMUM|default(scales.minimum)|float %}
	{% set MAXIMUM = params.MAXIMUM|default(scales.maximum)|float %}
	
	{% if SCALE <= 0 %}
	{ action_raise_error("SCALE must be a positive value.") }
	{% elif MINIMUM < settings.min_temp or MINIMUM > settings.max_temp %}
	{ action_raise_error("MINIMUM must be between %.1f and %.1f" |
	format(settings.min_temp, settings.max_temp)) }
	{% elif MAXIMUM < settings.min_temp or MAXIMUM > settings.max_temp %}
	{ action_raise_error("MAXIMUM must be between %.1f and %.1f" |
	format(settings.min_temp, settings.max_temp)) }
	{% elif MINIMUM >= MAXIMUM %}
	{ action_raise_error("MINIMUM must be less than MAXIMUM.") }
	{% elif "TARGET" in params and (params.TARGET|float < MINIMUM or
	params.TARGET|float > MAXIMUM) %}
	{ action_raise_error("TARGET must be between %.1f and %.1f" |
	format(settings.min_temp, settings.max_temp)) }
	{% endif %}

[gcode_macro set_heater_scaling]
description = Sets scaling parameters for heater. If a new target temperature is
	passed it will be adjusted to the scaling parameters.
	Usage: SET_HEATER_SCALING [HEATER=<heater>] [SCALE=<scale_factor>]
	[BUMP=<degrees>] [MAXIMUM=<degrees>]
	[MINIMUM=<degrees>] [TARGET=<temp>]
variable_scaled_heaters = {}
gcode = 
	
	{% if "HEATER" is not in params %}
	{% set output = [] %}
	{% for h in scaled_heaters %}
	{% set dummy = output.append(
	"%s: Scale: %.2f Bump: %.1f Minimum:%.1f Maximum: %.1f"
	| format(h, scaled_heaters[h].scale, scaled_heaters[h].bump,
	scaled_heaters[h].minimum, scaled_heaters[h].maximum)) %}
	{% endfor %}
	{% if output %}}{action_respond_info(output|join('\n'))}{% endif %}
	{% else %}
	
	{% set HEATER = params.HEATER.lower() %}
	{% set settings = printer.configfile.settings[HEATER] %}
	{% if HEATER is not in scaled_heaters %}
	{% set dummy = scaled_heaters.__setitem__(HEATER, {"scale": 1.0,
	"bump": 0.0, "minimum": settings.min_temp,
	"maximum": settings.max_temp,
	"real_target": printer[HEATER].target}) %}
	{% endif %}
	_CHECK_HEATER_PARAMS{% for k in params %}{' '~k~'='~params[k]}{% endfor %}
	{% set scales = scaled_heaters[HEATER] %}
	{% set SCALE = params.SCALE|default(scales.scale)|float %}
	{% set BUMP = params.BUMP|default(scales.bump)|float %}
	{% set MAXIMUM = params.MAXIMUM|default(scales.maximum)|float %}
	{% set MINIMUM = params.MINIMUM|default(scales.minimum)|float %}
	{% set TARGET = params.TARGET|default(scales.real_target)|float %}
	{% set dummy = scales.__setitem__("scale", SCALE) %}
	{% set dummy = scales.__setitem__("bump", BUMP) %}
	{% set dummy = scales.__setitem__("maximum", MAXIMUM) %}
	{% set dummy = scales.__setitem__("minimum", MINIMUM) %}
	{% set dummy = scales.__setitem__("real_target", TARGET) %}
	
	{% set settings = printer.configfile.settings[HEATER] %}
	{% if SCALE != 1.0 or BUMP != 0.0 or MINIMUM != settings.min_temp or
	MAXIMUM != settings.max_temp %}
	{% set dummy = scaled_heaters.__setitem__(HEATER, scales) %}
	{% else %}
	{% set dummy = scaled_heaters.__delitem__(HEATER) %}
	{% endif %}
	SET_HEATER_TEMPERATURE_SCALED HEATER={HEATER} TARGET={TARGET}
	{action_respond_info(
	"%s: Scale: %.2f Bump: %.1f Minimum:%.1f Maximum: %.1f Target: %.1f"
	| format(HEATER, SCALE, BUMP, MINIMUM, MAXIMUM, TARGET))}
	{% endif %}
	
	{% set dummy = None if True else "
	{% set dummy = params.HEATER|default(e.g. extruder) %}
	{% set dummy = params.SCALE|default(1.0)|float %}
	{% set dummy = params.BUMP|default(0.0)|float %}
	{% set dummy = params.MAXIMUM|default(max_temp)|float %}
	{% set dummy = params.MINIMUM|default(min_temp)|float %}
	{% set dummy = params.TARGET|default(current target)|float %}
	" %}

[gcode_macro reset_heater_scaling]
description = Clears scaling for heater (or all heaters if none specified).
	Usage: RESET_HEATER_SCALING [HEATER=<heater>]
gcode = 
	{% if "HEATER" in params %}
	{% set HEATER = params.HEATER.lower() %}
	{% if HEATER not in printer.heaters.available_heaters %}
	{ action_raise_error("The value '%s' is not valid for HEATER"
	| format(HEATER)) }
	{% endif %}
	{% set settings = printer.configfile.settings[HEATER] %}
	SET_HEATER_SCALING HEATER={HEATER
	} SCALE=1.0 BUMP=0.0 MINIMUM={settings.min_temp
	} MAXIMUM={settings.max_temp}
	{% else %}
	
	SET_GCODE_VARIABLE MACRO=set_heater_scaling VARIABLE=scaled_heaters VALUE={
	"{}"}
	{% endif %}

[gcode_macro _km_idle_timeout]
gcode = 
	{% if printer.pause_resume.is_paused %}
	{action_respond_info("Extruder powered down on idle timeout.")}
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{
	printer[printer.toolhead.extruder].target}"
	M104; Turn off extruder but leave the bed on.
	{% else %}
	TURN_OFF_HEATERS
	M107; turn off fan
	M84
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready
	{% endif %}

[gcode_macro _check_kinematic_limits]
gcode = 
	{% set toolhead = printer.toolhead %}
	{% if params.X and (params.X|float < toolhead.axis_minimum.x or
	params.X|float > toolhead.axis_maximum.x) %}
	{action_raise_error("X[%.3f] must be between %.3f and %.3f."
	| format(params.X|float, toolhead.axis_minimum.x,
	toolhead.axis_maximum.x))}
	{% elif params.Y and (params.Y|float < toolhead.axis_minimum.y or
	params.Y|float > toolhead.axis_maximum.y) %}
	{action_raise_error("Y[%.3f] must be between %.3f and %.3f."
	| format(params.Y|float, toolhead.axis_minimum.y,
	toolhead.axis_maximum.y))}
	{% elif params.Z and (params.Z|float < toolhead.axis_minimum.z or
	params.Z|float > toolhead.axis_maximum.z) %}
	{action_raise_error("Z[%.3f] must be between %.3f and %.3f."
	| format(params.Z|float, toolhead.axis_minimum.z,
	toolhead.axis_maximum.z))}
	{% elif params.E and (params.E|float|abs > printer.configfile.settings[
	"extruder"].max_extrude_only_distance) %}
	{action_raise_error("E[%.4f] exceeds max_extrude_only_distance[%.4f]."
	| format(params.E|float|abs, printer.configfile.settings[
	"extruder"].max_extrude_only_distance))}
	{% endif %}

[gcode_macro lazy_home]
description = Homes the specified axes. If lazy is true, already homed axes
	are skipped.
	Usage: LAZY_HOME [LAZY=<1|0>] [AXES=<axes_string>]
gcode = 
	
	LIST_MACROS SILENT=1
	_LAZY_HOME_INNER {rawparams}

[gcode_macro _lazy_home_inner]
gcode = 
	
	{% set G28 = (printer["gcode_macro list_macros"].macros.g28|
	default(["g28"],True))[-1] %}
	{% set axes = 'XYZ'|select('in', params.AXES|default("XYZ")|upper|list) %}
	{% if not axes %}
	{% set axes = 'XYZ' %}
	{% endif %}
	{% if params.LAZY|default(1)|int %}
	{% set axes = axes|reject('in', printer.toolhead.homed_axes|upper)|join() %}
	{% endif %}
	
	{% if axes %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing
	{G28}{% for k in axes %}{' ' ~ k}{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status
	{% endif %}

[gcode_macro g28]
description = Wraps the G28 command to add the Marlin "O" parameter so that
	already homed axes will not be homed again. See the Klipper documentation on
	G28 for the behavior of the other parameters.
	Usage: G28 [O] ...
rename_existing = G28.6245197
gcode = 
	{% set axes = 'XYZ'|select('in', params)|join() %}
	LAZY_HOME LAZY={('O' in params)|int}{%if axes%} AXES={axes}{%endif%}

[gcode_macro before_layer_change]
description = Add this to the "before layer change" input box in the slicer.
	Usage: BEFORE_LAYER_CHANGE HEIGHT=<current_height> LAYER=<current_layer>
gcode = 
	{% set height = params.HEIGHT|default(printer.toolhead.position.z)|float %}
	{% set layer = params.LAYER|default(-1)|int + 1 %}
	{% if height >= 0.0 and layer >= 0 %}
	SET_PRINT_STATS_INFO CURRENT_LAYER="{layer}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{height}"
	{% if printer["gcode_macro _km_layer_run"].clearance_z < height %}
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{
	height}"
	{% endif %}
	{% endif %}

[gcode_macro after_layer_change]
description = Add this to the "after layer change" input box in the slicer.
	Usage: AFTER_LAYER_CHANGE
gcode = 
	_KM_LAYER_RUN

[gcode_macro gcode_at_layer]
description = Schedules the specified g-code command to be run at the specified
	layer. LAYER=next will cause the command to run at the next layer change.
	Usage: GCODE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } COMMAND=<gcode>
	[CANCEL=<0|1>]
gcode = 
	{% set tot_layers = printer.print_stats.info.total_layer %}
	{% if params|length > 0 %}
	_KM_CHECK_IS_PRINTING
	
	{% set CANCEL = params.CANCEL|default(0)|int != 0 %}
	{% set COMMAND = params.COMMAND|default(None) %}
	{% if COMMAND %}
	{% set COMMAND = COMMAND.lstrip().split(None, 1) %}
	{% set COMMAND = " ".join([COMMAND[0]|upper] + COMMAND[1:]) %}
	{% endif %}
	
	{% if "LAYER" in params %}
	{% set cmd_container = "commands_layer" %}
	{% set cur_layer = printer.print_stats.info.current_layer|int %}
	{% if "HEIGHT" in params %}
	{action_raise_error("Conflicting HEIGHT and LAYER arguments provided.")}
	{% elif params.LAYER|string|lower == "next" %}
	{% set LAYER = cur_layer + 1 %}
	{% else %}
	{% set LAYER = params.LAYER|int %}
	{% endif %}
	{% if LAYER <= cur_layer %}
	{action_raise_error("LAYER[%i] must be above current print layer[%i]."
	| format(LAYER, cur_layer))}
	{% elif tot_layers and LAYER > tot_layers %}
	{action_raise_error("LAYER[%i] must not be above top layer[%i]."
	| format(LAYER, tot_layers))}
	{% endif %}
	{% set key = LAYER %}
	
	{% elif "HEIGHT" in params %}
	{% set cmd_container = "commands_height" %}
	{% set HEIGHT = params.HEIGHT|float %}
	{% set cur_height = printer["gcode_macro _km_layer_run"].cur_height %}
	{% if HEIGHT <= cur_height %}
	{action_raise_error(
	"HEIGHT[%.3f] must be above current print height[%.3f].")
	| format(HEIGHT, cur_height)}
	{% elif HEIGHT >= printer.toolhead.axis_maximum.z %}
	{action_raise_error(
	"HEIGHT[%.3f] must be below maximum Z height[%.3f].")
	| format(HEIGHT, printer.toolhead.axis_maximum.z)}
	{% endif %}
	{% set key = HEIGHT %}
	
	{% else %}
	{action_raise_error("No HEIGHT or LAYER argument provided.")}
	{% endif %}
	
	{% set commands = printer["gcode_macro _km_layer_run"][cmd_container] %}
	{% if key not in commands and not CANCEL %}
	{% set dummy = commands.__setitem__(key, []) %}
	{% endif %}
	
	{% if CANCEL %}
	{% if key in commands %}
	{% set pos = ("%i"|format(key)) if key is integer else
	("%.3fmm"|format(key)) %}
	{% if COMMAND %}
	{% set dummy = commands[key].remove(COMMAND) %}
	{% if commands[key]|length == 0 %}
	{% set dummy = commands.__delitem__(key) %}
	{% endif %}
	{action_respond_info("Cancelled %s %s:\n* %s" |
	format("layer" if k is integer else "height",
	pos, COMMAND))}
	{% else %}
	{% set dummy = commands.__delitem__(key) %}
	{action_respond_info("Cancelled all commands at %s %s." |
	format("layer" if k is integer else "height",
	pos))}
	{% endif %}
	{% endif %}
	{% elif not COMMAND %}
	{action_raise_error("No COMMAND argument provided.")}
	{% elif COMMAND in commands[key] %}
	{action_raise_error("Duplicate command previously scheduled.")}
	{% else %}
	{% set dummy = commands[key].append(COMMAND) %}
	{% set pos = ("%i"|format(key)) if key is integer else
	("%.3fmm"|format(key)) %}
	{action_respond_info("%s %s:\n* %s" |
	format("layer" if key is integer else "height",
	pos, COMMAND))}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE={cmd_container} VALUE="{
	commands|replace('\"','\\\"')}"
	_UPDATE_LAYER_COMPAT
	
	
	{% else %}
	{% set output = [] %}
	{% set commands = printer["gcode_macro _km_layer_run"].commands_layer %}
	{% for key in commands|list|sort %}
	{% set dummy = output.append("layer %i:" | format(key)) %}
	{% for c in commands[key] %}
	{% set dummy = output.append("* %s" | format(c)) %}
	{% endfor %}
	{% endfor %}
	{% set commands = printer["gcode_macro _km_layer_run"].commands_height %}
	{% for key in commands|list|sort %}
	{% set dummy = output.append("height %.3fmm:" | format(key)) %}
	{% for c in commands[key] %}
	{% set dummy = output.append("* %s" | format(c)) %}
	{% endfor %}
	{% endfor %}
	{action_respond_info(output|join('\n'))}
	{% endif %}

[gcode_macro _km_layer_run]
description = Runs pending commands for the current layer change.
	Usage: _KM_LAYER_RUN
variable_cur_height = 0.0
variable_clearance_z = 0.0
variable_commands_layer = {}
variable_commands_height = {}
gcode = 
	{% set cur_layer = printer.print_stats.info.current_layer %}
	{% for key in commands_layer | select("<=", cur_layer) | sort %}
	{action_respond_info("Executing scheduled commands at layer %d:\n%s" |
	format(key, commands_layer[key]|join('\n')))}
	{% for c in commands_layer[key] %}
	{c}
	{% endfor %}
	{% set dummy = commands_layer.__delitem__(key) %}
	{% endfor %}
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{
	commands_layer|replace('\"','\\\"')}"
	{% for key in commands_height | select("<=", cur_height) | sort %}
	{action_respond_info("Executing scheduled commands at height %.3f:\n%s" |
	format(key, commands_height[key]|join('\n')))}
	{% for c in commands_height[key] %}
	{c}
	{% endfor %}
	{% set dummy = commands_height.__delitem__(key) %}
	{% endfor %}
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{
	commands_height|replace('\"','\\\"')}"
	_UPDATE_LAYER_COMPAT

[gcode_macro init_layer_gcode]
description = Clears scheduled gcode commands and state for all layers.
	Usage: INIT_LAYER_GCODE LAYERS=<num>
gcode = 
	SET_PRINT_STATS_INFO TOTAL_LAYER="{params.LAYERS|int + 1}" CURRENT_LAYER="{0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"
	_UPDATE_LAYER_COMPAT

[gcode_macro _reset_layer_gcode]
description = Clears scheduled gcode commands and state for all layers.
	Usage: _RESET_LAYER_GCODE
gcode = 
	SET_PRINT_STATS_INFO TOTAL_LAYER="{0}" CURRENT_LAYER="{0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"
	_UPDATE_LAYER_COMPAT

[gcode_macro cancel_all_layer_gcode]
description = Clears all scheduled gcode commands.
	Usage: CANCEL_ALL_LAYER_GCODE
gcode = 
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"
	_UPDATE_LAYER_COMPAT

[gcode_macro _update_layer_compat]
gcode = 
	{% set next_layer = printer.print_stats.info.current_layer|int + 1 %}
	{% set commands_layer = printer["gcode_macro _km_layer_run"].commands_layer %}
	{% set keys = commands_layer | sort(reverse=True) %}
	
	{% set pause_next_layer = {'enable': False, 'call':
	printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer.call} %}
	{% if pause_next_layer.call in commands_layer[next_layer] | default([]) %}
	{% set dummy = pause_next_layer.__setitem__('enable', True) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{
	pause_next_layer|replace('\"','\\\"') }"
	
	
	{% set pause_at_layer = {'enable': False, 'layer': 0, 'call':
	printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer.call} %}
	{% if pause_next_layer.enable and
	pause_next_layer.call == pause_at_layer.call %}
	{% set keys = keys | reject("==", next_layer) %}
	{% endif %}
	
	
	
	
	{% for key in keys %}
	{% if pause_at_layer.call in commands_layer[key] %}
	{% set dummy = pause_at_layer.__setitem__('enable', True) %}
	{% set dummy = pause_at_layer.__setitem__('layer', key) %}
	{% endif %}
	{% endfor %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{
	pause_at_layer|replace('\"','\\\"') }"

[gcode_macro pause_next_layer]
description = Convenience macro to schedule the current print to pause at the
	next layer change. See PAUSE for additional arguments.
	Usage: PAUSE_NEXT_LAYER ...
gcode = 
	_CHECK_KINEMATIC_LIMITS{% for k in params%}{' ' ~k~ '=' ~ params[k]
	}{% endfor %}
	GCODE_AT_LAYER LAYER=NEXT COMMAND="PAUSE{% for k in params %}{
	' ' ~ k ~ '=' ~ params[k]}{% endfor %}"

[gcode_macro pause_at_layer]
description = Convenience macro to schedule the current print to pause at the
	specified layer change. LAYER=next will cause the command to run at the next
	layer change. See PAUSE for additional arguments.
	Usage: PAUSE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...
gcode = 
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	" %}
	{% set filtered_params = params|reject('in',['HEIGHT','LAYER'])|list|sort %}
	_CHECK_KINEMATIC_LIMITS{% for k in filtered_params%}{' ' ~k~ '=' ~ params[k]
	}{% endfor %}
	GCODE_AT_LAYER {% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor
	%} COMMAND="PAUSE{% for k in filtered_params %}{
	' ' ~ k ~ '=' ~ params[k]}{% endfor %}"

[gcode_macro speed_at_layer]
description = Convenience macro to schedule a feedrate adjustment at the
	specified layer change. LAYER=next will cause the command to run at the next
	layer change. (SPEED parameter behaves the same as the M220 S parameter.)
	Usage: SPEED_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } SPEED=<percentage>
gcode = 
	{% set SPEED = params.SPEED|default(0)|int %}
	{% if SPEED < 1 or SPEED > 500 %}
	{action_raise_error("SPEED[%i] parameter between 1 and 500 is required."
	% SPEED)}
	{% endif %}
	GCODE_AT_LAYER {% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor %} COMMAND="M220 S{SPEED|int}"
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	{% set dummy = params.SPEED|default(percentage)|int %}
	" %}

[gcode_macro flow_at_layer]
description = Convenience macro to schedule a flow percentage adjustment at the
	specified layer change. LAYER=next will cause the command to run at the next
	layer change. (FLOW parameter behaves the same as the M221 S parameter.)
	Usage: FLOW_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } FLOW=<percentage>
gcode = 
	{% set FLOW = params.FLOW|default(0)|int %}
	{% if FLOW < 1 or FLOW > 500 %}
	{action_raise_error("FLOW[%i] parameter between 1 and 500 is required."
	% FLOW)}
	{% endif %}
	GCODE_AT_LAYER {% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor %} COMMAND="M221 S{FLOW|int}"
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	{% set dummy = params.FLOW|default(percentage)|int %}
	" %}

[gcode_macro fan_at_layer]
description = Convenience macro to schedule a fan adjustment at the specified
	layer change. LAYER=next will cause the command to run at the next layer
	change. See SET_FAN_SCALING for additional arguments.
	Usage: FAN_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...
gcode = 
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	{% set dummy = params.SCALE|default(1.0)|float %}
	{% set dummy = params.BUMP|default(0)|int %}
	{% set dummy = params.MAXIMUM|default(0)|int %}
	{% set dummy = params.MINIMUM|default(255)|int %}
	{% set dummy = params.SPEED|default(current speed)|int %}
	" %}
	{% set filtered_params = params|reject('in',['HEIGHT','LAYER'])|list|sort %}
	{% if filtered_params|length == 0 %}
	{action_raise_error("No fan parameters provided.")}
	{% endif %}
	_CHECK_FAN_PARAMS{% for k in filtered_params %}{' '~k~'='~params[k]
	}{% endfor %}
	GCODE_AT_LAYER {% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor
	%} COMMAND="SET_FAN_SCALING{% for k in filtered_params %}{
	' ' ~ k ~ '=' ~ params[k]}{% endfor %}"

[gcode_macro heater_at_layer]
description = Convenience macro to schedule a heater adjustment at the specified
	layer change. LAYER=next will cause the command to run at the next layer
	change. See SET_HEATER_SCALING for additional arguments.
	Usage: HEATER_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...
gcode = 
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	{% set dummy = params.HEATER|default(e.g. extruder) %}
	{% set dummy = params.SCALE|default(1.0)|float %}
	{% set dummy = params.BUMP|default(0.0)|float %}
	{% set dummy = params.MAXIMUM|default(max_temp)|float %}
	{% set dummy = params.MINIMUM|default(min_temp)|float %}
	{% set dummy = params.TARGET|default(current target)|float %}
	" %}
	{% set filtered_params = params|reject('in',['HEIGHT','LAYER'])|list|sort %}
	_CHECK_HEATER_PARAMS{% for k in filtered_params%}{' ' ~ k ~ '=' ~ params[k]
	}{% endfor %}
	GCODE_AT_LAYER{% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor
	%} COMMAND="SET_HEATER_SCALING{% for k in filtered_params %}{
	' ' ~ k ~ '=\\\"' ~ params[k]|replace('\\','\\\\')|replace('\'','\\\'')
	|replace('\"','\\\"') ~ '\\\"'
	}{% endfor %}"

[gcode_macro park]
description = Park the toolhead
	Usage: PARK [P=<0|1|2>] [X=<pos>] [Y=<pos>] [Z=<pos>] [LAZY=<1|0>]
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set LAZY = params.LAZY|default(1)|int %}
	{% if printer.toolhead.homed_axes != "xyz" %}
	{% if LAZY %}
	LAZY_HOME
	{% else %}
	{action_raise_error("Must home axes first.")}
	{% endif %}
	{% endif %}
	
	
	{% set P = (params.P|default(2))|int %}
	{% set X = params.X|default(km.park_x)|float %}
	{% set Y = params.Y|default(km.park_y)|float %}
	{% set Z = params.Z|default(km.park_z)|float %}
	
	M400
	_CHECK_KINEMATIC_LIMITS X="{X}" Y="{Y}" Z="{Z}"
	_PARK_INNER X="{X}" Y="{Y}" Z="{Z}" P="{P}" LAZY="{LAZY}"
	
	{% set dummy = None if True else "
	{% set dummy = params.P|default(mode=<0|1|2>)|int %}
	{% set dummy = params.X|default(X position)|int %}
	{% set dummy = params.Y|default(Y position)|int %}
	{% set dummy = params.Z|default(Z position)|int %}
	" %}

[gcode_macro _park_inner]
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set travel_speed_xy = km.travel_speed_xy %}
	{% set travel_speed_z = km.travel_speed_z %}
	
	{% set position = printer.gcode_move.gcode_position %}
	{% set origin = printer.gcode_move.homing_origin%}
	
	
	
	{% set clearance_z = (printer["gcode_macro _km_layer_run"].clearance_z,
	position.z) | max %}
	{% set P = params.P|int %}
	{% set X = params.X|float - origin.x %}
	{% set Y = params.Y|float - origin.y %}
	{% set Z = params.Z|float %}
	{% set LAZY = params.LAZY|int %}
	
	
	{% if P == 0 %}
	{% if clearance_z > Z %}
	{% set Z = clearance_z %}
	{% endif %}
	{% elif P == 1 %}
	{% set Z = Z - origin.z %}
	{% elif P == 2 %}
	{% set Z = Z + clearance_z %}
	{% else %}
	{action_raise_error("Invalid parameter P=%i. Value must be 0, 1, or 2." |
	format(P)) }
	{% endif %}
	
	
	{% set Z = ((Z, printer.toolhead.axis_maximum.z - origin.z)|min,
	printer.toolhead.axis_minimum.z - origin.z)|max %}
	
	
	{% if (not LAZY) or P != 2 or X != position.x or Y != position.y
	or Z < clearance_z %}
	SAVE_GCODE_STATE NAME=_KM_PARK
	G90
	G0 Z{Z} F{travel_speed_z}
	G0 X{X} Y{Y} F{travel_speed_xy}
	RESTORE_GCODE_STATE NAME=_KM_PARK MOVE=0
	{% endif %}

[gcode_macro g27]
description = Parks the toolhead.
	Usage: G27 [P=<0|1|2>]
gcode = 
	
	PARK P={params.P|default(0)} {% for k in params|reject("in", "GP") %}{
	' '~k~'="'~params[k]~'"'
	}{% endfor %}

[gcode_macro pause]
description = Pauses the current print.
	Usage: PAUSE [X=<pos>] [Y=<pos>] [Z=<pos>] [E=<retract_length>] [B=<beeps>]
rename_existing = _KM_PAUSE_BASE
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% set E = (params.E|default(5))|float %}
	
	{% set B = params.B|default(10)|int if "output_pin beeper" in printer else 0
	%}
	
	{% if printer.pause_resume.is_paused %}
	{ action_respond_info("Print already paused") }
	{% elif printer.idle_timeout.state | string == "Printing" or
	(printer.virtual_sdcard|default({})).is_active|default(False) %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pausing RESET_STACK=1
	{% set position = printer.gcode_move.gcode_position %}
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_x VALUE="{position.x}"
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_y VALUE="{position.y}"
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_z VALUE="{position.z}"
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{E}"
	SAVE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE
	_KM_PAUSE_BASE
	M83
	{% if printer.extruder.can_extrude %}
	G1 E{'%.4f' % -E} F{km.load_speed}
	{% endif %}
	PARK P=2{% for k in params|select("in", "XYZ") %}{
	' '~k~'="'~params[k]~'"'}{% endfor %}
	
	{% for i in range(B) %}
	M300 P100
	G4 P200
	{% endfor %}
	{% else %}
	{ action_respond_info("Print not in progress") }
	{% endif %}

[gcode_macro m600]
description = Pauses the current print.
	Usage: M600 [B<beeps>] [E<pos>] [L<pos>] [R<temp>] [U<pos>] [X<pos>] [Y<pos>]
	[Z<pos>]
gcode = 
	PAUSE B="{0}" P=2{% for k in params|select("in", "EXYZ") %}{
	' '~k~'="'~params[k]~'"'}{% endfor %}
	UNLOAD_FILAMENT{% if 'U' in params %} LENGTH={params.U}{% endif
	%} BEEPS="{params.B|default(10)|int}"
	{% if 'R' in params %}M109 S{params.R}{% endif %}

[gcode_macro m601]
description = Pauses the current print.
	Usage: M601
gcode = 
	PAUSE

[gcode_macro m602]
description = Resumes the currently paused print.
	Usage: M602
gcode = 
	RESUME

[gcode_macro m24]
rename_existing = M24.6245197
gcode = 
	{% if printer.pause_resume.is_paused %}
	RESUME
	{% else %}
	M24.6245197
	{% endif %}

[gcode_macro m25]
rename_existing = M25.6245197
gcode = 
	PAUSE

[gcode_macro resume]
description = Resumes the currently paused print.
	Usage: RESUME [E<pos>]
rename_existing = _KM_RESUME_BASE
variable_saved_extruder_temp = 0
variable_saved_x = 0.0
variable_saved_y = 0.0
variable_saved_z = 0.0
variable_saved_e = 0.0
gcode = 
	{% if printer.pause_resume.is_paused %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% set extruder = printer[printer.toolhead.extruder] %}
	{% if extruder.target <= printer.configfile.settings[
	printer.toolhead.extruder].min_temp
	| float + 0.5 %}
	M109 S{saved_extruder_temp}
	{% endif %}
	
	
	
	{% if 'E' not in params and not saved_e %}
	{% set saved_e = 5.0 %}
	G1 E{'%.4f' % -saved_e } F{km.load_speed}
	{% endif %}
	
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"
	G90
	
	G0 X{saved_x} Y{saved_y} F{km.travel_speed_xy}
	G0 Z{saved_z} F{km.travel_speed_z}
	G91
	
	G1 E{'%.4f' % (params.E|default(saved_e))} F{km.load_speed}
	RESTORE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE MOVE=1
	_KM_RESUME_BASE
	{% else %}
	{ action_respond_info("Printer is not paused.") }
	{% endif %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=printing RESET_STACK=1

[gcode_macro clear_pause]
description = Clears the current pause state.
	Usage: CLEAR_PAUSE
rename_existing = _KM_CLEAR_PAUSE
gcode = 
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"
	_KM_CLEAR_PAUSE

[gcode_macro print_start]
description = Inserted by slicer at start of print. Rather than using this macro
	directly you should configure your slicer as instructed in the readme.
	Usage: PRINT_START BED=<temp> EXTRUDER=<temp> [CHAMBER=<temp>]
	[MESH_MIN=<x,y>] [MESH_MAX=<x,y>] [LAYERS=<num>]
	[NOZZLE_SIZE=<mm>]
gcode = 
	{action_respond_info(
	"This file is using an old The PRINT_START format. This print will run "
	"fine, but you should update your slicer config to take advantage of the "
	"phased PRINT_START macros. The slicer documentation is here:\n"
	"https://github.com/jschuh/klipper-macros\x23slicer-configuration"
	)}
	
	_PRINT_START_PHASE_INIT {rawparams}
	_PRINT_START_PHASE_PREHEAT
	_PRINT_START_PHASE_PROBING
	_PRINT_START_PHASE_EXTRUDER
	_PRINT_START_PHASE_PURGE

[gcode_macro _print_start_phase_init]
description = Inserted by slicer at start of print. Initializes PRINT_START
	phases.
	Usage: See PRINT_START.
gcode = 
	CHECK_KM_CONFIG
	SET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{False}"
	_KM_APPLY_PRINT_OFFSET RESET=1
	_PRINT_START_PHASE_CHECK PHASE=none
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% if not params.BED %}
	{% set dummy = params.__setitem__('BED', params.BED_TEMP|int) %}
	{% endif %}
	{% if not params.EXTRUDER %}
	{% set dummy = params.__setitem__('EXTRUDER', params.EXTRUDER_TEMP|int) %}
	{% endif %}
	
	
	PRINT_START_SET PRINT_START_PHASE="init" {% for k in params %}{' %s=\"%s\"' %
	(k,params[k]|replace('\\','\\\\')|replace('\'','\\\'')|replace('\"','\\\"'))
	}{% endfor %}
	
	
	_km_check_and_set_print_bounds
	
	M107
	CLEAR_PAUSE
	
	M140 S{params.BED}
	{% if params.CHAMBER %}M141 S{params.CHAMBER|int}{% endif %}
	{% if printer.bed_mesh %}BED_MESH_CLEAR{% endif %}
	
	{% if km.start_try_saved_surface_mesh and printer.bed_mesh %}
	LOAD_SURFACE_MESH
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="preheat"

[gcode_macro _print_start_phase_preheat]
description = Inserted by slicer at start of print. Handles the bed and chamber
	heating phases and ends when both are stabilized at their target temperatures.
	Usage: See PRINT_START.
gcode = 
	_PRINT_START_PHASE_CHECK PHASE=preheat
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set BED = print.BED|int %}
	{% set EXTRUDER = print.EXTRUDER|int %}
	{% set CHAMBER = print.CHAMBER|default(0)|int %}
	{% set LAYERS = print.LAYERS|default(0)|int %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% set bed_at_target = (BED + 0.4 - printer.heater_bed.temperature) |
	abs <= 0.6 %}
	PRINT_START_SET BED_AT_TARGET={1 if bed_at_target else 0}
	{% set start_level_bed_at_temp = km.start_level_bed_at_temp and
	not printer.bed_mesh.profile_name %}
	{% set actions_at_temp = start_level_bed_at_temp or
	km.start_quad_gantry_level_at_temp or
	km.start_z_tilt_adjust_at_temp or
	(km.start_home_z_at_temp and not bed_at_target) %}
	{% set bed_overshoot = (BED + (km.start_bed_heat_overshoot if
	(BED and not bed_at_target) else 0.0),
	printer.configfile.settings.heater_bed.max_temp ) | min %}
	
	INIT_LAYER_GCODE LAYERS="{LAYERS}"
	{% if CHAMBER > 0.0 %}
	M141 S{CHAMBER}
	{% endif %}
	
	M140 S{bed_overshoot}
	{% if actions_at_temp %}
	
	
	M104 S{km.start_extruder_probing_temp if km.start_extruder_probing_temp > 0
	else (km.start_extruder_preheat_scale * EXTRUDER)|round(0,'ceil')|int}
	{% else %}
	M104 S{EXTRUDER}
	{% endif %}
	
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing RESET_STACK=1
	G28
	G90
	{% if BED > 0.0 %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=bed_heating RESET_STACK=1
	
	{% if not bed_at_target %}
	PARK
	
	M190 S{bed_overshoot}
	G4 P{km.start_bed_heat_delay / 2}
	M190 R{BED}
	G4 P{km.start_bed_heat_delay / 2}
	{% endif %}
	{% endif %}
	
	{% if CHAMBER > 0.0 %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=chamber_heating RESET_STACK=1
	_KM_PARK_IF_NEEDED HEATER="chamber" RANGE=ABOVE
	M191 S{CHAMBER}
	{% endif %}
	
	{% if BED > 0.0 and bed_at_target%}
	M190 R{BED}
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="probing"

[gcode_macro _print_start_phase_probing]
description = Inserted by slicer at start of print. Performs probing (including
	mesh bed level) and other operations that should be run when the bed and
	chamber are stabilized at their target temps.
	Usage: See PRINT_START.
gcode = 
	_PRINT_START_PHASE_CHECK PHASE=probing
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set MESH_MIN = print.MESH_MIN|default(None) %}
	{% set MESH_MAX = print.MESH_MAX|default(None) %}
	
	{% if km.start_random_placement_max > 0 and print.PRINT_MIN and MESH_MIN %}
	{% set PRINT_MIN = print.PRINT_MIN.split(",")|map('float')|list %}
	{% set PRINT_MAX = print.PRINT_MAX.split(",")|map('float')|list %}
	{% set x_offset = (((km.print_max[0] - km.print_min[0] - PRINT_MAX[0] +
	PRINT_MIN[0] - 2 * km.start_random_placement_padding)|int,
	km.start_random_placement_max * 2)|min, 0)|max %}
	{% set y_offset = (((km.print_max[1] - km.print_min[1] - PRINT_MAX[1] +
	PRINT_MIN[1] - 2 * km.start_random_placement_padding)|int,
	km.start_random_placement_max * 2)|min, 0)|max %}
	{% if x_offset > 0 %}
	{% set x_offset = range(x_offset)|random + km.print_min[0] -
	PRINT_MIN[0] + km.start_random_placement_padding %}
	{% endif %}
	{% if y_offset > 0 %}
	{% set y_offset = range(y_offset)|random + km.print_min[1] -
	PRINT_MIN[1] + km.start_random_placement_padding %}
	{% endif %}
	
	
	{% set MESH_MIN = MESH_MIN.split(",")|map('float')|list %}
	{% set MESH_MAX = MESH_MAX.split(",")|map('float')|list %}
	{% set MESH_MIN_NEW = (MESH_MIN[0] + x_offset, MESH_MIN[1] + y_offset) %}
	{% set MESH_MAX_NEW = (MESH_MAX[0] + x_offset, MESH_MAX[1] + y_offset) %}
	{action_respond_info(
	"Relocating print origin from (%.3f,%.3f) "|format(*MESH_MIN) +
	"to (%.3f,%.3f)"|format(*MESH_MIN_NEW))}
	{% set MESH_MIN = (MESH_MIN_NEW[0], MESH_MIN_NEW[1])|join(',') %}
	{% set MESH_MAX = (MESH_MAX_NEW[0], MESH_MAX_NEW[1])|join(',') %}
	PRINT_START_SET PRINT_OFFSET={"%d,%d" % (x_offset,y_offset)}
	{% endif %}
	
	{% set EXTRUDER = print.EXTRUDER|int %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set start_level_bed_at_temp = km.start_level_bed_at_temp and
	not printer.bed_mesh.profile_name %}
	{% set start_home_z_at_temp = km.start_home_z_at_temp and
	not print.BED_AT_TARGET|int %}
	{% set actions_at_temp = start_level_bed_at_temp or
	km.start_quad_gantry_level_at_temp or
	km.start_z_tilt_adjust_at_temp or
	start_home_z_at_temp %}
	{% if actions_at_temp %}
	{% if km.start_extruder_probing_temp > 0 %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating RESET_STACK=1
	_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=2
	M109 R{km.start_extruder_probing_temp}
	{% else %}
	M104 S{EXTRUDER}
	{% endif %}
	{% if start_home_z_at_temp %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing RESET_STACK=1
	G28 Z
	{% endif %}
	{% if km.start_z_tilt_adjust_at_temp %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=calibrating_z RESET_STACK=1
	Z_TILT_ADJUST
	{% endif %}
	{% if km.start_quad_gantry_level_at_temp %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=leveling_gantry RESET_STACK=1
	QUAD_GANTRY_LEVEL
	{% endif %}
	{% if start_level_bed_at_temp %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=meshing RESET_STACK=1
	_km_mesh_if_needed {% if MESH_MIN %} MESH_MIN={MESH_MIN}{% endif
	%}{% if MESH_MAX %} MESH_MAX={MESH_MAX}{% endif %}
	{% endif %}
	{% if km.start_extruder_probing_temp > 0 %}
	M104 S{EXTRUDER}
	{% endif %}
	G4
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="extruder"

[gcode_macro _print_start_phase_extruder]
description = Inserted by slicer at start of print. Preheats the extruder.
	Usage: See PRINT_START.
gcode = 
	_PRINT_START_PHASE_CHECK PHASE=extruder
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set EXTRUDER = print.EXTRUDER|default(print.EXTRUDER_TEMP)|float %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	
	{% if EXTRUDER > 0 %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating RESET_STACK=1
	_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=ABOVE
	M109 S{EXTRUDER}
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="purge"

[gcode_macro _print_start_phase_purge]
description = Inserted by slicer at start of print. Generates purge lines.
	Usage: See PRINT_START.
gcode = 
	_PRINT_START_PHASE_CHECK PHASE=purge
	
	_KM_APPLY_PRINT_OFFSET
	
	_APPLY_BED_SURFACE_OFFSET
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set MESH_MIN = print.MESH_MIN|default(None) %}
	{% set MESH_MAX = print.MESH_MAX|default(None) %}
	{% set NOZZLE_SIZE = print.NOZZLE_SIZE|default(print.NOZZLE_SIZE)|
	default(printer.configfile.settings.extruder.nozzle_diameter)|float %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% if km.start_purge_length > 0.0 and printer.extruder.can_extrude %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=purging RESET_STACK=1
	DRAW_PURGE_LINE WIDTH="{NOZZLE_SIZE * 1.25}" HEIGHT="{NOZZLE_SIZE * 0.625
	}"{% if MESH_MIN %} PRINT_MIN={MESH_MIN}{% endif
	%}{% if MESH_MAX %} PRINT_MAX={MESH_MAX}{% endif %}
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="printing"
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=printing RESET_STACK=1

[gcode_macro _km_park_if_needed]
description = Parks the extruder if the current temperature of the supplied
	heater is not within the specified target range.
	Usage: _KM_PARK_IF_NEEDED HEATER=<heater> RANGE=[<percentage>|ABOVE|BELOW]
gcode = 
	
	{% set HEATER = params.HEATER if params.HEATER in
	printer.heaters.available_heaters else
	("heater_generic " ~ params.HEATER) %}
	{% set RANGE = (params.RANGE|default(1))|string|upper %}
	
	{% if printer[HEATER].target %}
	{% if RANGE == "ABOVE" %}
	{% if printer[HEATER].temperature < printer[HEATER].target %}
	PARK
	{% endif %}
	{% elif RANGE == "BELOW" %}
	{% if printer[HEATER].temperature > printer[HEATER].target %}
	PARK
	{% endif %}
	{% elif (printer[HEATER].temperature - printer[HEATER].target)|abs >
	(printer[HEATER].target * RANGE|float * 0.01)|abs %}
	PARK
	{% endif %}
	{% endif %}

[gcode_macro _km_apply_print_offset]
variable_offset = []
gcode = 
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% if params.RESET|default(0)|int and offset and
	not printer["gcode_macro _km_save_state"].is_ephemeral%}
	{% set PRINT_OFFSET = [offset.pop(0) * -1, offset.pop() * -1] %}
	{% elif print.PRINT_OFFSET and not offset and
	not printer["gcode_macro _km_save_state"].is_ephemeral %}
	{% set PRINT_OFFSET = print.PRINT_OFFSET.split(",")|map('float')|list %}
	{% set dummy = offset.extend(PRINT_OFFSET) %}
	{% endif %}
	
	{% if PRINT_OFFSET %}
	_KM_SET_GCODE_OFFSET_BASE {"X_ADJUST=%.2f Y_ADJUST=%.2f"|
	format(*PRINT_OFFSET)}
	{% endif %}

[gcode_macro _km_mesh_if_needed]
gcode = 
	
	
	
	{% if not printer.bed_mesh.profile_name %}
	BED_MESH_CALIBRATE_FAST {rawparams}
	{% endif %}

[gcode_macro print_start_set]
description = Inserted by slicer to set values used by PRINT_START.
	Usage: PRINT_START_SET <VARIABLE>=<value>
variable_print = {}
gcode = 
	{%for k in params %}
	{% set dummy = print.__setitem__(k|upper, params[k]) %}
	{% endfor %}

[gcode_macro _print_start_phase_check]
gcode = 
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set PRINT_START_PHASE = print.PRINT_START_PHASE|default("none") %}
	{% if PRINT_START_PHASE != params.PHASE %}
	
	SET_GCODE_VARIABLE MACRO=print_start_set VARIABLE=print VALUE="{{}}"
	{% if params.PHASE != 'none' %}
	{% set error = "PRINT_START phase error. Expected '%s' but found '%s'" %
	(params.PHASE, PRINT_START_PHASE) %}
	
	{% if not 'virtual_sdcard' in printer or
	not printer.virtual_sdcard.is_active or 'CANCEL_PRINT' not in
	printer.configfile.settings.virtual_sdcard.on_error_gcode|
	default("")|upper %}
	{action_respond_info(error)}
	CANCEL_PRINT
	{% else %}
	{action_raise_error(error)}
	{% endif %}
	{% else %}
	{ action_respond_info("Expected phase '%s' but found '%s'. Resetting."
	% (params.PHASE, PRINT_START_PHASE)) }
	{% endif %}
	{% endif %}

[gcode_macro print_end]
description = Inserted by slicer at end of print.
	Usage: PRINT_END
gcode = 
	_KM_CHECK_IS_PRINTING
	M400
	_PRINT_END_INNER
	
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% if km.start_clear_adjustments_at_end != 0 %}
	RESET_HEATER_SCALING
	RESET_FAN_SCALING
	M220 S100
	M221 S100
	{% endif %}
	_RESET_LAYER_GCODE
	_RESET_VELOCITY_LIMITS
	TURN_OFF_HEATERS
	M107; turn off fan
	{% if printer.bed_mesh %}BED_MESH_CLEAR{% endif %}
	
	{% if printer.toolhead.homed_axes|lower == "xyz" %}
	PARK Y="{km.start_end_park_y}"
	{% endif %}
	M84
	CLEAR_PAUSE
	SET_GCODE_VARIABLE MACRO=print_start_set VARIABLE=print VALUE="{{}}"
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready RESET_STACK=1

[gcode_macro _print_end_inner]
variable_cancelled = False
gcode = 
	SET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{False}"
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set toolhead = printer.toolhead %}
	{% set origin = printer.gcode_move.homing_origin%}
	{% set max_x = km.print_max[0] - origin.x %}
	{% set max_y = km.print_max[1] - origin.y %}
	{% set max_z = toolhead.axis_maximum.z - origin.z %}
	
	{% if not cancelled %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=completing
	{% endif %}
	
	{% if printer.extruder.can_extrude %}
	
	{% if not printer.pause_resume.is_paused and not cancelled and
	toolhead.homed_axes|lower == "xyz" %}
	{% set x_safe = (max_x - toolhead.position.x, 2.0)|min %}
	{% set y_safe = (max_y - toolhead.position.y, 2.0)|min %}
	{% set z_safe = (max_z - toolhead.position.z, 2.0)|min %}
	G91
	G0 Z{z_safe} E-1.0 F{km.travel_speed_z * 2}
	G0 X{x_safe} Y{y_safe} E-1.0 F{km.travel_speed_xy}
	
	_KM_APPLY_PRINT_OFFSET RESET=1
	{% endif %}
	
	
	G92 E0
	G1 E-5.0 F3600
	M400
	{% endif %}

[gcode_macro _km_check_is_printing]
variable_debug_state = False
description = Throws an error if print is not currently in progress.
gcode = 
	{% if not debug_state and
	printer.idle_timeout.state|string != "Printing" and
	not (printer.virtual_sdcard|default({})).is_active|default(False) and
	not printer.pause_resume.is_paused %}
	{ action_raise_error("No active print.") }
	{% endif %}

[gcode_macro _km_check_and_set_print_bounds]
description = Validates all print bounds and caches their values.
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set print = printer["gcode_macro print_start_set"].print %}
	
	
	{% if print.MESH_MIN %}
	{% set MESH_MIN = print.MESH_MIN.split(",")|map('float')|list %}
	{% set MESH_MAX = print.MESH_MAX.split(",")|map('float')|list %}
	{%if MESH_MIN[0] < km.print_min[0] or MESH_MIN[1] < km.print_min[1] %}
	{action_raise_error("MESH_MIN %s is outside the printable bounds" %
	(MESH_MIN|string, km.print_min|string))}
	{%elif MESH_MAX[0] > km.print_max[0] or MESH_MAX[1] > km.print_max[1] %}
	{action_raise_error("MESH_MAX %s is outside the printable bounds %s" %
	(MESH_MAX|string, km.print_max|string))}
	{% endif %}
	{% endif %}
	
	
	{% set points = [] %}
	{% if print.MODEL_MIN or print.MODEL_MAX %}
	{% set MODEL_MIN = print.MODEL_MIN.split(",")|map('float')|list %}
	{% set MODEL_MAX = print.MODEL_MAX.split(",")|map('float')|list %}
	{% set points = [MODEL_MIN, MODEL_MAX] %}
	{% endif %}
	{% if (printer.exclude_object|default({})).objects %}
	{% set points = printer.exclude_object.objects|selectattr('polygon')|
	map(attribute='polygon')|sum(start=points) %}
	{% set points_len = points|length %}
	{% if points_len >= 2 %}
	{% set x_coords = (points|map(attribute=0)|sort|list)[0::points_len-1] %}
	{% set y_coords = (points|map(attribute=1)|sort|list)[0::points_len-1] %}
	{% set MODEL_MIN = (x_coords[0],y_coords[0])|map('float')|list %}
	{% set MODEL_MAX = (x_coords[1],y_coords[1])|map('float')|list %}
	PRINT_START_SET MODEL_MIN="{MODEL_MIN|join(',')
	}" MODEL_MAX="{MODEL_MAX|join(',')}"
	{% endif %}
	{% endif %}
	
	{% if MODEL_MIN %}
	
	{% if MODEL_MIN[0] < km.print_min[0] or MODEL_MIN[1] < km.print_min[1] %}
	{action_raise_error("MODEL_MIN %s is outside the printable bounds" %
	(MODEL_MIN|string, km.print_min|string))}
	{% elif MODEL_MAX[0] > km.print_max[0] or MODEL_MAX[1] > km.print_max[1] %}
	{action_raise_error("MODEL_MAX %s is outside the printable bounds %s" %
	(MODEL_MAX|string, km.print_max|string))}
	{% endif %}
	{% endif %}
	
	
	{% if MESH_MIN and MODEL_MIN %}
	PRINT_START_SET PRINT_MIN="{((MODEL_MIN[0],MESH_MIN[0])|min,
	(MODEL_MIN[1],MESH_MIN[1])|min)|join(',')
	}" PRINT_MAX="{((MODEL_MAX[0],MESH_MAX[0])|max,
	(MODEL_MAX[1],MESH_MAX[1])|max)|join(',')}"
	{% else %}
	PRINT_START_SET PRINT_MIN="{km.print_min|join(',')
	}" PRINT_MAX="{km.print_max|join(',')}"
	{% endif %}

[gcode_macro _km_save_state]
description = Tracks gcode state.
variable_state_set = {}
variable_is_ephemeral = 0
gcode = 
	{% if params.SAVE|int %}
	{% set dummy = state_set.__setitem__(params.NAME, None) %}
	{% else %}
	{% set dummy = state_set.__delitem__(params.NAME) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=_km_save_state VARIABLE=is_ephemeral VALUE="{
	1 if state_set|length > 0 else 0 }"

[gcode_macro save_gcode_state]
description = Wraps SAVE_GCODE_STATE to track persistence state.
	Usage: See Klipper documentation
rename_existing = _KM_SAVE_GCODE_STATE
gcode = 
	_KM_SAVE_GCODE_STATE {rawparams}
	{% set NAME = params.NAME|default("default") %}
	_km_save_state NAME={NAME} SAVE=1

[gcode_macro restore_gcode_state]
description = Wraps RESTORE_GCODE_STATE to track persistence state.
	Usage: See Klipper documentation
rename_existing = _KM_RESTORE_GCODE_STATE
gcode = 
	_KM_RESTORE_GCODE_STATE {rawparams}
	{% set NAME = params.NAME|default("default") %}
	_km_save_state NAME={NAME} SAVE=0

[gcode_macro _abort_on_gcode_state]
gcode = 
	{% set save_state = printer["gcode_macro _km_save_state"] %}
	{% if save_state.is_ephemeral %}
	{action_raise_error("Encountered unexpected save state " +
	save_state.state_set|list|sort|string)}
	{% endif %}

[gcode_macro _km_print_status]
variable_last_status = 'none'
variable_status_stack = []
variable_command_list = {}
variable_status_list = [
	'ready',
	'filament_load',
	'filament_unload',
	'bed_heating',
	'chamber_heating',
	'homing',
	'leveling_gantry',
	'calibrating_z',
	'meshing',
	'extruder_heating',
	'purging',
	'printing',
	'pausing',
	'cancelling',
	'completing',
	]
gcode = 
	{% set ACTION = params.ACTION|trim|upper %}
	{% set STATUS = params.STATUS|default("")|trim|lower %}
	
	
	{% if ACTION == "ADD_EVENT" %}
	{% set COMMAND = params.COMMAND %}
	{% set ARGS = params.ARGS|default(0)|int != 0 %}
	{% set TYPE = params.TYPE|default('ENTER')|trim|upper %}
	{% set WHEN = params.WHEN|default('PRINTING')|trim|upper %}
	{% set FILTER_ENTER =
	(params.FILTER_ENTER|default("")|trim|lower).split(',')|
	select()|unique|list %}
	{% set FILTER_LEAVE =
	(params.FILTER_LEAVE|default("")|trim|lower).split(',')|
	select()|unique|list %}
	
	{% set STATUSES = STATUS.split(',')|map('trim')|list %}
	{% for s in (STATUSES if STATUSES[0] != 'all' else status_list) %}
	{% if not s in command_list %}
	{% set dummy = command_list.__setitem__(s,[]) %}
	{% endif %}
	{% set dummy = command_list[s].append({'cmd':COMMAND, 'args':ARGS,
	'type':TYPE, 'when':WHEN,
	'filt_e':FILTER_ENTER,
	'filt_l':FILTER_LEAVE}) %}
	{% endfor %}
	
	
	{% elif ACTION == "CHANGE" %}
	{% if params.RESET_STACK|default(0)|int %}
	{% for dummy in range(status_stack|length) %}
	{% set dummy = status_stack.pop() %}
	{% endfor %}
	
	
	{% elif STATUS == "pop_status" %}
	{% set STATUS = (status_stack|default(['ready'], True)).pop() %}
	{% endif %}
	
	{% if STATUS not in status_list %}
	{action_raise_error("Status '%s' not valid."|format(STATUS))}
	{% endif %}
	
	{% if STATUS != last_status %}
	{% set is_printing =
	printer["gcode_macro print_start_set"].print.PRINT_START_PHASE|
	default("")|length != 0 %}
	{% set print_states = ('ALWAYS', 'PRINTING' if is_printing else 'IDLE') %}
	
	{% for c in command_list[last_status]|default([]) %}
	{% if c.type in ('BOTH','LEAVE') and c.when in print_states and
	(not c.filt_l or STATUS in c.filt_l) %}
	M400
	{c.cmd}{% if c.args %} TYPE=LEAVE WHEN={print_states[1]
	} LAST_STATUS={last_status} NEXT_STATUS={STATUS}{% endif %}
	{% endif %}
	{% endfor %}
	
	{% for c in command_list[STATUS]|default([]) %}
	{% if c.type in ('BOTH','ENTER') and c.when in print_states and
	(not c.filt_e or STATUS in c.filt_e) %}
	M400
	{c.cmd}{% if c.args %} TYPE=ENTER WHEN={print_states[1]
	} LAST_STATUS={last_status} NEXT_STATUS={STATUS}{% endif %}
	{% endif %}
	{% endfor %}
	SET_GCODE_VARIABLE MACRO=_km_print_status VARIABLE=last_status VALUE="'{
	STATUS}'"
	{% endif %}
	
	
	{% elif ACTION == "PUSH_STATUS" %}
	{% set dummy = status_stack.append(last_status) %}
	
	
	{% else %}
	{action_raise_error("Action '%s' not valid."|format(ACTION))}
	{% endif %}

[gcode_macro gcode_on_print_status]
description = Adds a gcode command for a status event.
	Usage: GCODE_ON_PRINT_STATUS STATUS=<status> COMMAND=<gcode> [ARGS=<1|0>]
	[WHEN=<PRINTING|IDLE|ALWAYS>]
	[TYPE=<ENTER|LEAVE|BOTH>]
	[FILTER_ENTER=<status list>]
	[FILTER_LEAVE=<status list>]
gcode = 
	{% set STATUS = (params.STATUS|lower).split(',')|map('trim')|list %}
	{% set TYPE = params.TYPE|default('ENTER')|trim|upper %}
	{% set WHEN = params.WHEN|default('PRINTING')|trim|upper %}
	{% set FILTER_ENTER =
	(params.FILTER_ENTER|default("")|trim|lower).split(',')|select()|list %}
	{% set FILTER_LEAVE =
	(params.FILTER_LEAVE|default("")|trim|lower).split(',')|select()|list %}
	
	
	{% set status_list = printer["gcode_macro _km_print_status"].status_list %}
	{% for s in STATUS %}
	{% if not (s in status_list or s == 'all' and STATUS|length == 1) %}
	{action_raise_error("STATUS parameter '%s' not valid."|format(s))}
	{% endif %}
	{% endfor %}
	
	{% if TYPE not in ('ENTER', 'LEAVE', 'BOTH') %}
	{action_raise_error("TYPE paramater '%s' not valid."|format(TYPE))}
	{% elif WHEN not in ('PRINTING', 'IDLE', 'ALWAYS') %}
	{action_raise_error("WHEN parameter '%s' not valid."|format(WHEN))}
	{% elif TYPE == 'ENTER' and FILTER_LEAVE %}
	{action_raise_error("FILTER_LEAVE not valid with TYPE=ENTER.")}
	{% elif TYPE == 'LEAVE' and FILTER_ENTER %}
	{action_raise_error("FILTER_ENTER not valid with TYPE=LEAVE.")}
	{% endif %}
	{% for f in FILTER_ENTER %}
	{% if f not in status_list %}
	{action_raise_error("FILTER_ENTER parameter '%s' not valid."|format(f))}
	{% endif %}
	{% endfor %}
	{% for f in FILTER_LEAVE %}
	{% if f not in status_list %}
	{action_raise_error("FILTER_LEAVE parameter '%s' not valid."|format(f))}
	{% endif %}
	{% endfor %}
	
	
	_KM_PRINT_STATUS ACTION=ADD_EVENT {rawparams}

[gcode_macro m201]
description = Sets maximum accelleration.
	Usage: M201 [X<accel>] [Y<accel>]
variable_max_accel = 1.7976931348623157e+308
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% if 'X' in params or 'Y' in params %}
	{% set accel = (params.X|default(params.Y)|float,
	params.Y|default(params.X)|float)|min %}
	SET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{accel}"
	{% else %}
	SET_VELOCITY_LIMIT
	{% endif %}

[gcode_macro m203]
description = Sets maximum velocity.
	Usage: M203 [X<velocity>] [Y<velocity>]
gcode = 
	{% if 'X' in params or 'Y' in params %}
	{% set velocity = (params.X|default(params.Y)|float,
	params.Y|default(params.X)|float)|min %}
	SET_VELOCITY_LIMIT VELOCITY="{velocity}"
	{% else %}
	SET_VELOCITY_LIMIT
	{% endif %}

[gcode_macro m205]
description = Sets square corner velocity.
	Usage: M203 [X<velocity>] [Y<velocity>]
gcode = 
	{% if 'X' in params or 'Y' in params %}
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY="{
	(params.X|default(0)|float, params.Y|default(0)|float)|min}"
	{% else %}
	SET_VELOCITY_LIMIT
	{% endif %}

[gcode_macro m900]
description = Sets pressure advance.
	Usage: M900 [K<advance>] [T<extruder_index>]
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% if km.pressure_advance_scale > 0.0 %}
	{% set extruder = "extruder" ~ params.T|replace('0', '')
	if "T" in params else printer.toolhead.extruder %}
	{% if 'K' in params %}
	SET_PRESSURE_ADVANCE EXTRUDER="{extruder}" ADVANCE="{
	params.K|float * km.pressure_advance_scale}"
	{% endif %}
	{% endif %}

[gcode_macro _reset_velocity_limits]
description = Sets maximum accelleration.
	Usage: M204 [S<accel>] [P<accel> T<accel>]
gcode = 
	SET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{1.7976931348623157e+308}"

[gcode_macro bed_mesh_calibrate]
rename_existing = _KM_BED_MESH_CALIBRATE_BASE
description = Wraps BED_MESH_CALIBRATE, scaling probe count to specified area.
	Usage: See Klipper documentation.
gcode = 
	BED_MESH_CALIBRATE_FAST{%for k in params%}{' '~k~'="'~params[k]~'"'}{%endfor%}

[gcode_macro g29]
gcode = 
	BED_MESH_CALIBRATE

[idle_timeout]
gcode = 
	_KM_IDLE_TIMEOUT

[respond]

[gcode_macro PRINT_START]
rename_existing = KM_PRINT_START
gcode = 
	
	STATUS_HOMING
	KM_PRINT_START {rawparams}
	STATUS_PRINTING

[board_pins EBB36_G0B1_v1.2]
mcu = ebbcan
aliases = 
aliases_step = 
	EXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15
aliases_limitsw = 
	LIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6
aliases_bltouch = 
	PROBE_1=PB9,PROBE_2=PB8
aliases_fans = 
	FAN0=PA1,FAN1=PA0
aliases_thermistors = 
	TH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7
aliases_heaters = 
	HE0=PB13
aliases_rgb = 
	RGBLED=PD3
aliases_adxl = 
	ADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11
aliases_i2c = 
	AUX0=PB3,AUX1=PB4

[neopixel sb_leds]
pin = ebbcan:RGBLED
chain_count = 3
color_order = RGB
initial_red = 0.0
initial_green = 0.0
initial_blue = 0.0
initial_white = 1.0

[save_variables]
filename = ~/printer_data/variables.cfg

[mcu CB1]
serial = /tmp/klipper_host_mcu

[mcu]
canbus_uuid = f94e10a9add8

[mcu ebbcan]
canbus_uuid = 57244ec148c0

[printer]
kinematics = corexy
max_velocity = 600
max_accel = 10000
max_accel_to_decel = 5000
max_z_velocity = 5
max_z_accel = 100

[stepper_x]
step_pin = PE2
dir_pin = !PB4
enable_pin = !PC11
microsteps = 16
rotation_distance = 40
endstop_pin = !ebbcan:LIMIT_2
position_endstop = 220
position_min = -4
position_max = 220
homing_speed = 50

[tmc2209 stepper_x]
uart_pin = PC10
diag_pin = PF3
run_current = 1.1

[tmc2209 stepper_y]
uart_pin = PF13
diag_pin = PF4
run_current = 1.1

[tmc2209 stepper_z]
uart_pin = PF9
diag_pin = PF5
run_current = 0.650

[tmc2209 extruder]
uart_pin = ebbcan:EXT_UART
diag_pin = ebbcan:LIMIT_3
run_current = 0.650

[stepper_y]
step_pin = PF12
dir_pin = !PF11
enable_pin = !PB3
microsteps = 16
rotation_distance = 40
endstop_pin = ^PF3
position_endstop = 220
position_min = -4
position_max = 220
homing_speed = 50

[stepper_z]
step_pin = PD7
dir_pin = !PD6
enable_pin = !PF10
microsteps = 16
rotation_distance = 8
endstop_pin = probe:z_virtual_endstop
position_max = 300
position_min = -3

[heater_bed]
heater_pin = PB7
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PA0
min_temp = 0
max_temp = 130
control = pid
pid_kp = 63.528
pid_ki = 0.875
pid_kd = 1153.041

[temperature_sensor raspberry_pi]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor mcu_temp]
sensor_type = temperature_mcu
min_temp = 0
max_temp = 100

[controller_fan MCU_Fan]
pin = PE6
heater = extruder
fan_speed = 1

[heater_fan heatbreak_cooling_fan]
pin = ebbcan:FAN0
kick_start_time = 0.25
heater = extruder
heater_temp = 50.0
fan_speed = 1

[fan]
pin = ebbcan:FAN1

[safe_z_home]
home_xy_position = 140, 140
speed = 100
z_hop = 10
z_hop_speed = 20

[extruder]
step_pin = ebbcan:EXT_STEP
dir_pin = ebbcan:EXT_DIR
enable_pin = !ebbcan:EXT_EN
microsteps = 16
rotation_distance = 4.71
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.750
max_extrude_only_distance = 101.0
heater_pin = ebbcan:HE0
sensor_type = ATC Semitec 104NT-4-R025H42G
sensor_pin = ebbcan:TH0
min_temp = 0
max_temp = 300
max_extrude_cross_section = 5
pressure_advance = 0.02
control = pid
pid_kp = 20.603
pid_ki = 0.988
pid_kd = 107.392

[bltouch]
sensor_pin = ebbcan:PROBE_2
control_pin = ebbcan:PROBE_1
x_offset = -40
y_offset = -17
samples = 2
samples_tolerance = 0.015
samples_tolerance_retries = 5
z_offset = 2.849

[bed_mesh]
speed = 100
horizontal_move_z = 5
mesh_min = 10, 27
mesh_max = 173, 200
probe_count = 5, 5
algorithm = bicubic
fade_start = 1
fade_end = 10

[bed_screws]
screw1 = 55,55
screw2 = 200,55
screw3 = 200,205
screw4 = 55,205

[screws_tilt_adjust]
screw1 = 65,55
screw1_name = front left screw
screw2 = 218,55
screw2_name = front right screw
screw3 = 218,215
screw3_name = rear right screw
screw4 = 65,215
screw4_name = rear left screw
horizontal_move_z = 10
speed = 50
screw_thread = CW-M4

[display]
lcd_type = st7920
cs_pin = PB12
sclk_pin = PB13
sid_pin = PB15
encoder_pins = ^PB14, ^PB10
click_pin = ^!PB2

[exclude_object]

[firmware_retraction]
retract_length = 0.4
retract_speed = 20
unretract_extra_length = 0
unretract_speed = 10

[input_shaper]
shaper_type_x = 2hump_ei
shaper_freq_x = 86.2
shaper_type_y = zv
shaper_freq_y = 44.8

[gcode_arcs]
resolution = 1.0

[adxl345]
cs_pin = ebbcan:ADXL_CS
spi_software_sclk_pin = ebbcan:ADXL_SCLK
spi_software_mosi_pin = ebbcan:ADXL_MOSI
spi_software_miso_pin = ebbcan:ADXL_MISO

[resonance_tester]
accel_chip = adxl345
probe_points = 
	120,120,20

[bed_mesh default]
version = 1
points = 
	0.027500, 0.058750, 0.091250, 0.182500
	-0.003750, 0.061250, 0.072500, 0.125000
	0.021250, 0.016250, 0.013750, 0.033750
	-0.023750, -0.018750, -0.036250, -0.037500
x_count = 4
y_count = 4
mesh_x_pps = 2
mesh_y_pps = 2
algo = bicubic
tension = 0.2
min_x = 48.75
max_x = 171.24
min_y = 48.75
max_y = 171.24
=======================
Extruder max_extrude_ratio=2.078758
mcu 'mcu': Starting CAN connect
Created a socket
webhooks client 281473550818848: New connection
webhooks client 281473550818848: Client info {'program': 'Moonraker', 'version': 'v0.8.0-92-g504a3a7'}
Loaded MCU 'mcu' 109 commands (v0.11.0-241-gffb5105b / gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2)
MCU 'mcu' config: ADC_MAX=4095 BUS_PINS_i2c1_PA9_PA10=PA9,PA10 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_i2c2_PB13_PB14=PB13,PB14 BUS_PINS_i2c3_PB3_PB4=PB3,PB4 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3=PB4,PB5,PB3 CANBUS_BRIDGE=1 CLOCK_FREQ=64000000 MCU=stm32g0b1xx PWM_MAX=255 RECEIVE_WINDOW=192 RESERVE_PINS_CAN=PD12,PD13 RESERVE_PINS_USB=PA11,PA12 RESERVE_PINS_crystal=PF0,PF1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
mcu 'CB1': Starting connect
Loaded MCU 'CB1' 113 commands (v0.11.0-241-gffb5105b / gcc: (Debian 10.2.1-6) 10.2.1 20210110 binutils: (GNU Binutils for Debian) 2.35.2)
MCU 'CB1' config: ADC_MAX=4095 CLOCK_FREQ=50000000 MCU=linux PCA9685_MAX=4096 PWM_MAX=32768 STATS_SUMSQ_BASE=256
mcu 'ebbcan': Starting CAN connect
Created a socket
mcu 'ebbcan': got {'count': 510, 'sum': 593414, 'sumsq': 5609344, '#name': 'stats', '#sent_time': 408.889141861, '#receive_time': 408.909239861}
Loaded MCU 'ebbcan' 109 commands (v0.11.0-241-gffb5105b / gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2)
MCU 'ebbcan' config: ADC_MAX=4095 BUS_PINS_i2c1_PA9_PA10=PA9,PA10 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_i2c2_PB13_PB14=PB13,PB14 BUS_PINS_i2c3_PB3_PB4=PB3,PB4 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3=PB4,PB5,PB3 CANBUS_FREQUENCY=1000000 CLOCK_FREQ=64000000 MCU=stm32g0b1xx PWM_MAX=255 RECEIVE_WINDOW=192 RESERVE_PINS_CAN=PB0,PB1 RESERVE_PINS_crystal=PF0,PF1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
mcu_temperature 'mcu' nominal base=-268.847262 slope=1298.126801
Sending MCU 'mcu' printer configuration...
Configured MCU 'mcu' (1024 moves)
Sending MCU 'CB1' printer configuration...
Configured MCU 'CB1' (1024 moves)
Sending MCU 'ebbcan' printer configuration...
Configured MCU 'ebbcan' (1024 moves)
Starting heater checks for heater_bed
bed_mesh: generated points
Index |  Tool Adjusted  |   Probe
  0   | (50.0, 44.0)    | (10.0, 27.0)
  1   | (90.8, 44.0)    | (50.8, 27.0)
  2   | (131.5, 44.0)   | (91.5, 27.0)
  3   | (172.2, 44.0)   | (132.2, 27.0)
  4   | (213.0, 44.0)   | (173.0, 27.0)
  5   | (213.0, 87.2)   | (173.0, 70.2)
  6   | (172.2, 87.2)   | (132.2, 70.2)
  7   | (131.5, 87.2)   | (91.5, 70.2)
  8   | (90.8, 87.2)    | (50.8, 70.2)
  9   | (50.0, 87.2)    | (10.0, 70.2)
  10  | (50.0, 130.5)   | (10.0, 113.5)
  11  | (90.8, 130.5)   | (50.8, 113.5)
  12  | (131.5, 130.5)  | (91.5, 113.5)
  13  | (172.2, 130.5)  | (132.2, 113.5)
  14  | (213.0, 130.5)  | (173.0, 113.5)
  15  | (213.0, 173.8)  | (173.0, 156.8)
  16  | (172.2, 173.8)  | (132.2, 156.8)
  17  | (131.5, 173.8)  | (91.5, 156.8)
  18  | (90.8, 173.8)   | (50.8, 156.8)
  19  | (50.0, 173.8)   | (10.0, 156.8)
  20  | (50.0, 217.0)   | (10.0, 200.0)
  21  | (90.8, 217.0)   | (50.8, 200.0)
  22  | (131.5, 217.0)  | (91.5, 200.0)
  23  | (172.2, 217.0)  | (132.2, 200.0)
  24  | (213.0, 217.0)  | (173.0, 200.0)
Starting heater checks for extruder
Stats 410.6: gcodein=0  mcu: mcu_awake=0.043 mcu_task_avg=0.000014 mcu_task_stddev=0.000009 bytes_write=3725 bytes_read=5766 bytes_retransmit=0 bytes_invalid=0 send_seq=233 receive_seq=230 retransmit_seq=0 srtt=0.003 rttvar=0.002 rto=0.025 ready_bytes=1109 upcoming_bytes=10 freq=64006783 CB1: mcu_awake=0.004 mcu_task_avg=0.000026 mcu_task_stddev=0.000018 bytes_write=819 bytes_read=4523 bytes_retransmit=0 bytes_invalid=0 send_seq=112 receive_seq=112 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999601 adj=49993850 ebbcan: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=1479 bytes_read=4814 bytes_retransmit=0 bytes_invalid=0 send_seq=156 receive_seq=156 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000894 adj=64000088  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=60.6 mcu_temp: temp=35.4 sysload=0.88 cputime=66.760 memavail=694876 print_time=0.010 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
webhooks: registering remote method 'shutdown_machine' for connection id: 281473550818848
webhooks: registering remote method 'reboot_machine' for connection id: 281473550818848
webhooks: registering remote method 'pause_job_queue' for connection id: 281473550818848
webhooks: registering remote method 'start_job_queue' for connection id: 281473550818848
Active bed surface: default; offset: -0.050
Stats 411.7: gcodein=0  mcu: mcu_awake=0.043 mcu_task_avg=0.000014 mcu_task_stddev=0.000009 bytes_write=4960 bytes_read=6023 bytes_retransmit=0 bytes_invalid=0 send_seq=256 receive_seq=256 retransmit_seq=0 srtt=0.004 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64004069 CB1: mcu_awake=0.004 mcu_task_avg=0.000026 mcu_task_stddev=0.000018 bytes_write=825 bytes_read=4539 bytes_retransmit=0 bytes_invalid=0 send_seq=113 receive_seq=113 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999609 adj=49994807 ebbcan: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=1485 bytes_read=4890 bytes_retransmit=0 bytes_invalid=0 send_seq=157 receive_seq=157 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000829 adj=63990243  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=61.0 mcu_temp: temp=35.7 sysload=0.88 cputime=67.033 memavail=689756 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 412.7: gcodein=0  mcu: mcu_awake=0.043 mcu_task_avg=0.000014 mcu_task_stddev=0.000009 bytes_write=4966 bytes_read=6126 bytes_retransmit=0 bytes_invalid=0 send_seq=257 receive_seq=257 retransmit_seq=0 srtt=0.003 rttvar=0.003 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64002478 CB1: mcu_awake=0.004 mcu_task_avg=0.000026 mcu_task_stddev=0.000018 bytes_write=831 bytes_read=4555 bytes_retransmit=0 bytes_invalid=0 send_seq=114 receive_seq=114 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999632 adj=49998973 ebbcan: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=1491 bytes_read=4951 bytes_retransmit=0 bytes_invalid=0 send_seq=158 receive_seq=158 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000528 adj=63996747  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=61.5 mcu_temp: temp=35.7 sysload=0.88 cputime=67.118 memavail=689532 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 413.7: gcodein=0  mcu: mcu_awake=0.043 mcu_task_avg=0.000014 mcu_task_stddev=0.000009 bytes_write=4972 bytes_read=6258 bytes_retransmit=0 bytes_invalid=0 send_seq=258 receive_seq=258 retransmit_seq=0 srtt=0.003 rttvar=0.003 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001848 CB1: mcu_awake=0.004 mcu_task_avg=0.000026 mcu_task_stddev=0.000018 bytes_write=837 bytes_read=4571 bytes_retransmit=0 bytes_invalid=0 send_seq=115 receive_seq=115 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999689 adj=50001201 ebbcan: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=1497 bytes_read=5027 bytes_retransmit=0 bytes_invalid=0 send_seq=159 receive_seq=159 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000864 adj=63999761  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=60.3 mcu_temp: temp=35.6 sysload=0.88 cputime=67.151 memavail=689836 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 414.7: gcodein=0  mcu: mcu_awake=0.110 mcu_task_avg=0.000037 mcu_task_stddev=0.000166 bytes_write=4978 bytes_read=6378 bytes_retransmit=0 bytes_invalid=0 send_seq=259 receive_seq=259 retransmit_seq=0 srtt=0.003 rttvar=0.003 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001564 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000015 bytes_write=843 bytes_read=4600 bytes_retransmit=0 bytes_invalid=0 send_seq=116 receive_seq=116 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999794 adj=50001760 ebbcan: mcu_awake=0.006 mcu_task_avg=0.000016 mcu_task_stddev=0.000028 bytes_write=1503 bytes_read=5103 bytes_retransmit=0 bytes_invalid=0 send_seq=160 receive_seq=160 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000668 adj=64001652  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=60.6 mcu_temp: temp=35.6 sysload=0.88 cputime=67.188 memavail=691060 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 415.7: gcodein=0  mcu: mcu_awake=0.110 mcu_task_avg=0.000037 mcu_task_stddev=0.000166 bytes_write=4984 bytes_read=6481 bytes_retransmit=0 bytes_invalid=0 send_seq=260 receive_seq=260 retransmit_seq=0 srtt=0.002 rttvar=0.003 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001508 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000015 bytes_write=849 bytes_read=4616 bytes_retransmit=0 bytes_invalid=0 send_seq=117 receive_seq=117 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999783 adj=50001759 ebbcan: mcu_awake=0.006 mcu_task_avg=0.000016 mcu_task_stddev=0.000028 bytes_write=1509 bytes_read=5164 bytes_retransmit=0 bytes_invalid=0 send_seq=161 receive_seq=161 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000678 adj=64001489  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=59.5 mcu_temp: temp=35.7 sysload=0.81 cputime=67.239 memavail=690376 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 416.7: gcodein=0  mcu: mcu_awake=0.110 mcu_task_avg=0.000037 mcu_task_stddev=0.000166 bytes_write=4990 bytes_read=6613 bytes_retransmit=0 bytes_invalid=0 send_seq=261 receive_seq=261 retransmit_seq=0 srtt=0.002 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001391 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000015 bytes_write=855 bytes_read=4632 bytes_retransmit=0 bytes_invalid=0 send_seq=118 receive_seq=118 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999809 adj=50001119 ebbcan: mcu_awake=0.006 mcu_task_avg=0.000016 mcu_task_stddev=0.000028 bytes_write=1515 bytes_read=5240 bytes_retransmit=0 bytes_invalid=0 send_seq=162 receive_seq=162 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000603 adj=64001085  heater_bed: target=0 temp=26.0 pwm=0.000 raspberry_pi: temp=59.0 mcu_temp: temp=35.7 sysload=0.81 cputime=67.276 memavail=689908 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 417.7: gcodein=0  mcu: mcu_awake=0.110 mcu_task_avg=0.000037 mcu_task_stddev=0.000166 bytes_write=4996 bytes_read=6716 bytes_retransmit=0 bytes_invalid=0 send_seq=262 receive_seq=262 retransmit_seq=0 srtt=0.002 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001308 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000015 bytes_write=861 bytes_read=4648 bytes_retransmit=0 bytes_invalid=0 send_seq=119 receive_seq=119 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999829 adj=50000863 ebbcan: mcu_awake=0.006 mcu_task_avg=0.000016 mcu_task_stddev=0.000028 bytes_write=1541 bytes_read=5314 bytes_retransmit=0 bytes_invalid=0 send_seq=164 receive_seq=164 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000502 adj=64000764  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=59.6 mcu_temp: temp=35.8 sysload=0.81 cputime=67.324 memavail=690024 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 418.7: gcodein=0  mcu: mcu_awake=0.110 mcu_task_avg=0.000037 mcu_task_stddev=0.000166 bytes_write=5002 bytes_read=6819 bytes_retransmit=0 bytes_invalid=0 send_seq=263 receive_seq=263 retransmit_seq=0 srtt=0.002 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001251 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000015 bytes_write=867 bytes_read=4664 bytes_retransmit=0 bytes_invalid=0 send_seq=120 receive_seq=120 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999850 adj=50000615 ebbcan: mcu_awake=0.006 mcu_task_avg=0.000016 mcu_task_stddev=0.000028 bytes_write=1547 bytes_read=5375 bytes_retransmit=0 bytes_invalid=0 send_seq=165 receive_seq=165 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000485 adj=64000341  heater_bed: target=0 temp=26.0 pwm=0.000 raspberry_pi: temp=58.9 mcu_temp: temp=35.7 sysload=0.81 cputime=67.360 memavail=689300 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 419.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5008 bytes_read=6966 bytes_retransmit=0 bytes_invalid=0 send_seq=264 receive_seq=264 retransmit_seq=0 srtt=0.002 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001224 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000010 bytes_write=873 bytes_read=4693 bytes_retransmit=0 bytes_invalid=0 send_seq=121 receive_seq=121 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999844 adj=50000399 ebbcan: mcu_awake=0.002 mcu_task_avg=0.000013 mcu_task_stddev=0.000017 bytes_write=1553 bytes_read=5465 bytes_retransmit=0 bytes_invalid=0 send_seq=166 receive_seq=166 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000444 adj=64000204  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=59.5 mcu_temp: temp=35.9 sysload=0.81 cputime=67.402 memavail=689332 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 420.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5020 bytes_read=7085 bytes_retransmit=0 bytes_invalid=0 send_seq=266 receive_seq=266 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001245 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000010 bytes_write=879 bytes_read=4709 bytes_retransmit=0 bytes_invalid=0 send_seq=122 receive_seq=122 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999964 adj=50000077 ebbcan: mcu_awake=0.002 mcu_task_avg=0.000013 mcu_task_stddev=0.000017 bytes_write=1559 bytes_read=5526 bytes_retransmit=0 bytes_invalid=0 send_seq=167 receive_seq=167 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000548 adj=63999916  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=58.3 mcu_temp: temp=35.7 sysload=0.99 cputime=67.466 memavail=689792 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 421.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5026 bytes_read=7188 bytes_retransmit=0 bytes_invalid=0 send_seq=267 receive_seq=267 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001221 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000010 bytes_write=885 bytes_read=4725 bytes_retransmit=0 bytes_invalid=0 send_seq=123 receive_seq=123 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999953 adj=50000186 ebbcan: mcu_awake=0.002 mcu_task_avg=0.000013 mcu_task_stddev=0.000017 bytes_write=1565 bytes_read=5587 bytes_retransmit=0 bytes_invalid=0 send_seq=168 receive_seq=168 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000555 adj=64000055  heater_bed: target=0 temp=26.0 pwm=0.000 raspberry_pi: temp=58.1 mcu_temp: temp=35.5 sysload=0.99 cputime=67.518 memavail=690408 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 422.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5032 bytes_read=7320 bytes_retransmit=0 bytes_invalid=0 send_seq=268 receive_seq=268 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001204 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000010 bytes_write=891 bytes_read=4741 bytes_retransmit=0 bytes_invalid=0 send_seq=124 receive_seq=124 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999945 adj=49999919 ebbcan: mcu_awake=0.002 mcu_task_avg=0.000013 mcu_task_stddev=0.000017 bytes_write=1571 bytes_read=5663 bytes_retransmit=0 bytes_invalid=0 send_seq=169 receive_seq=169 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000538 adj=63999994  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=59.1 mcu_temp: temp=36.0 sysload=0.99 cputime=67.555 memavail=690716 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 423.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5038 bytes_read=7423 bytes_retransmit=0 bytes_invalid=0 send_seq=269 receive_seq=269 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001193 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000010 bytes_write=897 bytes_read=4757 bytes_retransmit=0 bytes_invalid=0 send_seq=125 receive_seq=125 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999994 adj=49999716 ebbcan: mcu_awake=0.002 mcu_task_avg=0.000013 mcu_task_stddev=0.000017 bytes_write=1577 bytes_read=5724 bytes_retransmit=0 bytes_invalid=0 send_seq=170 receive_seq=170 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000513 adj=63999838  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=58.6 mcu_temp: temp=35.7 sysload=0.99 cputime=67.600 memavail=691012 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 424.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5044 bytes_read=7541 bytes_retransmit=0 bytes_invalid=0 send_seq=270 receive_seq=270 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001179 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000017 bytes_write=903 bytes_read=4786 bytes_retransmit=0 bytes_invalid=0 send_seq=126 receive_seq=126 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000013 adj=49999801 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1583 bytes_read=5799 bytes_retransmit=0 bytes_invalid=0 send_seq=171 receive_seq=171 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000482 adj=63999651  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=58.5 mcu_temp: temp=36.0 sysload=0.99 cputime=67.637 memavail=691552 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 425.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5050 bytes_read=7673 bytes_retransmit=0 bytes_invalid=0 send_seq=271 receive_seq=271 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001186 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000017 bytes_write=909 bytes_read=4802 bytes_retransmit=0 bytes_invalid=0 send_seq=127 receive_seq=127 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999991 adj=49999760 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1589 bytes_read=5875 bytes_retransmit=0 bytes_invalid=0 send_seq=172 receive_seq=172 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000473 adj=63999491  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=58.8 mcu_temp: temp=35.9 sysload=0.91 cputime=67.682 memavail=690412 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 426.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5056 bytes_read=7776 bytes_retransmit=0 bytes_invalid=0 send_seq=272 receive_seq=272 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001180 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000017 bytes_write=915 bytes_read=4818 bytes_retransmit=0 bytes_invalid=0 send_seq=128 receive_seq=128 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999976 adj=49999457 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1595 bytes_read=5936 bytes_retransmit=0 bytes_invalid=0 send_seq=173 receive_seq=173 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000500 adj=63999366  heater_bed: target=0 temp=26.0 pwm=0.000 raspberry_pi: temp=58.2 mcu_temp: temp=35.8 sysload=0.91 cputime=67.726 memavail=689912 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 427.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5062 bytes_read=7894 bytes_retransmit=0 bytes_invalid=0 send_seq=273 receive_seq=273 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001176 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000017 bytes_write=921 bytes_read=4834 bytes_retransmit=0 bytes_invalid=0 send_seq=129 receive_seq=129 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999967 adj=49999305 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1601 bytes_read=5997 bytes_retransmit=0 bytes_invalid=0 send_seq=174 receive_seq=174 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000488 adj=63999512  heater_bed: target=0 temp=26.0 pwm=0.000 raspberry_pi: temp=58.9 mcu_temp: temp=35.8 sysload=0.91 cputime=67.763 memavail=690276 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 428.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5068 bytes_read=8011 bytes_retransmit=0 bytes_invalid=0 send_seq=274 receive_seq=274 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001186 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000017 bytes_write=927 bytes_read=4850 bytes_retransmit=0 bytes_invalid=0 send_seq=130 receive_seq=130 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000004 adj=49999210 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1607 bytes_read=6073 bytes_retransmit=0 bytes_invalid=0 send_seq=175 receive_seq=175 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000470 adj=63999425  heater_bed: target=0 temp=26.0 pwm=0.000 raspberry_pi: temp=59.5 mcu_temp: temp=35.8 sysload=0.91 cputime=67.813 memavail=690608 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 429.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5074 bytes_read=8129 bytes_retransmit=0 bytes_invalid=0 send_seq=275 receive_seq=275 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001190 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=933 bytes_read=4879 bytes_retransmit=0 bytes_invalid=0 send_seq=131 receive_seq=131 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000014 adj=49999332 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1613 bytes_read=6148 bytes_retransmit=0 bytes_invalid=0 send_seq=176 receive_seq=176 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000474 adj=63999238  heater_bed: target=0 temp=26.0 pwm=0.000 raspberry_pi: temp=57.4 mcu_temp: temp=35.9 sysload=0.91 cputime=67.877 memavail=690736 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 430.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5080 bytes_read=8247 bytes_retransmit=0 bytes_invalid=0 send_seq=276 receive_seq=276 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001195 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=939 bytes_read=4895 bytes_retransmit=0 bytes_invalid=0 send_seq=132 receive_seq=132 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000012 adj=49999311 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1619 bytes_read=6209 bytes_retransmit=0 bytes_invalid=0 send_seq=177 receive_seq=177 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000473 adj=63999251  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=57.5 mcu_temp: temp=35.8 sysload=0.83 cputime=67.935 memavail=690752 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 431.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5086 bytes_read=8364 bytes_retransmit=0 bytes_invalid=0 send_seq=277 receive_seq=277 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001196 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=945 bytes_read=4911 bytes_retransmit=0 bytes_invalid=0 send_seq=133 receive_seq=133 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000013 adj=49999210 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1625 bytes_read=6285 bytes_retransmit=0 bytes_invalid=0 send_seq=178 receive_seq=178 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000500 adj=63999219  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=57.4 mcu_temp: temp=35.7 sysload=0.83 cputime=67.989 memavail=690632 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 432.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5092 bytes_read=8467 bytes_retransmit=0 bytes_invalid=0 send_seq=278 receive_seq=278 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001193 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=951 bytes_read=4927 bytes_retransmit=0 bytes_invalid=0 send_seq=134 receive_seq=134 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000000 adj=49999183 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1631 bytes_read=6346 bytes_retransmit=0 bytes_invalid=0 send_seq=179 receive_seq=179 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000514 adj=63999396  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=58.6 mcu_temp: temp=35.9 sysload=0.83 cputime=68.025 memavail=690644 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 433.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5098 bytes_read=8585 bytes_retransmit=0 bytes_invalid=0 send_seq=279 receive_seq=279 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001186 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=957 bytes_read=4943 bytes_retransmit=0 bytes_invalid=0 send_seq=135 receive_seq=135 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999985 adj=49999089 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1637 bytes_read=6407 bytes_retransmit=0 bytes_invalid=0 send_seq=180 receive_seq=180 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000497 adj=63999477  heater_bed: target=0 temp=26.0 pwm=0.000 raspberry_pi: temp=58.3 mcu_temp: temp=35.9 sysload=0.83 cputime=68.070 memavail=690468 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 434.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5104 bytes_read=8717 bytes_retransmit=0 bytes_invalid=0 send_seq=280 receive_seq=280 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001187 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000014 bytes_write=963 bytes_read=4972 bytes_retransmit=0 bytes_invalid=0 send_seq=136 receive_seq=136 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999978 adj=49999021 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1643 bytes_read=6497 bytes_retransmit=0 bytes_invalid=0 send_seq=181 receive_seq=181 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000475 adj=63999374  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=58.7 mcu_temp: temp=36.0 sysload=0.83 cputime=68.107 memavail=690456 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 435.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5110 bytes_read=8820 bytes_retransmit=0 bytes_invalid=0 send_seq=281 receive_seq=281 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001189 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000014 bytes_write=969 bytes_read=4988 bytes_retransmit=0 bytes_invalid=0 send_seq=137 receive_seq=137 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999973 adj=49998983 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1655 bytes_read=6574 bytes_retransmit=0 bytes_invalid=0 send_seq=183 receive_seq=183 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000460 adj=63999214  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=59.3 mcu_temp: temp=36.0 sysload=0.77 cputime=68.153 memavail=690308 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 436.8: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5116 bytes_read=8938 bytes_retransmit=0 bytes_invalid=0 send_seq=282 receive_seq=282 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001182 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000014 bytes_write=975 bytes_read=5004 bytes_retransmit=0 bytes_invalid=0 send_seq=138 receive_seq=138 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999985 adj=49998958 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1661 bytes_read=6635 bytes_retransmit=0 bytes_invalid=0 send_seq=184 receive_seq=184 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000451 adj=63999114  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=58.1 mcu_temp: temp=36.0 sysload=0.77 cputime=68.204 memavail=690224 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 437.8: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5122 bytes_read=9055 bytes_retransmit=0 bytes_invalid=0 send_seq=283 receive_seq=283 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001178 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000014 bytes_write=981 bytes_read=5020 bytes_retransmit=0 bytes_invalid=0 send_seq=139 receive_seq=139 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999980 adj=49999065 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1667 bytes_read=6711 bytes_retransmit=0 bytes_invalid=0 send_seq=185 receive_seq=185 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000437 adj=63999097  heater_bed: target=0 temp=26.0 pwm=0.000 raspberry_pi: temp=59.1 mcu_temp: temp=36.0 sysload=0.77 cputime=68.242 memavail=690120 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 438.8: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5128 bytes_read=9158 bytes_retransmit=0 bytes_invalid=0 send_seq=284 receive_seq=284 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001175 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000014 bytes_write=987 bytes_read=5036 bytes_retransmit=0 bytes_invalid=0 send_seq=140 receive_seq=140 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999986 adj=49999051 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1673 bytes_read=6772 bytes_retransmit=0 bytes_invalid=0 send_seq=186 receive_seq=186 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000430 adj=63999076  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=58.7 mcu_temp: temp=36.0 sysload=0.77 cputime=68.284 memavail=690372 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 439.8: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5134 bytes_read=9291 bytes_retransmit=0 bytes_invalid=0 send_seq=285 receive_seq=285 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001173 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000011 bytes_write=993 bytes_read=5065 bytes_retransmit=0 bytes_invalid=0 send_seq=141 receive_seq=141 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999978 adj=49999118 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1679 bytes_read=6862 bytes_retransmit=0 bytes_invalid=0 send_seq=187 receive_seq=187 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000421 adj=63999090  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=58.8 mcu_temp: temp=36.0 sysload=0.77 cputime=68.322 memavail=690156 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 440.8: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5140 bytes_read=9408 bytes_retransmit=0 bytes_invalid=0 send_seq=286 receive_seq=286 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001177 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000011 bytes_write=999 bytes_read=5081 bytes_retransmit=0 bytes_invalid=0 send_seq=142 receive_seq=142 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999973 adj=49999058 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1685 bytes_read=6923 bytes_retransmit=0 bytes_invalid=0 send_seq=188 receive_seq=188 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000419 adj=63999082  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=58.9 mcu_temp: temp=36.0 sysload=0.70 cputime=68.362 memavail=690644 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 441.8: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5146 bytes_read=9511 bytes_retransmit=0 bytes_invalid=0 send_seq=287 receive_seq=287 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001176 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000011 bytes_write=1005 bytes_read=5097 bytes_retransmit=0 bytes_invalid=0 send_seq=143 receive_seq=143 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999992 adj=49998996 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1691 bytes_read=6984 bytes_retransmit=0 bytes_invalid=0 send_seq=189 receive_seq=189 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000416 adj=63999078  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=58.5 mcu_temp: temp=36.1 sysload=0.70 cputime=68.411 memavail=689540 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 442.8: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5152 bytes_read=9629 bytes_retransmit=0 bytes_invalid=0 send_seq=288 receive_seq=288 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001174 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000011 bytes_write=1011 bytes_read=5113 bytes_retransmit=0 bytes_invalid=0 send_seq=144 receive_seq=144 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999985 adj=49999169 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1697 bytes_read=7060 bytes_retransmit=0 bytes_invalid=0 send_seq=190 receive_seq=190 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000409 adj=63999107  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=58.9 mcu_temp: temp=35.9 sysload=0.70 cputime=68.449 memavail=689664 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 443.8: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5158 bytes_read=9746 bytes_retransmit=0 bytes_invalid=0 send_seq=289 receive_seq=289 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001179 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000011 bytes_write=1017 bytes_read=5129 bytes_retransmit=0 bytes_invalid=0 send_seq=145 receive_seq=145 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999978 adj=49999098 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1703 bytes_read=7121 bytes_retransmit=0 bytes_invalid=0 send_seq=191 receive_seq=191 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000409 adj=63999120  heater_bed: target=0 temp=26.0 pwm=0.000 raspberry_pi: temp=58.9 mcu_temp: temp=36.1 sysload=0.70 cputime=68.494 memavail=689848 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 444.8: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5164 bytes_read=9864 bytes_retransmit=0 bytes_invalid=0 send_seq=290 receive_seq=290 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001177 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000012 bytes_write=1023 bytes_read=5158 bytes_retransmit=0 bytes_invalid=0 send_seq=146 receive_seq=146 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999975 adj=49998998 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1709 bytes_read=7196 bytes_retransmit=0 bytes_invalid=0 send_seq=192 receive_seq=192 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000410 adj=63999102  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=59.0 mcu_temp: temp=35.9 sysload=0.70 cputime=68.531 memavail=690316 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 445.8: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5170 bytes_read=9982 bytes_retransmit=0 bytes_invalid=0 send_seq=291 receive_seq=291 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001202 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000012 bytes_write=1029 bytes_read=5174 bytes_retransmit=0 bytes_invalid=0 send_seq=147 receive_seq=147 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999970 adj=49999007 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1715 bytes_read=7272 bytes_retransmit=0 bytes_invalid=0 send_seq=193 receive_seq=193 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000405 adj=63999162  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=59.1 mcu_temp: temp=36.0 sysload=0.65 cputime=68.569 memavail=691160 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 446.8: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5176 bytes_read=10099 bytes_retransmit=0 bytes_invalid=0 send_seq=292 receive_seq=292 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001201 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000012 bytes_write=1035 bytes_read=5190 bytes_retransmit=0 bytes_invalid=0 send_seq=148 receive_seq=148 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999971 adj=49998803 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1721 bytes_read=7333 bytes_retransmit=0 bytes_invalid=0 send_seq=194 receive_seq=194 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000401 adj=63998927  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=58.2 mcu_temp: temp=36.0 sysload=0.65 cputime=68.616 memavail=691000 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 447.8: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5182 bytes_read=10202 bytes_retransmit=0 bytes_invalid=0 send_seq=293 receive_seq=293 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001200 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000012 bytes_write=1041 bytes_read=5206 bytes_retransmit=0 bytes_invalid=0 send_seq=149 receive_seq=149 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999967 adj=49998877 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1727 bytes_read=7394 bytes_retransmit=0 bytes_invalid=0 send_seq=195 receive_seq=195 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000398 adj=63998965  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=58.6 mcu_temp: temp=36.1 sysload=0.65 cputime=68.652 memavail=690628 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 448.8: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5188 bytes_read=10320 bytes_retransmit=0 bytes_invalid=0 send_seq=294 receive_seq=294 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001202 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000012 bytes_write=1047 bytes_read=5222 bytes_retransmit=0 bytes_invalid=0 send_seq=150 receive_seq=150 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999963 adj=49998891 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1733 bytes_read=7470 bytes_retransmit=0 bytes_invalid=0 send_seq=196 receive_seq=196 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000402 adj=63999028  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=58.8 mcu_temp: temp=36.1 sysload=0.65 cputime=68.703 memavail=690908 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 449.8: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5194 bytes_read=10452 bytes_retransmit=0 bytes_invalid=0 send_seq=295 receive_seq=295 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001207 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000011 bytes_write=1053 bytes_read=5251 bytes_retransmit=0 bytes_invalid=0 send_seq=151 receive_seq=151 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999961 adj=49998907 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1739 bytes_read=7545 bytes_retransmit=0 bytes_invalid=0 send_seq=197 receive_seq=197 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000403 adj=63999085  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=58.3 mcu_temp: temp=36.1 sysload=0.65 cputime=68.747 memavail=690920 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 450.8: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5200 bytes_read=10555 bytes_retransmit=0 bytes_invalid=0 send_seq=296 receive_seq=296 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001203 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000011 bytes_write=1059 bytes_read=5267 bytes_retransmit=0 bytes_invalid=0 send_seq=152 receive_seq=152 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999960 adj=49998886 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1745 bytes_read=7606 bytes_retransmit=0 bytes_invalid=0 send_seq=198 receive_seq=198 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000400 adj=63999082  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=58.8 mcu_temp: temp=36.2 sysload=0.60 cputime=68.782 memavail=690656 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 451.8: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5206 bytes_read=10687 bytes_retransmit=0 bytes_invalid=0 send_seq=297 receive_seq=297 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001198 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000011 bytes_write=1065 bytes_read=5283 bytes_retransmit=0 bytes_invalid=0 send_seq=153 receive_seq=153 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999967 adj=49998939 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1751 bytes_read=7682 bytes_retransmit=0 bytes_invalid=0 send_seq=199 receive_seq=199 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000397 adj=63999124  heater_bed: target=0 temp=26.0 pwm=0.000 raspberry_pi: temp=58.9 mcu_temp: temp=36.1 sysload=0.60 cputime=68.825 memavail=690612 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 452.8: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5212 bytes_read=10790 bytes_retransmit=0 bytes_invalid=0 send_seq=298 receive_seq=298 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001198 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000011 bytes_write=1071 bytes_read=5299 bytes_retransmit=0 bytes_invalid=0 send_seq=154 receive_seq=154 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999972 adj=49999061 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1757 bytes_read=7743 bytes_retransmit=0 bytes_invalid=0 send_seq=200 receive_seq=200 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000398 adj=63999155  heater_bed: target=0 temp=26.0 pwm=0.000 raspberry_pi: temp=58.6 mcu_temp: temp=36.2 sysload=0.60 cputime=68.860 memavail=690600 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 453.8: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5218 bytes_read=10893 bytes_retransmit=0 bytes_invalid=0 send_seq=299 receive_seq=299 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001200 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000011 bytes_write=1077 bytes_read=5315 bytes_retransmit=0 bytes_invalid=0 send_seq=155 receive_seq=155 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999968 adj=49999100 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1763 bytes_read=7804 bytes_retransmit=0 bytes_invalid=0 send_seq=201 receive_seq=201 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000398 adj=63999182  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=59.0 mcu_temp: temp=36.1 sysload=0.60 cputime=68.911 memavail=690956 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 454.8: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5224 bytes_read=11040 bytes_retransmit=0 bytes_invalid=0 send_seq=300 receive_seq=300 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001201 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000014 bytes_write=1083 bytes_read=5344 bytes_retransmit=0 bytes_invalid=0 send_seq=156 receive_seq=156 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999977 adj=49999024 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1769 bytes_read=7894 bytes_retransmit=0 bytes_invalid=0 send_seq=202 receive_seq=202 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000395 adj=63999165  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=57.8 mcu_temp: temp=36.1 sysload=0.60 cputime=68.963 memavail=690720 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 455.8: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5230 bytes_read=11143 bytes_retransmit=0 bytes_invalid=0 send_seq=301 receive_seq=301 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001198 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000014 bytes_write=1089 bytes_read=5360 bytes_retransmit=0 bytes_invalid=0 send_seq=157 receive_seq=157 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999974 adj=49999111 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1775 bytes_read=7955 bytes_retransmit=0 bytes_invalid=0 send_seq=203 receive_seq=203 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000392 adj=63999132  heater_bed: target=0 temp=26.0 pwm=0.000 raspberry_pi: temp=59.1 mcu_temp: temp=36.0 sysload=0.63 cputime=68.997 memavail=691604 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 456.8: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5236 bytes_read=11246 bytes_retransmit=0 bytes_invalid=0 send_seq=302 receive_seq=302 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001195 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000014 bytes_write=1095 bytes_read=5376 bytes_retransmit=0 bytes_invalid=0 send_seq=158 receive_seq=158 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999970 adj=49999083 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1781 bytes_read=8016 bytes_retransmit=0 bytes_invalid=0 send_seq=204 receive_seq=204 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000397 adj=63999147  heater_bed: target=0 temp=26.0 pwm=0.000 raspberry_pi: temp=58.8 mcu_temp: temp=36.2 sysload=0.63 cputime=69.044 memavail=690644 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 457.8: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5242 bytes_read=11378 bytes_retransmit=0 bytes_invalid=0 send_seq=303 receive_seq=303 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001195 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000014 bytes_write=1107 bytes_read=5408 bytes_retransmit=0 bytes_invalid=0 send_seq=160 receive_seq=160 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999978 adj=49999061 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1787 bytes_read=8092 bytes_retransmit=0 bytes_invalid=0 send_seq=205 receive_seq=205 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000399 adj=63999242  heater_bed: target=0 temp=26.0 pwm=0.000 raspberry_pi: temp=58.1 mcu_temp: temp=36.3 sysload=0.63 cputime=69.105 memavail=691072 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 458.8: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5248 bytes_read=11481 bytes_retransmit=0 bytes_invalid=0 send_seq=304 receive_seq=304 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001196 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000014 bytes_write=1113 bytes_read=5424 bytes_retransmit=0 bytes_invalid=0 send_seq=161 receive_seq=161 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999982 adj=49999137 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1793 bytes_read=8153 bytes_retransmit=0 bytes_invalid=0 send_seq=206 receive_seq=206 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000402 adj=63999251  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=57.4 mcu_temp: temp=36.3 sysload=0.63 cputime=69.164 memavail=691152 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 467.8: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5336 bytes_read=12511 bytes_retransmit=0 bytes_invalid=0 send_seq=315 receive_seq=315 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001205 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000014 bytes_write=1167 bytes_read=5594 bytes_retransmit=0 bytes_invalid=0 send_seq=170 receive_seq=170 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999976 adj=49999041 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1847 bytes_read=8762 bytes_retransmit=0 bytes_invalid=0 send_seq=215 receive_seq=215 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000406 adj=63999250  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=57.8 mcu_temp: temp=36.1 sysload=0.61 cputime=69.592 memavail=690976 print_time=68.943 buffer_time=0.090 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Attempting MCU 'CB1' config_reset command
b'Got EOF when reading from device'
Attempting MCU 'ebbcan' reset command
Attempting MCU 'mcu' reset command
webhooks client 281473550818848: Disconnected
Restarting printer
Start printer at Mon Aug 21 00:45:02 2023 (1692578702.3 469.2)
===== Config file =====
[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancels the current print.
	Usage: CANCEL_PRINT
rename_existing = _KM_CANCEL_PRINT_BASE
gcode = 
	_KM_CHECK_IS_PRINTING
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=cancelling RESET_STACK=1
	SET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{True}"
	PRINT_END
	_KM_CANCEL_PRINT_BASE
	{% if printer.pause_resume.is_paused %}
	RESTORE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE MOVE=0
	{% endif %}
	CLEAR_PAUSE
	_KM_APPLY_PRINT_OFFSET RESET=1
	{% if 'virtual_sdcard' in printer and not printer.virtual_sdcard.is_active %}
	SDCARD_RESET_FILE
	{% endif %}

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
variable_restore_idle_timeout = 0
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set idle_timeout = client.idle_timeout|default(0) %}
	
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE={printer[printer.toolhead.extruder].target}
	
	{% if idle_timeout > 0 %}
	SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
	SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
	{% endif %}
	PAUSE_BASE
	_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
variable_last_extruder_temp = 0
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move = client.speed_move|default(velocity) %}
	
	
	{% if printer['gcode_macro PAUSE'].restore_idle_timeout > 0 %}
	SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro PAUSE'].restore_idle_timeout}
	{% endif %}
	M109 S{last_extruder_temp}
	_CLIENT_EXTRUDE
	RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	_KM_CHECK_IS_PRINTING
	{% set pause_next_layer =
	printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE | default(1) | int != 0 %}
	{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VALUE="{
	{ 'enable': False, 'call': MACRO }}" VARIABLE=pause_next_layer
	GCODE_AT_LAYER COMMAND="{MACRO|replace('\"','\\\"')
	}" CANCEL="{0 if ENABLE else 1}" LAYER="next"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	_KM_CHECK_IS_PRINTING
	{% set pause_at_layer =
	printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	
	{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined else
	params.LAYER is defined %}
	{% set LAYER = params.LAYER |
	default((pause_at_layer.layer|int,
	printer.print_stats.info.current_layer|int + 1)|max)%}
	{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}
	
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{
	{ 'enable': False, 'layer': 0, 'call': MACRO }}"
	{% if ENABLE and pause_at_layer.enable %}
	
	GCODE_AT_LAYER COMMAND="{pause_at_layer.call|replace('\"','\\\"')
	}" CANCEL="{1}" LAYER="{pause_at_layer.layer}"
	{% endif %}
	
	GCODE_AT_LAYER COMMAND="{MACRO|replace('\"','\\\"')
	}" CANCEL="{0 if ENABLE else 1}" LAYER="{LAYER}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = _KM_SET_PRINT_STATS_INFO
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	_KM_SET_PRINT_STATS_INFO {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.extruder.can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[gcode_macro _km_options]
variable_load_length = 90.0
variable_menu_temperature = [
	{'name' : 'PLA',  'extruder' : 200.0, 'bed' : 60.0},
	{'name' : 'PETG', 'extruder' : 230.0, 'bed' : 85.0},
	{'name' : 'ABS',  'extruder' : 245.0, 'bed' : 110.0, 'chamber' : 60}]
variable_start_purge_length = 50
variable_start_extruder_probing_temp = 150
variable_park_x = 200.0
variable_park_y = 200.0
gcode = 

[gcode_macro bed_mesh_calibrate_fast]
description = Wraps BED_MESH_CALIBRATE, scaling probe count to specified area.
	Usage: See Klipper documentation.
gcode = 
	
	BED_MESH_CHECK ABORT=1
	
	
	{% set calibrate_cmd =
	(printer["gcode_macro list_macros"].macros.bed_mesh_calibrate|
	default(["bed_mesh_calibrate"],True))[-1] %}
	
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set probe_mesh_padding = km.probe_mesh_padding %}
	{% set probe_min_count = km.probe_min_count %}
	{% set probe_count_scale = km.probe_count_scale %}
	{% set bed_mesh = printer.configfile.settings.bed_mesh %}
	
	
	{%if "mesh_radius" not in bed_mesh and
	"MESH_RADIUS" not in params %}
	{% set safe_min_x = bed_mesh.mesh_min[0] %}
	{% set safe_min_y = bed_mesh.mesh_min[1] %}
	{% set safe_max_x = bed_mesh.mesh_max[0] %}
	{% set safe_max_y = bed_mesh.mesh_max[1] %}
	
	
	{% if "MESH_MIN" in params %}
	{% set mesh_min_x = (params.MESH_MIN.split(",")[0]|float -
	probe_mesh_padding, safe_min_x)|max %}
	{% set mesh_min_y = (params.MESH_MIN.split(",")[1]|float -
	probe_mesh_padding, safe_min_y)|max %}
	{% else %}
	{% set mesh_min_x = safe_min_x %}
	{% set mesh_min_y = safe_min_y %}
	{% endif %}
	{% if "MESH_MAX" in params %}
	{% set mesh_max_x = (params.MESH_MAX.split(",")[0]|float +
	probe_mesh_padding, safe_max_x)|min %}
	{% set mesh_max_y = (params.MESH_MAX.split(",")[1]|float +
	probe_mesh_padding, safe_max_y)|min %}
	{% else %}
	{% set mesh_max_x = safe_max_x %}
	{% set mesh_max_y = safe_max_y %}
	{% endif %}
	
	{% set probe_count = bed_mesh.probe_count if not params.PROBE_COUNT else
	params.PROBE_COUNT.split(",")|map('int')|list %}
	
	{% if "PROBE_COUNT" not in params %}
	{% set max_x_probes = probe_count[0] %}
	{% set max_y_probes = probe_count[-1] %}
	
	{% set x_probes = (max_x_probes * (mesh_max_x - mesh_min_x) /
	(safe_max_x - safe_min_x) * probe_count_scale)
	| round(0) | int %}
	{% set x_probes = ((x_probes, probe_min_count)|max, max_x_probes)|min %}
	
	{% set y_probes = (max_y_probes * (mesh_max_y - mesh_min_y ) /
	(safe_max_y - safe_min_y) * probe_count_scale )
	| round(0) | int %}
	{% set y_probes = ((y_probes, probe_min_count)|max, max_y_probes)|min %}
	
	{% if x_probes > 6 and y_probes < 4 %}
	{% set y_probes = 4 %}
	{% elif y_probes > 6 and x_probes < 4 %}
	{% set x_probes = 4 %}
	{% endif %}
	{% set probe_count = [x_probes,y_probes] %}
	{% elif probe_count|length == 1 %}
	{% set dummy = probe_count.append(probe_count[0]) %}
	{% endif %}
	
	
	
	
	
	
	
	{% if "relative_reference_index" in bed_mesh %}
	{% set row = (bed_mesh.relative_reference_index / bed_mesh.probe_count[0]
	)|int%}
	{% set rrf_x = (((safe_max_x - safe_min_x) /
	(bed_mesh.probe_count[0] - 1))|round(2, 'floor')) *
	(bed_mesh.relative_reference_index %
	bed_mesh.probe_count[-1]) %}
	{% if row % 2 %}
	{% set rrf_x = safe_max_x - rrf_x %}
	{% else %}
	{% set rrf_x = safe_min_x + rrf_x %}
	{% endif %}
	{% set rrf_y = (((safe_max_y - safe_min_y) /
	(bed_mesh.probe_count[-1] - 1))|round(2, 'floor')) *
	row + safe_min_x %}
	{% set x_dist = (mesh_max_x - mesh_min_x) / (probe_count[0] - 1) %}
	{% set y_dist = (mesh_max_y - mesh_min_y) / (probe_count[1] - 1) %}
	{% set rrf = {'x':0, 'y':0, 'dist':safe_max_x**2+safe_max_y**2,'pos':0} %}
	{% for row in range(probe_count[1])%}
	{% for col in range(probe_count[0])%}
	{% if row % 2 %}
	{% set x = mesh_max_x - col * x_dist %}
	{% else %}
	{% set x = mesh_min_x + col * x_dist %}
	{% endif %}
	{% set y = mesh_min_y + row * y_dist %}
	{% set dist = ((x - rrf_x)**2 + (y - rrf_y)**2)**0.5 %}
	{% if dist < rrf.dist %}
	{% set dummy = rrf.__setitem__("dist", dist) %}
	{% set dummy = rrf.__setitem__("x", x) %}
	{% set dummy = rrf.__setitem__("y", y) %}
	{% set dummy = rrf.__setitem__("pos", row * probe_count[1] + col) %}
	{% endif %}
	{% endfor %}
	{% endfor %}
	{% if rrf.x != rrf_x or rrf.y != rrf_y %}
	{action_respond_info("relative_reference_index remapped to"
	" %d (%.2f,%.2f) from %d (%.2f,%.2f)" %
	(rrf.pos, rrf.x, rrf.y,
	bed_mesh.relative_reference_index, rrf_x, rrf_y))}
	{% endif %}
	{% set dummy = params.__setitem__("RELATIVE_REFERENCE_INDEX", rrf.pos) %}
	{% endif %}
	
	{% set dummy = params.__setitem__("MESH_MIN", mesh_min_x~","~mesh_min_y) %}
	{% set dummy = params.__setitem__("MESH_MAX", mesh_max_x~","~mesh_max_y) %}
	{% set dummy = params.__setitem__("PROBE_COUNT", probe_count|join(',')) %}
	
	{% if probe_count[0] > 6 or probe_count[1]|default(0) > 6 %}
	{% set dummy = params.__setitem__("ALGORITHM", "bicubic") %}
	{% endif %}
	
	{% if "MESH_MIN" in params or "MESH_MAX" in params %}
	BED_MESH_CHECK {rawparams}
	{% endif %}
	{% else %}
	
	{% set dummy = params.__delitem__("MESH_MIN") %}
	{% set dummy = params.__delitem__("MESH_MAX") %}
	{% endif %}
	
	{% if "MESH_MIN" in params or "MESH_MAX" in params %}
	BED_MESH_CHECK ABORT=1{%for k in params%}{' '~k~'="'~params[k]~'"'}{%
	endfor%}
	{% endif %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=meshing
	{calibrate_cmd}{%for k in params%}{' '~k~'="'~params[k]~'"'}{%endfor%}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro bed_mesh_check]
description = Warns if bed_mesh config may generate an invalid mesh.
	Usage: BED_MESH_CHECK [MESH_MIN=<x,y>] [MESH_MAX=<x,y>] [ABORT=<0|1>]
gcode = 
	{% if printer.bed_mesh is defined %}
	{% set action = action_respond_info if params.ABORT|default(0)|int == 0 else
	action_raise_error %}
	{% set settings = printer.configfile.settings %}
	{% set x_min = settings.stepper_x.position_min %}
	{% set y_min = settings.stepper_y.position_min %}
	{% set x_max = settings.stepper_x.position_max %}
	{% set y_max = settings.stepper_y.position_max %}
	
	{% set label = "[bed_mesh] config" %}
	{% if "MESH_MIN" in params %}
	{% set label = "BED_MESH_CALIBRATE params" %}
	{% set mesh_min_x = params.MESH_MIN.split(",")[0]|float %}
	{% set mesh_min_y = params.MESH_MIN.split(",")[1]|float %}
	{% else %}
	{% set mesh_min_x = settings.bed_mesh.mesh_min[0] %}
	{% set mesh_min_y = settings.bed_mesh.mesh_min[1] %}
	{% endif %}
	{% if "MESH_MAX" in params %}
	{% set label = "BED_MESH_CALIBRATE params" %}
	{% set mesh_max_x = params.MESH_MAX.split(",")[0]|float %}
	{% set mesh_max_y = params.MESH_MAX.split(",")[1]|float %}
	{% else %}
	{% set mesh_max_x = settings.bed_mesh.mesh_max[0] %}
	{% set mesh_max_y = settings.bed_mesh.mesh_max[1] %}
	{% endif %}
	
	{% if "bltouch" in settings %}
	{% set x_offset = settings.bltouch.x_offset %}
	{% set y_offset = settings.bltouch.y_offset %}
	{% set probe = "bltouch" %}
	{% elif "probe" in settings %}
	{% set x_offset = settings.probe.x_offset %}
	{% set y_offset = settings.probe.y_offset %}
	{% set probe = "probe" %}
	{% else %}
	{% set x_offset = 0.0 %}
	{% set y_offset = 0.0 %}
	{% endif %}
	
	{% set output = [] %}
	{% set warn =
	"* mesh_%s (%f, %f) adjusted by " ~ probe ~
	".%s_offset (%f) can move out of range for "
	"stepper_%s.position_%s (%f)." %}
	{% if x_offset > 0 and (mesh_min_x - x_offset) < x_min %}
	{% set dummy = output.append(warn % ('min', mesh_min_x, mesh_min_y,
	'x', x_offset, 'x', 'min', x_min)) %}
	{% elif x_offset < 0 and (mesh_max_x - x_offset) > x_max %}
	{% set dummy = output.append(warn % ('max', mesh_max_x, mesh_max_y,
	'x', x_offset, 'x', 'max', x_max)) %}
	{% endif %}
	{% if y_offset > 0 and (mesh_min_y - y_offset) < y_min %}
	{% set dummy = output.append(warn % ('min', mesh_min_x, mesh_min_y,
	'y', y_offset, 'y', 'min', y_min)) %}
	{% elif y_offset < 0 and (mesh_max_y - y_offset) > y_max %}
	{% set dummy = output.append(warn % ('max', mesh_max_x, mesh_max_y,
	'y', y_offset, 'y', 'max', y_max)) %}
	{% endif %}
	
	{% if output %}
	{ action(
	"Warning: The following issue(s) were detected in your " ~ label ~
	":\n" ~ output|join("\n")) }
	{% endif %}
	{% endif %}

[gcode_macro _apply_bed_surface_offset]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% if surfaces.active %}
	SET_SURFACE_ACTIVE SURFACE={surfaces.active}
	{% endif %}

[gcode_macro _init_surfaces]
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% if "bed_surfaces" in printer.save_variables.variables %}
	{% set old_surfaces = printer.save_variables.variables.bed_surfaces %}
	{% else %}
	{% set old_surfaces = { 'active' : '', 'available' : {} } %}
	{% endif %}
	{% set settings = printer.configfile.settings %}
	{% set new_probe_z = (settings.probe | default(settings.bltouch) |
	default(settings.smart_effector) | default({})
	).z_offset|default(0.0)|float %}
	{% set new_endstop_z = (settings.stepper_z | default({})).position_endstop |
	default(0.0)|float %}
	{% if 'endstop_z' not in old_surfaces %}
	{% set dummy = old_surfaces.__setitem__('endstop_z', new_endstop_z) %}
	{% endif %}
	{% if 'probe_z' not in old_surfaces %}
	{% set dummy = old_surfaces.__setitem__('probe_z', new_probe_z) %}
	{% endif %}
	{% set surfaces = { 'active' : '', 'available' : {},
	'endstop_z' : old_surfaces.endstop_z,
	'probe_z' : old_surfaces.probe_z } %}
	{% for s in km.bed_surfaces %}
	{% set s = s.split()|join(' ')|lower %}
	{% if s|length > km.bed_surface_max_name_length or
	s|list|select("in", " \r\n\"\'")|list %}
	{action_raise_error('Invalid surface name "%s". Name must be %d or fewer '
	'characters and must not include space or quotation characters'
	| format(s, km.bed_surface_max_name_length))}
	{% endif %}
	{% if s in old_surfaces.available %}
	{% set dummy = surfaces.available.__setitem__(s,
	old_surfaces.available[s]) %}
	{% else %}
	{% set dummy = surfaces.available.__setitem__(s, {'offset' : 0.0}) %}
	{% endif %}
	{% endfor %}
	{% if old_surfaces.active in surfaces.available %}
	{% set dummy = surfaces.__setitem__('active', old_surfaces.active) %}
	{% elif km.bed_surfaces %}
	{% set dummy = surfaces.__setitem__('active', km.bed_surfaces[0]|lower) %}
	{% endif %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	_APPLY_BED_SURFACE_OFFSET
	{% if new_probe_z != surfaces.probe_z or
	new_endstop_z != surfaces.endstop_z %}
	{ action_respond_info(
	'Z probe offset or endstop position changed. Run ADJUST_SURFACE_OFFSETS '
	'to adjust the offset for all saved surfaces by the change differential, '
	'or run ADJUST_SURFACE_OFFSETS IGNORE=1 to hide this message without '
	'making changes.') }
	{% endif %}

[gcode_macro adjust_surface_offsets]
description = Adjusts surface offsets to account for changes in the Z endstop
	position or probe Z offset.
	Usage: ADJUST_SURFACE_OFFSETS [IGNORE]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% set settings = printer.configfile.settings %}
	{% set new_probe_z = (settings.probe | default(settings.bltouch) |
	default(settings.smart_effector) | default({})
	).z_offset|default(0.0)|float %}
	{% set new_endstop_z = (settings.stepper_z | default({})).position_endstop |
	default(0.0)|float %}
	{% set diff = (surfaces.probe_z - new_probe_z +
	surfaces.endstop_z - new_endstop_z)|round(6) %}
	{% if not params.IGNORE|default(0)|int %}
	{% for s in surfaces.available %}
	{% set offset = (surfaces.available[s].offset - diff)|round(6) %}
	{% set dummy = surfaces.available.__setitem__(s, {'offset' : offset}) %}
	{% endfor %}
	{ action_respond_info("All bed surfaces now adjusted by %1.4f"|
	format(diff))}
	{% elif diff != 0 %}
	{ action_respond_info("Status cleared without adjustment") }
	{% endif %}
	{% set dummy = surfaces.__setitem__('endstop_z', new_endstop_z| round(6)) %}
	{% set dummy = surfaces.__setitem__('probe_z', new_probe_z|round(6)) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"

[gcode_macro set_surface_offset]
description = Sets the offset for a surface and moves the toolhead (if homed).
	Usage: SET_SURFACE_OFFSET [OFFSET=<offset>] [SURFACE=<surface>]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}
	{% if SURFACE not in surfaces.available %}
	{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }
	{% endif %}
	{% set active = surfaces.available[SURFACE] %}
	
	{% set OFFSET = params.OFFSET|default(active.offset)|float %}
	{% if OFFSET != active.offset %}
	{% set dummy = surfaces.available[SURFACE].__setitem__("offset", OFFSET) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	{% if SURFACE == surfaces.active %}
	_km_set_gcode_offset_base Z="{OFFSET}" MOVE={
	1 if printer.toolhead.homed_axes == 'xyz' else 0}
	{% endif %}
	{% endif %}
	{ action_respond_info("Bed surface: %s Offset: %.3f"
	| format(SURFACE, OFFSET)) }
	
	{% set dummy = None if True else "
	{% set dummy = params.SURFACE|default(active surface) %}
	{% set dummy = params.OFFSET|default(none)|float %}
	" %}

[gcode_macro set_surface_active]
description = Sets the active bed surface and moves the toolhead (if homed). If
	no SURFACE argument is present the available surfaces are listed and the
	active one is preceded by a "*".
	Usage: SET_SURFACE_ACTIVE [SURFACE=<surface>]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% if "SURFACE" in params %}
	{% set SURFACE = params.SURFACE|lower %}
	{% if SURFACE not in surfaces.available %}
	{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }
	{% endif %}
	{% if SURFACE != surfaces.active %}
	{% set dummy = surfaces.__setitem__("active", SURFACE) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	{% endif %}
	{% if surfaces.available[SURFACE].offset !=
	printer.gcode_move.homing_origin.z %}
	_km_set_gcode_offset_base Z="{surfaces.available[SURFACE].offset
	}" MOVE={1 if printer.toolhead.homed_axes == 'xyz' else 0}
	{% endif %}
	{action_respond_info("Active bed surface: %s; offset: %.3f"
	| format(SURFACE, surfaces.available[SURFACE].offset))}
	{% else %}
	{% set output = [] %}
	{% for s in surfaces.available|list|sort %}
	{% set dummy = output.append("%s&nbsp;%s - offset: %.3f"
	| format("*" if s == surfaces.active else "&nbsp;",
	s, surfaces.available[s].offset)) %}
	{% endfor %}
	{action_respond_info(output|join('\n'))}
	{% endif %}
	
	{% set dummy = None if True else "
	{% set dummy = params.SURFACE|default(none) %}
	" %}

[gcode_macro set_gcode_offset]
description = Wraps SET_GCODE_OFFSET to update the current bed sheet offset.
	Usage: SET_GCODE_OFFSET [X=<pos>|X_ADJUST=<adjust>]
	[Y=<pos>|Y_ADJUST=<adjust>]
	[Z=<pos>|Z_ADJUST=<adjust>]
	[MOVE=1 [MOVE_SPEED=<speed>]]
rename_existing = _KM_SET_GCODE_OFFSET_BASE
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% if surfaces.active and
	not printer["gcode_macro _km_save_state"].is_ephemeral %}
	{% set Z = params.Z|default(0.0)|float|round(6) %}
	{% set Z_ADJUST = params.Z_ADJUST|default(0.0)|float %}
	{% if 'Z' in params and
	Z != surfaces.available[surfaces.active].offset %}
	{% set dummy = surfaces.available[surfaces.active].__setitem__("offset",
	Z) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	{% elif Z_ADJUST != 0.0 %}
	{% set dummy = surfaces.available[surfaces.active].__setitem__(
	"offset", (Z_ADJUST + printer.gcode_move.homing_origin.z)|round(6)) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	{% endif %}
	{% endif %}
	_km_set_gcode_offset_base{% for k in params%}{' '~k~'="'~params[k]~'"'
	}{% endfor %}

[gcode_macro make_surface_mesh]
description = Generates and saves a mesh to automatically load in PRINT_START.
	Usage: MAKE_SURFACE_MESH [SURFACE=<surface>] [BED=<probing temperature>]
	[EXTRUDER=<probing temperature>]
	[MESH_MULTIPLIER=<integer multiple of mesh density>]
	[bed_mesh_calibrate parameters]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}
	{% if SURFACE not in surfaces.available %}
	{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }
	{% endif %}
	{% set dummy = params.__setitem__('PROFILE', SURFACE) %}
	{% set BED = params.BED|default(70) | int %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set EXTRUDER = params.EXTRUDER|default(km.start_extruder_probing_temp) |
	int %}
	{% set MESH_MULTIPLIER = (params.MESH_MULTIPLIER|default(2)|int, 1)|max %}
	
	M104 S{EXTRUDER}
	M140 S{BED}
	G28
	
	
	{% if surfaces.available[SURFACE].offset !=
	printer.gcode_move.homing_origin.z %}
	_km_set_gcode_offset_base Z="{surfaces.available[SURFACE].offset
	}" MOVE=1
	{% endif %}
	
	
	{% if BED > 0 %}
	{action_respond_info("Stabilizing bed at %iC" | format(BED,))}
	_KM_PARK_IF_NEEDED HEATER=heater_bed RANGE=0.5
	{% if BED < (printer.heater_bed.temperature - 0.2) %}
	M190 R{BED}
	G4 P{((km.start_bed_heat_delay * 10, 30000)|min,
	km.start_bed_heat_delay)|max}
	{% else %}
	G4 P{km.start_bed_heat_delay}
	{% endif %}
	M190 R{BED}
	{% endif %}
	
	{% if EXTRUDER > 0 %}
	_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=2
	M109 R{km.start_extruder_probing_temp}
	{% endif %}
	
	{% if km.start_home_z_at_temp and not bed_at_target %}
	G28 Z
	{% endif %}
	
	
	
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count
	if not params.PROBE_COUNT else
	params.PROBE_COUNT.split(",")|map('int')|list %}
	{% set dummy = params.__setitem__('PROBE_COUNT',(
	MESH_MULTIPLIER * (probe_count[0] - 1) + 1,
	MESH_MULTIPLIER * (probe_count[-1] - 1) + 1,)|join(',')) %}
	
	BED_MESH_CLEAR
	BED_MESH_CALIBRATE_FAST {%
	for k in params|reject('in',['BED','SURFACE'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor %}
	SAVE_CONFIG
	
	
	{% set dummy = None if True else "
	{% set dummy = params.MESH_MULTIPLIER|default(2) %}
	{% set dummy = params.SURFACE|default(active surface) %}
	" %}

[gcode_macro load_surface_mesh]
description = Attempts to load a mesh associated with the specified surface.
	Usage: LOAD_SURFACE_MESH [SURFACE=<surface>]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}
	{% if SURFACE != surfaces.active %}
	SET_SURFACE_ACTIVE SURFACE={SURFACE}
	{% endif %}
	
	{% if SURFACE in printer.bed_mesh.profiles %}
	{% set mesh = printer.bed_mesh.profiles[SURFACE].mesh_params %}
	{% set default = printer.configfile.settings.bed_mesh %}
	
	{% if mesh.min_x <= (default.mesh_min[0] + 0.5) and
	mesh.min_y <= (default.mesh_min[1] + 0.5) and
	mesh.max_x >= (default.mesh_max[0] - 0.5) and
	mesh.max_y >= (default.mesh_max[1] - 0.5) and
	mesh.x_count >= default.probe_count[0] and
	mesh.y_count >= default.probe_count[-1] %}
	
	BED_MESH_PROFILE LOAD={SURFACE}
	{action_respond_info("Loaded mesh: %s" | format(SURFACE,))}
	{% endif %}
	{% endif %}

[gcode_macro m300]
description = Emits and audible beep.
	Usage: M300 [P<duration>] [S<frequency>]
gcode = 
	{% set settings = printer.configfile.settings %}
	{% if "output_pin beeper" in printer %}
	{% set P = (params.P|default(100)|int, 0)|max %}
	{% set S = (params.S|default(1000)|int, 1)|max %}
	SET_PIN PIN=beeper VALUE={% if settings["output_pin beeper"].pwm %}{
	settings["output_pin beeper"].scale|default(1.0) * 0.5
	} CYCLE_TIME={ 1.0 / S }{% else %}1{% endif %}
	G4 P{P}
	SET_PIN PIN=beeper VALUE=0
	{% else %}
	{action_respond_info(
	"M300 is disabled. To enable create an [output_pin beeper] config.")}
	{% endif %}

[gcode_macro set_draw_params]
description = Sets the default parameters used by DRAW_LINE_TO.
	Usage: SET_DRAW_PARAMS [HEIGHT=<mm>] [WIDTH=<mm>] [FEEDRATE=<mm/m>]
variable_height = 0.2
variable_width = 0.0
variable_feedrate = 1200
gcode = 
	{% set dparams = printer["gcode_macro set_draw_params"] %}
	{% for k in params %}
	{% set kl = k|lower %}
	{% if kl in dparams %}
	{% if dparams[kl] is float %}
	{% set v = params[k]|float %}
	{% elif dparams[kl] is integer %}
	{% set v = params[k]|int %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=set_draw_params VARIABLE={kl} VALUE="{v}"
	{% endif %}
	{% endfor %}

[gcode_macro draw_line_to]
description = Extrudes a line of filament at the specified height and width from
	the current coordinate to the supplied XY coordinate. (The height is used only
	to calculate the extrusion volume.)
	Usage: DRAW_LINE_TO [X=<pos>] [Y=<pos>] [HEIGHT=<mm>] [WIDTH=<mm>]
	[FEEDRATE=<mm/m>]
gcode = 
	{% set dparams = printer["gcode_macro set_draw_params"] %}
	{% set position = printer.gcode_move.gcode_position %}
	{% set X = params.X|default(position.x)|float %}
	{% set Y = params.Y|default(position.y)|float %}
	{% set HEIGHT = params.HEIGHT|default(dparams.height)|float %}
	{% set WIDTH = params.WIDTH|default(dparams.width)|float %}
	{% set FEEDRATE = params.FEEDRATE|default(dparams.feedrate)|int %}
	
	{% set distance = ((X - position.x) ** 2 + (Y - position.y) ** 2) ** 0.5 %}
	
	{% set filament_area = 3.14159 *
	(printer.configfile.settings[
	printer.toolhead.extruder].filament_diameter ** 2) / 4 %}
	{% set E = distance * ((WIDTH * HEIGHT) / filament_area) %}
	
	
	_KM_SAVE_GCODE_STATE NAME=_KM_PURGE
	G90
	G92 E0.0
	G1 X{"%.3f" % X} Y{"%.3f" % Y} E{"%.5f" % E} F{FEEDRATE}
	_KM_RESTORE_GCODE_STATE NAME=_KM_PURGE MOVE=0

[gcode_macro draw_purge_line]
description = Purges the specified length of filament as a line (or rows of
	lines) in front of the supplied print area. If no print area is specified the
	purge lines are drawn at the front edge of the maximum printable area. If no
	printable area is set it defaults to the XY axis limits.
	Usage: DRAW_PURGE_LINE [PRINT_MIN=<X,Y>] [PRINT_MAX=<X,Y>] [HEIGHT=<mm>]
	[WIDTH=<mm>] [LENGTH=<mm>]
gcode = 
	
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set origin = printer.gcode_move.homing_origin %}
	{% set dummy = km.__setitem__('print_min', (km.print_min[0] - origin.x,
	km.print_min[1] - origin.y)) %}
	{% set dummy = km.__setitem__('print_max', (km.print_max[0] - origin.x,
	km.print_max[1] - origin.y)) %}
	
	{% if "PRINT_MIN" in params %}
	{% set PRINT_MIN = (
	(params.PRINT_MIN.split(",")[0]|float, km.print_min[0])|max,
	(params.PRINT_MIN.split(",")[1]|float, km.print_min[1])|max
	) %}
	{% else %}
	{% set PRINT_MIN = km.print_min %}
	{% endif %}
	{% if "PRINT_MAX" in params %}
	{% set PRINT_MAX = (
	(params.PRINT_MAX.split(",")[0]|float, km.print_max[0])|min,
	(params.PRINT_MAX.split(",")[1]|float, km.print_max[1])|min
	) %}
	{% else %}
	{% set PRINT_MAX = km.print_max %}
	{% endif %}
	{% set extruder = printer.toolhead.extruder|string %}
	{% set HEIGHT = params.HEIGHT|default(
	printer.configfile.settings[extruder].nozzle_diameter * 0.625)|float %}
	{% set WIDTH = params.WIDTH|default(
	printer.configfile.settings[extruder].nozzle_diameter * 1.25)|float %}
	{% set LENGTH = params.LENGTH|default(km.start_purge_length)|float %}
	
	{% set dparams = printer["gcode_macro set_draw_params"] %}
	{% set filament_area = 3.14159 *
	(printer.configfile.settings[extruder].filament_diameter ** 2) / 4 %}
	{% set purge_length = (LENGTH * filament_area) / (WIDTH * HEIGHT) %}
	{% set printable_length = PRINT_MAX[0] - PRINT_MIN[0] %}
	{% set purge_rows = (purge_length / printable_length)|round(0,'ceil')|int %}
	{% set printable_inset = (printable_length - purge_length / purge_rows) / 2 %}
	{% set PRINT_MIN = (PRINT_MIN[0] + printable_inset, PRINT_MIN[1]) %}
	{% set PRINT_MAX = (PRINT_MAX[0] - printable_inset, PRINT_MAX[1]) %}
	
	{% set y_start = (km.print_min[1], PRINT_MIN[1] - km.start_purge_clearance -
	(purge_rows + 0.5) * WIDTH )|max %}
	G90
	
	G1 X{"%.3f" % (PRINT_MIN[0] - 30, km.print_min[0])|max} Y{
	"%.3f" % (y_start - 10, km.print_min[1])|max} F{km.travel_speed_xy}
	
	G1 X{"%.3f" % (PRINT_MIN[0] - 2, km.print_min[0])|max} Y{"%.3f" % y_start} Z{
	"%.4f" % HEIGHT} F{km.travel_speed_xy}
	
	G92 E0.0
	G1 E{"%.3f" % km.start_purge_prime_length} F{km.load_priming_speed}
	G92 E0.0
	
	G1 X{"%.3f" % PRINT_MIN[0]} F{km.travel_speed_xy}
	{% for n in range(purge_rows - 1) %}
	{% set x_pos = PRINT_MIN[0] if n % 2 else PRINT_MAX[0] %}
	DRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{
	WIDTH * n + y_start}"
	DRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{
	WIDTH * (n + 1) + y_start}"
	{% endfor %}
	{% set x_pos = PRINT_MAX[0] if purge_rows % 2 else PRINT_MIN[0] %}
	DRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{
	WIDTH * (purge_rows - 1) + y_start}"
	G92 E0.0

[gcode_macro _check_fan_params]
gcode = 
	{% set MAXIMUM = params.MAXIMUM|default(
	printer["gcode_macro set_fan_scaling"].maximum)|int %}
	{% set MINIMUM = params.MINIMUM|default(
	printer["gcode_macro set_fan_scaling"].minimum)|int %}
	
	{% if params.SCALE and params.SCALE|float <= 0 %}
	{ action_raise_error("SCALE must be a positive value.") }
	{% elif MINIMUM < 0 or MINIMUM > 255 %}
	{ action_raise_error("MINIMUM must be between 0 and 255.") }
	{% elif MAXIMUM < 0 or MAXIMUM > 255 %}
	{ action_raise_error("MAXIMUM must be between 0 and 255.") }
	{% elif params.SPEED and (params.SPEED|int < 0 or params.SPEED|int > 255) %}
	{ action_raise_error("SPEED must be between 0 and 255.") }
	{% elif params.BOOST and (params.BOOST|int < 0 or params.BOOST|int > 255) %}
	{ action_raise_error("BOOST must be between 0 and 255.") }
	{% elif MINIMUM > MAXIMUM %}
	{ action_raise_error("MINIMUM must be less than or equal to MAXIMUM.") }
	{% endif %}

[gcode_macro set_fan_scaling]
description = Sets fan scaling factors applied to M106 command. If a speed is
	provided it will be adjusted according to the scaling parameters.
	Usage: SET_FAN_SCALING [SCALE=<scale>] [BOOST=<boost>] [MAXIMUM=<max>]
	[MINIMUM=<min>] [SPEED=<speed>]
variable_scale = 1.0
variable_boost = 0
variable_minimum = 0
variable_maximum = 255
variable_real_speed = 0
gcode = 
	_CHECK_FAN_PARAMS{% for k in params %}{' '~k~'='~params[k]}{% endfor %}
	{% set SCALE = params.SCALE|default(scale)|float %}
	{% set BOOST = params.BOOST|default(boost)|float %}
	{% set MAXIMUM = params.MAXIMUM|default(maximum)|int %}
	{% set MINIMUM = params.MINIMUM|default(minimum)|int %}
	{% set SPEED = params.SPEED|default(real_speed)|int %}
	
	{% if SCALE != 1.0 or BOOST != 0 or MAXIMUM != 255 or MINIMUM != 0 %}
	{action_respond_info("Fan: Scale: %.2f Minimum:%i Maximum: %i Speed: %i"|
	format(SCALE, MINIMUM, MAXIMUM, SPEED))}
	{% endif %}
	
	
	{% if params|length > 0 %}
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=scale VALUE="{SCALE}"
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=boost VALUE="{BOOST}"
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=minimum VALUE="{MINIMUM}"
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=maximum VALUE="{MAXIMUM}"
	
	M106 S{SPEED}
	{% endif %}
	
	{% set dummy = None if True else "
	{% set dummy = params.SCALE|default(1.0)|float %}
	{% set dummy = params.BUMP|default(0)|int %}
	{% set dummy = params.MAXIMUM|default(255)|int %}
	{% set dummy = params.MINIMUM|default(0)|int %}
	{% set dummy = params.SPEED|default(current speed)|int %}
	" %}

[gcode_macro reset_fan_scaling]
description = Clears all fan scaling factors.
	Usage: RESET_FAN_SCALING
gcode = 
	SET_FAN_SCALING SCALE=1.0 BOOST=0 MAXIMUM=255 MINIMUM=0

[gcode_macro m106]
description = Wraps M106 to implement scaling overrides.
rename_existing = M106.6245197
gcode = 
	{% set S = params.S|default(255)|int %}
	{% set scale = printer["gcode_macro set_fan_scaling"] %}
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=real_speed VALUE="{S}"
	M106.6245197 S{((((S + scale.boost) * scale.scale) | round | int,
	scale.minimum) | max, scale.maximum) | min}

[gcode_macro _load_unload]
gcode = 
	{% set saved_extruder = printer.toolhead.extruder %}
	{% set EXTRUDER = params.EXTRUDER|default(saved_extruder)|lower %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% set BEEPS = params.BEEPS|default(8)|int if "output_pin beeper" in printer
	else 0 %}
	{% set default_minimum = km.load_min_temp if km.load_min_temp else
	(printer.configfile.settings[EXTRUDER].min_extrude_temp + 5) %}
	{% if 'MINIMUM' in params %}
	{% set MINIMUM = params.MINIMUM|int %}
	
	{% elif printer.pause_resume.is_paused and printer[EXTRUDER].target == 0 and
	printer["gcode_macro resume"].saved_extruder_temp %}
	{% set MINIMUM = printer["gcode_macro resume"].saved_extruder_temp %}
	
	{% elif printer[EXTRUDER].target > default_minimum %}
	{% set MINIMUM = printer[EXTRUDER].target %}
	{% else %}
	{% set MINIMUM = default_minimum %}
	{% endif %}
	{% if MINIMUM < printer.configfile.settings[EXTRUDER].min_extrude_temp %}
	{ action_raise_error("Extrude below minimum temp.") }
	{% elif printer.pause_resume.is_paused %}
	
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"
	{% endif %}
	{% set SPEED = params.SPEED|default(km.load_speed)|int %}
	{% set priming_length = km.load_priming_length %}
	{% set LENGTH = params.LENGTH|default(km.load_length)|float - priming_length%}
	{% if LENGTH < 0 %}
	{% set priming_length = (priming_length + LENGTH, 0)|max %}
	{% set LENGTH = 0 %}
	{% endif %}
	SAVE_GCODE_STATE NAME=_KM_LOAD_UNLOAD
	{% if EXTRUDER != saved_extruder%}
	ACTIVATE_EXTRUDER EXTRUDER={EXTRUDER}
	{% endif %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	{% if not printer.extruder.can_extrude or
	printer[EXTRUDER].target < default_minimum %}
	{action_respond_info("Preheating %s to %d" | format(EXTRUDER, MINIMUM))}
	M109 S{MINIMUM}
	{% endif %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS={"filament_load"
	if params.LOAD|int else "filament_unload"}
	M83
	{% set priming_speed = (km.load_priming_speed, SPEED)|min %}
	{% if params.LOAD|int %}
	G0 E{LENGTH} F{SPEED}
	G0 E{priming_length} F{priming_speed}
	G0 E{'%.4f' % -printer["gcode_macro resume"].saved_e} F{km.load_speed}
	{% else %}
	{% set pre_prime_distance = 5.0 %}
	{% set shaping_moves = 5 %}
	{% set shaping_distance = (shaping_moves * (1 + shaping_moves)/20) %}
	
	G0 E{pre_prime_distance} F{SPEED}
	G4 P500
	G0 E{'%.4f' % -(priming_length - shaping_distance)} F{SPEED}
	
	
	{% for i in range(1, shaping_moves + 1) %}
	G0 E2 F{priming_speed}
	G0 E-{2 + (0.1 * i)} F{priming_speed}
	{% endfor %}
	
	G0 E{'%.4f' % -(LENGTH + pre_prime_distance)} F{SPEED}
	{% endif %}
	RESTORE_GCODE_STATE NAME=_KM_LOAD_UNLOAD
	
	
	{% for i in range(BEEPS) %}
	M300 P100
	G4 P200
	{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro LOAD_FILAMENT]
description = Loads filament to the extruder.
	Usage: LOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]
	[EXTRUDER=<extruder>] [MINIMUM=<temperature>]
	[BEEPS=<beep count on completion>]
gcode = 
	_LOAD_UNLOAD LOAD=1{% for k in params
	%}{' '~k~'="'~params[k]~'"'}{% endfor %}
	
	
	{% set dummy = None if True else "
	M109
	{% set dummy = params.LENGTH|default(variable_load_length)|float %}
	{% set dummy = params.SPEED|default(variable_load_speed)|float %}
	{% set dummy = params.EXTRUDER|default(current extruder) %}
	{% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}
	{% set dummy = params.BEEPS|default(10)|int %}
	" %}

[gcode_macro UNLOAD_FILAMENT]
description = Unloads filament from the extruder.
	Usage: UNLOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]
	[EXTRUDER=<extruder>] [MINIMUM=<temperature>]
	[BEEPS=<beep count on completion>]
gcode = 
	_LOAD_UNLOAD LOAD=0{% for k in params
	%}{' '~k~'="'~params[k]~'"'}{% endfor %}
	
	
	{% set dummy = None if True else "
	M109
	{% set dummy = params.LENGTH|default(variable_load_length)|float %}
	{% set dummy = params.SPEED|default(variable_load_speed)|float %}
	{% set dummy = params.EXTRUDER|default(default extruder) %}
	{% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}
	{% set dummy = params.BEEPS|default(10)|int %}
	" %}

[gcode_macro _pause_inner_m700]
gcode = 
	{% set extruder = "extruder" ~ params.T|replace('0', '')
	if "T" in params else printer.toolhead.extruder %}
	{% if extruder != printer.toolhead.extruder%}
	ACTIVATE_EXTRUDER EXTRUDER={extruder}
	{% endif %}
	
	{% set z_param = (' Z="%f"' % params.Z) if 'Z' in params else "" %}
	
	{% if printer.idle_timeout.state|string == "Printing" %}
	PAUSE B="{0}" P=2{z_param}
	{% elif not printer.pause_resume.is_paused%}
	PARK B="{0}" P=2{z_param}
	{% endif %}

[gcode_macro m701]
description = Pauses/parks the toolhead then loads filament to the extruder.
	Usage: M701 [L<distance>] [Z<pos>] [T<extruder>]
gcode = 
	{% if 'U' in params %}
	{% if not 'L' in params %}
	RESPOND TYPE=error MSG="Argument \"U\" substituted for missing \"L\"."
	{% set dummy = params.__setitem__("L", params.U) %}
	{% else %}
	RESPOND TYPE=error MSG="Invalid argument \"U\" ignored."
	{% endif %}
	{% endif %}
	
	_PAUSE_INNER_M700 {% for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	LOAD_FILAMENT BEEPS="{10}" LENGTH={
	params.L|default(printer["gcode_macro _km_globals"].load_length)|float}

[gcode_macro m702]
description = Pauses/parks the toolhead then unloads filament from the extruder.
	Usage: M702 [U<distance>] [Z<pos>] [T<extruder>]
gcode = 
	{% if 'L' in params %}
	{% if not 'U' in params %}
	RESPOND TYPE=error MSG="Argument \"L\" substituted for missing \"U\"."
	{% set dummy = params.__setitem__("U", params.L) %}
	{% else %}
	RESPOND TYPE=error MSG="Invalid argument \"L\" ignored."
	{% endif %}
	{% endif %}
	
	_PAUSE_INNER_M700 {% for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	UNLOAD_FILAMENT BEEPS="{10}" LENGTH={
	params.U|default(printer["gcode_macro _km_globals"].load_length)|float}

[gcode_macro _km_globals]
variable_bed_surface_max_name_length = 10
variable_bed_surfaces = ['default']
variable_load_length = 90.0
variable_load_min_temp = 0
variable_load_priming_length = 20.0
variable_load_priming_speed = 200
variable_load_speed = 1200
variable_menu_show_octoprint = True
variable_menu_show_sdcard = True
variable_menu_temperature = [
	{'name' : 'PLA',  'extruder' : 200, 'bed' : 60},
	{'name' : 'PETG', 'extruder' : 230, 'bed' : 85},
	{'name' : 'ABS',  'extruder' : 245, 'bed' : 110}]
variable_park_x = 0.0
variable_park_y = 0.0
variable_park_z = 20.0
variable_print_min = ()
variable_print_max = ()
variable_pressure_advance_scale = -1.0
variable_probe_mesh_padding = 5.0
variable_probe_min_count = 3
variable_probe_count_scale = 1.0
variable_start_bed_heat_delay = 2000
variable_start_bed_heat_overshoot = 2.0
variable_start_clear_adjustments_at_end = True
variable_start_end_park_y = 0.0
variable_start_extruder_preheat_scale = 0.5
variable_start_extruder_probing_temp = 0
variable_start_home_z_at_temp = True
variable_start_level_bed_at_temp = True
variable_start_purge_clearance = 2.0
variable_start_purge_length = 0.0
variable_start_purge_prime_length = 12.0
variable_start_quad_gantry_level_at_temp = True
variable_start_random_placement_max = 0
variable_start_random_placement_padding = 10.0
variable_start_try_saved_surface_mesh = False
variable_start_z_tilt_adjust_at_temp = True
variable_travel_speed_xy = 3000
variable_travel_speed_z = 600
description = Initializes our globals, including any _km_options overrides.
gcode = 
	
	
	
	
	
	
	
	
	{% set required_sections = {"heater_bed" : None,
	"extruder" : None,
	"gcode_macro _km_options" : None,
	"idle_timeout" : ("gcode", "_KM_IDLE_TIMEOUT"),
	"pause_resume" : None,
	"respond" : None,
	"save_variables" : None,
	"virtual_sdcard" :
	("on_error_gcode", "CANCEL_PRINT")
	} %}
	{% set warn_removed = {
	"start_extruder_set_target_before_level" :
	"The start_extruder_set_target_before_level option has been removed. "
	"Use the start_extruder_probing_temp option instead to set a fixed "
	"probing temperature.",
	"start_gcode_before_print" :
	"The start_gcode_before_print option has been removed. The same effect "
	"can now be achieved by inserting custom gcode before the "
	"_PRINT_START_PHASE_PURGE line in your slicer's start gcode, or by "
	"wrapping the _PRINT_START_PHASE_PURGE macro. See the Slicer "
	"Configuration section in the readme for more information.",
	"velocity_decel_scale" :
	"The velocity_decel_scale option has been removed. Klipper's input "
	"shaping provides a superior mechanism for improving print quality "
	"at higher speeds.",
	} %}
	{% set output = [] %}
	{% for s in required_sections %}
	{% set f = required_sections[s][0] if required_sections[s] else None %}
	{% set v = required_sections[s][1] if required_sections[s] else None %}
	{% if s not in printer.configfile.config %}
	{% set dummy = output.append("Missing [%s] section.\n" | format(s)) %}
	{% elif f and
	(v not in printer.configfile.config[s][f]|default("")|upper) %}
	{% set dummy = output.append("Missing %s in %s for [%s] section.\n"
	| format(v, f, s)) %}
	{% endif %}
	{% endfor %}
	{% if output %}
	{ action_emergency_stop((
	"required printer.cfg section(s) missing:\n"
	~ output | join("\n")) ~
	"See readme: https://github.com/jschuh/klipper-macros\x23klipper-setup")
	}
	{% endif %}
	
	
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_level_bed_at_temp VALUE="{
	1 if printer.bed_mesh is defined else 0}"
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_quad_gantry_level_at_temp VALUE="{
	1 if printer.quad_gantry_level is defined else 0}"
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_z_tilt_adjust_at_temp VALUE="{
	1 if printer.z_tilt is defined else 0}"
	{% set toolhead = printer.toolhead %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=print_min VALUE="{
	(toolhead.axis_minimum.x, toolhead.axis_minimum.y)}"
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=print_max VALUE="{
	(toolhead.axis_maximum.x, toolhead.axis_maximum.y)}"
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_end_park_y VALUE="{
	toolhead.axis_maximum.y}"
	{% set settings = printer.configfile.settings %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_home_z_at_temp VALUE="{
	1 if ("stepper_z" in settings and
	settings.stepper_z.endstop_pin.split()|join("")|lower ==
	"probe:z_virtual_endstop") else 0}"
	
	{% set options = printer["gcode_macro _km_options"] %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	
	{% if options.park_x|default("")|string|lower == "min" %}
	{% set dummy = options.__setitem__("park_x",
	printer.configfile.settings.stepper_x.position_min) %}
	{% elif options.park_x|default("")|string|lower == "max" %}
	{% set dummy = options.__setitem__("park_x",
	printer.configfile.settings.stepper_x.position_max) %}
	{% endif %}
	{% if options.park_y|default("")|string|lower == "min" %}
	{% set dummy = options.__setitem__("park_y",
	printer.configfile.settings.stepper_y.position_min) %}
	{% elif options.park_y|default("")|string|lower == "max" %}
	{% set dummy = options.__setitem__("park_y",
	printer.configfile.settings.stepper_y.position_max) %}
	{% endif %}
	{% if options.start_end_park_y|default("")|string|lower == "min" %}
	{% set dummy = options.__setitem__("start_end_park_y",
	printer.configfile.settings.stepper_y.position_min) %}
	{% elif options.start_end_park_y|default("")|string|lower == "max" %}
	{% set dummy = options.__setitem__("start_end_park_y",
	printer.configfile.settings.stepper_y.position_max) %}
	{% endif %}
	{% if options.park_z|default("")|string|lower == "min" %}
	{% set dummy = options.__setitem__("park_z",
	printer.configfile.settings.stepper_z.position_min) %}
	{% elif options.park_z|default("")|string|lower == "max" %}
	{% set dummy = options.__setitem__("park_z",
	printer.configfile.settings.stepper_z.position_max) %}
	{% endif %}
	
	
	{% for k in options %}
	{% if k not in km %}
	{% if k in warn_removed %}
	{action_respond_info(warn_removed[k])}
	{% else %}
	{% set dummy = output.append("%s is not valid for _KM_OPTIONS." |
	format(k)) %}
	{% endif %}
	{% elif km[k] is string %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k
	} VALUE="'{options[k]|replace('\\','\\\\')|replace('\'','\\\'')
	|replace('\"','\\\"')}'"
	{% elif km[k] is float %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k
	} VALUE="{options[k]|float}"
	{% elif km[k] is integer or km[k] is boolean %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k} VALUE="{options[k]|int}"
	{% elif km[k] is mapping %}
	{% if options[k] is not mapping %}
	{% set dummy = output.append("%s requires a mapping type." |
	format(k)) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k
	} VALUE="{options[k]|replace('\"','\\\"')}"
	{% elif km[k] is sequence %}
	{% if options[k] is not sequence %}
	{% set dummy = output.append("%s requires a sequence type." |
	format(k)) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k
	} VALUE="{options[k]|replace('\"','\\\"')}"
	{% else %}
	{% set dummy = output.append("%s is not a valid type for _KM_OPTIONS." |
	format(k)) %}
	{% endif %}
	{% endfor %}
	
	{% if "homing_override" in printer.configfile.config %}
	{% for l in printer.configfile.config.homing_override.gcode.split("\n") %}
	{% if " g28 " in (" " ~ l.split("\x23")[0].split(";")[0]|lower ~ " ") %}
	{% set dummy = output.append(
	"G28 in [homing_override] gcode. Replace with G28.6245197 to "
	"fix recursive macro call.\n"
	"See readme: https://github.com/jschuh/klipper-macros\x23g28") %}
	{% endif %}
	{% endfor %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=check_km_config VARIABLE=load_errors VALUE="{
	output|replace('\"','\\\"')}"
	M400

[delayed_gcode INIT_GLOBALS]
initial_duration = 1
gcode = 
	LIST_MACROS SILENT=1
	_KM_GLOBALS
	
	CHECK_KM_CONFIG
	_INIT_SURFACES
	BED_MESH_CHECK
	
	SET_DRAW_PARAMS WIDTH="{printer.configfile.settings.extruder.nozzle_diameter}"
	
	_KM_OPTIONS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready

[gcode_macro check_km_config]
variable_load_errors = []
description = Checks global variables and throws an error on any invalid values.
	Does nothing if the config has no errors.
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set toolhead = printer.toolhead %}
	{% set output = load_errors %}
	{% if km.park_x > toolhead.axis_maximum.x or
	km.park_x < toolhead.axis_minimum.x %}
	{% set dummy = output.append("park_x is invalid.") %}
	{% endif %}
	{% if km.park_y > toolhead.axis_maximum.y or
	km.park_y < toolhead.axis_minimum.y %}
	{% set dummy = output.append("park_y is invalid.") %}
	{% endif %}
	{% if km.park_z > toolhead.axis_maximum.z or
	km.park_z < toolhead.axis_minimum.z %}
	{% set dummy = output.append("park_z is invalid.") %}
	{% endif %}
	{% if km.print_max[0] > toolhead.axis_maximum.x or
	km.print_max[1] > toolhead.axis_maximum.y %}
	{% set dummy = output.append("print_max is invalid.") %}
	{% endif %}
	{% if km.print_min[0] < toolhead.axis_minimum.x or
	km.print_min[1] < toolhead.axis_minimum.y %}
	{% set dummy = output.append("print_min is invalid.") %}
	{% endif %}
	{% if km.start_extruder_preheat_scale > 1.0 or
	km.start_extruder_preheat_scale < 0.0 %}
	{% set dummy = output.append("extruder_preheat_scale is invalid.") %}
	{% endif %}
	{% if km.load_length >
	printer.configfile.settings["extruder"].max_extrude_only_distance %}
	{% set dummy = output.append(
	"load_length exceeds max_extrude_only_distance.") %}
	{% endif %}
	{% if km.load_length < km.load_priming_length %}
	{% set dummy = output.append(
	"load_length is shorter than load_priming_length.") %}
	{% endif %}
	{% if km.load_length < 0.0 %}
	{% set dummy = output.append("load_length is negative.") %}
	{% endif %}
	{% if km.load_priming_length < 0.0 %}
	{% set dummy = output.append("load_priming_length is negative.") %}
	{% endif %}
	
	
	{% if output %}
	{ action_raise_error(output|sort|join('\nError: ')) }
	{% endif %}
	M400

[gcode_macro kmvars]
description = Lists global variables used by klipper-macros.
	Usage: KMVARS [SEARCH=<search_string>]
gcode = 
	{% set SEARCH = params.SEARCH|default(params.S|default(""))|lower %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set output = [] %}
	{% for k in km %}
	{% if SEARCH in k %}
	{% set dummy = output.append(k ~ ": " ~ km[k]) %}
	{% endif %}
	{% endfor %}
	{ action_respond_info(output|sort|join('\n')) }

[gcode_macro check_macro_docs]
description = Lists macros lacking proper documentation.
	Usage: CHECK_MACRO_DOCS [USAGE=<0|1>] [HIDDEN=<1|0>] [RENAMED=<1|0>]
gcode = 
	{% set USAGE = params.USAGE|default(0)|int %}
	{% set HIDDEN = params.HIDDEN|default(0)|int %}
	{% set RENAMED = params.RENAMED|default(0)|int %}
	{% set output = [] %}
	{%set config = printer.configfile.config %}
	{% for k in config|sort %}
	{% if k.startswith("gcode_macro") %}
	{% set name = k.split()[1] %}
	{% set desc = config[k].description|default("") %}
	{% set is_renamed = config[k].rename_existing|default("") %}
	{% if (not desc or (USAGE and not "Usage: "~name.upper() in desc)) and
	(HIDDEN or not name.startswith('_')) and (RENAMED or is_renamed) %}
	{% set dummy = output.append("%s&nbsp;%s: missing %s."
	| format("*" if is_renamed else "&nbsp;", name,
	"description" if not desc else "usage")) %}
	{% endif %}
	{% endif %}
	{% endfor %}
	{action_respond_info(output|join("\n"))}

[gcode_macro listvars]
description = Lists per-macro variables with a name containing SEARCH. This is
	useful for debugging macros by allowing you to probe printer state. Be very
	careful, however, as an overly broad SEARCH parameter can take a long time
	to process and potentially hang or crash klipper.
	Usage: LISTVARS SEARCH=<search_string>
gcode = 
	
	{% if 'SEARCH' not in params and 'S' not in params %}
	{ action_raise_error("Must provide a SEARCH parameter.") }
	{% endif %}
	{% set SEARCH = params.SEARCH|default(params.S)|lower %}
	{% set ns = namespace() %}
	{% set output = [] %}
	{% for item in printer %}
	{% if item is not string %}
	{% set ns.path = ['printer', "[%s]" % (item|string), ''] %}
	{% elif ' ' in item %}
	{% set ns.path = ['printer', "['%s']" % (item), ''] %}
	{% else %}
	{% set ns.path = ['printer.', item, ''] %}
	{% endif %}
	
	{% if SEARCH in ns.path|lower %}
	{% set dummy = output.append(ns.path|join) %}
	{% endif %}
	
	{% if printer[item].items() %}
	{% for childkey, child in printer[item].items() recursive %}
	{% set ns.path = ns.path[:loop.depth|int + 1] %}
	{% if childkey is not string %}
	{% set null = ns.path.append("[%s]" % (childkey|string)) %}
	{% elif ' ' in childkey %}
	{% set null = ns.path.append("['%s']" % (childkey)) %}
	{% else %}
	{% set null = ns.path.append(".%s" % (childkey)) %}
	{% endif %}
	
	{% if child is mapping  %}
	{loop(child.items())}
	{% else %}
	{% if SEARCH in ns.path|lower %}
	{% set dummy = output.append("%s : %s" % (ns.path|join, child)) %}
	{% endif %}
	{% endif %}
	{% endfor %}
	{% endif %}
	{% endfor %}
	{ action_respond_info(output|join("\n")) }

[gcode_macro list_macros]
description = Lists registered macros (and optionally show variable state).
	Usage: LISTVARS SEARCH=<search_string> VARS=<0|1> SILENT=<0|1>
variable_macros = {}
gcode = 
	
	{% if not macros %}
	{% set renames = {} %}
	{% for k in printer.configfile.config %}
	{% if k.lower().startswith("gcode_macro") and
	printer.configfile.config[k].rename_existing %}
	{% set name = k.split(None, 1)[1] | lower %}
	{% set dummy = renames.__setitem__(name,
	[printer.configfile.config[k].rename_existing|lower] +
	renames[name]|default([])) %}
	{% endif %}
	{% endfor %}
	{% for k in printer %}
	{% if k.lower().startswith("gcode_macro") %}
	{% set name = k.split(None, 1)[1] | lower %}
	{% set dummy = macros.__setitem__(name, renames[name]|default([])) %}
	{% endif %}
	{% endfor %}
	{% endif %}
	
	{% if params.SILENT|default(0)|int == 0 %}
	_LIST_MACROS_DISPLAY {rawparams}
	{% endif %}

[gcode_macro _list_macros_display]
gcode = 
	{% set SEARCH = params.SEARCH | default(params.S) | default("") | lower %}
	{% set VARS = params.VARS | default(params.V) | default(0) | int != 0 %}
	
	{% set macros = printer["gcode_macro list_macros"].macros %}
	{% set output = [] %}
	{% for k in macros %}
	{% if SEARCH in k | lower %}
	{% set line = k ~ ((" (renames: %s)" % (macros[k]|join(","))) if macros[k]
	else "") %}
	{% set outvars = [] %}
	{% if VARS %}
	{% for v in printer["gcode_macro " ~ k] | sort %}
	{% set dummy = outvars.append("\n* %s: %s" %
	(v, printer["gcode_macro " ~ k][v]|string)) %}
	{% endfor %}
	{% endif %}
	{% set dummy = output.append(line + outvars | join("")) %}
	{% endif %}
	{% endfor %}
	{ action_respond_info(output | sort | join("\n")) }

[gcode_macro set_heater_temperature_scaled]
gcode = 
	{% set HEATER = params.HEATER.lower() %}
	{% set TARGET = params.TARGET|default(0.0)|float %}
	{% set scaled_heaters =
	printer["gcode_macro set_heater_scaling"].scaled_heaters %}
	{% if HEATER in scaled_heaters %}
	{% set scales = scaled_heaters[HEATER] %}
	{% set dummy = scales.__setitem__("real_target", TARGET) %}
	{%if TARGET > 0.0 %}
	{% set TARGET = (((TARGET + scales.bump) * scales.scale, scales.minimum)
	| max, scales.maximum)|min %}
	{% endif %}
	{% endif %}
	SET_HEATER_TEMPERATURE HEATER="{HEATER}" TARGET={TARGET}

[gcode_macro temperature_wait_scaled]
gcode = 
	{% set SENSOR = params.SENSOR.lower() %}
	{% set heater = SENSOR if not SENSOR.startswith("heater_generic") else
	SENSOR.split()[1] %}
	{% set scaled_heaters =
	printer["gcode_macro set_heater_scaling"].scaled_heaters %}
	{% if heater in scaled_heaters %}
	{% set scales = scaled_heaters[heater] %}
	{% if "MINIMUM" in params and MINIMUM > 0.0 %}
	{% set MINIMUM = (((MINIMUM + scales.bump) * scales.scale, scales.minimum)
	| max, scales.maximum)|min %}
	{% endif %}
	{% if "MAXIMUM" in params and MAXIMUM > 0.0 %}
	{% set MAXIMUM = (((MAXIMUM + scales.bump) * scales.scale, scales.minimum)
	| max, scales.maximum)|min %}
	{% endif %}
	{% else %}
	{% set settings = printer.configfile.settings[SENSOR] %}
	{% set MINIMUM = params.MINIMUM|default(settings.min_temp) %}
	{% set MAXIMUM = params.MAXIMUM|default(settings.max_temp) %}
	{% endif %}
	{% if printer[sensor].temperature < MINIMUM or
	printer[sensor].temperature > MAXIMUM %}
	TEMPERATURE_WAIT SENSOR="{SENSOR}" MINIMUM={MINIMUM} MAXIMUM={MAXIMUM}
	{% endif %}

[gcode_macro _gcode_wait_wrapper_inner]
gcode = 
	
	
	{% set sensor = params.HEATER if params.HEATER in
	printer.heaters.available_heaters
	else ("heater_generic " ~ params.HEATER) %}
	{% set target = printer[sensor].target %}
	{% if 'R' in params and target > 0.0 %}
	{% set T = params.T|default("") %}
	M{params.M}.6245197 S{target} { (" T"~T) if T else "" }
	{% elif printer[sensor].temperature < target %}
	TEMPERATURE_WAIT SENSOR="{sensor}" MINIMUM={target}
	{% endif %}

[gcode_macro _gcode_wait_wrapper]
gcode = 
	{% set target = params.S | default(params.R | default(0))| float %}
	SET_HEATER_TEMPERATURE_SCALED HEATER="{params.HEATER}" TARGET={target}
	_GCODE_WAIT_WRAPPER_INNER{%
	for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}

[gcode_macro m109]
rename_existing = M109.6245197
gcode = 
	{% set extruder = "extruder" ~ params.T|replace('0', '')
	if "T" in params else printer.toolhead.extruder %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating
	_GCODE_WAIT_WRAPPER HEATER={extruder}{%
	for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro m190]
rename_existing = M190.6245197
gcode = 
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=bed_heating
	_GCODE_WAIT_WRAPPER HEATER=heater_bed {%
	for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro m191]
description = Sets chamber temperature (with wait for heating).
	Usage: M191 [S<temp>]
gcode = 
	
	{% if "R" in params %}
	{% set dummy = params.__setitem__("S", params.R) %}
	{% endif %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=chamber_heating
	_GCODE_WAIT_WRAPPER HEATER=chamber {%
	for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro m104]
rename_existing = M104.6245197
gcode = 
	{% set extruder = "extruder" ~ params.T|replace('0', '')
	if "T" in params else printer.toolhead.extruder %}
	SET_HEATER_TEMPERATURE_SCALED HEATER={extruder} TARGET={params.S|default(0)}

[gcode_macro m140]
rename_existing = M140.6245197
gcode = 
	SET_HEATER_TEMPERATURE_SCALED HEATER=heater_bed TARGET={params.S|default(0)}

[gcode_macro m141]
description = Sets chamber temperature.
	Usage: M141 [S<temp>]
gcode = 
	SET_HEATER_TEMPERATURE_SCALED HEATER=chamber TARGET={params.S|default(0)}

[gcode_macro _check_heater_params]
gcode = 
	{% set HEATER = params.HEATER|lower %}
	{% set sensor = params.HEATER %}
	{% if HEATER not in printer.heaters.available_heaters %}
	{% set sensor = "heater_generic " ~ HEATER %}
	{% if sensor not in printer.heaters.available_heaters %}
	{ action_raise_error("The value '%s' is not valid for HEATER"
	| format(HEATER)) }
	{% endif %}
	{% endif %}
	{% set settings = printer.configfile.settings[sensor] %}
	{% set scaled_heaters =
	printer["gcode_macro set_heater_scaling"].scaled_heaters %}
	{% if HEATER is in scaled_heaters %}
	{% set scales = scaled_heaters[HEATER] %}
	{% else %}
	{% set scales = { "scale": 1.0, "bump": 0.0, "minimum": settings.min_temp,
	"maximum": settings.max_temp,
	"real_target": printer[sensor].target} %}
	{% endif %}
	{% set SCALE = params.SCALE|default(scales.scale)|float %}
	{% set BUMP = params.BUMP|default(scales.bump)|float %}
	{% set MINIMUM = params.MINIMUM|default(scales.minimum)|float %}
	{% set MAXIMUM = params.MAXIMUM|default(scales.maximum)|float %}
	
	{% if SCALE <= 0 %}
	{ action_raise_error("SCALE must be a positive value.") }
	{% elif MINIMUM < settings.min_temp or MINIMUM > settings.max_temp %}
	{ action_raise_error("MINIMUM must be between %.1f and %.1f" |
	format(settings.min_temp, settings.max_temp)) }
	{% elif MAXIMUM < settings.min_temp or MAXIMUM > settings.max_temp %}
	{ action_raise_error("MAXIMUM must be between %.1f and %.1f" |
	format(settings.min_temp, settings.max_temp)) }
	{% elif MINIMUM >= MAXIMUM %}
	{ action_raise_error("MINIMUM must be less than MAXIMUM.") }
	{% elif "TARGET" in params and (params.TARGET|float < MINIMUM or
	params.TARGET|float > MAXIMUM) %}
	{ action_raise_error("TARGET must be between %.1f and %.1f" |
	format(settings.min_temp, settings.max_temp)) }
	{% endif %}

[gcode_macro set_heater_scaling]
description = Sets scaling parameters for heater. If a new target temperature is
	passed it will be adjusted to the scaling parameters.
	Usage: SET_HEATER_SCALING [HEATER=<heater>] [SCALE=<scale_factor>]
	[BUMP=<degrees>] [MAXIMUM=<degrees>]
	[MINIMUM=<degrees>] [TARGET=<temp>]
variable_scaled_heaters = {}
gcode = 
	
	{% if "HEATER" is not in params %}
	{% set output = [] %}
	{% for h in scaled_heaters %}
	{% set dummy = output.append(
	"%s: Scale: %.2f Bump: %.1f Minimum:%.1f Maximum: %.1f"
	| format(h, scaled_heaters[h].scale, scaled_heaters[h].bump,
	scaled_heaters[h].minimum, scaled_heaters[h].maximum)) %}
	{% endfor %}
	{% if output %}}{action_respond_info(output|join('\n'))}{% endif %}
	{% else %}
	
	{% set HEATER = params.HEATER.lower() %}
	{% set settings = printer.configfile.settings[HEATER] %}
	{% if HEATER is not in scaled_heaters %}
	{% set dummy = scaled_heaters.__setitem__(HEATER, {"scale": 1.0,
	"bump": 0.0, "minimum": settings.min_temp,
	"maximum": settings.max_temp,
	"real_target": printer[HEATER].target}) %}
	{% endif %}
	_CHECK_HEATER_PARAMS{% for k in params %}{' '~k~'='~params[k]}{% endfor %}
	{% set scales = scaled_heaters[HEATER] %}
	{% set SCALE = params.SCALE|default(scales.scale)|float %}
	{% set BUMP = params.BUMP|default(scales.bump)|float %}
	{% set MAXIMUM = params.MAXIMUM|default(scales.maximum)|float %}
	{% set MINIMUM = params.MINIMUM|default(scales.minimum)|float %}
	{% set TARGET = params.TARGET|default(scales.real_target)|float %}
	{% set dummy = scales.__setitem__("scale", SCALE) %}
	{% set dummy = scales.__setitem__("bump", BUMP) %}
	{% set dummy = scales.__setitem__("maximum", MAXIMUM) %}
	{% set dummy = scales.__setitem__("minimum", MINIMUM) %}
	{% set dummy = scales.__setitem__("real_target", TARGET) %}
	
	{% set settings = printer.configfile.settings[HEATER] %}
	{% if SCALE != 1.0 or BUMP != 0.0 or MINIMUM != settings.min_temp or
	MAXIMUM != settings.max_temp %}
	{% set dummy = scaled_heaters.__setitem__(HEATER, scales) %}
	{% else %}
	{% set dummy = scaled_heaters.__delitem__(HEATER) %}
	{% endif %}
	SET_HEATER_TEMPERATURE_SCALED HEATER={HEATER} TARGET={TARGET}
	{action_respond_info(
	"%s: Scale: %.2f Bump: %.1f Minimum:%.1f Maximum: %.1f Target: %.1f"
	| format(HEATER, SCALE, BUMP, MINIMUM, MAXIMUM, TARGET))}
	{% endif %}
	
	{% set dummy = None if True else "
	{% set dummy = params.HEATER|default(e.g. extruder) %}
	{% set dummy = params.SCALE|default(1.0)|float %}
	{% set dummy = params.BUMP|default(0.0)|float %}
	{% set dummy = params.MAXIMUM|default(max_temp)|float %}
	{% set dummy = params.MINIMUM|default(min_temp)|float %}
	{% set dummy = params.TARGET|default(current target)|float %}
	" %}

[gcode_macro reset_heater_scaling]
description = Clears scaling for heater (or all heaters if none specified).
	Usage: RESET_HEATER_SCALING [HEATER=<heater>]
gcode = 
	{% if "HEATER" in params %}
	{% set HEATER = params.HEATER.lower() %}
	{% if HEATER not in printer.heaters.available_heaters %}
	{ action_raise_error("The value '%s' is not valid for HEATER"
	| format(HEATER)) }
	{% endif %}
	{% set settings = printer.configfile.settings[HEATER] %}
	SET_HEATER_SCALING HEATER={HEATER
	} SCALE=1.0 BUMP=0.0 MINIMUM={settings.min_temp
	} MAXIMUM={settings.max_temp}
	{% else %}
	
	SET_GCODE_VARIABLE MACRO=set_heater_scaling VARIABLE=scaled_heaters VALUE={
	"{}"}
	{% endif %}

[gcode_macro _km_idle_timeout]
gcode = 
	{% if printer.pause_resume.is_paused %}
	{action_respond_info("Extruder powered down on idle timeout.")}
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{
	printer[printer.toolhead.extruder].target}"
	M104; Turn off extruder but leave the bed on.
	{% else %}
	TURN_OFF_HEATERS
	M107; turn off fan
	M84
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready
	{% endif %}

[gcode_macro _check_kinematic_limits]
gcode = 
	{% set toolhead = printer.toolhead %}
	{% if params.X and (params.X|float < toolhead.axis_minimum.x or
	params.X|float > toolhead.axis_maximum.x) %}
	{action_raise_error("X[%.3f] must be between %.3f and %.3f."
	| format(params.X|float, toolhead.axis_minimum.x,
	toolhead.axis_maximum.x))}
	{% elif params.Y and (params.Y|float < toolhead.axis_minimum.y or
	params.Y|float > toolhead.axis_maximum.y) %}
	{action_raise_error("Y[%.3f] must be between %.3f and %.3f."
	| format(params.Y|float, toolhead.axis_minimum.y,
	toolhead.axis_maximum.y))}
	{% elif params.Z and (params.Z|float < toolhead.axis_minimum.z or
	params.Z|float > toolhead.axis_maximum.z) %}
	{action_raise_error("Z[%.3f] must be between %.3f and %.3f."
	| format(params.Z|float, toolhead.axis_minimum.z,
	toolhead.axis_maximum.z))}
	{% elif params.E and (params.E|float|abs > printer.configfile.settings[
	"extruder"].max_extrude_only_distance) %}
	{action_raise_error("E[%.4f] exceeds max_extrude_only_distance[%.4f]."
	| format(params.E|float|abs, printer.configfile.settings[
	"extruder"].max_extrude_only_distance))}
	{% endif %}

[gcode_macro lazy_home]
description = Homes the specified axes. If lazy is true, already homed axes
	are skipped.
	Usage: LAZY_HOME [LAZY=<1|0>] [AXES=<axes_string>]
gcode = 
	
	LIST_MACROS SILENT=1
	_LAZY_HOME_INNER {rawparams}

[gcode_macro _lazy_home_inner]
gcode = 
	
	{% set G28 = (printer["gcode_macro list_macros"].macros.g28|
	default(["g28"],True))[-1] %}
	{% set axes = 'XYZ'|select('in', params.AXES|default("XYZ")|upper|list) %}
	{% if not axes %}
	{% set axes = 'XYZ' %}
	{% endif %}
	{% if params.LAZY|default(1)|int %}
	{% set axes = axes|reject('in', printer.toolhead.homed_axes|upper)|join() %}
	{% endif %}
	
	{% if axes %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing
	{G28}{% for k in axes %}{' ' ~ k}{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status
	{% endif %}

[gcode_macro g28]
description = Wraps the G28 command to add the Marlin "O" parameter so that
	already homed axes will not be homed again. See the Klipper documentation on
	G28 for the behavior of the other parameters.
	Usage: G28 [O] ...
rename_existing = G28.6245197
gcode = 
	{% set axes = 'XYZ'|select('in', params)|join() %}
	LAZY_HOME LAZY={('O' in params)|int}{%if axes%} AXES={axes}{%endif%}

[gcode_macro before_layer_change]
description = Add this to the "before layer change" input box in the slicer.
	Usage: BEFORE_LAYER_CHANGE HEIGHT=<current_height> LAYER=<current_layer>
gcode = 
	{% set height = params.HEIGHT|default(printer.toolhead.position.z)|float %}
	{% set layer = params.LAYER|default(-1)|int + 1 %}
	{% if height >= 0.0 and layer >= 0 %}
	SET_PRINT_STATS_INFO CURRENT_LAYER="{layer}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{height}"
	{% if printer["gcode_macro _km_layer_run"].clearance_z < height %}
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{
	height}"
	{% endif %}
	{% endif %}

[gcode_macro after_layer_change]
description = Add this to the "after layer change" input box in the slicer.
	Usage: AFTER_LAYER_CHANGE
gcode = 
	_KM_LAYER_RUN

[gcode_macro gcode_at_layer]
description = Schedules the specified g-code command to be run at the specified
	layer. LAYER=next will cause the command to run at the next layer change.
	Usage: GCODE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } COMMAND=<gcode>
	[CANCEL=<0|1>]
gcode = 
	{% set tot_layers = printer.print_stats.info.total_layer %}
	{% if params|length > 0 %}
	_KM_CHECK_IS_PRINTING
	
	{% set CANCEL = params.CANCEL|default(0)|int != 0 %}
	{% set COMMAND = params.COMMAND|default(None) %}
	{% if COMMAND %}
	{% set COMMAND = COMMAND.lstrip().split(None, 1) %}
	{% set COMMAND = " ".join([COMMAND[0]|upper] + COMMAND[1:]) %}
	{% endif %}
	
	{% if "LAYER" in params %}
	{% set cmd_container = "commands_layer" %}
	{% set cur_layer = printer.print_stats.info.current_layer|int %}
	{% if "HEIGHT" in params %}
	{action_raise_error("Conflicting HEIGHT and LAYER arguments provided.")}
	{% elif params.LAYER|string|lower == "next" %}
	{% set LAYER = cur_layer + 1 %}
	{% else %}
	{% set LAYER = params.LAYER|int %}
	{% endif %}
	{% if LAYER <= cur_layer %}
	{action_raise_error("LAYER[%i] must be above current print layer[%i]."
	| format(LAYER, cur_layer))}
	{% elif tot_layers and LAYER > tot_layers %}
	{action_raise_error("LAYER[%i] must not be above top layer[%i]."
	| format(LAYER, tot_layers))}
	{% endif %}
	{% set key = LAYER %}
	
	{% elif "HEIGHT" in params %}
	{% set cmd_container = "commands_height" %}
	{% set HEIGHT = params.HEIGHT|float %}
	{% set cur_height = printer["gcode_macro _km_layer_run"].cur_height %}
	{% if HEIGHT <= cur_height %}
	{action_raise_error(
	"HEIGHT[%.3f] must be above current print height[%.3f].")
	| format(HEIGHT, cur_height)}
	{% elif HEIGHT >= printer.toolhead.axis_maximum.z %}
	{action_raise_error(
	"HEIGHT[%.3f] must be below maximum Z height[%.3f].")
	| format(HEIGHT, printer.toolhead.axis_maximum.z)}
	{% endif %}
	{% set key = HEIGHT %}
	
	{% else %}
	{action_raise_error("No HEIGHT or LAYER argument provided.")}
	{% endif %}
	
	{% set commands = printer["gcode_macro _km_layer_run"][cmd_container] %}
	{% if key not in commands and not CANCEL %}
	{% set dummy = commands.__setitem__(key, []) %}
	{% endif %}
	
	{% if CANCEL %}
	{% if key in commands %}
	{% set pos = ("%i"|format(key)) if key is integer else
	("%.3fmm"|format(key)) %}
	{% if COMMAND %}
	{% set dummy = commands[key].remove(COMMAND) %}
	{% if commands[key]|length == 0 %}
	{% set dummy = commands.__delitem__(key) %}
	{% endif %}
	{action_respond_info("Cancelled %s %s:\n* %s" |
	format("layer" if k is integer else "height",
	pos, COMMAND))}
	{% else %}
	{% set dummy = commands.__delitem__(key) %}
	{action_respond_info("Cancelled all commands at %s %s." |
	format("layer" if k is integer else "height",
	pos))}
	{% endif %}
	{% endif %}
	{% elif not COMMAND %}
	{action_raise_error("No COMMAND argument provided.")}
	{% elif COMMAND in commands[key] %}
	{action_raise_error("Duplicate command previously scheduled.")}
	{% else %}
	{% set dummy = commands[key].append(COMMAND) %}
	{% set pos = ("%i"|format(key)) if key is integer else
	("%.3fmm"|format(key)) %}
	{action_respond_info("%s %s:\n* %s" |
	format("layer" if key is integer else "height",
	pos, COMMAND))}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE={cmd_container} VALUE="{
	commands|replace('\"','\\\"')}"
	_UPDATE_LAYER_COMPAT
	
	
	{% else %}
	{% set output = [] %}
	{% set commands = printer["gcode_macro _km_layer_run"].commands_layer %}
	{% for key in commands|list|sort %}
	{% set dummy = output.append("layer %i:" | format(key)) %}
	{% for c in commands[key] %}
	{% set dummy = output.append("* %s" | format(c)) %}
	{% endfor %}
	{% endfor %}
	{% set commands = printer["gcode_macro _km_layer_run"].commands_height %}
	{% for key in commands|list|sort %}
	{% set dummy = output.append("height %.3fmm:" | format(key)) %}
	{% for c in commands[key] %}
	{% set dummy = output.append("* %s" | format(c)) %}
	{% endfor %}
	{% endfor %}
	{action_respond_info(output|join('\n'))}
	{% endif %}

[gcode_macro _km_layer_run]
description = Runs pending commands for the current layer change.
	Usage: _KM_LAYER_RUN
variable_cur_height = 0.0
variable_clearance_z = 0.0
variable_commands_layer = {}
variable_commands_height = {}
gcode = 
	{% set cur_layer = printer.print_stats.info.current_layer %}
	{% for key in commands_layer | select("<=", cur_layer) | sort %}
	{action_respond_info("Executing scheduled commands at layer %d:\n%s" |
	format(key, commands_layer[key]|join('\n')))}
	{% for c in commands_layer[key] %}
	{c}
	{% endfor %}
	{% set dummy = commands_layer.__delitem__(key) %}
	{% endfor %}
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{
	commands_layer|replace('\"','\\\"')}"
	{% for key in commands_height | select("<=", cur_height) | sort %}
	{action_respond_info("Executing scheduled commands at height %.3f:\n%s" |
	format(key, commands_height[key]|join('\n')))}
	{% for c in commands_height[key] %}
	{c}
	{% endfor %}
	{% set dummy = commands_height.__delitem__(key) %}
	{% endfor %}
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{
	commands_height|replace('\"','\\\"')}"
	_UPDATE_LAYER_COMPAT

[gcode_macro init_layer_gcode]
description = Clears scheduled gcode commands and state for all layers.
	Usage: INIT_LAYER_GCODE LAYERS=<num>
gcode = 
	SET_PRINT_STATS_INFO TOTAL_LAYER="{params.LAYERS|int + 1}" CURRENT_LAYER="{0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"
	_UPDATE_LAYER_COMPAT

[gcode_macro _reset_layer_gcode]
description = Clears scheduled gcode commands and state for all layers.
	Usage: _RESET_LAYER_GCODE
gcode = 
	SET_PRINT_STATS_INFO TOTAL_LAYER="{0}" CURRENT_LAYER="{0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"
	_UPDATE_LAYER_COMPAT

[gcode_macro cancel_all_layer_gcode]
description = Clears all scheduled gcode commands.
	Usage: CANCEL_ALL_LAYER_GCODE
gcode = 
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"
	_UPDATE_LAYER_COMPAT

[gcode_macro _update_layer_compat]
gcode = 
	{% set next_layer = printer.print_stats.info.current_layer|int + 1 %}
	{% set commands_layer = printer["gcode_macro _km_layer_run"].commands_layer %}
	{% set keys = commands_layer | sort(reverse=True) %}
	
	{% set pause_next_layer = {'enable': False, 'call':
	printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer.call} %}
	{% if pause_next_layer.call in commands_layer[next_layer] | default([]) %}
	{% set dummy = pause_next_layer.__setitem__('enable', True) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{
	pause_next_layer|replace('\"','\\\"') }"
	
	
	{% set pause_at_layer = {'enable': False, 'layer': 0, 'call':
	printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer.call} %}
	{% if pause_next_layer.enable and
	pause_next_layer.call == pause_at_layer.call %}
	{% set keys = keys | reject("==", next_layer) %}
	{% endif %}
	
	
	
	
	{% for key in keys %}
	{% if pause_at_layer.call in commands_layer[key] %}
	{% set dummy = pause_at_layer.__setitem__('enable', True) %}
	{% set dummy = pause_at_layer.__setitem__('layer', key) %}
	{% endif %}
	{% endfor %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{
	pause_at_layer|replace('\"','\\\"') }"

[gcode_macro pause_next_layer]
description = Convenience macro to schedule the current print to pause at the
	next layer change. See PAUSE for additional arguments.
	Usage: PAUSE_NEXT_LAYER ...
gcode = 
	_CHECK_KINEMATIC_LIMITS{% for k in params%}{' ' ~k~ '=' ~ params[k]
	}{% endfor %}
	GCODE_AT_LAYER LAYER=NEXT COMMAND="PAUSE{% for k in params %}{
	' ' ~ k ~ '=' ~ params[k]}{% endfor %}"

[gcode_macro pause_at_layer]
description = Convenience macro to schedule the current print to pause at the
	specified layer change. LAYER=next will cause the command to run at the next
	layer change. See PAUSE for additional arguments.
	Usage: PAUSE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...
gcode = 
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	" %}
	{% set filtered_params = params|reject('in',['HEIGHT','LAYER'])|list|sort %}
	_CHECK_KINEMATIC_LIMITS{% for k in filtered_params%}{' ' ~k~ '=' ~ params[k]
	}{% endfor %}
	GCODE_AT_LAYER {% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor
	%} COMMAND="PAUSE{% for k in filtered_params %}{
	' ' ~ k ~ '=' ~ params[k]}{% endfor %}"

[gcode_macro speed_at_layer]
description = Convenience macro to schedule a feedrate adjustment at the
	specified layer change. LAYER=next will cause the command to run at the next
	layer change. (SPEED parameter behaves the same as the M220 S parameter.)
	Usage: SPEED_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } SPEED=<percentage>
gcode = 
	{% set SPEED = params.SPEED|default(0)|int %}
	{% if SPEED < 1 or SPEED > 500 %}
	{action_raise_error("SPEED[%i] parameter between 1 and 500 is required."
	% SPEED)}
	{% endif %}
	GCODE_AT_LAYER {% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor %} COMMAND="M220 S{SPEED|int}"
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	{% set dummy = params.SPEED|default(percentage)|int %}
	" %}

[gcode_macro flow_at_layer]
description = Convenience macro to schedule a flow percentage adjustment at the
	specified layer change. LAYER=next will cause the command to run at the next
	layer change. (FLOW parameter behaves the same as the M221 S parameter.)
	Usage: FLOW_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } FLOW=<percentage>
gcode = 
	{% set FLOW = params.FLOW|default(0)|int %}
	{% if FLOW < 1 or FLOW > 500 %}
	{action_raise_error("FLOW[%i] parameter between 1 and 500 is required."
	% FLOW)}
	{% endif %}
	GCODE_AT_LAYER {% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor %} COMMAND="M221 S{FLOW|int}"
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	{% set dummy = params.FLOW|default(percentage)|int %}
	" %}

[gcode_macro fan_at_layer]
description = Convenience macro to schedule a fan adjustment at the specified
	layer change. LAYER=next will cause the command to run at the next layer
	change. See SET_FAN_SCALING for additional arguments.
	Usage: FAN_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...
gcode = 
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	{% set dummy = params.SCALE|default(1.0)|float %}
	{% set dummy = params.BUMP|default(0)|int %}
	{% set dummy = params.MAXIMUM|default(0)|int %}
	{% set dummy = params.MINIMUM|default(255)|int %}
	{% set dummy = params.SPEED|default(current speed)|int %}
	" %}
	{% set filtered_params = params|reject('in',['HEIGHT','LAYER'])|list|sort %}
	{% if filtered_params|length == 0 %}
	{action_raise_error("No fan parameters provided.")}
	{% endif %}
	_CHECK_FAN_PARAMS{% for k in filtered_params %}{' '~k~'='~params[k]
	}{% endfor %}
	GCODE_AT_LAYER {% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor
	%} COMMAND="SET_FAN_SCALING{% for k in filtered_params %}{
	' ' ~ k ~ '=' ~ params[k]}{% endfor %}"

[gcode_macro heater_at_layer]
description = Convenience macro to schedule a heater adjustment at the specified
	layer change. LAYER=next will cause the command to run at the next layer
	change. See SET_HEATER_SCALING for additional arguments.
	Usage: HEATER_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...
gcode = 
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	{% set dummy = params.HEATER|default(e.g. extruder) %}
	{% set dummy = params.SCALE|default(1.0)|float %}
	{% set dummy = params.BUMP|default(0.0)|float %}
	{% set dummy = params.MAXIMUM|default(max_temp)|float %}
	{% set dummy = params.MINIMUM|default(min_temp)|float %}
	{% set dummy = params.TARGET|default(current target)|float %}
	" %}
	{% set filtered_params = params|reject('in',['HEIGHT','LAYER'])|list|sort %}
	_CHECK_HEATER_PARAMS{% for k in filtered_params%}{' ' ~ k ~ '=' ~ params[k]
	}{% endfor %}
	GCODE_AT_LAYER{% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor
	%} COMMAND="SET_HEATER_SCALING{% for k in filtered_params %}{
	' ' ~ k ~ '=\\\"' ~ params[k]|replace('\\','\\\\')|replace('\'','\\\'')
	|replace('\"','\\\"') ~ '\\\"'
	}{% endfor %}"

[gcode_macro park]
description = Park the toolhead
	Usage: PARK [P=<0|1|2>] [X=<pos>] [Y=<pos>] [Z=<pos>] [LAZY=<1|0>]
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set LAZY = params.LAZY|default(1)|int %}
	{% if printer.toolhead.homed_axes != "xyz" %}
	{% if LAZY %}
	LAZY_HOME
	{% else %}
	{action_raise_error("Must home axes first.")}
	{% endif %}
	{% endif %}
	
	
	{% set P = (params.P|default(2))|int %}
	{% set X = params.X|default(km.park_x)|float %}
	{% set Y = params.Y|default(km.park_y)|float %}
	{% set Z = params.Z|default(km.park_z)|float %}
	
	M400
	_CHECK_KINEMATIC_LIMITS X="{X}" Y="{Y}" Z="{Z}"
	_PARK_INNER X="{X}" Y="{Y}" Z="{Z}" P="{P}" LAZY="{LAZY}"
	
	{% set dummy = None if True else "
	{% set dummy = params.P|default(mode=<0|1|2>)|int %}
	{% set dummy = params.X|default(X position)|int %}
	{% set dummy = params.Y|default(Y position)|int %}
	{% set dummy = params.Z|default(Z position)|int %}
	" %}

[gcode_macro _park_inner]
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set travel_speed_xy = km.travel_speed_xy %}
	{% set travel_speed_z = km.travel_speed_z %}
	
	{% set position = printer.gcode_move.gcode_position %}
	{% set origin = printer.gcode_move.homing_origin%}
	
	
	
	{% set clearance_z = (printer["gcode_macro _km_layer_run"].clearance_z,
	position.z) | max %}
	{% set P = params.P|int %}
	{% set X = params.X|float - origin.x %}
	{% set Y = params.Y|float - origin.y %}
	{% set Z = params.Z|float %}
	{% set LAZY = params.LAZY|int %}
	
	
	{% if P == 0 %}
	{% if clearance_z > Z %}
	{% set Z = clearance_z %}
	{% endif %}
	{% elif P == 1 %}
	{% set Z = Z - origin.z %}
	{% elif P == 2 %}
	{% set Z = Z + clearance_z %}
	{% else %}
	{action_raise_error("Invalid parameter P=%i. Value must be 0, 1, or 2." |
	format(P)) }
	{% endif %}
	
	
	{% set Z = ((Z, printer.toolhead.axis_maximum.z - origin.z)|min,
	printer.toolhead.axis_minimum.z - origin.z)|max %}
	
	
	{% if (not LAZY) or P != 2 or X != position.x or Y != position.y
	or Z < clearance_z %}
	SAVE_GCODE_STATE NAME=_KM_PARK
	G90
	G0 Z{Z} F{travel_speed_z}
	G0 X{X} Y{Y} F{travel_speed_xy}
	RESTORE_GCODE_STATE NAME=_KM_PARK MOVE=0
	{% endif %}

[gcode_macro g27]
description = Parks the toolhead.
	Usage: G27 [P=<0|1|2>]
gcode = 
	
	PARK P={params.P|default(0)} {% for k in params|reject("in", "GP") %}{
	' '~k~'="'~params[k]~'"'
	}{% endfor %}

[gcode_macro pause]
description = Pauses the current print.
	Usage: PAUSE [X=<pos>] [Y=<pos>] [Z=<pos>] [E=<retract_length>] [B=<beeps>]
rename_existing = _KM_PAUSE_BASE
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% set E = (params.E|default(5))|float %}
	
	{% set B = params.B|default(10)|int if "output_pin beeper" in printer else 0
	%}
	
	{% if printer.pause_resume.is_paused %}
	{ action_respond_info("Print already paused") }
	{% elif printer.idle_timeout.state | string == "Printing" or
	(printer.virtual_sdcard|default({})).is_active|default(False) %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pausing RESET_STACK=1
	{% set position = printer.gcode_move.gcode_position %}
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_x VALUE="{position.x}"
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_y VALUE="{position.y}"
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_z VALUE="{position.z}"
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{E}"
	SAVE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE
	_KM_PAUSE_BASE
	M83
	{% if printer.extruder.can_extrude %}
	G1 E{'%.4f' % -E} F{km.load_speed}
	{% endif %}
	PARK P=2{% for k in params|select("in", "XYZ") %}{
	' '~k~'="'~params[k]~'"'}{% endfor %}
	
	{% for i in range(B) %}
	M300 P100
	G4 P200
	{% endfor %}
	{% else %}
	{ action_respond_info("Print not in progress") }
	{% endif %}

[gcode_macro m600]
description = Pauses the current print.
	Usage: M600 [B<beeps>] [E<pos>] [L<pos>] [R<temp>] [U<pos>] [X<pos>] [Y<pos>]
	[Z<pos>]
gcode = 
	PAUSE B="{0}" P=2{% for k in params|select("in", "EXYZ") %}{
	' '~k~'="'~params[k]~'"'}{% endfor %}
	UNLOAD_FILAMENT{% if 'U' in params %} LENGTH={params.U}{% endif
	%} BEEPS="{params.B|default(10)|int}"
	{% if 'R' in params %}M109 S{params.R}{% endif %}

[gcode_macro m601]
description = Pauses the current print.
	Usage: M601
gcode = 
	PAUSE

[gcode_macro m602]
description = Resumes the currently paused print.
	Usage: M602
gcode = 
	RESUME

[gcode_macro m24]
rename_existing = M24.6245197
gcode = 
	{% if printer.pause_resume.is_paused %}
	RESUME
	{% else %}
	M24.6245197
	{% endif %}

[gcode_macro m25]
rename_existing = M25.6245197
gcode = 
	PAUSE

[gcode_macro resume]
description = Resumes the currently paused print.
	Usage: RESUME [E<pos>]
rename_existing = _KM_RESUME_BASE
variable_saved_extruder_temp = 0
variable_saved_x = 0.0
variable_saved_y = 0.0
variable_saved_z = 0.0
variable_saved_e = 0.0
gcode = 
	{% if printer.pause_resume.is_paused %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% set extruder = printer[printer.toolhead.extruder] %}
	{% if extruder.target <= printer.configfile.settings[
	printer.toolhead.extruder].min_temp
	| float + 0.5 %}
	M109 S{saved_extruder_temp}
	{% endif %}
	
	
	
	{% if 'E' not in params and not saved_e %}
	{% set saved_e = 5.0 %}
	G1 E{'%.4f' % -saved_e } F{km.load_speed}
	{% endif %}
	
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"
	G90
	
	G0 X{saved_x} Y{saved_y} F{km.travel_speed_xy}
	G0 Z{saved_z} F{km.travel_speed_z}
	G91
	
	G1 E{'%.4f' % (params.E|default(saved_e))} F{km.load_speed}
	RESTORE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE MOVE=1
	_KM_RESUME_BASE
	{% else %}
	{ action_respond_info("Printer is not paused.") }
	{% endif %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=printing RESET_STACK=1

[gcode_macro clear_pause]
description = Clears the current pause state.
	Usage: CLEAR_PAUSE
rename_existing = _KM_CLEAR_PAUSE
gcode = 
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"
	_KM_CLEAR_PAUSE

[gcode_macro print_start]
description = Inserted by slicer at start of print. Rather than using this macro
	directly you should configure your slicer as instructed in the readme.
	Usage: PRINT_START BED=<temp> EXTRUDER=<temp> [CHAMBER=<temp>]
	[MESH_MIN=<x,y>] [MESH_MAX=<x,y>] [LAYERS=<num>]
	[NOZZLE_SIZE=<mm>]
gcode = 
	{action_respond_info(
	"This file is using an old The PRINT_START format. This print will run "
	"fine, but you should update your slicer config to take advantage of the "
	"phased PRINT_START macros. The slicer documentation is here:\n"
	"https://github.com/jschuh/klipper-macros\x23slicer-configuration"
	)}
	
	_PRINT_START_PHASE_INIT {rawparams}
	_PRINT_START_PHASE_PREHEAT
	_PRINT_START_PHASE_PROBING
	_PRINT_START_PHASE_EXTRUDER
	_PRINT_START_PHASE_PURGE

[gcode_macro _print_start_phase_init]
description = Inserted by slicer at start of print. Initializes PRINT_START
	phases.
	Usage: See PRINT_START.
gcode = 
	CHECK_KM_CONFIG
	SET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{False}"
	_KM_APPLY_PRINT_OFFSET RESET=1
	_PRINT_START_PHASE_CHECK PHASE=none
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% if not params.BED %}
	{% set dummy = params.__setitem__('BED', params.BED_TEMP|int) %}
	{% endif %}
	{% if not params.EXTRUDER %}
	{% set dummy = params.__setitem__('EXTRUDER', params.EXTRUDER_TEMP|int) %}
	{% endif %}
	
	
	PRINT_START_SET PRINT_START_PHASE="init" {% for k in params %}{' %s=\"%s\"' %
	(k,params[k]|replace('\\','\\\\')|replace('\'','\\\'')|replace('\"','\\\"'))
	}{% endfor %}
	
	
	_km_check_and_set_print_bounds
	
	M107
	CLEAR_PAUSE
	
	M140 S{params.BED}
	{% if params.CHAMBER %}M141 S{params.CHAMBER|int}{% endif %}
	{% if printer.bed_mesh %}BED_MESH_CLEAR{% endif %}
	
	{% if km.start_try_saved_surface_mesh and printer.bed_mesh %}
	LOAD_SURFACE_MESH
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="preheat"

[gcode_macro _print_start_phase_preheat]
description = Inserted by slicer at start of print. Handles the bed and chamber
	heating phases and ends when both are stabilized at their target temperatures.
	Usage: See PRINT_START.
gcode = 
	_PRINT_START_PHASE_CHECK PHASE=preheat
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set BED = print.BED|int %}
	{% set EXTRUDER = print.EXTRUDER|int %}
	{% set CHAMBER = print.CHAMBER|default(0)|int %}
	{% set LAYERS = print.LAYERS|default(0)|int %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% set bed_at_target = (BED + 0.4 - printer.heater_bed.temperature) |
	abs <= 0.6 %}
	PRINT_START_SET BED_AT_TARGET={1 if bed_at_target else 0}
	{% set start_level_bed_at_temp = km.start_level_bed_at_temp and
	not printer.bed_mesh.profile_name %}
	{% set actions_at_temp = start_level_bed_at_temp or
	km.start_quad_gantry_level_at_temp or
	km.start_z_tilt_adjust_at_temp or
	(km.start_home_z_at_temp and not bed_at_target) %}
	{% set bed_overshoot = (BED + (km.start_bed_heat_overshoot if
	(BED and not bed_at_target) else 0.0),
	printer.configfile.settings.heater_bed.max_temp ) | min %}
	
	INIT_LAYER_GCODE LAYERS="{LAYERS}"
	{% if CHAMBER > 0.0 %}
	M141 S{CHAMBER}
	{% endif %}
	
	M140 S{bed_overshoot}
	{% if actions_at_temp %}
	
	
	M104 S{km.start_extruder_probing_temp if km.start_extruder_probing_temp > 0
	else (km.start_extruder_preheat_scale * EXTRUDER)|round(0,'ceil')|int}
	{% else %}
	M104 S{EXTRUDER}
	{% endif %}
	
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing RESET_STACK=1
	G28
	G90
	{% if BED > 0.0 %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=bed_heating RESET_STACK=1
	
	{% if not bed_at_target %}
	PARK
	
	M190 S{bed_overshoot}
	G4 P{km.start_bed_heat_delay / 2}
	M190 R{BED}
	G4 P{km.start_bed_heat_delay / 2}
	{% endif %}
	{% endif %}
	
	{% if CHAMBER > 0.0 %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=chamber_heating RESET_STACK=1
	_KM_PARK_IF_NEEDED HEATER="chamber" RANGE=ABOVE
	M191 S{CHAMBER}
	{% endif %}
	
	{% if BED > 0.0 and bed_at_target%}
	M190 R{BED}
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="probing"

[gcode_macro _print_start_phase_probing]
description = Inserted by slicer at start of print. Performs probing (including
	mesh bed level) and other operations that should be run when the bed and
	chamber are stabilized at their target temps.
	Usage: See PRINT_START.
gcode = 
	_PRINT_START_PHASE_CHECK PHASE=probing
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set MESH_MIN = print.MESH_MIN|default(None) %}
	{% set MESH_MAX = print.MESH_MAX|default(None) %}
	
	{% if km.start_random_placement_max > 0 and print.PRINT_MIN and MESH_MIN %}
	{% set PRINT_MIN = print.PRINT_MIN.split(",")|map('float')|list %}
	{% set PRINT_MAX = print.PRINT_MAX.split(",")|map('float')|list %}
	{% set x_offset = (((km.print_max[0] - km.print_min[0] - PRINT_MAX[0] +
	PRINT_MIN[0] - 2 * km.start_random_placement_padding)|int,
	km.start_random_placement_max * 2)|min, 0)|max %}
	{% set y_offset = (((km.print_max[1] - km.print_min[1] - PRINT_MAX[1] +
	PRINT_MIN[1] - 2 * km.start_random_placement_padding)|int,
	km.start_random_placement_max * 2)|min, 0)|max %}
	{% if x_offset > 0 %}
	{% set x_offset = range(x_offset)|random + km.print_min[0] -
	PRINT_MIN[0] + km.start_random_placement_padding %}
	{% endif %}
	{% if y_offset > 0 %}
	{% set y_offset = range(y_offset)|random + km.print_min[1] -
	PRINT_MIN[1] + km.start_random_placement_padding %}
	{% endif %}
	
	
	{% set MESH_MIN = MESH_MIN.split(",")|map('float')|list %}
	{% set MESH_MAX = MESH_MAX.split(",")|map('float')|list %}
	{% set MESH_MIN_NEW = (MESH_MIN[0] + x_offset, MESH_MIN[1] + y_offset) %}
	{% set MESH_MAX_NEW = (MESH_MAX[0] + x_offset, MESH_MAX[1] + y_offset) %}
	{action_respond_info(
	"Relocating print origin from (%.3f,%.3f) "|format(*MESH_MIN) +
	"to (%.3f,%.3f)"|format(*MESH_MIN_NEW))}
	{% set MESH_MIN = (MESH_MIN_NEW[0], MESH_MIN_NEW[1])|join(',') %}
	{% set MESH_MAX = (MESH_MAX_NEW[0], MESH_MAX_NEW[1])|join(',') %}
	PRINT_START_SET PRINT_OFFSET={"%d,%d" % (x_offset,y_offset)}
	{% endif %}
	
	{% set EXTRUDER = print.EXTRUDER|int %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set start_level_bed_at_temp = km.start_level_bed_at_temp and
	not printer.bed_mesh.profile_name %}
	{% set start_home_z_at_temp = km.start_home_z_at_temp and
	not print.BED_AT_TARGET|int %}
	{% set actions_at_temp = start_level_bed_at_temp or
	km.start_quad_gantry_level_at_temp or
	km.start_z_tilt_adjust_at_temp or
	start_home_z_at_temp %}
	{% if actions_at_temp %}
	{% if km.start_extruder_probing_temp > 0 %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating RESET_STACK=1
	_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=2
	M109 R{km.start_extruder_probing_temp}
	{% else %}
	M104 S{EXTRUDER}
	{% endif %}
	{% if start_home_z_at_temp %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing RESET_STACK=1
	G28 Z
	{% endif %}
	{% if km.start_z_tilt_adjust_at_temp %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=calibrating_z RESET_STACK=1
	Z_TILT_ADJUST
	{% endif %}
	{% if km.start_quad_gantry_level_at_temp %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=leveling_gantry RESET_STACK=1
	QUAD_GANTRY_LEVEL
	{% endif %}
	{% if start_level_bed_at_temp %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=meshing RESET_STACK=1
	_km_mesh_if_needed {% if MESH_MIN %} MESH_MIN={MESH_MIN}{% endif
	%}{% if MESH_MAX %} MESH_MAX={MESH_MAX}{% endif %}
	{% endif %}
	{% if km.start_extruder_probing_temp > 0 %}
	M104 S{EXTRUDER}
	{% endif %}
	G4
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="extruder"

[gcode_macro _print_start_phase_extruder]
description = Inserted by slicer at start of print. Preheats the extruder.
	Usage: See PRINT_START.
gcode = 
	_PRINT_START_PHASE_CHECK PHASE=extruder
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set EXTRUDER = print.EXTRUDER|default(print.EXTRUDER_TEMP)|float %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	
	{% if EXTRUDER > 0 %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating RESET_STACK=1
	_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=ABOVE
	M109 S{EXTRUDER}
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="purge"

[gcode_macro _print_start_phase_purge]
description = Inserted by slicer at start of print. Generates purge lines.
	Usage: See PRINT_START.
gcode = 
	_PRINT_START_PHASE_CHECK PHASE=purge
	
	_KM_APPLY_PRINT_OFFSET
	
	_APPLY_BED_SURFACE_OFFSET
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set MESH_MIN = print.MESH_MIN|default(None) %}
	{% set MESH_MAX = print.MESH_MAX|default(None) %}
	{% set NOZZLE_SIZE = print.NOZZLE_SIZE|default(print.NOZZLE_SIZE)|
	default(printer.configfile.settings.extruder.nozzle_diameter)|float %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% if km.start_purge_length > 0.0 and printer.extruder.can_extrude %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=purging RESET_STACK=1
	DRAW_PURGE_LINE WIDTH="{NOZZLE_SIZE * 1.25}" HEIGHT="{NOZZLE_SIZE * 0.625
	}"{% if MESH_MIN %} PRINT_MIN={MESH_MIN}{% endif
	%}{% if MESH_MAX %} PRINT_MAX={MESH_MAX}{% endif %}
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="printing"
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=printing RESET_STACK=1

[gcode_macro _km_park_if_needed]
description = Parks the extruder if the current temperature of the supplied
	heater is not within the specified target range.
	Usage: _KM_PARK_IF_NEEDED HEATER=<heater> RANGE=[<percentage>|ABOVE|BELOW]
gcode = 
	
	{% set HEATER = params.HEATER if params.HEATER in
	printer.heaters.available_heaters else
	("heater_generic " ~ params.HEATER) %}
	{% set RANGE = (params.RANGE|default(1))|string|upper %}
	
	{% if printer[HEATER].target %}
	{% if RANGE == "ABOVE" %}
	{% if printer[HEATER].temperature < printer[HEATER].target %}
	PARK
	{% endif %}
	{% elif RANGE == "BELOW" %}
	{% if printer[HEATER].temperature > printer[HEATER].target %}
	PARK
	{% endif %}
	{% elif (printer[HEATER].temperature - printer[HEATER].target)|abs >
	(printer[HEATER].target * RANGE|float * 0.01)|abs %}
	PARK
	{% endif %}
	{% endif %}

[gcode_macro _km_apply_print_offset]
variable_offset = []
gcode = 
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% if params.RESET|default(0)|int and offset and
	not printer["gcode_macro _km_save_state"].is_ephemeral%}
	{% set PRINT_OFFSET = [offset.pop(0) * -1, offset.pop() * -1] %}
	{% elif print.PRINT_OFFSET and not offset and
	not printer["gcode_macro _km_save_state"].is_ephemeral %}
	{% set PRINT_OFFSET = print.PRINT_OFFSET.split(",")|map('float')|list %}
	{% set dummy = offset.extend(PRINT_OFFSET) %}
	{% endif %}
	
	{% if PRINT_OFFSET %}
	_KM_SET_GCODE_OFFSET_BASE {"X_ADJUST=%.2f Y_ADJUST=%.2f"|
	format(*PRINT_OFFSET)}
	{% endif %}

[gcode_macro _km_mesh_if_needed]
gcode = 
	
	
	
	{% if not printer.bed_mesh.profile_name %}
	BED_MESH_CALIBRATE_FAST {rawparams}
	{% endif %}

[gcode_macro print_start_set]
description = Inserted by slicer to set values used by PRINT_START.
	Usage: PRINT_START_SET <VARIABLE>=<value>
variable_print = {}
gcode = 
	{%for k in params %}
	{% set dummy = print.__setitem__(k|upper, params[k]) %}
	{% endfor %}

[gcode_macro _print_start_phase_check]
gcode = 
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set PRINT_START_PHASE = print.PRINT_START_PHASE|default("none") %}
	{% if PRINT_START_PHASE != params.PHASE %}
	
	SET_GCODE_VARIABLE MACRO=print_start_set VARIABLE=print VALUE="{{}}"
	{% if params.PHASE != 'none' %}
	{% set error = "PRINT_START phase error. Expected '%s' but found '%s'" %
	(params.PHASE, PRINT_START_PHASE) %}
	
	{% if not 'virtual_sdcard' in printer or
	not printer.virtual_sdcard.is_active or 'CANCEL_PRINT' not in
	printer.configfile.settings.virtual_sdcard.on_error_gcode|
	default("")|upper %}
	{action_respond_info(error)}
	CANCEL_PRINT
	{% else %}
	{action_raise_error(error)}
	{% endif %}
	{% else %}
	{ action_respond_info("Expected phase '%s' but found '%s'. Resetting."
	% (params.PHASE, PRINT_START_PHASE)) }
	{% endif %}
	{% endif %}

[gcode_macro print_end]
description = Inserted by slicer at end of print.
	Usage: PRINT_END
gcode = 
	_KM_CHECK_IS_PRINTING
	M400
	_PRINT_END_INNER
	
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% if km.start_clear_adjustments_at_end != 0 %}
	RESET_HEATER_SCALING
	RESET_FAN_SCALING
	M220 S100
	M221 S100
	{% endif %}
	_RESET_LAYER_GCODE
	_RESET_VELOCITY_LIMITS
	TURN_OFF_HEATERS
	M107; turn off fan
	{% if printer.bed_mesh %}BED_MESH_CLEAR{% endif %}
	
	{% if printer.toolhead.homed_axes|lower == "xyz" %}
	PARK Y="{km.start_end_park_y}"
	{% endif %}
	M84
	CLEAR_PAUSE
	SET_GCODE_VARIABLE MACRO=print_start_set VARIABLE=print VALUE="{{}}"
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready RESET_STACK=1

[gcode_macro _print_end_inner]
variable_cancelled = False
gcode = 
	SET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{False}"
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set toolhead = printer.toolhead %}
	{% set origin = printer.gcode_move.homing_origin%}
	{% set max_x = km.print_max[0] - origin.x %}
	{% set max_y = km.print_max[1] - origin.y %}
	{% set max_z = toolhead.axis_maximum.z - origin.z %}
	
	{% if not cancelled %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=completing
	{% endif %}
	
	{% if printer.extruder.can_extrude %}
	
	{% if not printer.pause_resume.is_paused and not cancelled and
	toolhead.homed_axes|lower == "xyz" %}
	{% set x_safe = (max_x - toolhead.position.x, 2.0)|min %}
	{% set y_safe = (max_y - toolhead.position.y, 2.0)|min %}
	{% set z_safe = (max_z - toolhead.position.z, 2.0)|min %}
	G91
	G0 Z{z_safe} E-1.0 F{km.travel_speed_z * 2}
	G0 X{x_safe} Y{y_safe} E-1.0 F{km.travel_speed_xy}
	
	_KM_APPLY_PRINT_OFFSET RESET=1
	{% endif %}
	
	
	G92 E0
	G1 E-5.0 F3600
	M400
	{% endif %}

[gcode_macro _km_check_is_printing]
variable_debug_state = False
description = Throws an error if print is not currently in progress.
gcode = 
	{% if not debug_state and
	printer.idle_timeout.state|string != "Printing" and
	not (printer.virtual_sdcard|default({})).is_active|default(False) and
	not printer.pause_resume.is_paused %}
	{ action_raise_error("No active print.") }
	{% endif %}

[gcode_macro _km_check_and_set_print_bounds]
description = Validates all print bounds and caches their values.
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set print = printer["gcode_macro print_start_set"].print %}
	
	
	{% if print.MESH_MIN %}
	{% set MESH_MIN = print.MESH_MIN.split(",")|map('float')|list %}
	{% set MESH_MAX = print.MESH_MAX.split(",")|map('float')|list %}
	{%if MESH_MIN[0] < km.print_min[0] or MESH_MIN[1] < km.print_min[1] %}
	{action_raise_error("MESH_MIN %s is outside the printable bounds" %
	(MESH_MIN|string, km.print_min|string))}
	{%elif MESH_MAX[0] > km.print_max[0] or MESH_MAX[1] > km.print_max[1] %}
	{action_raise_error("MESH_MAX %s is outside the printable bounds %s" %
	(MESH_MAX|string, km.print_max|string))}
	{% endif %}
	{% endif %}
	
	
	{% set points = [] %}
	{% if print.MODEL_MIN or print.MODEL_MAX %}
	{% set MODEL_MIN = print.MODEL_MIN.split(",")|map('float')|list %}
	{% set MODEL_MAX = print.MODEL_MAX.split(",")|map('float')|list %}
	{% set points = [MODEL_MIN, MODEL_MAX] %}
	{% endif %}
	{% if (printer.exclude_object|default({})).objects %}
	{% set points = printer.exclude_object.objects|selectattr('polygon')|
	map(attribute='polygon')|sum(start=points) %}
	{% set points_len = points|length %}
	{% if points_len >= 2 %}
	{% set x_coords = (points|map(attribute=0)|sort|list)[0::points_len-1] %}
	{% set y_coords = (points|map(attribute=1)|sort|list)[0::points_len-1] %}
	{% set MODEL_MIN = (x_coords[0],y_coords[0])|map('float')|list %}
	{% set MODEL_MAX = (x_coords[1],y_coords[1])|map('float')|list %}
	PRINT_START_SET MODEL_MIN="{MODEL_MIN|join(',')
	}" MODEL_MAX="{MODEL_MAX|join(',')}"
	{% endif %}
	{% endif %}
	
	{% if MODEL_MIN %}
	
	{% if MODEL_MIN[0] < km.print_min[0] or MODEL_MIN[1] < km.print_min[1] %}
	{action_raise_error("MODEL_MIN %s is outside the printable bounds" %
	(MODEL_MIN|string, km.print_min|string))}
	{% elif MODEL_MAX[0] > km.print_max[0] or MODEL_MAX[1] > km.print_max[1] %}
	{action_raise_error("MODEL_MAX %s is outside the printable bounds %s" %
	(MODEL_MAX|string, km.print_max|string))}
	{% endif %}
	{% endif %}
	
	
	{% if MESH_MIN and MODEL_MIN %}
	PRINT_START_SET PRINT_MIN="{((MODEL_MIN[0],MESH_MIN[0])|min,
	(MODEL_MIN[1],MESH_MIN[1])|min)|join(',')
	}" PRINT_MAX="{((MODEL_MAX[0],MESH_MAX[0])|max,
	(MODEL_MAX[1],MESH_MAX[1])|max)|join(',')}"
	{% else %}
	PRINT_START_SET PRINT_MIN="{km.print_min|join(',')
	}" PRINT_MAX="{km.print_max|join(',')}"
	{% endif %}

[gcode_macro _km_save_state]
description = Tracks gcode state.
variable_state_set = {}
variable_is_ephemeral = 0
gcode = 
	{% if params.SAVE|int %}
	{% set dummy = state_set.__setitem__(params.NAME, None) %}
	{% else %}
	{% set dummy = state_set.__delitem__(params.NAME) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=_km_save_state VARIABLE=is_ephemeral VALUE="{
	1 if state_set|length > 0 else 0 }"

[gcode_macro save_gcode_state]
description = Wraps SAVE_GCODE_STATE to track persistence state.
	Usage: See Klipper documentation
rename_existing = _KM_SAVE_GCODE_STATE
gcode = 
	_KM_SAVE_GCODE_STATE {rawparams}
	{% set NAME = params.NAME|default("default") %}
	_km_save_state NAME={NAME} SAVE=1

[gcode_macro restore_gcode_state]
description = Wraps RESTORE_GCODE_STATE to track persistence state.
	Usage: See Klipper documentation
rename_existing = _KM_RESTORE_GCODE_STATE
gcode = 
	_KM_RESTORE_GCODE_STATE {rawparams}
	{% set NAME = params.NAME|default("default") %}
	_km_save_state NAME={NAME} SAVE=0

[gcode_macro _abort_on_gcode_state]
gcode = 
	{% set save_state = printer["gcode_macro _km_save_state"] %}
	{% if save_state.is_ephemeral %}
	{action_raise_error("Encountered unexpected save state " +
	save_state.state_set|list|sort|string)}
	{% endif %}

[gcode_macro _km_print_status]
variable_last_status = 'none'
variable_status_stack = []
variable_command_list = {}
variable_status_list = [
	'ready',
	'filament_load',
	'filament_unload',
	'bed_heating',
	'chamber_heating',
	'homing',
	'leveling_gantry',
	'calibrating_z',
	'meshing',
	'extruder_heating',
	'purging',
	'printing',
	'pausing',
	'cancelling',
	'completing',
	]
gcode = 
	{% set ACTION = params.ACTION|trim|upper %}
	{% set STATUS = params.STATUS|default("")|trim|lower %}
	
	
	{% if ACTION == "ADD_EVENT" %}
	{% set COMMAND = params.COMMAND %}
	{% set ARGS = params.ARGS|default(0)|int != 0 %}
	{% set TYPE = params.TYPE|default('ENTER')|trim|upper %}
	{% set WHEN = params.WHEN|default('PRINTING')|trim|upper %}
	{% set FILTER_ENTER =
	(params.FILTER_ENTER|default("")|trim|lower).split(',')|
	select()|unique|list %}
	{% set FILTER_LEAVE =
	(params.FILTER_LEAVE|default("")|trim|lower).split(',')|
	select()|unique|list %}
	
	{% set STATUSES = STATUS.split(',')|map('trim')|list %}
	{% for s in (STATUSES if STATUSES[0] != 'all' else status_list) %}
	{% if not s in command_list %}
	{% set dummy = command_list.__setitem__(s,[]) %}
	{% endif %}
	{% set dummy = command_list[s].append({'cmd':COMMAND, 'args':ARGS,
	'type':TYPE, 'when':WHEN,
	'filt_e':FILTER_ENTER,
	'filt_l':FILTER_LEAVE}) %}
	{% endfor %}
	
	
	{% elif ACTION == "CHANGE" %}
	{% if params.RESET_STACK|default(0)|int %}
	{% for dummy in range(status_stack|length) %}
	{% set dummy = status_stack.pop() %}
	{% endfor %}
	
	
	{% elif STATUS == "pop_status" %}
	{% set STATUS = (status_stack|default(['ready'], True)).pop() %}
	{% endif %}
	
	{% if STATUS not in status_list %}
	{action_raise_error("Status '%s' not valid."|format(STATUS))}
	{% endif %}
	
	{% if STATUS != last_status %}
	{% set is_printing =
	printer["gcode_macro print_start_set"].print.PRINT_START_PHASE|
	default("")|length != 0 %}
	{% set print_states = ('ALWAYS', 'PRINTING' if is_printing else 'IDLE') %}
	
	{% for c in command_list[last_status]|default([]) %}
	{% if c.type in ('BOTH','LEAVE') and c.when in print_states and
	(not c.filt_l or STATUS in c.filt_l) %}
	M400
	{c.cmd}{% if c.args %} TYPE=LEAVE WHEN={print_states[1]
	} LAST_STATUS={last_status} NEXT_STATUS={STATUS}{% endif %}
	{% endif %}
	{% endfor %}
	
	{% for c in command_list[STATUS]|default([]) %}
	{% if c.type in ('BOTH','ENTER') and c.when in print_states and
	(not c.filt_e or STATUS in c.filt_e) %}
	M400
	{c.cmd}{% if c.args %} TYPE=ENTER WHEN={print_states[1]
	} LAST_STATUS={last_status} NEXT_STATUS={STATUS}{% endif %}
	{% endif %}
	{% endfor %}
	SET_GCODE_VARIABLE MACRO=_km_print_status VARIABLE=last_status VALUE="'{
	STATUS}'"
	{% endif %}
	
	
	{% elif ACTION == "PUSH_STATUS" %}
	{% set dummy = status_stack.append(last_status) %}
	
	
	{% else %}
	{action_raise_error("Action '%s' not valid."|format(ACTION))}
	{% endif %}

[gcode_macro gcode_on_print_status]
description = Adds a gcode command for a status event.
	Usage: GCODE_ON_PRINT_STATUS STATUS=<status> COMMAND=<gcode> [ARGS=<1|0>]
	[WHEN=<PRINTING|IDLE|ALWAYS>]
	[TYPE=<ENTER|LEAVE|BOTH>]
	[FILTER_ENTER=<status list>]
	[FILTER_LEAVE=<status list>]
gcode = 
	{% set STATUS = (params.STATUS|lower).split(',')|map('trim')|list %}
	{% set TYPE = params.TYPE|default('ENTER')|trim|upper %}
	{% set WHEN = params.WHEN|default('PRINTING')|trim|upper %}
	{% set FILTER_ENTER =
	(params.FILTER_ENTER|default("")|trim|lower).split(',')|select()|list %}
	{% set FILTER_LEAVE =
	(params.FILTER_LEAVE|default("")|trim|lower).split(',')|select()|list %}
	
	
	{% set status_list = printer["gcode_macro _km_print_status"].status_list %}
	{% for s in STATUS %}
	{% if not (s in status_list or s == 'all' and STATUS|length == 1) %}
	{action_raise_error("STATUS parameter '%s' not valid."|format(s))}
	{% endif %}
	{% endfor %}
	
	{% if TYPE not in ('ENTER', 'LEAVE', 'BOTH') %}
	{action_raise_error("TYPE paramater '%s' not valid."|format(TYPE))}
	{% elif WHEN not in ('PRINTING', 'IDLE', 'ALWAYS') %}
	{action_raise_error("WHEN parameter '%s' not valid."|format(WHEN))}
	{% elif TYPE == 'ENTER' and FILTER_LEAVE %}
	{action_raise_error("FILTER_LEAVE not valid with TYPE=ENTER.")}
	{% elif TYPE == 'LEAVE' and FILTER_ENTER %}
	{action_raise_error("FILTER_ENTER not valid with TYPE=LEAVE.")}
	{% endif %}
	{% for f in FILTER_ENTER %}
	{% if f not in status_list %}
	{action_raise_error("FILTER_ENTER parameter '%s' not valid."|format(f))}
	{% endif %}
	{% endfor %}
	{% for f in FILTER_LEAVE %}
	{% if f not in status_list %}
	{action_raise_error("FILTER_LEAVE parameter '%s' not valid."|format(f))}
	{% endif %}
	{% endfor %}
	
	
	_KM_PRINT_STATUS ACTION=ADD_EVENT {rawparams}

[gcode_macro m201]
description = Sets maximum accelleration.
	Usage: M201 [X<accel>] [Y<accel>]
variable_max_accel = 1.7976931348623157e+308
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% if 'X' in params or 'Y' in params %}
	{% set accel = (params.X|default(params.Y)|float,
	params.Y|default(params.X)|float)|min %}
	SET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{accel}"
	{% else %}
	SET_VELOCITY_LIMIT
	{% endif %}

[gcode_macro m203]
description = Sets maximum velocity.
	Usage: M203 [X<velocity>] [Y<velocity>]
gcode = 
	{% if 'X' in params or 'Y' in params %}
	{% set velocity = (params.X|default(params.Y)|float,
	params.Y|default(params.X)|float)|min %}
	SET_VELOCITY_LIMIT VELOCITY="{velocity}"
	{% else %}
	SET_VELOCITY_LIMIT
	{% endif %}

[gcode_macro m205]
description = Sets square corner velocity.
	Usage: M203 [X<velocity>] [Y<velocity>]
gcode = 
	{% if 'X' in params or 'Y' in params %}
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY="{
	(params.X|default(0)|float, params.Y|default(0)|float)|min}"
	{% else %}
	SET_VELOCITY_LIMIT
	{% endif %}

[gcode_macro m900]
description = Sets pressure advance.
	Usage: M900 [K<advance>] [T<extruder_index>]
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% if km.pressure_advance_scale > 0.0 %}
	{% set extruder = "extruder" ~ params.T|replace('0', '')
	if "T" in params else printer.toolhead.extruder %}
	{% if 'K' in params %}
	SET_PRESSURE_ADVANCE EXTRUDER="{extruder}" ADVANCE="{
	params.K|float * km.pressure_advance_scale}"
	{% endif %}
	{% endif %}

[gcode_macro _reset_velocity_limits]
description = Sets maximum accelleration.
	Usage: M204 [S<accel>] [P<accel> T<accel>]
gcode = 
	SET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{1.7976931348623157e+308}"

[gcode_macro bed_mesh_calibrate]
rename_existing = _KM_BED_MESH_CALIBRATE_BASE
description = Wraps BED_MESH_CALIBRATE, scaling probe count to specified area.
	Usage: See Klipper documentation.
gcode = 
	BED_MESH_CALIBRATE_FAST{%for k in params%}{' '~k~'="'~params[k]~'"'}{%endfor%}

[gcode_macro g29]
gcode = 
	BED_MESH_CALIBRATE

[idle_timeout]
gcode = 
	_KM_IDLE_TIMEOUT

[respond]

[gcode_macro PRINT_START]
rename_existing = KM_PRINT_START
gcode = 
	
	STATUS_HOMING
	KM_PRINT_START {rawparams}
	STATUS_PRINTING

[board_pins EBB36_G0B1_v1.2]
mcu = ebbcan
aliases = 
aliases_step = 
	EXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15
aliases_limitsw = 
	LIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6
aliases_bltouch = 
	PROBE_1=PB9,PROBE_2=PB8
aliases_fans = 
	FAN0=PA1,FAN1=PA0
aliases_thermistors = 
	TH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7
aliases_heaters = 
	HE0=PB13
aliases_rgb = 
	RGBLED=PD3
aliases_adxl = 
	ADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11
aliases_i2c = 
	AUX0=PB3,AUX1=PB4

[neopixel sb_leds]
pin = ebbcan:RGBLED
chain_count = 4
color_order = RGB
initial_red = 0.0
initial_green = 0.0
initial_blue = 0.0
initial_white = 1.0

[save_variables]
filename = ~/printer_data/variables.cfg

[mcu CB1]
serial = /tmp/klipper_host_mcu

[mcu]
canbus_uuid = f94e10a9add8

[mcu ebbcan]
canbus_uuid = 57244ec148c0

[printer]
kinematics = corexy
max_velocity = 600
max_accel = 10000
max_accel_to_decel = 5000
max_z_velocity = 5
max_z_accel = 100

[stepper_x]
step_pin = PE2
dir_pin = !PB4
enable_pin = !PC11
microsteps = 16
rotation_distance = 40
endstop_pin = !ebbcan:LIMIT_2
position_endstop = 220
position_min = -4
position_max = 220
homing_speed = 50

[tmc2209 stepper_x]
uart_pin = PC10
diag_pin = PF3
run_current = 1.1

[tmc2209 stepper_y]
uart_pin = PF13
diag_pin = PF4
run_current = 1.1

[tmc2209 stepper_z]
uart_pin = PF9
diag_pin = PF5
run_current = 0.650

[tmc2209 extruder]
uart_pin = ebbcan:EXT_UART
diag_pin = ebbcan:LIMIT_3
run_current = 0.650

[stepper_y]
step_pin = PF12
dir_pin = !PF11
enable_pin = !PB3
microsteps = 16
rotation_distance = 40
endstop_pin = ^PF3
position_endstop = 220
position_min = -4
position_max = 220
homing_speed = 50

[stepper_z]
step_pin = PD7
dir_pin = !PD6
enable_pin = !PF10
microsteps = 16
rotation_distance = 8
endstop_pin = probe:z_virtual_endstop
position_max = 300
position_min = -3

[heater_bed]
heater_pin = PB7
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PA0
min_temp = 0
max_temp = 130
control = pid
pid_kp = 63.528
pid_ki = 0.875
pid_kd = 1153.041

[temperature_sensor raspberry_pi]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor mcu_temp]
sensor_type = temperature_mcu
min_temp = 0
max_temp = 100

[controller_fan MCU_Fan]
pin = PE6
heater = extruder
fan_speed = 1

[heater_fan heatbreak_cooling_fan]
pin = ebbcan:FAN0
kick_start_time = 0.25
heater = extruder
heater_temp = 50.0
fan_speed = 1

[fan]
pin = ebbcan:FAN1

[safe_z_home]
home_xy_position = 140, 140
speed = 100
z_hop = 10
z_hop_speed = 20

[extruder]
step_pin = ebbcan:EXT_STEP
dir_pin = ebbcan:EXT_DIR
enable_pin = !ebbcan:EXT_EN
microsteps = 16
rotation_distance = 4.71
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.750
max_extrude_only_distance = 101.0
heater_pin = ebbcan:HE0
sensor_type = ATC Semitec 104NT-4-R025H42G
sensor_pin = ebbcan:TH0
min_temp = 0
max_temp = 300
max_extrude_cross_section = 5
pressure_advance = 0.02
control = pid
pid_kp = 20.603
pid_ki = 0.988
pid_kd = 107.392

[bltouch]
sensor_pin = ebbcan:PROBE_2
control_pin = ebbcan:PROBE_1
x_offset = -40
y_offset = -17
samples = 2
samples_tolerance = 0.015
samples_tolerance_retries = 5
z_offset = 2.849

[bed_mesh]
speed = 100
horizontal_move_z = 5
mesh_min = 10, 27
mesh_max = 173, 200
probe_count = 5, 5
algorithm = bicubic
fade_start = 1
fade_end = 10

[bed_screws]
screw1 = 55,55
screw2 = 200,55
screw3 = 200,205
screw4 = 55,205

[screws_tilt_adjust]
screw1 = 65,55
screw1_name = front left screw
screw2 = 218,55
screw2_name = front right screw
screw3 = 218,215
screw3_name = rear right screw
screw4 = 65,215
screw4_name = rear left screw
horizontal_move_z = 10
speed = 50
screw_thread = CW-M4

[display]
lcd_type = st7920
cs_pin = PB12
sclk_pin = PB13
sid_pin = PB15
encoder_pins = ^PB14, ^PB10
click_pin = ^!PB2

[exclude_object]

[firmware_retraction]
retract_length = 0.4
retract_speed = 20
unretract_extra_length = 0
unretract_speed = 10

[input_shaper]
shaper_type_x = 2hump_ei
shaper_freq_x = 86.2
shaper_type_y = zv
shaper_freq_y = 44.8

[gcode_arcs]
resolution = 1.0

[adxl345]
cs_pin = ebbcan:ADXL_CS
spi_software_sclk_pin = ebbcan:ADXL_SCLK
spi_software_mosi_pin = ebbcan:ADXL_MOSI
spi_software_miso_pin = ebbcan:ADXL_MISO

[resonance_tester]
accel_chip = adxl345
probe_points = 
	120,120,20

[bed_mesh default]
version = 1
points = 
	0.027500, 0.058750, 0.091250, 0.182500
	-0.003750, 0.061250, 0.072500, 0.125000
	0.021250, 0.016250, 0.013750, 0.033750
	-0.023750, -0.018750, -0.036250, -0.037500
x_count = 4
y_count = 4
mesh_x_pps = 2
mesh_y_pps = 2
algo = bicubic
tension = 0.2
min_x = 48.75
max_x = 171.24
min_y = 48.75
max_y = 171.24
=======================
Extruder max_extrude_ratio=2.078758
mcu 'mcu': Starting CAN connect
Created a socket
webhooks client 281473549400432: New connection
webhooks client 281473549400432: Client info {'program': 'Moonraker', 'version': 'v0.8.0-92-g504a3a7'}
Loaded MCU 'mcu' 109 commands (v0.11.0-241-gffb5105b / gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2)
MCU 'mcu' config: ADC_MAX=4095 BUS_PINS_i2c1_PA9_PA10=PA9,PA10 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_i2c2_PB13_PB14=PB13,PB14 BUS_PINS_i2c3_PB3_PB4=PB3,PB4 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3=PB4,PB5,PB3 CANBUS_BRIDGE=1 CLOCK_FREQ=64000000 MCU=stm32g0b1xx PWM_MAX=255 RECEIVE_WINDOW=192 RESERVE_PINS_CAN=PD12,PD13 RESERVE_PINS_USB=PA11,PA12 RESERVE_PINS_crystal=PF0,PF1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
mcu 'CB1': Starting connect
Loaded MCU 'CB1' 113 commands (v0.11.0-241-gffb5105b / gcc: (Debian 10.2.1-6) 10.2.1 20210110 binutils: (GNU Binutils for Debian) 2.35.2)
MCU 'CB1' config: ADC_MAX=4095 CLOCK_FREQ=50000000 MCU=linux PCA9685_MAX=4096 PWM_MAX=32768 STATS_SUMSQ_BASE=256
mcu 'ebbcan': Starting CAN connect
Created a socket
mcu 'ebbcan': got {'count': 516, 'sum': 599612, 'sumsq': 5649036, '#name': 'stats', '#sent_time': 477.93799731, '#receive_time': 477.961239519}
Loaded MCU 'ebbcan' 109 commands (v0.11.0-241-gffb5105b / gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2)
MCU 'ebbcan' config: ADC_MAX=4095 BUS_PINS_i2c1_PA9_PA10=PA9,PA10 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_i2c2_PB13_PB14=PB13,PB14 BUS_PINS_i2c3_PB3_PB4=PB3,PB4 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3=PB4,PB5,PB3 CANBUS_FREQUENCY=1000000 CLOCK_FREQ=64000000 MCU=stm32g0b1xx PWM_MAX=255 RECEIVE_WINDOW=192 RESERVE_PINS_CAN=PB0,PB1 RESERVE_PINS_crystal=PF0,PF1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
mcu_temperature 'mcu' nominal base=-268.847262 slope=1298.126801
Sending MCU 'mcu' printer configuration...
Configured MCU 'mcu' (1024 moves)
Sending MCU 'CB1' printer configuration...
Configured MCU 'CB1' (1024 moves)
Sending MCU 'ebbcan' printer configuration...
Configured MCU 'ebbcan' (1024 moves)
Starting heater checks for heater_bed
bed_mesh: generated points
Index |  Tool Adjusted  |   Probe
  0   | (50.0, 44.0)    | (10.0, 27.0)
  1   | (90.8, 44.0)    | (50.8, 27.0)
  2   | (131.5, 44.0)   | (91.5, 27.0)
  3   | (172.2, 44.0)   | (132.2, 27.0)
  4   | (213.0, 44.0)   | (173.0, 27.0)
  5   | (213.0, 87.2)   | (173.0, 70.2)
  6   | (172.2, 87.2)   | (132.2, 70.2)
  7   | (131.5, 87.2)   | (91.5, 70.2)
  8   | (90.8, 87.2)    | (50.8, 70.2)
  9   | (50.0, 87.2)    | (10.0, 70.2)
  10  | (50.0, 130.5)   | (10.0, 113.5)
  11  | (90.8, 130.5)   | (50.8, 113.5)
  12  | (131.5, 130.5)  | (91.5, 113.5)
  13  | (172.2, 130.5)  | (132.2, 113.5)
  14  | (213.0, 130.5)  | (173.0, 113.5)
  15  | (213.0, 173.8)  | (173.0, 156.8)
  16  | (172.2, 173.8)  | (132.2, 156.8)
  17  | (131.5, 173.8)  | (91.5, 156.8)
  18  | (90.8, 173.8)   | (50.8, 156.8)
  19  | (50.0, 173.8)   | (10.0, 156.8)
  20  | (50.0, 217.0)   | (10.0, 200.0)
  21  | (90.8, 217.0)   | (50.8, 200.0)
  22  | (131.5, 217.0)  | (91.5, 200.0)
  23  | (172.2, 217.0)  | (132.2, 200.0)
  24  | (213.0, 217.0)  | (173.0, 200.0)
Starting heater checks for extruder
Stats 479.5: gcodein=0  mcu: mcu_awake=0.044 mcu_task_avg=0.000014 mcu_task_stddev=0.000009 bytes_write=3036 bytes_read=5701 bytes_retransmit=0 bytes_invalid=0 send_seq=220 receive_seq=217 retransmit_seq=0 srtt=0.002 rttvar=0.003 rto=0.025 ready_bytes=1589 upcoming_bytes=154 freq=64005178 CB1: mcu_awake=0.004 mcu_task_avg=0.000027 mcu_task_stddev=0.000019 bytes_write=819 bytes_read=4523 bytes_retransmit=0 bytes_invalid=0 send_seq=112 receive_seq=112 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999328 adj=49997368 ebbcan: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=1432 bytes_read=4764 bytes_retransmit=0 bytes_invalid=0 send_seq=146 receive_seq=146 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001060 adj=63999361  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=61.5 mcu_temp: temp=36.5 sysload=0.67 cputime=77.754 memavail=689036 print_time=0.010 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
webhooks: registering remote method 'shutdown_machine' for connection id: 281473549400432
webhooks: registering remote method 'reboot_machine' for connection id: 281473549400432
webhooks: registering remote method 'pause_job_queue' for connection id: 281473549400432
webhooks: registering remote method 'start_job_queue' for connection id: 281473549400432
Active bed surface: default; offset: -0.050
Stats 480.7: gcodein=0  mcu: mcu_awake=0.044 mcu_task_avg=0.000014 mcu_task_stddev=0.000009 bytes_write=4960 bytes_read=6023 bytes_retransmit=0 bytes_invalid=0 send_seq=256 receive_seq=256 retransmit_seq=0 srtt=0.004 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64002962 CB1: mcu_awake=0.004 mcu_task_avg=0.000027 mcu_task_stddev=0.000019 bytes_write=825 bytes_read=4539 bytes_retransmit=0 bytes_invalid=0 send_seq=113 receive_seq=113 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999688 adj=49994055 ebbcan: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=1438 bytes_read=4840 bytes_retransmit=0 bytes_invalid=0 send_seq=147 receive_seq=147 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000796 adj=63993587  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=62.8 mcu_temp: temp=36.6 sysload=1.09 cputime=78.021 memavail=685024 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 481.7: gcodein=0  mcu: mcu_awake=0.044 mcu_task_avg=0.000014 mcu_task_stddev=0.000009 bytes_write=4966 bytes_read=6126 bytes_retransmit=0 bytes_invalid=0 send_seq=257 receive_seq=257 retransmit_seq=0 srtt=0.003 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64002135 CB1: mcu_awake=0.004 mcu_task_avg=0.000027 mcu_task_stddev=0.000019 bytes_write=831 bytes_read=4555 bytes_retransmit=0 bytes_invalid=0 send_seq=114 receive_seq=114 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999539 adj=49998616 ebbcan: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=1444 bytes_read=4901 bytes_retransmit=0 bytes_invalid=0 send_seq=148 receive_seq=148 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000633 adj=63998310  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=62.4 mcu_temp: temp=36.5 sysload=1.09 cputime=78.107 memavail=685344 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 482.7: gcodein=0  mcu: mcu_awake=0.044 mcu_task_avg=0.000014 mcu_task_stddev=0.000009 bytes_write=4972 bytes_read=6244 bytes_retransmit=0 bytes_invalid=0 send_seq=258 receive_seq=258 retransmit_seq=0 srtt=0.003 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001734 CB1: mcu_awake=0.004 mcu_task_avg=0.000027 mcu_task_stddev=0.000019 bytes_write=837 bytes_read=4571 bytes_retransmit=0 bytes_invalid=0 send_seq=115 receive_seq=115 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999559 adj=49999457 ebbcan: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=1450 bytes_read=4962 bytes_retransmit=0 bytes_invalid=0 send_seq=149 receive_seq=149 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000458 adj=63999749  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=61.5 mcu_temp: temp=36.6 sysload=1.09 cputime=78.144 memavail=692496 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 483.7: gcodein=0  mcu: mcu_awake=0.109 mcu_task_avg=0.000038 mcu_task_stddev=0.000167 bytes_write=4978 bytes_read=6378 bytes_retransmit=0 bytes_invalid=0 send_seq=259 receive_seq=259 retransmit_seq=0 srtt=0.002 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001515 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000014 bytes_write=843 bytes_read=4600 bytes_retransmit=0 bytes_invalid=0 send_seq=116 receive_seq=116 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999753 adj=49999894 ebbcan: mcu_awake=0.006 mcu_task_avg=0.000016 mcu_task_stddev=0.000033 bytes_write=1456 bytes_read=5053 bytes_retransmit=0 bytes_invalid=0 send_seq=150 receive_seq=150 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000388 adj=64000368  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=60.4 mcu_temp: temp=36.8 sysload=1.09 cputime=78.189 memavail=692496 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 484.7: gcodein=0  mcu: mcu_awake=0.109 mcu_task_avg=0.000038 mcu_task_stddev=0.000167 bytes_write=4984 bytes_read=6481 bytes_retransmit=0 bytes_invalid=0 send_seq=260 receive_seq=260 retransmit_seq=0 srtt=0.002 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001555 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000014 bytes_write=849 bytes_read=4616 bytes_retransmit=0 bytes_invalid=0 send_seq=117 receive_seq=117 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999743 adj=50000444 ebbcan: mcu_awake=0.006 mcu_task_avg=0.000016 mcu_task_stddev=0.000033 bytes_write=1462 bytes_read=5114 bytes_retransmit=0 bytes_invalid=0 send_seq=151 receive_seq=151 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000358 adj=64000384  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=59.6 mcu_temp: temp=36.8 sysload=1.09 cputime=78.239 memavail=692248 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 485.7: gcodein=0  mcu: mcu_awake=0.109 mcu_task_avg=0.000038 mcu_task_stddev=0.000167 bytes_write=4990 bytes_read=6599 bytes_retransmit=0 bytes_invalid=0 send_seq=261 receive_seq=261 retransmit_seq=0 srtt=0.002 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001439 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000014 bytes_write=855 bytes_read=4632 bytes_retransmit=0 bytes_invalid=0 send_seq=118 receive_seq=118 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999753 adj=49999852 ebbcan: mcu_awake=0.006 mcu_task_avg=0.000016 mcu_task_stddev=0.000033 bytes_write=1496 bytes_read=5193 bytes_retransmit=0 bytes_invalid=0 send_seq=154 receive_seq=154 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000378 adj=63999806  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=60.5 mcu_temp: temp=36.7 sysload=1.01 cputime=78.280 memavail=691860 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 486.7: gcodein=0  mcu: mcu_awake=0.109 mcu_task_avg=0.000038 mcu_task_stddev=0.000167 bytes_write=4996 bytes_read=6716 bytes_retransmit=0 bytes_invalid=0 send_seq=262 receive_seq=262 retransmit_seq=0 srtt=0.002 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001412 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000014 bytes_write=861 bytes_read=4648 bytes_retransmit=0 bytes_invalid=0 send_seq=119 receive_seq=119 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999882 adj=49999845 ebbcan: mcu_awake=0.006 mcu_task_avg=0.000016 mcu_task_stddev=0.000033 bytes_write=1502 bytes_read=5269 bytes_retransmit=0 bytes_invalid=0 send_seq=155 receive_seq=155 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000438 adj=63999985  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=60.0 mcu_temp: temp=36.9 sysload=1.01 cputime=78.325 memavail=692656 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 487.7: gcodein=0  mcu: mcu_awake=0.109 mcu_task_avg=0.000038 mcu_task_stddev=0.000167 bytes_write=5008 bytes_read=6835 bytes_retransmit=0 bytes_invalid=0 send_seq=264 receive_seq=264 retransmit_seq=0 srtt=0.001 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001307 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000014 bytes_write=867 bytes_read=4664 bytes_retransmit=0 bytes_invalid=0 send_seq=120 receive_seq=120 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999884 adj=50000035 ebbcan: mcu_awake=0.006 mcu_task_avg=0.000016 mcu_task_stddev=0.000033 bytes_write=1508 bytes_read=5330 bytes_retransmit=0 bytes_invalid=0 send_seq=156 receive_seq=156 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000417 adj=64000006  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=60.2 mcu_temp: temp=36.9 sysload=1.01 cputime=78.362 memavail=692656 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 488.7: gcodein=0  mcu: mcu_awake=0.006 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5014 bytes_read=6968 bytes_retransmit=0 bytes_invalid=0 send_seq=265 receive_seq=265 retransmit_seq=0 srtt=0.001 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001299 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=873 bytes_read=4693 bytes_retransmit=0 bytes_invalid=0 send_seq=121 receive_seq=121 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999955 adj=50000024 ebbcan: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000018 bytes_write=1514 bytes_read=5420 bytes_retransmit=0 bytes_invalid=0 send_seq=157 receive_seq=157 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000488 adj=64000069  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=59.6 mcu_temp: temp=36.8 sysload=1.01 cputime=78.411 memavail=692696 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 489.7: gcodein=0  mcu: mcu_awake=0.006 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5020 bytes_read=7085 bytes_retransmit=0 bytes_invalid=0 send_seq=266 receive_seq=266 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001301 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=879 bytes_read=4709 bytes_retransmit=0 bytes_invalid=0 send_seq=122 receive_seq=122 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999932 adj=50000023 ebbcan: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000018 bytes_write=1520 bytes_read=5481 bytes_retransmit=0 bytes_invalid=0 send_seq=158 receive_seq=158 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000453 adj=64000117  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=59.7 mcu_temp: temp=36.9 sysload=1.01 cputime=78.447 memavail=692820 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 490.7: gcodein=0  mcu: mcu_awake=0.006 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5026 bytes_read=7188 bytes_retransmit=0 bytes_invalid=0 send_seq=267 receive_seq=267 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001274 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=885 bytes_read=4725 bytes_retransmit=0 bytes_invalid=0 send_seq=123 receive_seq=123 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999907 adj=49999657 ebbcan: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000018 bytes_write=1526 bytes_read=5542 bytes_retransmit=0 bytes_invalid=0 send_seq=159 receive_seq=159 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000460 adj=63999745  heater_bed: target=0 temp=25.5 pwm=0.000 raspberry_pi: temp=60.1 mcu_temp: temp=36.8 sysload=1.01 cputime=78.490 memavail=692820 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 491.7: gcodein=0  mcu: mcu_awake=0.006 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5032 bytes_read=7306 bytes_retransmit=0 bytes_invalid=0 send_seq=268 receive_seq=268 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001278 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=891 bytes_read=4741 bytes_retransmit=0 bytes_invalid=0 send_seq=124 receive_seq=124 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999890 adj=49999455 ebbcan: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000018 bytes_write=1532 bytes_read=5618 bytes_retransmit=0 bytes_invalid=0 send_seq=160 receive_seq=160 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000439 adj=63999739  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=59.7 mcu_temp: temp=36.7 sysload=1.01 cputime=78.527 memavail=692968 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 492.7: gcodein=0  mcu: mcu_awake=0.006 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5038 bytes_read=7423 bytes_retransmit=0 bytes_invalid=0 send_seq=269 receive_seq=269 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001270 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=897 bytes_read=4757 bytes_retransmit=0 bytes_invalid=0 send_seq=125 receive_seq=125 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999909 adj=49999311 ebbcan: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000018 bytes_write=1538 bytes_read=5679 bytes_retransmit=0 bytes_invalid=0 send_seq=161 receive_seq=161 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000417 adj=63999494  heater_bed: target=0 temp=25.5 pwm=0.000 raspberry_pi: temp=59.7 mcu_temp: temp=37.0 sysload=1.01 cputime=78.566 memavail=692932 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 493.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5044 bytes_read=7541 bytes_retransmit=0 bytes_invalid=0 send_seq=270 receive_seq=270 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001250 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000018 bytes_write=903 bytes_read=4786 bytes_retransmit=0 bytes_invalid=0 send_seq=126 receive_seq=126 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999902 adj=49999323 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1544 bytes_read=5754 bytes_retransmit=0 bytes_invalid=0 send_seq=162 receive_seq=162 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000433 adj=63999350  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=59.4 mcu_temp: temp=37.0 sysload=1.01 cputime=78.616 memavail=693276 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 494.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5050 bytes_read=7659 bytes_retransmit=0 bytes_invalid=0 send_seq=271 receive_seq=271 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001236 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000018 bytes_write=909 bytes_read=4802 bytes_retransmit=0 bytes_invalid=0 send_seq=127 receive_seq=127 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999905 adj=49999262 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1550 bytes_read=5830 bytes_retransmit=0 bytes_invalid=0 send_seq=163 receive_seq=163 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000418 adj=63999469  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=59.4 mcu_temp: temp=36.9 sysload=1.01 cputime=78.653 memavail=694284 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 495.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5056 bytes_read=7776 bytes_retransmit=0 bytes_invalid=0 send_seq=272 receive_seq=272 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001226 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000018 bytes_write=915 bytes_read=4818 bytes_retransmit=0 bytes_invalid=0 send_seq=128 receive_seq=128 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999906 adj=49999251 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1556 bytes_read=5891 bytes_retransmit=0 bytes_invalid=0 send_seq=164 receive_seq=164 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000409 adj=63999400  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=59.6 mcu_temp: temp=37.1 sysload=0.92 cputime=78.695 memavail=694056 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 496.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5062 bytes_read=7879 bytes_retransmit=0 bytes_invalid=0 send_seq=273 receive_seq=273 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001238 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000018 bytes_write=921 bytes_read=4834 bytes_retransmit=0 bytes_invalid=0 send_seq=129 receive_seq=129 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999899 adj=49999219 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1562 bytes_read=5952 bytes_retransmit=0 bytes_invalid=0 send_seq=165 receive_seq=165 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000402 adj=63999350  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=59.9 mcu_temp: temp=36.9 sysload=0.92 cputime=78.732 memavail=693724 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 497.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5068 bytes_read=7997 bytes_retransmit=0 bytes_invalid=0 send_seq=274 receive_seq=274 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001247 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000018 bytes_write=927 bytes_read=4850 bytes_retransmit=0 bytes_invalid=0 send_seq=130 receive_seq=130 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999920 adj=49999063 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1568 bytes_read=6028 bytes_retransmit=0 bytes_invalid=0 send_seq=166 receive_seq=166 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000390 adj=63999208  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=59.5 mcu_temp: temp=37.0 sysload=0.92 cputime=78.778 memavail=694024 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 498.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5074 bytes_read=8129 bytes_retransmit=0 bytes_invalid=0 send_seq=275 receive_seq=275 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001238 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000012 bytes_write=933 bytes_read=4879 bytes_retransmit=0 bytes_invalid=0 send_seq=131 receive_seq=131 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999913 adj=49999102 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1574 bytes_read=6103 bytes_retransmit=0 bytes_invalid=0 send_seq=167 receive_seq=167 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000384 adj=63999073  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=59.7 mcu_temp: temp=36.9 sysload=0.92 cputime=78.816 memavail=693792 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 499.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5080 bytes_read=8232 bytes_retransmit=0 bytes_invalid=0 send_seq=276 receive_seq=276 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001241 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000012 bytes_write=939 bytes_read=4895 bytes_retransmit=0 bytes_invalid=0 send_seq=132 receive_seq=132 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999908 adj=49999071 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1580 bytes_read=6164 bytes_retransmit=0 bytes_invalid=0 send_seq=168 receive_seq=168 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000390 adj=63999153  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=59.2 mcu_temp: temp=36.9 sysload=0.92 cputime=78.856 memavail=694140 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 500.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5086 bytes_read=8364 bytes_retransmit=0 bytes_invalid=0 send_seq=277 receive_seq=277 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001230 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000012 bytes_write=945 bytes_read=4911 bytes_retransmit=0 bytes_invalid=0 send_seq=133 receive_seq=133 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999917 adj=49998997 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1586 bytes_read=6240 bytes_retransmit=0 bytes_invalid=0 send_seq=169 receive_seq=169 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000422 adj=63999169  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=58.7 mcu_temp: temp=36.9 sysload=0.85 cputime=78.907 memavail=693708 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 501.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5092 bytes_read=8467 bytes_retransmit=0 bytes_invalid=0 send_seq=278 receive_seq=278 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001244 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000012 bytes_write=951 bytes_read=4927 bytes_retransmit=0 bytes_invalid=0 send_seq=134 receive_seq=134 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999919 adj=49999084 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1592 bytes_read=6301 bytes_retransmit=0 bytes_invalid=0 send_seq=170 receive_seq=170 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000414 adj=63999423  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=59.4 mcu_temp: temp=37.0 sysload=0.85 cputime=78.945 memavail=693716 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 502.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5098 bytes_read=8570 bytes_retransmit=0 bytes_invalid=0 send_seq=279 receive_seq=279 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001246 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000012 bytes_write=957 bytes_read=4943 bytes_retransmit=0 bytes_invalid=0 send_seq=135 receive_seq=135 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999918 adj=49998994 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1604 bytes_read=6378 bytes_retransmit=0 bytes_invalid=0 send_seq=172 receive_seq=172 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000414 adj=63999227  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=59.8 mcu_temp: temp=37.0 sysload=0.85 cputime=78.996 memavail=694008 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 503.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5104 bytes_read=8717 bytes_retransmit=0 bytes_invalid=0 send_seq=280 receive_seq=280 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001246 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=963 bytes_read=4972 bytes_retransmit=0 bytes_invalid=0 send_seq=136 receive_seq=136 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999934 adj=49998970 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1610 bytes_read=6468 bytes_retransmit=0 bytes_invalid=0 send_seq=173 receive_seq=173 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000417 adj=63999203  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=58.2 mcu_temp: temp=36.9 sysload=0.85 cputime=79.060 memavail=694028 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 504.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5110 bytes_read=8820 bytes_retransmit=0 bytes_invalid=0 send_seq=281 receive_seq=281 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001242 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=969 bytes_read=4988 bytes_retransmit=0 bytes_invalid=0 send_seq=137 receive_seq=137 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999944 adj=49999069 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1616 bytes_read=6529 bytes_retransmit=0 bytes_invalid=0 send_seq=174 receive_seq=174 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000410 adj=63999214  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=58.1 mcu_temp: temp=37.1 sysload=0.85 cputime=79.107 memavail=694380 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 505.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5116 bytes_read=8923 bytes_retransmit=0 bytes_invalid=0 send_seq=282 receive_seq=282 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001232 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=975 bytes_read=5004 bytes_retransmit=0 bytes_invalid=0 send_seq=138 receive_seq=138 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999941 adj=49999130 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1622 bytes_read=6590 bytes_retransmit=0 bytes_invalid=0 send_seq=175 receive_seq=175 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000405 adj=63999180  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=59.5 mcu_temp: temp=37.1 sysload=0.78 cputime=79.143 memavail=694516 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 506.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5122 bytes_read=9055 bytes_retransmit=0 bytes_invalid=0 send_seq=283 receive_seq=283 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001251 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=981 bytes_read=5020 bytes_retransmit=0 bytes_invalid=0 send_seq=139 receive_seq=139 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999939 adj=49999072 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1628 bytes_read=6666 bytes_retransmit=0 bytes_invalid=0 send_seq=176 receive_seq=176 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000399 adj=63999146  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=59.7 mcu_temp: temp=37.0 sysload=0.78 cputime=79.188 memavail=694284 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 507.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5128 bytes_read=9158 bytes_retransmit=0 bytes_invalid=0 send_seq=284 receive_seq=284 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001240 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=987 bytes_read=5036 bytes_retransmit=0 bytes_invalid=0 send_seq=140 receive_seq=140 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999937 adj=49998929 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1634 bytes_read=6727 bytes_retransmit=0 bytes_invalid=0 send_seq=177 receive_seq=177 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000393 adj=63998974  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=59.8 mcu_temp: temp=37.1 sysload=0.78 cputime=79.224 memavail=694416 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 508.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5134 bytes_read=9276 bytes_retransmit=0 bytes_invalid=0 send_seq=285 receive_seq=285 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001238 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000012 bytes_write=993 bytes_read=5065 bytes_retransmit=0 bytes_invalid=0 send_seq=141 receive_seq=141 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999957 adj=49998989 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1640 bytes_read=6802 bytes_retransmit=0 bytes_invalid=0 send_seq=178 receive_seq=178 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000390 adj=63999056  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=59.7 mcu_temp: temp=37.0 sysload=0.78 cputime=79.262 memavail=694416 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 509.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5140 bytes_read=9408 bytes_retransmit=0 bytes_invalid=0 send_seq=286 receive_seq=286 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001229 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000012 bytes_write=999 bytes_read=5081 bytes_retransmit=0 bytes_invalid=0 send_seq=142 receive_seq=142 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999952 adj=49999145 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1646 bytes_read=6878 bytes_retransmit=0 bytes_invalid=0 send_seq=179 receive_seq=179 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000402 adj=63999079  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=59.5 mcu_temp: temp=37.1 sysload=0.78 cputime=79.300 memavail=694512 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 510.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5146 bytes_read=9511 bytes_retransmit=0 bytes_invalid=0 send_seq=287 receive_seq=287 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001222 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000012 bytes_write=1005 bytes_read=5097 bytes_retransmit=0 bytes_invalid=0 send_seq=143 receive_seq=143 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999949 adj=49999125 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1652 bytes_read=6939 bytes_retransmit=0 bytes_invalid=0 send_seq=180 receive_seq=180 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000409 adj=63999251  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=59.8 mcu_temp: temp=36.9 sysload=0.72 cputime=79.343 memavail=694032 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 511.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5152 bytes_read=9614 bytes_retransmit=0 bytes_invalid=0 send_seq=288 receive_seq=288 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001216 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000012 bytes_write=1011 bytes_read=5113 bytes_retransmit=0 bytes_invalid=0 send_seq=144 receive_seq=144 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999946 adj=49999046 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1658 bytes_read=7000 bytes_retransmit=0 bytes_invalid=0 send_seq=181 receive_seq=181 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000421 adj=63999263  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=59.8 mcu_temp: temp=36.9 sysload=0.72 cputime=79.380 memavail=693856 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 512.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5158 bytes_read=9746 bytes_retransmit=0 bytes_invalid=0 send_seq=289 receive_seq=289 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001225 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000012 bytes_write=1017 bytes_read=5129 bytes_retransmit=0 bytes_invalid=0 send_seq=145 receive_seq=145 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999944 adj=49999048 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1664 bytes_read=7076 bytes_retransmit=0 bytes_invalid=0 send_seq=182 receive_seq=182 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000429 adj=63999394  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=59.8 mcu_temp: temp=37.1 sysload=0.72 cputime=79.418 memavail=693904 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 513.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5164 bytes_read=9864 bytes_retransmit=0 bytes_invalid=0 send_seq=290 receive_seq=290 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001219 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000012 bytes_write=1023 bytes_read=5158 bytes_retransmit=0 bytes_invalid=0 send_seq=146 receive_seq=146 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999951 adj=49998964 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1670 bytes_read=7151 bytes_retransmit=0 bytes_invalid=0 send_seq=183 receive_seq=183 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000423 adj=63999333  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=59.2 mcu_temp: temp=37.0 sysload=0.72 cputime=79.467 memavail=694260 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 514.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5170 bytes_read=9967 bytes_retransmit=0 bytes_invalid=0 send_seq=291 receive_seq=291 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001213 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000012 bytes_write=1029 bytes_read=5174 bytes_retransmit=0 bytes_invalid=0 send_seq=147 receive_seq=147 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999950 adj=49999072 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1676 bytes_read=7212 bytes_retransmit=0 bytes_invalid=0 send_seq=184 receive_seq=184 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000415 adj=63999300  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=59.8 mcu_temp: temp=37.1 sysload=0.72 cputime=79.502 memavail=694360 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 515.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5176 bytes_read=10099 bytes_retransmit=0 bytes_invalid=0 send_seq=292 receive_seq=292 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001213 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000012 bytes_write=1035 bytes_read=5190 bytes_retransmit=0 bytes_invalid=0 send_seq=148 receive_seq=148 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999948 adj=49999079 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1682 bytes_read=7288 bytes_retransmit=0 bytes_invalid=0 send_seq=185 receive_seq=185 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000415 adj=63999268  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=59.8 mcu_temp: temp=37.0 sysload=0.66 cputime=79.555 memavail=694376 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 516.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5182 bytes_read=10202 bytes_retransmit=0 bytes_invalid=0 send_seq=293 receive_seq=293 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001209 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000012 bytes_write=1041 bytes_read=5206 bytes_retransmit=0 bytes_invalid=0 send_seq=149 receive_seq=149 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999947 adj=49999045 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1688 bytes_read=7349 bytes_retransmit=0 bytes_invalid=0 send_seq=186 receive_seq=186 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000410 adj=63999248  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=59.3 mcu_temp: temp=37.0 sysload=0.66 cputime=79.590 memavail=694496 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 517.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5188 bytes_read=10305 bytes_retransmit=0 bytes_invalid=0 send_seq=294 receive_seq=294 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001205 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000012 bytes_write=1047 bytes_read=5222 bytes_retransmit=0 bytes_invalid=0 send_seq=150 receive_seq=150 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999946 adj=49999051 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1694 bytes_read=7410 bytes_retransmit=0 bytes_invalid=0 send_seq=187 receive_seq=187 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000411 adj=63999224  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=59.8 mcu_temp: temp=36.9 sysload=0.66 cputime=79.628 memavail=694272 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 518.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5194 bytes_read=10452 bytes_retransmit=0 bytes_invalid=0 send_seq=295 receive_seq=295 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001206 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000014 bytes_write=1053 bytes_read=5251 bytes_retransmit=0 bytes_invalid=0 send_seq=151 receive_seq=151 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999961 adj=49999056 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1700 bytes_read=7500 bytes_retransmit=0 bytes_invalid=0 send_seq=188 receive_seq=188 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000414 adj=63999266  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=58.7 mcu_temp: temp=37.3 sysload=0.66 cputime=79.697 memavail=694580 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 519.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5200 bytes_read=10555 bytes_retransmit=0 bytes_invalid=0 send_seq=296 receive_seq=296 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001209 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000014 bytes_write=1059 bytes_read=5267 bytes_retransmit=0 bytes_invalid=0 send_seq=152 receive_seq=152 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999969 adj=49999180 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1706 bytes_read=7561 bytes_retransmit=0 bytes_invalid=0 send_seq=189 receive_seq=189 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000413 adj=63999266  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=58.9 mcu_temp: temp=37.1 sysload=0.66 cputime=79.751 memavail=691568 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 520.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5206 bytes_read=10658 bytes_retransmit=0 bytes_invalid=0 send_seq=297 receive_seq=297 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001203 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000014 bytes_write=1065 bytes_read=5283 bytes_retransmit=0 bytes_invalid=0 send_seq=153 receive_seq=153 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999971 adj=49999192 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1712 bytes_read=7622 bytes_retransmit=0 bytes_invalid=0 send_seq=190 receive_seq=190 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000408 adj=63999215  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=60.8 mcu_temp: temp=36.9 sysload=0.77 cputime=79.790 memavail=691696 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 521.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5212 bytes_read=10790 bytes_retransmit=0 bytes_invalid=0 send_seq=298 receive_seq=298 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001199 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000014 bytes_write=1071 bytes_read=5299 bytes_retransmit=0 bytes_invalid=0 send_seq=154 receive_seq=154 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999968 adj=49999204 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1718 bytes_read=7698 bytes_retransmit=0 bytes_invalid=0 send_seq=191 receive_seq=191 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000404 adj=63999225  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=60.3 mcu_temp: temp=36.9 sysload=0.77 cputime=79.827 memavail=691472 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 522.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5218 bytes_read=10893 bytes_retransmit=0 bytes_invalid=0 send_seq=299 receive_seq=299 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001195 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000014 bytes_write=1077 bytes_read=5315 bytes_retransmit=0 bytes_invalid=0 send_seq=155 receive_seq=155 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999964 adj=49999165 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1724 bytes_read=7759 bytes_retransmit=0 bytes_invalid=0 send_seq=192 receive_seq=192 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000401 adj=63999217  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=59.9 mcu_temp: temp=37.1 sysload=0.77 cputime=79.862 memavail=690800 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 523.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5224 bytes_read=11011 bytes_retransmit=0 bytes_invalid=0 send_seq=300 receive_seq=300 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001197 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000014 bytes_write=1083 bytes_read=5344 bytes_retransmit=0 bytes_invalid=0 send_seq=156 receive_seq=156 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999962 adj=49999124 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1730 bytes_read=7834 bytes_retransmit=0 bytes_invalid=0 send_seq=193 receive_seq=193 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000406 adj=63999228  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=59.7 mcu_temp: temp=37.1 sysload=0.77 cputime=79.912 memavail=691392 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 524.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5230 bytes_read=11143 bytes_retransmit=0 bytes_invalid=0 send_seq=301 receive_seq=301 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001202 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000014 bytes_write=1089 bytes_read=5360 bytes_retransmit=0 bytes_invalid=0 send_seq=157 receive_seq=157 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999967 adj=49999060 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1736 bytes_read=7910 bytes_retransmit=0 bytes_invalid=0 send_seq=194 receive_seq=194 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000411 adj=63999253  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=58.1 mcu_temp: temp=37.1 sysload=0.77 cputime=79.975 memavail=690700 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 525.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5236 bytes_read=11246 bytes_retransmit=0 bytes_invalid=0 send_seq=302 receive_seq=302 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001238 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000014 bytes_write=1101 bytes_read=5392 bytes_retransmit=0 bytes_invalid=0 send_seq=159 receive_seq=159 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999964 adj=49999063 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1742 bytes_read=7971 bytes_retransmit=0 bytes_invalid=0 send_seq=195 receive_seq=195 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000419 adj=63999239  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=58.5 mcu_temp: temp=37.1 sysload=0.71 cputime=80.028 memavail=690552 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 526.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5242 bytes_read=11349 bytes_retransmit=0 bytes_invalid=0 send_seq=303 receive_seq=303 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001236 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000014 bytes_write=1107 bytes_read=5408 bytes_retransmit=0 bytes_invalid=0 send_seq=160 receive_seq=160 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999961 adj=49998817 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1748 bytes_read=8032 bytes_retransmit=0 bytes_invalid=0 send_seq=196 receive_seq=196 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000418 adj=63998950  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=59.8 mcu_temp: temp=37.2 sysload=0.71 cputime=80.064 memavail=690328 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 527.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5248 bytes_read=11481 bytes_retransmit=0 bytes_invalid=0 send_seq=304 receive_seq=304 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001229 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000014 bytes_write=1113 bytes_read=5424 bytes_retransmit=0 bytes_invalid=0 send_seq=161 receive_seq=161 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999964 adj=49998843 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1754 bytes_read=8108 bytes_retransmit=0 bytes_invalid=0 send_seq=197 receive_seq=197 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000418 adj=63999016  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=59.8 mcu_temp: temp=37.1 sysload=0.71 cputime=80.114 memavail=689956 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 627.9: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5860 bytes_read=23006 bytes_retransmit=0 bytes_invalid=0 send_seq=406 receive_seq=406 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001172 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000015 bytes_write=1719 bytes_read=7295 bytes_retransmit=0 bytes_invalid=0 send_seq=262 receive_seq=262 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000084 adj=49999250 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=2422 bytes_read=15013 bytes_retransmit=0 bytes_invalid=0 send_seq=303 receive_seq=303 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000391 adj=63999234  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=58.6 mcu_temp: temp=37.7 sysload=0.35 cputime=84.840 memavail=691836 print_time=160.531 buffer_time=0.651 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Attempting MCU 'CB1' config_reset command
b'Got EOF when reading from device'
Attempting MCU 'ebbcan' reset command
Attempting MCU 'mcu' reset command
webhooks client 281473549400432: Disconnected
Restarting printer
Start printer at Mon Aug 21 00:47:42 2023 (1692578862.9 629.8)
===== Config file =====
[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancels the current print.
	Usage: CANCEL_PRINT
rename_existing = _KM_CANCEL_PRINT_BASE
gcode = 
	_KM_CHECK_IS_PRINTING
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=cancelling RESET_STACK=1
	SET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{True}"
	PRINT_END
	_KM_CANCEL_PRINT_BASE
	{% if printer.pause_resume.is_paused %}
	RESTORE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE MOVE=0
	{% endif %}
	CLEAR_PAUSE
	_KM_APPLY_PRINT_OFFSET RESET=1
	{% if 'virtual_sdcard' in printer and not printer.virtual_sdcard.is_active %}
	SDCARD_RESET_FILE
	{% endif %}

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
variable_restore_idle_timeout = 0
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set idle_timeout = client.idle_timeout|default(0) %}
	
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE={printer[printer.toolhead.extruder].target}
	
	{% if idle_timeout > 0 %}
	SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
	SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
	{% endif %}
	PAUSE_BASE
	_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
variable_last_extruder_temp = 0
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move = client.speed_move|default(velocity) %}
	
	
	{% if printer['gcode_macro PAUSE'].restore_idle_timeout > 0 %}
	SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro PAUSE'].restore_idle_timeout}
	{% endif %}
	M109 S{last_extruder_temp}
	_CLIENT_EXTRUDE
	RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	_KM_CHECK_IS_PRINTING
	{% set pause_next_layer =
	printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE | default(1) | int != 0 %}
	{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VALUE="{
	{ 'enable': False, 'call': MACRO }}" VARIABLE=pause_next_layer
	GCODE_AT_LAYER COMMAND="{MACRO|replace('\"','\\\"')
	}" CANCEL="{0 if ENABLE else 1}" LAYER="next"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	_KM_CHECK_IS_PRINTING
	{% set pause_at_layer =
	printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	
	{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined else
	params.LAYER is defined %}
	{% set LAYER = params.LAYER |
	default((pause_at_layer.layer|int,
	printer.print_stats.info.current_layer|int + 1)|max)%}
	{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}
	
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{
	{ 'enable': False, 'layer': 0, 'call': MACRO }}"
	{% if ENABLE and pause_at_layer.enable %}
	
	GCODE_AT_LAYER COMMAND="{pause_at_layer.call|replace('\"','\\\"')
	}" CANCEL="{1}" LAYER="{pause_at_layer.layer}"
	{% endif %}
	
	GCODE_AT_LAYER COMMAND="{MACRO|replace('\"','\\\"')
	}" CANCEL="{0 if ENABLE else 1}" LAYER="{LAYER}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = _KM_SET_PRINT_STATS_INFO
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	_KM_SET_PRINT_STATS_INFO {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.extruder.can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[gcode_macro _km_options]
variable_load_length = 90.0
variable_menu_temperature = [
	{'name' : 'PLA',  'extruder' : 200.0, 'bed' : 60.0},
	{'name' : 'PETG', 'extruder' : 230.0, 'bed' : 85.0},
	{'name' : 'ABS',  'extruder' : 245.0, 'bed' : 110.0, 'chamber' : 60}]
variable_start_purge_length = 50
variable_start_extruder_probing_temp = 150
variable_park_x = 200.0
variable_park_y = 200.0
gcode = 

[gcode_macro bed_mesh_calibrate_fast]
description = Wraps BED_MESH_CALIBRATE, scaling probe count to specified area.
	Usage: See Klipper documentation.
gcode = 
	
	BED_MESH_CHECK ABORT=1
	
	
	{% set calibrate_cmd =
	(printer["gcode_macro list_macros"].macros.bed_mesh_calibrate|
	default(["bed_mesh_calibrate"],True))[-1] %}
	
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set probe_mesh_padding = km.probe_mesh_padding %}
	{% set probe_min_count = km.probe_min_count %}
	{% set probe_count_scale = km.probe_count_scale %}
	{% set bed_mesh = printer.configfile.settings.bed_mesh %}
	
	
	{%if "mesh_radius" not in bed_mesh and
	"MESH_RADIUS" not in params %}
	{% set safe_min_x = bed_mesh.mesh_min[0] %}
	{% set safe_min_y = bed_mesh.mesh_min[1] %}
	{% set safe_max_x = bed_mesh.mesh_max[0] %}
	{% set safe_max_y = bed_mesh.mesh_max[1] %}
	
	
	{% if "MESH_MIN" in params %}
	{% set mesh_min_x = (params.MESH_MIN.split(",")[0]|float -
	probe_mesh_padding, safe_min_x)|max %}
	{% set mesh_min_y = (params.MESH_MIN.split(",")[1]|float -
	probe_mesh_padding, safe_min_y)|max %}
	{% else %}
	{% set mesh_min_x = safe_min_x %}
	{% set mesh_min_y = safe_min_y %}
	{% endif %}
	{% if "MESH_MAX" in params %}
	{% set mesh_max_x = (params.MESH_MAX.split(",")[0]|float +
	probe_mesh_padding, safe_max_x)|min %}
	{% set mesh_max_y = (params.MESH_MAX.split(",")[1]|float +
	probe_mesh_padding, safe_max_y)|min %}
	{% else %}
	{% set mesh_max_x = safe_max_x %}
	{% set mesh_max_y = safe_max_y %}
	{% endif %}
	
	{% set probe_count = bed_mesh.probe_count if not params.PROBE_COUNT else
	params.PROBE_COUNT.split(",")|map('int')|list %}
	
	{% if "PROBE_COUNT" not in params %}
	{% set max_x_probes = probe_count[0] %}
	{% set max_y_probes = probe_count[-1] %}
	
	{% set x_probes = (max_x_probes * (mesh_max_x - mesh_min_x) /
	(safe_max_x - safe_min_x) * probe_count_scale)
	| round(0) | int %}
	{% set x_probes = ((x_probes, probe_min_count)|max, max_x_probes)|min %}
	
	{% set y_probes = (max_y_probes * (mesh_max_y - mesh_min_y ) /
	(safe_max_y - safe_min_y) * probe_count_scale )
	| round(0) | int %}
	{% set y_probes = ((y_probes, probe_min_count)|max, max_y_probes)|min %}
	
	{% if x_probes > 6 and y_probes < 4 %}
	{% set y_probes = 4 %}
	{% elif y_probes > 6 and x_probes < 4 %}
	{% set x_probes = 4 %}
	{% endif %}
	{% set probe_count = [x_probes,y_probes] %}
	{% elif probe_count|length == 1 %}
	{% set dummy = probe_count.append(probe_count[0]) %}
	{% endif %}
	
	
	
	
	
	
	
	{% if "relative_reference_index" in bed_mesh %}
	{% set row = (bed_mesh.relative_reference_index / bed_mesh.probe_count[0]
	)|int%}
	{% set rrf_x = (((safe_max_x - safe_min_x) /
	(bed_mesh.probe_count[0] - 1))|round(2, 'floor')) *
	(bed_mesh.relative_reference_index %
	bed_mesh.probe_count[-1]) %}
	{% if row % 2 %}
	{% set rrf_x = safe_max_x - rrf_x %}
	{% else %}
	{% set rrf_x = safe_min_x + rrf_x %}
	{% endif %}
	{% set rrf_y = (((safe_max_y - safe_min_y) /
	(bed_mesh.probe_count[-1] - 1))|round(2, 'floor')) *
	row + safe_min_x %}
	{% set x_dist = (mesh_max_x - mesh_min_x) / (probe_count[0] - 1) %}
	{% set y_dist = (mesh_max_y - mesh_min_y) / (probe_count[1] - 1) %}
	{% set rrf = {'x':0, 'y':0, 'dist':safe_max_x**2+safe_max_y**2,'pos':0} %}
	{% for row in range(probe_count[1])%}
	{% for col in range(probe_count[0])%}
	{% if row % 2 %}
	{% set x = mesh_max_x - col * x_dist %}
	{% else %}
	{% set x = mesh_min_x + col * x_dist %}
	{% endif %}
	{% set y = mesh_min_y + row * y_dist %}
	{% set dist = ((x - rrf_x)**2 + (y - rrf_y)**2)**0.5 %}
	{% if dist < rrf.dist %}
	{% set dummy = rrf.__setitem__("dist", dist) %}
	{% set dummy = rrf.__setitem__("x", x) %}
	{% set dummy = rrf.__setitem__("y", y) %}
	{% set dummy = rrf.__setitem__("pos", row * probe_count[1] + col) %}
	{% endif %}
	{% endfor %}
	{% endfor %}
	{% if rrf.x != rrf_x or rrf.y != rrf_y %}
	{action_respond_info("relative_reference_index remapped to"
	" %d (%.2f,%.2f) from %d (%.2f,%.2f)" %
	(rrf.pos, rrf.x, rrf.y,
	bed_mesh.relative_reference_index, rrf_x, rrf_y))}
	{% endif %}
	{% set dummy = params.__setitem__("RELATIVE_REFERENCE_INDEX", rrf.pos) %}
	{% endif %}
	
	{% set dummy = params.__setitem__("MESH_MIN", mesh_min_x~","~mesh_min_y) %}
	{% set dummy = params.__setitem__("MESH_MAX", mesh_max_x~","~mesh_max_y) %}
	{% set dummy = params.__setitem__("PROBE_COUNT", probe_count|join(',')) %}
	
	{% if probe_count[0] > 6 or probe_count[1]|default(0) > 6 %}
	{% set dummy = params.__setitem__("ALGORITHM", "bicubic") %}
	{% endif %}
	
	{% if "MESH_MIN" in params or "MESH_MAX" in params %}
	BED_MESH_CHECK {rawparams}
	{% endif %}
	{% else %}
	
	{% set dummy = params.__delitem__("MESH_MIN") %}
	{% set dummy = params.__delitem__("MESH_MAX") %}
	{% endif %}
	
	{% if "MESH_MIN" in params or "MESH_MAX" in params %}
	BED_MESH_CHECK ABORT=1{%for k in params%}{' '~k~'="'~params[k]~'"'}{%
	endfor%}
	{% endif %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=meshing
	{calibrate_cmd}{%for k in params%}{' '~k~'="'~params[k]~'"'}{%endfor%}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro bed_mesh_check]
description = Warns if bed_mesh config may generate an invalid mesh.
	Usage: BED_MESH_CHECK [MESH_MIN=<x,y>] [MESH_MAX=<x,y>] [ABORT=<0|1>]
gcode = 
	{% if printer.bed_mesh is defined %}
	{% set action = action_respond_info if params.ABORT|default(0)|int == 0 else
	action_raise_error %}
	{% set settings = printer.configfile.settings %}
	{% set x_min = settings.stepper_x.position_min %}
	{% set y_min = settings.stepper_y.position_min %}
	{% set x_max = settings.stepper_x.position_max %}
	{% set y_max = settings.stepper_y.position_max %}
	
	{% set label = "[bed_mesh] config" %}
	{% if "MESH_MIN" in params %}
	{% set label = "BED_MESH_CALIBRATE params" %}
	{% set mesh_min_x = params.MESH_MIN.split(",")[0]|float %}
	{% set mesh_min_y = params.MESH_MIN.split(",")[1]|float %}
	{% else %}
	{% set mesh_min_x = settings.bed_mesh.mesh_min[0] %}
	{% set mesh_min_y = settings.bed_mesh.mesh_min[1] %}
	{% endif %}
	{% if "MESH_MAX" in params %}
	{% set label = "BED_MESH_CALIBRATE params" %}
	{% set mesh_max_x = params.MESH_MAX.split(",")[0]|float %}
	{% set mesh_max_y = params.MESH_MAX.split(",")[1]|float %}
	{% else %}
	{% set mesh_max_x = settings.bed_mesh.mesh_max[0] %}
	{% set mesh_max_y = settings.bed_mesh.mesh_max[1] %}
	{% endif %}
	
	{% if "bltouch" in settings %}
	{% set x_offset = settings.bltouch.x_offset %}
	{% set y_offset = settings.bltouch.y_offset %}
	{% set probe = "bltouch" %}
	{% elif "probe" in settings %}
	{% set x_offset = settings.probe.x_offset %}
	{% set y_offset = settings.probe.y_offset %}
	{% set probe = "probe" %}
	{% else %}
	{% set x_offset = 0.0 %}
	{% set y_offset = 0.0 %}
	{% endif %}
	
	{% set output = [] %}
	{% set warn =
	"* mesh_%s (%f, %f) adjusted by " ~ probe ~
	".%s_offset (%f) can move out of range for "
	"stepper_%s.position_%s (%f)." %}
	{% if x_offset > 0 and (mesh_min_x - x_offset) < x_min %}
	{% set dummy = output.append(warn % ('min', mesh_min_x, mesh_min_y,
	'x', x_offset, 'x', 'min', x_min)) %}
	{% elif x_offset < 0 and (mesh_max_x - x_offset) > x_max %}
	{% set dummy = output.append(warn % ('max', mesh_max_x, mesh_max_y,
	'x', x_offset, 'x', 'max', x_max)) %}
	{% endif %}
	{% if y_offset > 0 and (mesh_min_y - y_offset) < y_min %}
	{% set dummy = output.append(warn % ('min', mesh_min_x, mesh_min_y,
	'y', y_offset, 'y', 'min', y_min)) %}
	{% elif y_offset < 0 and (mesh_max_y - y_offset) > y_max %}
	{% set dummy = output.append(warn % ('max', mesh_max_x, mesh_max_y,
	'y', y_offset, 'y', 'max', y_max)) %}
	{% endif %}
	
	{% if output %}
	{ action(
	"Warning: The following issue(s) were detected in your " ~ label ~
	":\n" ~ output|join("\n")) }
	{% endif %}
	{% endif %}

[gcode_macro _apply_bed_surface_offset]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% if surfaces.active %}
	SET_SURFACE_ACTIVE SURFACE={surfaces.active}
	{% endif %}

[gcode_macro _init_surfaces]
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% if "bed_surfaces" in printer.save_variables.variables %}
	{% set old_surfaces = printer.save_variables.variables.bed_surfaces %}
	{% else %}
	{% set old_surfaces = { 'active' : '', 'available' : {} } %}
	{% endif %}
	{% set settings = printer.configfile.settings %}
	{% set new_probe_z = (settings.probe | default(settings.bltouch) |
	default(settings.smart_effector) | default({})
	).z_offset|default(0.0)|float %}
	{% set new_endstop_z = (settings.stepper_z | default({})).position_endstop |
	default(0.0)|float %}
	{% if 'endstop_z' not in old_surfaces %}
	{% set dummy = old_surfaces.__setitem__('endstop_z', new_endstop_z) %}
	{% endif %}
	{% if 'probe_z' not in old_surfaces %}
	{% set dummy = old_surfaces.__setitem__('probe_z', new_probe_z) %}
	{% endif %}
	{% set surfaces = { 'active' : '', 'available' : {},
	'endstop_z' : old_surfaces.endstop_z,
	'probe_z' : old_surfaces.probe_z } %}
	{% for s in km.bed_surfaces %}
	{% set s = s.split()|join(' ')|lower %}
	{% if s|length > km.bed_surface_max_name_length or
	s|list|select("in", " \r\n\"\'")|list %}
	{action_raise_error('Invalid surface name "%s". Name must be %d or fewer '
	'characters and must not include space or quotation characters'
	| format(s, km.bed_surface_max_name_length))}
	{% endif %}
	{% if s in old_surfaces.available %}
	{% set dummy = surfaces.available.__setitem__(s,
	old_surfaces.available[s]) %}
	{% else %}
	{% set dummy = surfaces.available.__setitem__(s, {'offset' : 0.0}) %}
	{% endif %}
	{% endfor %}
	{% if old_surfaces.active in surfaces.available %}
	{% set dummy = surfaces.__setitem__('active', old_surfaces.active) %}
	{% elif km.bed_surfaces %}
	{% set dummy = surfaces.__setitem__('active', km.bed_surfaces[0]|lower) %}
	{% endif %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	_APPLY_BED_SURFACE_OFFSET
	{% if new_probe_z != surfaces.probe_z or
	new_endstop_z != surfaces.endstop_z %}
	{ action_respond_info(
	'Z probe offset or endstop position changed. Run ADJUST_SURFACE_OFFSETS '
	'to adjust the offset for all saved surfaces by the change differential, '
	'or run ADJUST_SURFACE_OFFSETS IGNORE=1 to hide this message without '
	'making changes.') }
	{% endif %}

[gcode_macro adjust_surface_offsets]
description = Adjusts surface offsets to account for changes in the Z endstop
	position or probe Z offset.
	Usage: ADJUST_SURFACE_OFFSETS [IGNORE]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% set settings = printer.configfile.settings %}
	{% set new_probe_z = (settings.probe | default(settings.bltouch) |
	default(settings.smart_effector) | default({})
	).z_offset|default(0.0)|float %}
	{% set new_endstop_z = (settings.stepper_z | default({})).position_endstop |
	default(0.0)|float %}
	{% set diff = (surfaces.probe_z - new_probe_z +
	surfaces.endstop_z - new_endstop_z)|round(6) %}
	{% if not params.IGNORE|default(0)|int %}
	{% for s in surfaces.available %}
	{% set offset = (surfaces.available[s].offset - diff)|round(6) %}
	{% set dummy = surfaces.available.__setitem__(s, {'offset' : offset}) %}
	{% endfor %}
	{ action_respond_info("All bed surfaces now adjusted by %1.4f"|
	format(diff))}
	{% elif diff != 0 %}
	{ action_respond_info("Status cleared without adjustment") }
	{% endif %}
	{% set dummy = surfaces.__setitem__('endstop_z', new_endstop_z| round(6)) %}
	{% set dummy = surfaces.__setitem__('probe_z', new_probe_z|round(6)) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"

[gcode_macro set_surface_offset]
description = Sets the offset for a surface and moves the toolhead (if homed).
	Usage: SET_SURFACE_OFFSET [OFFSET=<offset>] [SURFACE=<surface>]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}
	{% if SURFACE not in surfaces.available %}
	{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }
	{% endif %}
	{% set active = surfaces.available[SURFACE] %}
	
	{% set OFFSET = params.OFFSET|default(active.offset)|float %}
	{% if OFFSET != active.offset %}
	{% set dummy = surfaces.available[SURFACE].__setitem__("offset", OFFSET) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	{% if SURFACE == surfaces.active %}
	_km_set_gcode_offset_base Z="{OFFSET}" MOVE={
	1 if printer.toolhead.homed_axes == 'xyz' else 0}
	{% endif %}
	{% endif %}
	{ action_respond_info("Bed surface: %s Offset: %.3f"
	| format(SURFACE, OFFSET)) }
	
	{% set dummy = None if True else "
	{% set dummy = params.SURFACE|default(active surface) %}
	{% set dummy = params.OFFSET|default(none)|float %}
	" %}

[gcode_macro set_surface_active]
description = Sets the active bed surface and moves the toolhead (if homed). If
	no SURFACE argument is present the available surfaces are listed and the
	active one is preceded by a "*".
	Usage: SET_SURFACE_ACTIVE [SURFACE=<surface>]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% if "SURFACE" in params %}
	{% set SURFACE = params.SURFACE|lower %}
	{% if SURFACE not in surfaces.available %}
	{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }
	{% endif %}
	{% if SURFACE != surfaces.active %}
	{% set dummy = surfaces.__setitem__("active", SURFACE) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	{% endif %}
	{% if surfaces.available[SURFACE].offset !=
	printer.gcode_move.homing_origin.z %}
	_km_set_gcode_offset_base Z="{surfaces.available[SURFACE].offset
	}" MOVE={1 if printer.toolhead.homed_axes == 'xyz' else 0}
	{% endif %}
	{action_respond_info("Active bed surface: %s; offset: %.3f"
	| format(SURFACE, surfaces.available[SURFACE].offset))}
	{% else %}
	{% set output = [] %}
	{% for s in surfaces.available|list|sort %}
	{% set dummy = output.append("%s&nbsp;%s - offset: %.3f"
	| format("*" if s == surfaces.active else "&nbsp;",
	s, surfaces.available[s].offset)) %}
	{% endfor %}
	{action_respond_info(output|join('\n'))}
	{% endif %}
	
	{% set dummy = None if True else "
	{% set dummy = params.SURFACE|default(none) %}
	" %}

[gcode_macro set_gcode_offset]
description = Wraps SET_GCODE_OFFSET to update the current bed sheet offset.
	Usage: SET_GCODE_OFFSET [X=<pos>|X_ADJUST=<adjust>]
	[Y=<pos>|Y_ADJUST=<adjust>]
	[Z=<pos>|Z_ADJUST=<adjust>]
	[MOVE=1 [MOVE_SPEED=<speed>]]
rename_existing = _KM_SET_GCODE_OFFSET_BASE
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% if surfaces.active and
	not printer["gcode_macro _km_save_state"].is_ephemeral %}
	{% set Z = params.Z|default(0.0)|float|round(6) %}
	{% set Z_ADJUST = params.Z_ADJUST|default(0.0)|float %}
	{% if 'Z' in params and
	Z != surfaces.available[surfaces.active].offset %}
	{% set dummy = surfaces.available[surfaces.active].__setitem__("offset",
	Z) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	{% elif Z_ADJUST != 0.0 %}
	{% set dummy = surfaces.available[surfaces.active].__setitem__(
	"offset", (Z_ADJUST + printer.gcode_move.homing_origin.z)|round(6)) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	{% endif %}
	{% endif %}
	_km_set_gcode_offset_base{% for k in params%}{' '~k~'="'~params[k]~'"'
	}{% endfor %}

[gcode_macro make_surface_mesh]
description = Generates and saves a mesh to automatically load in PRINT_START.
	Usage: MAKE_SURFACE_MESH [SURFACE=<surface>] [BED=<probing temperature>]
	[EXTRUDER=<probing temperature>]
	[MESH_MULTIPLIER=<integer multiple of mesh density>]
	[bed_mesh_calibrate parameters]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}
	{% if SURFACE not in surfaces.available %}
	{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }
	{% endif %}
	{% set dummy = params.__setitem__('PROFILE', SURFACE) %}
	{% set BED = params.BED|default(70) | int %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set EXTRUDER = params.EXTRUDER|default(km.start_extruder_probing_temp) |
	int %}
	{% set MESH_MULTIPLIER = (params.MESH_MULTIPLIER|default(2)|int, 1)|max %}
	
	M104 S{EXTRUDER}
	M140 S{BED}
	G28
	
	
	{% if surfaces.available[SURFACE].offset !=
	printer.gcode_move.homing_origin.z %}
	_km_set_gcode_offset_base Z="{surfaces.available[SURFACE].offset
	}" MOVE=1
	{% endif %}
	
	
	{% if BED > 0 %}
	{action_respond_info("Stabilizing bed at %iC" | format(BED,))}
	_KM_PARK_IF_NEEDED HEATER=heater_bed RANGE=0.5
	{% if BED < (printer.heater_bed.temperature - 0.2) %}
	M190 R{BED}
	G4 P{((km.start_bed_heat_delay * 10, 30000)|min,
	km.start_bed_heat_delay)|max}
	{% else %}
	G4 P{km.start_bed_heat_delay}
	{% endif %}
	M190 R{BED}
	{% endif %}
	
	{% if EXTRUDER > 0 %}
	_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=2
	M109 R{km.start_extruder_probing_temp}
	{% endif %}
	
	{% if km.start_home_z_at_temp and not bed_at_target %}
	G28 Z
	{% endif %}
	
	
	
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count
	if not params.PROBE_COUNT else
	params.PROBE_COUNT.split(",")|map('int')|list %}
	{% set dummy = params.__setitem__('PROBE_COUNT',(
	MESH_MULTIPLIER * (probe_count[0] - 1) + 1,
	MESH_MULTIPLIER * (probe_count[-1] - 1) + 1,)|join(',')) %}
	
	BED_MESH_CLEAR
	BED_MESH_CALIBRATE_FAST {%
	for k in params|reject('in',['BED','SURFACE'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor %}
	SAVE_CONFIG
	
	
	{% set dummy = None if True else "
	{% set dummy = params.MESH_MULTIPLIER|default(2) %}
	{% set dummy = params.SURFACE|default(active surface) %}
	" %}

[gcode_macro load_surface_mesh]
description = Attempts to load a mesh associated with the specified surface.
	Usage: LOAD_SURFACE_MESH [SURFACE=<surface>]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}
	{% if SURFACE != surfaces.active %}
	SET_SURFACE_ACTIVE SURFACE={SURFACE}
	{% endif %}
	
	{% if SURFACE in printer.bed_mesh.profiles %}
	{% set mesh = printer.bed_mesh.profiles[SURFACE].mesh_params %}
	{% set default = printer.configfile.settings.bed_mesh %}
	
	{% if mesh.min_x <= (default.mesh_min[0] + 0.5) and
	mesh.min_y <= (default.mesh_min[1] + 0.5) and
	mesh.max_x >= (default.mesh_max[0] - 0.5) and
	mesh.max_y >= (default.mesh_max[1] - 0.5) and
	mesh.x_count >= default.probe_count[0] and
	mesh.y_count >= default.probe_count[-1] %}
	
	BED_MESH_PROFILE LOAD={SURFACE}
	{action_respond_info("Loaded mesh: %s" | format(SURFACE,))}
	{% endif %}
	{% endif %}

[gcode_macro m300]
description = Emits and audible beep.
	Usage: M300 [P<duration>] [S<frequency>]
gcode = 
	{% set settings = printer.configfile.settings %}
	{% if "output_pin beeper" in printer %}
	{% set P = (params.P|default(100)|int, 0)|max %}
	{% set S = (params.S|default(1000)|int, 1)|max %}
	SET_PIN PIN=beeper VALUE={% if settings["output_pin beeper"].pwm %}{
	settings["output_pin beeper"].scale|default(1.0) * 0.5
	} CYCLE_TIME={ 1.0 / S }{% else %}1{% endif %}
	G4 P{P}
	SET_PIN PIN=beeper VALUE=0
	{% else %}
	{action_respond_info(
	"M300 is disabled. To enable create an [output_pin beeper] config.")}
	{% endif %}

[gcode_macro set_draw_params]
description = Sets the default parameters used by DRAW_LINE_TO.
	Usage: SET_DRAW_PARAMS [HEIGHT=<mm>] [WIDTH=<mm>] [FEEDRATE=<mm/m>]
variable_height = 0.2
variable_width = 0.0
variable_feedrate = 1200
gcode = 
	{% set dparams = printer["gcode_macro set_draw_params"] %}
	{% for k in params %}
	{% set kl = k|lower %}
	{% if kl in dparams %}
	{% if dparams[kl] is float %}
	{% set v = params[k]|float %}
	{% elif dparams[kl] is integer %}
	{% set v = params[k]|int %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=set_draw_params VARIABLE={kl} VALUE="{v}"
	{% endif %}
	{% endfor %}

[gcode_macro draw_line_to]
description = Extrudes a line of filament at the specified height and width from
	the current coordinate to the supplied XY coordinate. (The height is used only
	to calculate the extrusion volume.)
	Usage: DRAW_LINE_TO [X=<pos>] [Y=<pos>] [HEIGHT=<mm>] [WIDTH=<mm>]
	[FEEDRATE=<mm/m>]
gcode = 
	{% set dparams = printer["gcode_macro set_draw_params"] %}
	{% set position = printer.gcode_move.gcode_position %}
	{% set X = params.X|default(position.x)|float %}
	{% set Y = params.Y|default(position.y)|float %}
	{% set HEIGHT = params.HEIGHT|default(dparams.height)|float %}
	{% set WIDTH = params.WIDTH|default(dparams.width)|float %}
	{% set FEEDRATE = params.FEEDRATE|default(dparams.feedrate)|int %}
	
	{% set distance = ((X - position.x) ** 2 + (Y - position.y) ** 2) ** 0.5 %}
	
	{% set filament_area = 3.14159 *
	(printer.configfile.settings[
	printer.toolhead.extruder].filament_diameter ** 2) / 4 %}
	{% set E = distance * ((WIDTH * HEIGHT) / filament_area) %}
	
	
	_KM_SAVE_GCODE_STATE NAME=_KM_PURGE
	G90
	G92 E0.0
	G1 X{"%.3f" % X} Y{"%.3f" % Y} E{"%.5f" % E} F{FEEDRATE}
	_KM_RESTORE_GCODE_STATE NAME=_KM_PURGE MOVE=0

[gcode_macro draw_purge_line]
description = Purges the specified length of filament as a line (or rows of
	lines) in front of the supplied print area. If no print area is specified the
	purge lines are drawn at the front edge of the maximum printable area. If no
	printable area is set it defaults to the XY axis limits.
	Usage: DRAW_PURGE_LINE [PRINT_MIN=<X,Y>] [PRINT_MAX=<X,Y>] [HEIGHT=<mm>]
	[WIDTH=<mm>] [LENGTH=<mm>]
gcode = 
	
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set origin = printer.gcode_move.homing_origin %}
	{% set dummy = km.__setitem__('print_min', (km.print_min[0] - origin.x,
	km.print_min[1] - origin.y)) %}
	{% set dummy = km.__setitem__('print_max', (km.print_max[0] - origin.x,
	km.print_max[1] - origin.y)) %}
	
	{% if "PRINT_MIN" in params %}
	{% set PRINT_MIN = (
	(params.PRINT_MIN.split(",")[0]|float, km.print_min[0])|max,
	(params.PRINT_MIN.split(",")[1]|float, km.print_min[1])|max
	) %}
	{% else %}
	{% set PRINT_MIN = km.print_min %}
	{% endif %}
	{% if "PRINT_MAX" in params %}
	{% set PRINT_MAX = (
	(params.PRINT_MAX.split(",")[0]|float, km.print_max[0])|min,
	(params.PRINT_MAX.split(",")[1]|float, km.print_max[1])|min
	) %}
	{% else %}
	{% set PRINT_MAX = km.print_max %}
	{% endif %}
	{% set extruder = printer.toolhead.extruder|string %}
	{% set HEIGHT = params.HEIGHT|default(
	printer.configfile.settings[extruder].nozzle_diameter * 0.625)|float %}
	{% set WIDTH = params.WIDTH|default(
	printer.configfile.settings[extruder].nozzle_diameter * 1.25)|float %}
	{% set LENGTH = params.LENGTH|default(km.start_purge_length)|float %}
	
	{% set dparams = printer["gcode_macro set_draw_params"] %}
	{% set filament_area = 3.14159 *
	(printer.configfile.settings[extruder].filament_diameter ** 2) / 4 %}
	{% set purge_length = (LENGTH * filament_area) / (WIDTH * HEIGHT) %}
	{% set printable_length = PRINT_MAX[0] - PRINT_MIN[0] %}
	{% set purge_rows = (purge_length / printable_length)|round(0,'ceil')|int %}
	{% set printable_inset = (printable_length - purge_length / purge_rows) / 2 %}
	{% set PRINT_MIN = (PRINT_MIN[0] + printable_inset, PRINT_MIN[1]) %}
	{% set PRINT_MAX = (PRINT_MAX[0] - printable_inset, PRINT_MAX[1]) %}
	
	{% set y_start = (km.print_min[1], PRINT_MIN[1] - km.start_purge_clearance -
	(purge_rows + 0.5) * WIDTH )|max %}
	G90
	
	G1 X{"%.3f" % (PRINT_MIN[0] - 30, km.print_min[0])|max} Y{
	"%.3f" % (y_start - 10, km.print_min[1])|max} F{km.travel_speed_xy}
	
	G1 X{"%.3f" % (PRINT_MIN[0] - 2, km.print_min[0])|max} Y{"%.3f" % y_start} Z{
	"%.4f" % HEIGHT} F{km.travel_speed_xy}
	
	G92 E0.0
	G1 E{"%.3f" % km.start_purge_prime_length} F{km.load_priming_speed}
	G92 E0.0
	
	G1 X{"%.3f" % PRINT_MIN[0]} F{km.travel_speed_xy}
	{% for n in range(purge_rows - 1) %}
	{% set x_pos = PRINT_MIN[0] if n % 2 else PRINT_MAX[0] %}
	DRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{
	WIDTH * n + y_start}"
	DRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{
	WIDTH * (n + 1) + y_start}"
	{% endfor %}
	{% set x_pos = PRINT_MAX[0] if purge_rows % 2 else PRINT_MIN[0] %}
	DRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{
	WIDTH * (purge_rows - 1) + y_start}"
	G92 E0.0

[gcode_macro _check_fan_params]
gcode = 
	{% set MAXIMUM = params.MAXIMUM|default(
	printer["gcode_macro set_fan_scaling"].maximum)|int %}
	{% set MINIMUM = params.MINIMUM|default(
	printer["gcode_macro set_fan_scaling"].minimum)|int %}
	
	{% if params.SCALE and params.SCALE|float <= 0 %}
	{ action_raise_error("SCALE must be a positive value.") }
	{% elif MINIMUM < 0 or MINIMUM > 255 %}
	{ action_raise_error("MINIMUM must be between 0 and 255.") }
	{% elif MAXIMUM < 0 or MAXIMUM > 255 %}
	{ action_raise_error("MAXIMUM must be between 0 and 255.") }
	{% elif params.SPEED and (params.SPEED|int < 0 or params.SPEED|int > 255) %}
	{ action_raise_error("SPEED must be between 0 and 255.") }
	{% elif params.BOOST and (params.BOOST|int < 0 or params.BOOST|int > 255) %}
	{ action_raise_error("BOOST must be between 0 and 255.") }
	{% elif MINIMUM > MAXIMUM %}
	{ action_raise_error("MINIMUM must be less than or equal to MAXIMUM.") }
	{% endif %}

[gcode_macro set_fan_scaling]
description = Sets fan scaling factors applied to M106 command. If a speed is
	provided it will be adjusted according to the scaling parameters.
	Usage: SET_FAN_SCALING [SCALE=<scale>] [BOOST=<boost>] [MAXIMUM=<max>]
	[MINIMUM=<min>] [SPEED=<speed>]
variable_scale = 1.0
variable_boost = 0
variable_minimum = 0
variable_maximum = 255
variable_real_speed = 0
gcode = 
	_CHECK_FAN_PARAMS{% for k in params %}{' '~k~'='~params[k]}{% endfor %}
	{% set SCALE = params.SCALE|default(scale)|float %}
	{% set BOOST = params.BOOST|default(boost)|float %}
	{% set MAXIMUM = params.MAXIMUM|default(maximum)|int %}
	{% set MINIMUM = params.MINIMUM|default(minimum)|int %}
	{% set SPEED = params.SPEED|default(real_speed)|int %}
	
	{% if SCALE != 1.0 or BOOST != 0 or MAXIMUM != 255 or MINIMUM != 0 %}
	{action_respond_info("Fan: Scale: %.2f Minimum:%i Maximum: %i Speed: %i"|
	format(SCALE, MINIMUM, MAXIMUM, SPEED))}
	{% endif %}
	
	
	{% if params|length > 0 %}
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=scale VALUE="{SCALE}"
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=boost VALUE="{BOOST}"
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=minimum VALUE="{MINIMUM}"
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=maximum VALUE="{MAXIMUM}"
	
	M106 S{SPEED}
	{% endif %}
	
	{% set dummy = None if True else "
	{% set dummy = params.SCALE|default(1.0)|float %}
	{% set dummy = params.BUMP|default(0)|int %}
	{% set dummy = params.MAXIMUM|default(255)|int %}
	{% set dummy = params.MINIMUM|default(0)|int %}
	{% set dummy = params.SPEED|default(current speed)|int %}
	" %}

[gcode_macro reset_fan_scaling]
description = Clears all fan scaling factors.
	Usage: RESET_FAN_SCALING
gcode = 
	SET_FAN_SCALING SCALE=1.0 BOOST=0 MAXIMUM=255 MINIMUM=0

[gcode_macro m106]
description = Wraps M106 to implement scaling overrides.
rename_existing = M106.6245197
gcode = 
	{% set S = params.S|default(255)|int %}
	{% set scale = printer["gcode_macro set_fan_scaling"] %}
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=real_speed VALUE="{S}"
	M106.6245197 S{((((S + scale.boost) * scale.scale) | round | int,
	scale.minimum) | max, scale.maximum) | min}

[gcode_macro _load_unload]
gcode = 
	{% set saved_extruder = printer.toolhead.extruder %}
	{% set EXTRUDER = params.EXTRUDER|default(saved_extruder)|lower %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% set BEEPS = params.BEEPS|default(8)|int if "output_pin beeper" in printer
	else 0 %}
	{% set default_minimum = km.load_min_temp if km.load_min_temp else
	(printer.configfile.settings[EXTRUDER].min_extrude_temp + 5) %}
	{% if 'MINIMUM' in params %}
	{% set MINIMUM = params.MINIMUM|int %}
	
	{% elif printer.pause_resume.is_paused and printer[EXTRUDER].target == 0 and
	printer["gcode_macro resume"].saved_extruder_temp %}
	{% set MINIMUM = printer["gcode_macro resume"].saved_extruder_temp %}
	
	{% elif printer[EXTRUDER].target > default_minimum %}
	{% set MINIMUM = printer[EXTRUDER].target %}
	{% else %}
	{% set MINIMUM = default_minimum %}
	{% endif %}
	{% if MINIMUM < printer.configfile.settings[EXTRUDER].min_extrude_temp %}
	{ action_raise_error("Extrude below minimum temp.") }
	{% elif printer.pause_resume.is_paused %}
	
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"
	{% endif %}
	{% set SPEED = params.SPEED|default(km.load_speed)|int %}
	{% set priming_length = km.load_priming_length %}
	{% set LENGTH = params.LENGTH|default(km.load_length)|float - priming_length%}
	{% if LENGTH < 0 %}
	{% set priming_length = (priming_length + LENGTH, 0)|max %}
	{% set LENGTH = 0 %}
	{% endif %}
	SAVE_GCODE_STATE NAME=_KM_LOAD_UNLOAD
	{% if EXTRUDER != saved_extruder%}
	ACTIVATE_EXTRUDER EXTRUDER={EXTRUDER}
	{% endif %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	{% if not printer.extruder.can_extrude or
	printer[EXTRUDER].target < default_minimum %}
	{action_respond_info("Preheating %s to %d" | format(EXTRUDER, MINIMUM))}
	M109 S{MINIMUM}
	{% endif %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS={"filament_load"
	if params.LOAD|int else "filament_unload"}
	M83
	{% set priming_speed = (km.load_priming_speed, SPEED)|min %}
	{% if params.LOAD|int %}
	G0 E{LENGTH} F{SPEED}
	G0 E{priming_length} F{priming_speed}
	G0 E{'%.4f' % -printer["gcode_macro resume"].saved_e} F{km.load_speed}
	{% else %}
	{% set pre_prime_distance = 5.0 %}
	{% set shaping_moves = 5 %}
	{% set shaping_distance = (shaping_moves * (1 + shaping_moves)/20) %}
	
	G0 E{pre_prime_distance} F{SPEED}
	G4 P500
	G0 E{'%.4f' % -(priming_length - shaping_distance)} F{SPEED}
	
	
	{% for i in range(1, shaping_moves + 1) %}
	G0 E2 F{priming_speed}
	G0 E-{2 + (0.1 * i)} F{priming_speed}
	{% endfor %}
	
	G0 E{'%.4f' % -(LENGTH + pre_prime_distance)} F{SPEED}
	{% endif %}
	RESTORE_GCODE_STATE NAME=_KM_LOAD_UNLOAD
	
	
	{% for i in range(BEEPS) %}
	M300 P100
	G4 P200
	{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro LOAD_FILAMENT]
description = Loads filament to the extruder.
	Usage: LOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]
	[EXTRUDER=<extruder>] [MINIMUM=<temperature>]
	[BEEPS=<beep count on completion>]
gcode = 
	_LOAD_UNLOAD LOAD=1{% for k in params
	%}{' '~k~'="'~params[k]~'"'}{% endfor %}
	
	
	{% set dummy = None if True else "
	M109
	{% set dummy = params.LENGTH|default(variable_load_length)|float %}
	{% set dummy = params.SPEED|default(variable_load_speed)|float %}
	{% set dummy = params.EXTRUDER|default(current extruder) %}
	{% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}
	{% set dummy = params.BEEPS|default(10)|int %}
	" %}

[gcode_macro UNLOAD_FILAMENT]
description = Unloads filament from the extruder.
	Usage: UNLOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]
	[EXTRUDER=<extruder>] [MINIMUM=<temperature>]
	[BEEPS=<beep count on completion>]
gcode = 
	_LOAD_UNLOAD LOAD=0{% for k in params
	%}{' '~k~'="'~params[k]~'"'}{% endfor %}
	
	
	{% set dummy = None if True else "
	M109
	{% set dummy = params.LENGTH|default(variable_load_length)|float %}
	{% set dummy = params.SPEED|default(variable_load_speed)|float %}
	{% set dummy = params.EXTRUDER|default(default extruder) %}
	{% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}
	{% set dummy = params.BEEPS|default(10)|int %}
	" %}

[gcode_macro _pause_inner_m700]
gcode = 
	{% set extruder = "extruder" ~ params.T|replace('0', '')
	if "T" in params else printer.toolhead.extruder %}
	{% if extruder != printer.toolhead.extruder%}
	ACTIVATE_EXTRUDER EXTRUDER={extruder}
	{% endif %}
	
	{% set z_param = (' Z="%f"' % params.Z) if 'Z' in params else "" %}
	
	{% if printer.idle_timeout.state|string == "Printing" %}
	PAUSE B="{0}" P=2{z_param}
	{% elif not printer.pause_resume.is_paused%}
	PARK B="{0}" P=2{z_param}
	{% endif %}

[gcode_macro m701]
description = Pauses/parks the toolhead then loads filament to the extruder.
	Usage: M701 [L<distance>] [Z<pos>] [T<extruder>]
gcode = 
	{% if 'U' in params %}
	{% if not 'L' in params %}
	RESPOND TYPE=error MSG="Argument \"U\" substituted for missing \"L\"."
	{% set dummy = params.__setitem__("L", params.U) %}
	{% else %}
	RESPOND TYPE=error MSG="Invalid argument \"U\" ignored."
	{% endif %}
	{% endif %}
	
	_PAUSE_INNER_M700 {% for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	LOAD_FILAMENT BEEPS="{10}" LENGTH={
	params.L|default(printer["gcode_macro _km_globals"].load_length)|float}

[gcode_macro m702]
description = Pauses/parks the toolhead then unloads filament from the extruder.
	Usage: M702 [U<distance>] [Z<pos>] [T<extruder>]
gcode = 
	{% if 'L' in params %}
	{% if not 'U' in params %}
	RESPOND TYPE=error MSG="Argument \"L\" substituted for missing \"U\"."
	{% set dummy = params.__setitem__("U", params.L) %}
	{% else %}
	RESPOND TYPE=error MSG="Invalid argument \"L\" ignored."
	{% endif %}
	{% endif %}
	
	_PAUSE_INNER_M700 {% for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	UNLOAD_FILAMENT BEEPS="{10}" LENGTH={
	params.U|default(printer["gcode_macro _km_globals"].load_length)|float}

[gcode_macro _km_globals]
variable_bed_surface_max_name_length = 10
variable_bed_surfaces = ['default']
variable_load_length = 90.0
variable_load_min_temp = 0
variable_load_priming_length = 20.0
variable_load_priming_speed = 200
variable_load_speed = 1200
variable_menu_show_octoprint = True
variable_menu_show_sdcard = True
variable_menu_temperature = [
	{'name' : 'PLA',  'extruder' : 200, 'bed' : 60},
	{'name' : 'PETG', 'extruder' : 230, 'bed' : 85},
	{'name' : 'ABS',  'extruder' : 245, 'bed' : 110}]
variable_park_x = 0.0
variable_park_y = 0.0
variable_park_z = 20.0
variable_print_min = ()
variable_print_max = ()
variable_pressure_advance_scale = -1.0
variable_probe_mesh_padding = 5.0
variable_probe_min_count = 3
variable_probe_count_scale = 1.0
variable_start_bed_heat_delay = 2000
variable_start_bed_heat_overshoot = 2.0
variable_start_clear_adjustments_at_end = True
variable_start_end_park_y = 0.0
variable_start_extruder_preheat_scale = 0.5
variable_start_extruder_probing_temp = 0
variable_start_home_z_at_temp = True
variable_start_level_bed_at_temp = True
variable_start_purge_clearance = 2.0
variable_start_purge_length = 0.0
variable_start_purge_prime_length = 12.0
variable_start_quad_gantry_level_at_temp = True
variable_start_random_placement_max = 0
variable_start_random_placement_padding = 10.0
variable_start_try_saved_surface_mesh = False
variable_start_z_tilt_adjust_at_temp = True
variable_travel_speed_xy = 3000
variable_travel_speed_z = 600
description = Initializes our globals, including any _km_options overrides.
gcode = 
	
	
	
	
	
	
	
	
	{% set required_sections = {"heater_bed" : None,
	"extruder" : None,
	"gcode_macro _km_options" : None,
	"idle_timeout" : ("gcode", "_KM_IDLE_TIMEOUT"),
	"pause_resume" : None,
	"respond" : None,
	"save_variables" : None,
	"virtual_sdcard" :
	("on_error_gcode", "CANCEL_PRINT")
	} %}
	{% set warn_removed = {
	"start_extruder_set_target_before_level" :
	"The start_extruder_set_target_before_level option has been removed. "
	"Use the start_extruder_probing_temp option instead to set a fixed "
	"probing temperature.",
	"start_gcode_before_print" :
	"The start_gcode_before_print option has been removed. The same effect "
	"can now be achieved by inserting custom gcode before the "
	"_PRINT_START_PHASE_PURGE line in your slicer's start gcode, or by "
	"wrapping the _PRINT_START_PHASE_PURGE macro. See the Slicer "
	"Configuration section in the readme for more information.",
	"velocity_decel_scale" :
	"The velocity_decel_scale option has been removed. Klipper's input "
	"shaping provides a superior mechanism for improving print quality "
	"at higher speeds.",
	} %}
	{% set output = [] %}
	{% for s in required_sections %}
	{% set f = required_sections[s][0] if required_sections[s] else None %}
	{% set v = required_sections[s][1] if required_sections[s] else None %}
	{% if s not in printer.configfile.config %}
	{% set dummy = output.append("Missing [%s] section.\n" | format(s)) %}
	{% elif f and
	(v not in printer.configfile.config[s][f]|default("")|upper) %}
	{% set dummy = output.append("Missing %s in %s for [%s] section.\n"
	| format(v, f, s)) %}
	{% endif %}
	{% endfor %}
	{% if output %}
	{ action_emergency_stop((
	"required printer.cfg section(s) missing:\n"
	~ output | join("\n")) ~
	"See readme: https://github.com/jschuh/klipper-macros\x23klipper-setup")
	}
	{% endif %}
	
	
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_level_bed_at_temp VALUE="{
	1 if printer.bed_mesh is defined else 0}"
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_quad_gantry_level_at_temp VALUE="{
	1 if printer.quad_gantry_level is defined else 0}"
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_z_tilt_adjust_at_temp VALUE="{
	1 if printer.z_tilt is defined else 0}"
	{% set toolhead = printer.toolhead %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=print_min VALUE="{
	(toolhead.axis_minimum.x, toolhead.axis_minimum.y)}"
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=print_max VALUE="{
	(toolhead.axis_maximum.x, toolhead.axis_maximum.y)}"
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_end_park_y VALUE="{
	toolhead.axis_maximum.y}"
	{% set settings = printer.configfile.settings %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_home_z_at_temp VALUE="{
	1 if ("stepper_z" in settings and
	settings.stepper_z.endstop_pin.split()|join("")|lower ==
	"probe:z_virtual_endstop") else 0}"
	
	{% set options = printer["gcode_macro _km_options"] %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	
	{% if options.park_x|default("")|string|lower == "min" %}
	{% set dummy = options.__setitem__("park_x",
	printer.configfile.settings.stepper_x.position_min) %}
	{% elif options.park_x|default("")|string|lower == "max" %}
	{% set dummy = options.__setitem__("park_x",
	printer.configfile.settings.stepper_x.position_max) %}
	{% endif %}
	{% if options.park_y|default("")|string|lower == "min" %}
	{% set dummy = options.__setitem__("park_y",
	printer.configfile.settings.stepper_y.position_min) %}
	{% elif options.park_y|default("")|string|lower == "max" %}
	{% set dummy = options.__setitem__("park_y",
	printer.configfile.settings.stepper_y.position_max) %}
	{% endif %}
	{% if options.start_end_park_y|default("")|string|lower == "min" %}
	{% set dummy = options.__setitem__("start_end_park_y",
	printer.configfile.settings.stepper_y.position_min) %}
	{% elif options.start_end_park_y|default("")|string|lower == "max" %}
	{% set dummy = options.__setitem__("start_end_park_y",
	printer.configfile.settings.stepper_y.position_max) %}
	{% endif %}
	{% if options.park_z|default("")|string|lower == "min" %}
	{% set dummy = options.__setitem__("park_z",
	printer.configfile.settings.stepper_z.position_min) %}
	{% elif options.park_z|default("")|string|lower == "max" %}
	{% set dummy = options.__setitem__("park_z",
	printer.configfile.settings.stepper_z.position_max) %}
	{% endif %}
	
	
	{% for k in options %}
	{% if k not in km %}
	{% if k in warn_removed %}
	{action_respond_info(warn_removed[k])}
	{% else %}
	{% set dummy = output.append("%s is not valid for _KM_OPTIONS." |
	format(k)) %}
	{% endif %}
	{% elif km[k] is string %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k
	} VALUE="'{options[k]|replace('\\','\\\\')|replace('\'','\\\'')
	|replace('\"','\\\"')}'"
	{% elif km[k] is float %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k
	} VALUE="{options[k]|float}"
	{% elif km[k] is integer or km[k] is boolean %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k} VALUE="{options[k]|int}"
	{% elif km[k] is mapping %}
	{% if options[k] is not mapping %}
	{% set dummy = output.append("%s requires a mapping type." |
	format(k)) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k
	} VALUE="{options[k]|replace('\"','\\\"')}"
	{% elif km[k] is sequence %}
	{% if options[k] is not sequence %}
	{% set dummy = output.append("%s requires a sequence type." |
	format(k)) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k
	} VALUE="{options[k]|replace('\"','\\\"')}"
	{% else %}
	{% set dummy = output.append("%s is not a valid type for _KM_OPTIONS." |
	format(k)) %}
	{% endif %}
	{% endfor %}
	
	{% if "homing_override" in printer.configfile.config %}
	{% for l in printer.configfile.config.homing_override.gcode.split("\n") %}
	{% if " g28 " in (" " ~ l.split("\x23")[0].split(";")[0]|lower ~ " ") %}
	{% set dummy = output.append(
	"G28 in [homing_override] gcode. Replace with G28.6245197 to "
	"fix recursive macro call.\n"
	"See readme: https://github.com/jschuh/klipper-macros\x23g28") %}
	{% endif %}
	{% endfor %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=check_km_config VARIABLE=load_errors VALUE="{
	output|replace('\"','\\\"')}"
	M400

[delayed_gcode INIT_GLOBALS]
initial_duration = 1
gcode = 
	LIST_MACROS SILENT=1
	_KM_GLOBALS
	
	CHECK_KM_CONFIG
	_INIT_SURFACES
	BED_MESH_CHECK
	
	SET_DRAW_PARAMS WIDTH="{printer.configfile.settings.extruder.nozzle_diameter}"
	
	_KM_OPTIONS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready

[gcode_macro check_km_config]
variable_load_errors = []
description = Checks global variables and throws an error on any invalid values.
	Does nothing if the config has no errors.
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set toolhead = printer.toolhead %}
	{% set output = load_errors %}
	{% if km.park_x > toolhead.axis_maximum.x or
	km.park_x < toolhead.axis_minimum.x %}
	{% set dummy = output.append("park_x is invalid.") %}
	{% endif %}
	{% if km.park_y > toolhead.axis_maximum.y or
	km.park_y < toolhead.axis_minimum.y %}
	{% set dummy = output.append("park_y is invalid.") %}
	{% endif %}
	{% if km.park_z > toolhead.axis_maximum.z or
	km.park_z < toolhead.axis_minimum.z %}
	{% set dummy = output.append("park_z is invalid.") %}
	{% endif %}
	{% if km.print_max[0] > toolhead.axis_maximum.x or
	km.print_max[1] > toolhead.axis_maximum.y %}
	{% set dummy = output.append("print_max is invalid.") %}
	{% endif %}
	{% if km.print_min[0] < toolhead.axis_minimum.x or
	km.print_min[1] < toolhead.axis_minimum.y %}
	{% set dummy = output.append("print_min is invalid.") %}
	{% endif %}
	{% if km.start_extruder_preheat_scale > 1.0 or
	km.start_extruder_preheat_scale < 0.0 %}
	{% set dummy = output.append("extruder_preheat_scale is invalid.") %}
	{% endif %}
	{% if km.load_length >
	printer.configfile.settings["extruder"].max_extrude_only_distance %}
	{% set dummy = output.append(
	"load_length exceeds max_extrude_only_distance.") %}
	{% endif %}
	{% if km.load_length < km.load_priming_length %}
	{% set dummy = output.append(
	"load_length is shorter than load_priming_length.") %}
	{% endif %}
	{% if km.load_length < 0.0 %}
	{% set dummy = output.append("load_length is negative.") %}
	{% endif %}
	{% if km.load_priming_length < 0.0 %}
	{% set dummy = output.append("load_priming_length is negative.") %}
	{% endif %}
	
	
	{% if output %}
	{ action_raise_error(output|sort|join('\nError: ')) }
	{% endif %}
	M400

[gcode_macro kmvars]
description = Lists global variables used by klipper-macros.
	Usage: KMVARS [SEARCH=<search_string>]
gcode = 
	{% set SEARCH = params.SEARCH|default(params.S|default(""))|lower %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set output = [] %}
	{% for k in km %}
	{% if SEARCH in k %}
	{% set dummy = output.append(k ~ ": " ~ km[k]) %}
	{% endif %}
	{% endfor %}
	{ action_respond_info(output|sort|join('\n')) }

[gcode_macro check_macro_docs]
description = Lists macros lacking proper documentation.
	Usage: CHECK_MACRO_DOCS [USAGE=<0|1>] [HIDDEN=<1|0>] [RENAMED=<1|0>]
gcode = 
	{% set USAGE = params.USAGE|default(0)|int %}
	{% set HIDDEN = params.HIDDEN|default(0)|int %}
	{% set RENAMED = params.RENAMED|default(0)|int %}
	{% set output = [] %}
	{%set config = printer.configfile.config %}
	{% for k in config|sort %}
	{% if k.startswith("gcode_macro") %}
	{% set name = k.split()[1] %}
	{% set desc = config[k].description|default("") %}
	{% set is_renamed = config[k].rename_existing|default("") %}
	{% if (not desc or (USAGE and not "Usage: "~name.upper() in desc)) and
	(HIDDEN or not name.startswith('_')) and (RENAMED or is_renamed) %}
	{% set dummy = output.append("%s&nbsp;%s: missing %s."
	| format("*" if is_renamed else "&nbsp;", name,
	"description" if not desc else "usage")) %}
	{% endif %}
	{% endif %}
	{% endfor %}
	{action_respond_info(output|join("\n"))}

[gcode_macro listvars]
description = Lists per-macro variables with a name containing SEARCH. This is
	useful for debugging macros by allowing you to probe printer state. Be very
	careful, however, as an overly broad SEARCH parameter can take a long time
	to process and potentially hang or crash klipper.
	Usage: LISTVARS SEARCH=<search_string>
gcode = 
	
	{% if 'SEARCH' not in params and 'S' not in params %}
	{ action_raise_error("Must provide a SEARCH parameter.") }
	{% endif %}
	{% set SEARCH = params.SEARCH|default(params.S)|lower %}
	{% set ns = namespace() %}
	{% set output = [] %}
	{% for item in printer %}
	{% if item is not string %}
	{% set ns.path = ['printer', "[%s]" % (item|string), ''] %}
	{% elif ' ' in item %}
	{% set ns.path = ['printer', "['%s']" % (item), ''] %}
	{% else %}
	{% set ns.path = ['printer.', item, ''] %}
	{% endif %}
	
	{% if SEARCH in ns.path|lower %}
	{% set dummy = output.append(ns.path|join) %}
	{% endif %}
	
	{% if printer[item].items() %}
	{% for childkey, child in printer[item].items() recursive %}
	{% set ns.path = ns.path[:loop.depth|int + 1] %}
	{% if childkey is not string %}
	{% set null = ns.path.append("[%s]" % (childkey|string)) %}
	{% elif ' ' in childkey %}
	{% set null = ns.path.append("['%s']" % (childkey)) %}
	{% else %}
	{% set null = ns.path.append(".%s" % (childkey)) %}
	{% endif %}
	
	{% if child is mapping  %}
	{loop(child.items())}
	{% else %}
	{% if SEARCH in ns.path|lower %}
	{% set dummy = output.append("%s : %s" % (ns.path|join, child)) %}
	{% endif %}
	{% endif %}
	{% endfor %}
	{% endif %}
	{% endfor %}
	{ action_respond_info(output|join("\n")) }

[gcode_macro list_macros]
description = Lists registered macros (and optionally show variable state).
	Usage: LISTVARS SEARCH=<search_string> VARS=<0|1> SILENT=<0|1>
variable_macros = {}
gcode = 
	
	{% if not macros %}
	{% set renames = {} %}
	{% for k in printer.configfile.config %}
	{% if k.lower().startswith("gcode_macro") and
	printer.configfile.config[k].rename_existing %}
	{% set name = k.split(None, 1)[1] | lower %}
	{% set dummy = renames.__setitem__(name,
	[printer.configfile.config[k].rename_existing|lower] +
	renames[name]|default([])) %}
	{% endif %}
	{% endfor %}
	{% for k in printer %}
	{% if k.lower().startswith("gcode_macro") %}
	{% set name = k.split(None, 1)[1] | lower %}
	{% set dummy = macros.__setitem__(name, renames[name]|default([])) %}
	{% endif %}
	{% endfor %}
	{% endif %}
	
	{% if params.SILENT|default(0)|int == 0 %}
	_LIST_MACROS_DISPLAY {rawparams}
	{% endif %}

[gcode_macro _list_macros_display]
gcode = 
	{% set SEARCH = params.SEARCH | default(params.S) | default("") | lower %}
	{% set VARS = params.VARS | default(params.V) | default(0) | int != 0 %}
	
	{% set macros = printer["gcode_macro list_macros"].macros %}
	{% set output = [] %}
	{% for k in macros %}
	{% if SEARCH in k | lower %}
	{% set line = k ~ ((" (renames: %s)" % (macros[k]|join(","))) if macros[k]
	else "") %}
	{% set outvars = [] %}
	{% if VARS %}
	{% for v in printer["gcode_macro " ~ k] | sort %}
	{% set dummy = outvars.append("\n* %s: %s" %
	(v, printer["gcode_macro " ~ k][v]|string)) %}
	{% endfor %}
	{% endif %}
	{% set dummy = output.append(line + outvars | join("")) %}
	{% endif %}
	{% endfor %}
	{ action_respond_info(output | sort | join("\n")) }

[gcode_macro set_heater_temperature_scaled]
gcode = 
	{% set HEATER = params.HEATER.lower() %}
	{% set TARGET = params.TARGET|default(0.0)|float %}
	{% set scaled_heaters =
	printer["gcode_macro set_heater_scaling"].scaled_heaters %}
	{% if HEATER in scaled_heaters %}
	{% set scales = scaled_heaters[HEATER] %}
	{% set dummy = scales.__setitem__("real_target", TARGET) %}
	{%if TARGET > 0.0 %}
	{% set TARGET = (((TARGET + scales.bump) * scales.scale, scales.minimum)
	| max, scales.maximum)|min %}
	{% endif %}
	{% endif %}
	SET_HEATER_TEMPERATURE HEATER="{HEATER}" TARGET={TARGET}

[gcode_macro temperature_wait_scaled]
gcode = 
	{% set SENSOR = params.SENSOR.lower() %}
	{% set heater = SENSOR if not SENSOR.startswith("heater_generic") else
	SENSOR.split()[1] %}
	{% set scaled_heaters =
	printer["gcode_macro set_heater_scaling"].scaled_heaters %}
	{% if heater in scaled_heaters %}
	{% set scales = scaled_heaters[heater] %}
	{% if "MINIMUM" in params and MINIMUM > 0.0 %}
	{% set MINIMUM = (((MINIMUM + scales.bump) * scales.scale, scales.minimum)
	| max, scales.maximum)|min %}
	{% endif %}
	{% if "MAXIMUM" in params and MAXIMUM > 0.0 %}
	{% set MAXIMUM = (((MAXIMUM + scales.bump) * scales.scale, scales.minimum)
	| max, scales.maximum)|min %}
	{% endif %}
	{% else %}
	{% set settings = printer.configfile.settings[SENSOR] %}
	{% set MINIMUM = params.MINIMUM|default(settings.min_temp) %}
	{% set MAXIMUM = params.MAXIMUM|default(settings.max_temp) %}
	{% endif %}
	{% if printer[sensor].temperature < MINIMUM or
	printer[sensor].temperature > MAXIMUM %}
	TEMPERATURE_WAIT SENSOR="{SENSOR}" MINIMUM={MINIMUM} MAXIMUM={MAXIMUM}
	{% endif %}

[gcode_macro _gcode_wait_wrapper_inner]
gcode = 
	
	
	{% set sensor = params.HEATER if params.HEATER in
	printer.heaters.available_heaters
	else ("heater_generic " ~ params.HEATER) %}
	{% set target = printer[sensor].target %}
	{% if 'R' in params and target > 0.0 %}
	{% set T = params.T|default("") %}
	M{params.M}.6245197 S{target} { (" T"~T) if T else "" }
	{% elif printer[sensor].temperature < target %}
	TEMPERATURE_WAIT SENSOR="{sensor}" MINIMUM={target}
	{% endif %}

[gcode_macro _gcode_wait_wrapper]
gcode = 
	{% set target = params.S | default(params.R | default(0))| float %}
	SET_HEATER_TEMPERATURE_SCALED HEATER="{params.HEATER}" TARGET={target}
	_GCODE_WAIT_WRAPPER_INNER{%
	for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}

[gcode_macro m109]
rename_existing = M109.6245197
gcode = 
	{% set extruder = "extruder" ~ params.T|replace('0', '')
	if "T" in params else printer.toolhead.extruder %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating
	_GCODE_WAIT_WRAPPER HEATER={extruder}{%
	for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro m190]
rename_existing = M190.6245197
gcode = 
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=bed_heating
	_GCODE_WAIT_WRAPPER HEATER=heater_bed {%
	for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro m191]
description = Sets chamber temperature (with wait for heating).
	Usage: M191 [S<temp>]
gcode = 
	
	{% if "R" in params %}
	{% set dummy = params.__setitem__("S", params.R) %}
	{% endif %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=chamber_heating
	_GCODE_WAIT_WRAPPER HEATER=chamber {%
	for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro m104]
rename_existing = M104.6245197
gcode = 
	{% set extruder = "extruder" ~ params.T|replace('0', '')
	if "T" in params else printer.toolhead.extruder %}
	SET_HEATER_TEMPERATURE_SCALED HEATER={extruder} TARGET={params.S|default(0)}

[gcode_macro m140]
rename_existing = M140.6245197
gcode = 
	SET_HEATER_TEMPERATURE_SCALED HEATER=heater_bed TARGET={params.S|default(0)}

[gcode_macro m141]
description = Sets chamber temperature.
	Usage: M141 [S<temp>]
gcode = 
	SET_HEATER_TEMPERATURE_SCALED HEATER=chamber TARGET={params.S|default(0)}

[gcode_macro _check_heater_params]
gcode = 
	{% set HEATER = params.HEATER|lower %}
	{% set sensor = params.HEATER %}
	{% if HEATER not in printer.heaters.available_heaters %}
	{% set sensor = "heater_generic " ~ HEATER %}
	{% if sensor not in printer.heaters.available_heaters %}
	{ action_raise_error("The value '%s' is not valid for HEATER"
	| format(HEATER)) }
	{% endif %}
	{% endif %}
	{% set settings = printer.configfile.settings[sensor] %}
	{% set scaled_heaters =
	printer["gcode_macro set_heater_scaling"].scaled_heaters %}
	{% if HEATER is in scaled_heaters %}
	{% set scales = scaled_heaters[HEATER] %}
	{% else %}
	{% set scales = { "scale": 1.0, "bump": 0.0, "minimum": settings.min_temp,
	"maximum": settings.max_temp,
	"real_target": printer[sensor].target} %}
	{% endif %}
	{% set SCALE = params.SCALE|default(scales.scale)|float %}
	{% set BUMP = params.BUMP|default(scales.bump)|float %}
	{% set MINIMUM = params.MINIMUM|default(scales.minimum)|float %}
	{% set MAXIMUM = params.MAXIMUM|default(scales.maximum)|float %}
	
	{% if SCALE <= 0 %}
	{ action_raise_error("SCALE must be a positive value.") }
	{% elif MINIMUM < settings.min_temp or MINIMUM > settings.max_temp %}
	{ action_raise_error("MINIMUM must be between %.1f and %.1f" |
	format(settings.min_temp, settings.max_temp)) }
	{% elif MAXIMUM < settings.min_temp or MAXIMUM > settings.max_temp %}
	{ action_raise_error("MAXIMUM must be between %.1f and %.1f" |
	format(settings.min_temp, settings.max_temp)) }
	{% elif MINIMUM >= MAXIMUM %}
	{ action_raise_error("MINIMUM must be less than MAXIMUM.") }
	{% elif "TARGET" in params and (params.TARGET|float < MINIMUM or
	params.TARGET|float > MAXIMUM) %}
	{ action_raise_error("TARGET must be between %.1f and %.1f" |
	format(settings.min_temp, settings.max_temp)) }
	{% endif %}

[gcode_macro set_heater_scaling]
description = Sets scaling parameters for heater. If a new target temperature is
	passed it will be adjusted to the scaling parameters.
	Usage: SET_HEATER_SCALING [HEATER=<heater>] [SCALE=<scale_factor>]
	[BUMP=<degrees>] [MAXIMUM=<degrees>]
	[MINIMUM=<degrees>] [TARGET=<temp>]
variable_scaled_heaters = {}
gcode = 
	
	{% if "HEATER" is not in params %}
	{% set output = [] %}
	{% for h in scaled_heaters %}
	{% set dummy = output.append(
	"%s: Scale: %.2f Bump: %.1f Minimum:%.1f Maximum: %.1f"
	| format(h, scaled_heaters[h].scale, scaled_heaters[h].bump,
	scaled_heaters[h].minimum, scaled_heaters[h].maximum)) %}
	{% endfor %}
	{% if output %}}{action_respond_info(output|join('\n'))}{% endif %}
	{% else %}
	
	{% set HEATER = params.HEATER.lower() %}
	{% set settings = printer.configfile.settings[HEATER] %}
	{% if HEATER is not in scaled_heaters %}
	{% set dummy = scaled_heaters.__setitem__(HEATER, {"scale": 1.0,
	"bump": 0.0, "minimum": settings.min_temp,
	"maximum": settings.max_temp,
	"real_target": printer[HEATER].target}) %}
	{% endif %}
	_CHECK_HEATER_PARAMS{% for k in params %}{' '~k~'='~params[k]}{% endfor %}
	{% set scales = scaled_heaters[HEATER] %}
	{% set SCALE = params.SCALE|default(scales.scale)|float %}
	{% set BUMP = params.BUMP|default(scales.bump)|float %}
	{% set MAXIMUM = params.MAXIMUM|default(scales.maximum)|float %}
	{% set MINIMUM = params.MINIMUM|default(scales.minimum)|float %}
	{% set TARGET = params.TARGET|default(scales.real_target)|float %}
	{% set dummy = scales.__setitem__("scale", SCALE) %}
	{% set dummy = scales.__setitem__("bump", BUMP) %}
	{% set dummy = scales.__setitem__("maximum", MAXIMUM) %}
	{% set dummy = scales.__setitem__("minimum", MINIMUM) %}
	{% set dummy = scales.__setitem__("real_target", TARGET) %}
	
	{% set settings = printer.configfile.settings[HEATER] %}
	{% if SCALE != 1.0 or BUMP != 0.0 or MINIMUM != settings.min_temp or
	MAXIMUM != settings.max_temp %}
	{% set dummy = scaled_heaters.__setitem__(HEATER, scales) %}
	{% else %}
	{% set dummy = scaled_heaters.__delitem__(HEATER) %}
	{% endif %}
	SET_HEATER_TEMPERATURE_SCALED HEATER={HEATER} TARGET={TARGET}
	{action_respond_info(
	"%s: Scale: %.2f Bump: %.1f Minimum:%.1f Maximum: %.1f Target: %.1f"
	| format(HEATER, SCALE, BUMP, MINIMUM, MAXIMUM, TARGET))}
	{% endif %}
	
	{% set dummy = None if True else "
	{% set dummy = params.HEATER|default(e.g. extruder) %}
	{% set dummy = params.SCALE|default(1.0)|float %}
	{% set dummy = params.BUMP|default(0.0)|float %}
	{% set dummy = params.MAXIMUM|default(max_temp)|float %}
	{% set dummy = params.MINIMUM|default(min_temp)|float %}
	{% set dummy = params.TARGET|default(current target)|float %}
	" %}

[gcode_macro reset_heater_scaling]
description = Clears scaling for heater (or all heaters if none specified).
	Usage: RESET_HEATER_SCALING [HEATER=<heater>]
gcode = 
	{% if "HEATER" in params %}
	{% set HEATER = params.HEATER.lower() %}
	{% if HEATER not in printer.heaters.available_heaters %}
	{ action_raise_error("The value '%s' is not valid for HEATER"
	| format(HEATER)) }
	{% endif %}
	{% set settings = printer.configfile.settings[HEATER] %}
	SET_HEATER_SCALING HEATER={HEATER
	} SCALE=1.0 BUMP=0.0 MINIMUM={settings.min_temp
	} MAXIMUM={settings.max_temp}
	{% else %}
	
	SET_GCODE_VARIABLE MACRO=set_heater_scaling VARIABLE=scaled_heaters VALUE={
	"{}"}
	{% endif %}

[gcode_macro _km_idle_timeout]
gcode = 
	{% if printer.pause_resume.is_paused %}
	{action_respond_info("Extruder powered down on idle timeout.")}
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{
	printer[printer.toolhead.extruder].target}"
	M104; Turn off extruder but leave the bed on.
	{% else %}
	TURN_OFF_HEATERS
	M107; turn off fan
	M84
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready
	{% endif %}

[gcode_macro _check_kinematic_limits]
gcode = 
	{% set toolhead = printer.toolhead %}
	{% if params.X and (params.X|float < toolhead.axis_minimum.x or
	params.X|float > toolhead.axis_maximum.x) %}
	{action_raise_error("X[%.3f] must be between %.3f and %.3f."
	| format(params.X|float, toolhead.axis_minimum.x,
	toolhead.axis_maximum.x))}
	{% elif params.Y and (params.Y|float < toolhead.axis_minimum.y or
	params.Y|float > toolhead.axis_maximum.y) %}
	{action_raise_error("Y[%.3f] must be between %.3f and %.3f."
	| format(params.Y|float, toolhead.axis_minimum.y,
	toolhead.axis_maximum.y))}
	{% elif params.Z and (params.Z|float < toolhead.axis_minimum.z or
	params.Z|float > toolhead.axis_maximum.z) %}
	{action_raise_error("Z[%.3f] must be between %.3f and %.3f."
	| format(params.Z|float, toolhead.axis_minimum.z,
	toolhead.axis_maximum.z))}
	{% elif params.E and (params.E|float|abs > printer.configfile.settings[
	"extruder"].max_extrude_only_distance) %}
	{action_raise_error("E[%.4f] exceeds max_extrude_only_distance[%.4f]."
	| format(params.E|float|abs, printer.configfile.settings[
	"extruder"].max_extrude_only_distance))}
	{% endif %}

[gcode_macro lazy_home]
description = Homes the specified axes. If lazy is true, already homed axes
	are skipped.
	Usage: LAZY_HOME [LAZY=<1|0>] [AXES=<axes_string>]
gcode = 
	
	LIST_MACROS SILENT=1
	_LAZY_HOME_INNER {rawparams}

[gcode_macro _lazy_home_inner]
gcode = 
	
	{% set G28 = (printer["gcode_macro list_macros"].macros.g28|
	default(["g28"],True))[-1] %}
	{% set axes = 'XYZ'|select('in', params.AXES|default("XYZ")|upper|list) %}
	{% if not axes %}
	{% set axes = 'XYZ' %}
	{% endif %}
	{% if params.LAZY|default(1)|int %}
	{% set axes = axes|reject('in', printer.toolhead.homed_axes|upper)|join() %}
	{% endif %}
	
	{% if axes %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing
	{G28}{% for k in axes %}{' ' ~ k}{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status
	{% endif %}

[gcode_macro g28]
description = Wraps the G28 command to add the Marlin "O" parameter so that
	already homed axes will not be homed again. See the Klipper documentation on
	G28 for the behavior of the other parameters.
	Usage: G28 [O] ...
rename_existing = G28.6245197
gcode = 
	{% set axes = 'XYZ'|select('in', params)|join() %}
	LAZY_HOME LAZY={('O' in params)|int}{%if axes%} AXES={axes}{%endif%}

[gcode_macro before_layer_change]
description = Add this to the "before layer change" input box in the slicer.
	Usage: BEFORE_LAYER_CHANGE HEIGHT=<current_height> LAYER=<current_layer>
gcode = 
	{% set height = params.HEIGHT|default(printer.toolhead.position.z)|float %}
	{% set layer = params.LAYER|default(-1)|int + 1 %}
	{% if height >= 0.0 and layer >= 0 %}
	SET_PRINT_STATS_INFO CURRENT_LAYER="{layer}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{height}"
	{% if printer["gcode_macro _km_layer_run"].clearance_z < height %}
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{
	height}"
	{% endif %}
	{% endif %}

[gcode_macro after_layer_change]
description = Add this to the "after layer change" input box in the slicer.
	Usage: AFTER_LAYER_CHANGE
gcode = 
	_KM_LAYER_RUN

[gcode_macro gcode_at_layer]
description = Schedules the specified g-code command to be run at the specified
	layer. LAYER=next will cause the command to run at the next layer change.
	Usage: GCODE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } COMMAND=<gcode>
	[CANCEL=<0|1>]
gcode = 
	{% set tot_layers = printer.print_stats.info.total_layer %}
	{% if params|length > 0 %}
	_KM_CHECK_IS_PRINTING
	
	{% set CANCEL = params.CANCEL|default(0)|int != 0 %}
	{% set COMMAND = params.COMMAND|default(None) %}
	{% if COMMAND %}
	{% set COMMAND = COMMAND.lstrip().split(None, 1) %}
	{% set COMMAND = " ".join([COMMAND[0]|upper] + COMMAND[1:]) %}
	{% endif %}
	
	{% if "LAYER" in params %}
	{% set cmd_container = "commands_layer" %}
	{% set cur_layer = printer.print_stats.info.current_layer|int %}
	{% if "HEIGHT" in params %}
	{action_raise_error("Conflicting HEIGHT and LAYER arguments provided.")}
	{% elif params.LAYER|string|lower == "next" %}
	{% set LAYER = cur_layer + 1 %}
	{% else %}
	{% set LAYER = params.LAYER|int %}
	{% endif %}
	{% if LAYER <= cur_layer %}
	{action_raise_error("LAYER[%i] must be above current print layer[%i]."
	| format(LAYER, cur_layer))}
	{% elif tot_layers and LAYER > tot_layers %}
	{action_raise_error("LAYER[%i] must not be above top layer[%i]."
	| format(LAYER, tot_layers))}
	{% endif %}
	{% set key = LAYER %}
	
	{% elif "HEIGHT" in params %}
	{% set cmd_container = "commands_height" %}
	{% set HEIGHT = params.HEIGHT|float %}
	{% set cur_height = printer["gcode_macro _km_layer_run"].cur_height %}
	{% if HEIGHT <= cur_height %}
	{action_raise_error(
	"HEIGHT[%.3f] must be above current print height[%.3f].")
	| format(HEIGHT, cur_height)}
	{% elif HEIGHT >= printer.toolhead.axis_maximum.z %}
	{action_raise_error(
	"HEIGHT[%.3f] must be below maximum Z height[%.3f].")
	| format(HEIGHT, printer.toolhead.axis_maximum.z)}
	{% endif %}
	{% set key = HEIGHT %}
	
	{% else %}
	{action_raise_error("No HEIGHT or LAYER argument provided.")}
	{% endif %}
	
	{% set commands = printer["gcode_macro _km_layer_run"][cmd_container] %}
	{% if key not in commands and not CANCEL %}
	{% set dummy = commands.__setitem__(key, []) %}
	{% endif %}
	
	{% if CANCEL %}
	{% if key in commands %}
	{% set pos = ("%i"|format(key)) if key is integer else
	("%.3fmm"|format(key)) %}
	{% if COMMAND %}
	{% set dummy = commands[key].remove(COMMAND) %}
	{% if commands[key]|length == 0 %}
	{% set dummy = commands.__delitem__(key) %}
	{% endif %}
	{action_respond_info("Cancelled %s %s:\n* %s" |
	format("layer" if k is integer else "height",
	pos, COMMAND))}
	{% else %}
	{% set dummy = commands.__delitem__(key) %}
	{action_respond_info("Cancelled all commands at %s %s." |
	format("layer" if k is integer else "height",
	pos))}
	{% endif %}
	{% endif %}
	{% elif not COMMAND %}
	{action_raise_error("No COMMAND argument provided.")}
	{% elif COMMAND in commands[key] %}
	{action_raise_error("Duplicate command previously scheduled.")}
	{% else %}
	{% set dummy = commands[key].append(COMMAND) %}
	{% set pos = ("%i"|format(key)) if key is integer else
	("%.3fmm"|format(key)) %}
	{action_respond_info("%s %s:\n* %s" |
	format("layer" if key is integer else "height",
	pos, COMMAND))}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE={cmd_container} VALUE="{
	commands|replace('\"','\\\"')}"
	_UPDATE_LAYER_COMPAT
	
	
	{% else %}
	{% set output = [] %}
	{% set commands = printer["gcode_macro _km_layer_run"].commands_layer %}
	{% for key in commands|list|sort %}
	{% set dummy = output.append("layer %i:" | format(key)) %}
	{% for c in commands[key] %}
	{% set dummy = output.append("* %s" | format(c)) %}
	{% endfor %}
	{% endfor %}
	{% set commands = printer["gcode_macro _km_layer_run"].commands_height %}
	{% for key in commands|list|sort %}
	{% set dummy = output.append("height %.3fmm:" | format(key)) %}
	{% for c in commands[key] %}
	{% set dummy = output.append("* %s" | format(c)) %}
	{% endfor %}
	{% endfor %}
	{action_respond_info(output|join('\n'))}
	{% endif %}

[gcode_macro _km_layer_run]
description = Runs pending commands for the current layer change.
	Usage: _KM_LAYER_RUN
variable_cur_height = 0.0
variable_clearance_z = 0.0
variable_commands_layer = {}
variable_commands_height = {}
gcode = 
	{% set cur_layer = printer.print_stats.info.current_layer %}
	{% for key in commands_layer | select("<=", cur_layer) | sort %}
	{action_respond_info("Executing scheduled commands at layer %d:\n%s" |
	format(key, commands_layer[key]|join('\n')))}
	{% for c in commands_layer[key] %}
	{c}
	{% endfor %}
	{% set dummy = commands_layer.__delitem__(key) %}
	{% endfor %}
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{
	commands_layer|replace('\"','\\\"')}"
	{% for key in commands_height | select("<=", cur_height) | sort %}
	{action_respond_info("Executing scheduled commands at height %.3f:\n%s" |
	format(key, commands_height[key]|join('\n')))}
	{% for c in commands_height[key] %}
	{c}
	{% endfor %}
	{% set dummy = commands_height.__delitem__(key) %}
	{% endfor %}
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{
	commands_height|replace('\"','\\\"')}"
	_UPDATE_LAYER_COMPAT

[gcode_macro init_layer_gcode]
description = Clears scheduled gcode commands and state for all layers.
	Usage: INIT_LAYER_GCODE LAYERS=<num>
gcode = 
	SET_PRINT_STATS_INFO TOTAL_LAYER="{params.LAYERS|int + 1}" CURRENT_LAYER="{0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"
	_UPDATE_LAYER_COMPAT

[gcode_macro _reset_layer_gcode]
description = Clears scheduled gcode commands and state for all layers.
	Usage: _RESET_LAYER_GCODE
gcode = 
	SET_PRINT_STATS_INFO TOTAL_LAYER="{0}" CURRENT_LAYER="{0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"
	_UPDATE_LAYER_COMPAT

[gcode_macro cancel_all_layer_gcode]
description = Clears all scheduled gcode commands.
	Usage: CANCEL_ALL_LAYER_GCODE
gcode = 
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"
	_UPDATE_LAYER_COMPAT

[gcode_macro _update_layer_compat]
gcode = 
	{% set next_layer = printer.print_stats.info.current_layer|int + 1 %}
	{% set commands_layer = printer["gcode_macro _km_layer_run"].commands_layer %}
	{% set keys = commands_layer | sort(reverse=True) %}
	
	{% set pause_next_layer = {'enable': False, 'call':
	printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer.call} %}
	{% if pause_next_layer.call in commands_layer[next_layer] | default([]) %}
	{% set dummy = pause_next_layer.__setitem__('enable', True) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{
	pause_next_layer|replace('\"','\\\"') }"
	
	
	{% set pause_at_layer = {'enable': False, 'layer': 0, 'call':
	printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer.call} %}
	{% if pause_next_layer.enable and
	pause_next_layer.call == pause_at_layer.call %}
	{% set keys = keys | reject("==", next_layer) %}
	{% endif %}
	
	
	
	
	{% for key in keys %}
	{% if pause_at_layer.call in commands_layer[key] %}
	{% set dummy = pause_at_layer.__setitem__('enable', True) %}
	{% set dummy = pause_at_layer.__setitem__('layer', key) %}
	{% endif %}
	{% endfor %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{
	pause_at_layer|replace('\"','\\\"') }"

[gcode_macro pause_next_layer]
description = Convenience macro to schedule the current print to pause at the
	next layer change. See PAUSE for additional arguments.
	Usage: PAUSE_NEXT_LAYER ...
gcode = 
	_CHECK_KINEMATIC_LIMITS{% for k in params%}{' ' ~k~ '=' ~ params[k]
	}{% endfor %}
	GCODE_AT_LAYER LAYER=NEXT COMMAND="PAUSE{% for k in params %}{
	' ' ~ k ~ '=' ~ params[k]}{% endfor %}"

[gcode_macro pause_at_layer]
description = Convenience macro to schedule the current print to pause at the
	specified layer change. LAYER=next will cause the command to run at the next
	layer change. See PAUSE for additional arguments.
	Usage: PAUSE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...
gcode = 
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	" %}
	{% set filtered_params = params|reject('in',['HEIGHT','LAYER'])|list|sort %}
	_CHECK_KINEMATIC_LIMITS{% for k in filtered_params%}{' ' ~k~ '=' ~ params[k]
	}{% endfor %}
	GCODE_AT_LAYER {% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor
	%} COMMAND="PAUSE{% for k in filtered_params %}{
	' ' ~ k ~ '=' ~ params[k]}{% endfor %}"

[gcode_macro speed_at_layer]
description = Convenience macro to schedule a feedrate adjustment at the
	specified layer change. LAYER=next will cause the command to run at the next
	layer change. (SPEED parameter behaves the same as the M220 S parameter.)
	Usage: SPEED_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } SPEED=<percentage>
gcode = 
	{% set SPEED = params.SPEED|default(0)|int %}
	{% if SPEED < 1 or SPEED > 500 %}
	{action_raise_error("SPEED[%i] parameter between 1 and 500 is required."
	% SPEED)}
	{% endif %}
	GCODE_AT_LAYER {% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor %} COMMAND="M220 S{SPEED|int}"
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	{% set dummy = params.SPEED|default(percentage)|int %}
	" %}

[gcode_macro flow_at_layer]
description = Convenience macro to schedule a flow percentage adjustment at the
	specified layer change. LAYER=next will cause the command to run at the next
	layer change. (FLOW parameter behaves the same as the M221 S parameter.)
	Usage: FLOW_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } FLOW=<percentage>
gcode = 
	{% set FLOW = params.FLOW|default(0)|int %}
	{% if FLOW < 1 or FLOW > 500 %}
	{action_raise_error("FLOW[%i] parameter between 1 and 500 is required."
	% FLOW)}
	{% endif %}
	GCODE_AT_LAYER {% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor %} COMMAND="M221 S{FLOW|int}"
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	{% set dummy = params.FLOW|default(percentage)|int %}
	" %}

[gcode_macro fan_at_layer]
description = Convenience macro to schedule a fan adjustment at the specified
	layer change. LAYER=next will cause the command to run at the next layer
	change. See SET_FAN_SCALING for additional arguments.
	Usage: FAN_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...
gcode = 
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	{% set dummy = params.SCALE|default(1.0)|float %}
	{% set dummy = params.BUMP|default(0)|int %}
	{% set dummy = params.MAXIMUM|default(0)|int %}
	{% set dummy = params.MINIMUM|default(255)|int %}
	{% set dummy = params.SPEED|default(current speed)|int %}
	" %}
	{% set filtered_params = params|reject('in',['HEIGHT','LAYER'])|list|sort %}
	{% if filtered_params|length == 0 %}
	{action_raise_error("No fan parameters provided.")}
	{% endif %}
	_CHECK_FAN_PARAMS{% for k in filtered_params %}{' '~k~'='~params[k]
	}{% endfor %}
	GCODE_AT_LAYER {% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor
	%} COMMAND="SET_FAN_SCALING{% for k in filtered_params %}{
	' ' ~ k ~ '=' ~ params[k]}{% endfor %}"

[gcode_macro heater_at_layer]
description = Convenience macro to schedule a heater adjustment at the specified
	layer change. LAYER=next will cause the command to run at the next layer
	change. See SET_HEATER_SCALING for additional arguments.
	Usage: HEATER_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...
gcode = 
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	{% set dummy = params.HEATER|default(e.g. extruder) %}
	{% set dummy = params.SCALE|default(1.0)|float %}
	{% set dummy = params.BUMP|default(0.0)|float %}
	{% set dummy = params.MAXIMUM|default(max_temp)|float %}
	{% set dummy = params.MINIMUM|default(min_temp)|float %}
	{% set dummy = params.TARGET|default(current target)|float %}
	" %}
	{% set filtered_params = params|reject('in',['HEIGHT','LAYER'])|list|sort %}
	_CHECK_HEATER_PARAMS{% for k in filtered_params%}{' ' ~ k ~ '=' ~ params[k]
	}{% endfor %}
	GCODE_AT_LAYER{% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor
	%} COMMAND="SET_HEATER_SCALING{% for k in filtered_params %}{
	' ' ~ k ~ '=\\\"' ~ params[k]|replace('\\','\\\\')|replace('\'','\\\'')
	|replace('\"','\\\"') ~ '\\\"'
	}{% endfor %}"

[gcode_macro park]
description = Park the toolhead
	Usage: PARK [P=<0|1|2>] [X=<pos>] [Y=<pos>] [Z=<pos>] [LAZY=<1|0>]
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set LAZY = params.LAZY|default(1)|int %}
	{% if printer.toolhead.homed_axes != "xyz" %}
	{% if LAZY %}
	LAZY_HOME
	{% else %}
	{action_raise_error("Must home axes first.")}
	{% endif %}
	{% endif %}
	
	
	{% set P = (params.P|default(2))|int %}
	{% set X = params.X|default(km.park_x)|float %}
	{% set Y = params.Y|default(km.park_y)|float %}
	{% set Z = params.Z|default(km.park_z)|float %}
	
	M400
	_CHECK_KINEMATIC_LIMITS X="{X}" Y="{Y}" Z="{Z}"
	_PARK_INNER X="{X}" Y="{Y}" Z="{Z}" P="{P}" LAZY="{LAZY}"
	
	{% set dummy = None if True else "
	{% set dummy = params.P|default(mode=<0|1|2>)|int %}
	{% set dummy = params.X|default(X position)|int %}
	{% set dummy = params.Y|default(Y position)|int %}
	{% set dummy = params.Z|default(Z position)|int %}
	" %}

[gcode_macro _park_inner]
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set travel_speed_xy = km.travel_speed_xy %}
	{% set travel_speed_z = km.travel_speed_z %}
	
	{% set position = printer.gcode_move.gcode_position %}
	{% set origin = printer.gcode_move.homing_origin%}
	
	
	
	{% set clearance_z = (printer["gcode_macro _km_layer_run"].clearance_z,
	position.z) | max %}
	{% set P = params.P|int %}
	{% set X = params.X|float - origin.x %}
	{% set Y = params.Y|float - origin.y %}
	{% set Z = params.Z|float %}
	{% set LAZY = params.LAZY|int %}
	
	
	{% if P == 0 %}
	{% if clearance_z > Z %}
	{% set Z = clearance_z %}
	{% endif %}
	{% elif P == 1 %}
	{% set Z = Z - origin.z %}
	{% elif P == 2 %}
	{% set Z = Z + clearance_z %}
	{% else %}
	{action_raise_error("Invalid parameter P=%i. Value must be 0, 1, or 2." |
	format(P)) }
	{% endif %}
	
	
	{% set Z = ((Z, printer.toolhead.axis_maximum.z - origin.z)|min,
	printer.toolhead.axis_minimum.z - origin.z)|max %}
	
	
	{% if (not LAZY) or P != 2 or X != position.x or Y != position.y
	or Z < clearance_z %}
	SAVE_GCODE_STATE NAME=_KM_PARK
	G90
	G0 Z{Z} F{travel_speed_z}
	G0 X{X} Y{Y} F{travel_speed_xy}
	RESTORE_GCODE_STATE NAME=_KM_PARK MOVE=0
	{% endif %}

[gcode_macro g27]
description = Parks the toolhead.
	Usage: G27 [P=<0|1|2>]
gcode = 
	
	PARK P={params.P|default(0)} {% for k in params|reject("in", "GP") %}{
	' '~k~'="'~params[k]~'"'
	}{% endfor %}

[gcode_macro pause]
description = Pauses the current print.
	Usage: PAUSE [X=<pos>] [Y=<pos>] [Z=<pos>] [E=<retract_length>] [B=<beeps>]
rename_existing = _KM_PAUSE_BASE
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% set E = (params.E|default(5))|float %}
	
	{% set B = params.B|default(10)|int if "output_pin beeper" in printer else 0
	%}
	
	{% if printer.pause_resume.is_paused %}
	{ action_respond_info("Print already paused") }
	{% elif printer.idle_timeout.state | string == "Printing" or
	(printer.virtual_sdcard|default({})).is_active|default(False) %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pausing RESET_STACK=1
	{% set position = printer.gcode_move.gcode_position %}
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_x VALUE="{position.x}"
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_y VALUE="{position.y}"
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_z VALUE="{position.z}"
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{E}"
	SAVE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE
	_KM_PAUSE_BASE
	M83
	{% if printer.extruder.can_extrude %}
	G1 E{'%.4f' % -E} F{km.load_speed}
	{% endif %}
	PARK P=2{% for k in params|select("in", "XYZ") %}{
	' '~k~'="'~params[k]~'"'}{% endfor %}
	
	{% for i in range(B) %}
	M300 P100
	G4 P200
	{% endfor %}
	{% else %}
	{ action_respond_info("Print not in progress") }
	{% endif %}

[gcode_macro m600]
description = Pauses the current print.
	Usage: M600 [B<beeps>] [E<pos>] [L<pos>] [R<temp>] [U<pos>] [X<pos>] [Y<pos>]
	[Z<pos>]
gcode = 
	PAUSE B="{0}" P=2{% for k in params|select("in", "EXYZ") %}{
	' '~k~'="'~params[k]~'"'}{% endfor %}
	UNLOAD_FILAMENT{% if 'U' in params %} LENGTH={params.U}{% endif
	%} BEEPS="{params.B|default(10)|int}"
	{% if 'R' in params %}M109 S{params.R}{% endif %}

[gcode_macro m601]
description = Pauses the current print.
	Usage: M601
gcode = 
	PAUSE

[gcode_macro m602]
description = Resumes the currently paused print.
	Usage: M602
gcode = 
	RESUME

[gcode_macro m24]
rename_existing = M24.6245197
gcode = 
	{% if printer.pause_resume.is_paused %}
	RESUME
	{% else %}
	M24.6245197
	{% endif %}

[gcode_macro m25]
rename_existing = M25.6245197
gcode = 
	PAUSE

[gcode_macro resume]
description = Resumes the currently paused print.
	Usage: RESUME [E<pos>]
rename_existing = _KM_RESUME_BASE
variable_saved_extruder_temp = 0
variable_saved_x = 0.0
variable_saved_y = 0.0
variable_saved_z = 0.0
variable_saved_e = 0.0
gcode = 
	{% if printer.pause_resume.is_paused %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% set extruder = printer[printer.toolhead.extruder] %}
	{% if extruder.target <= printer.configfile.settings[
	printer.toolhead.extruder].min_temp
	| float + 0.5 %}
	M109 S{saved_extruder_temp}
	{% endif %}
	
	
	
	{% if 'E' not in params and not saved_e %}
	{% set saved_e = 5.0 %}
	G1 E{'%.4f' % -saved_e } F{km.load_speed}
	{% endif %}
	
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"
	G90
	
	G0 X{saved_x} Y{saved_y} F{km.travel_speed_xy}
	G0 Z{saved_z} F{km.travel_speed_z}
	G91
	
	G1 E{'%.4f' % (params.E|default(saved_e))} F{km.load_speed}
	RESTORE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE MOVE=1
	_KM_RESUME_BASE
	{% else %}
	{ action_respond_info("Printer is not paused.") }
	{% endif %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=printing RESET_STACK=1

[gcode_macro clear_pause]
description = Clears the current pause state.
	Usage: CLEAR_PAUSE
rename_existing = _KM_CLEAR_PAUSE
gcode = 
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"
	_KM_CLEAR_PAUSE

[gcode_macro print_start]
description = Inserted by slicer at start of print. Rather than using this macro
	directly you should configure your slicer as instructed in the readme.
	Usage: PRINT_START BED=<temp> EXTRUDER=<temp> [CHAMBER=<temp>]
	[MESH_MIN=<x,y>] [MESH_MAX=<x,y>] [LAYERS=<num>]
	[NOZZLE_SIZE=<mm>]
gcode = 
	{action_respond_info(
	"This file is using an old The PRINT_START format. This print will run "
	"fine, but you should update your slicer config to take advantage of the "
	"phased PRINT_START macros. The slicer documentation is here:\n"
	"https://github.com/jschuh/klipper-macros\x23slicer-configuration"
	)}
	
	_PRINT_START_PHASE_INIT {rawparams}
	_PRINT_START_PHASE_PREHEAT
	_PRINT_START_PHASE_PROBING
	_PRINT_START_PHASE_EXTRUDER
	_PRINT_START_PHASE_PURGE

[gcode_macro _print_start_phase_init]
description = Inserted by slicer at start of print. Initializes PRINT_START
	phases.
	Usage: See PRINT_START.
gcode = 
	CHECK_KM_CONFIG
	SET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{False}"
	_KM_APPLY_PRINT_OFFSET RESET=1
	_PRINT_START_PHASE_CHECK PHASE=none
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% if not params.BED %}
	{% set dummy = params.__setitem__('BED', params.BED_TEMP|int) %}
	{% endif %}
	{% if not params.EXTRUDER %}
	{% set dummy = params.__setitem__('EXTRUDER', params.EXTRUDER_TEMP|int) %}
	{% endif %}
	
	
	PRINT_START_SET PRINT_START_PHASE="init" {% for k in params %}{' %s=\"%s\"' %
	(k,params[k]|replace('\\','\\\\')|replace('\'','\\\'')|replace('\"','\\\"'))
	}{% endfor %}
	
	
	_km_check_and_set_print_bounds
	
	M107
	CLEAR_PAUSE
	
	M140 S{params.BED}
	{% if params.CHAMBER %}M141 S{params.CHAMBER|int}{% endif %}
	{% if printer.bed_mesh %}BED_MESH_CLEAR{% endif %}
	
	{% if km.start_try_saved_surface_mesh and printer.bed_mesh %}
	LOAD_SURFACE_MESH
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="preheat"

[gcode_macro _print_start_phase_preheat]
description = Inserted by slicer at start of print. Handles the bed and chamber
	heating phases and ends when both are stabilized at their target temperatures.
	Usage: See PRINT_START.
gcode = 
	_PRINT_START_PHASE_CHECK PHASE=preheat
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set BED = print.BED|int %}
	{% set EXTRUDER = print.EXTRUDER|int %}
	{% set CHAMBER = print.CHAMBER|default(0)|int %}
	{% set LAYERS = print.LAYERS|default(0)|int %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% set bed_at_target = (BED + 0.4 - printer.heater_bed.temperature) |
	abs <= 0.6 %}
	PRINT_START_SET BED_AT_TARGET={1 if bed_at_target else 0}
	{% set start_level_bed_at_temp = km.start_level_bed_at_temp and
	not printer.bed_mesh.profile_name %}
	{% set actions_at_temp = start_level_bed_at_temp or
	km.start_quad_gantry_level_at_temp or
	km.start_z_tilt_adjust_at_temp or
	(km.start_home_z_at_temp and not bed_at_target) %}
	{% set bed_overshoot = (BED + (km.start_bed_heat_overshoot if
	(BED and not bed_at_target) else 0.0),
	printer.configfile.settings.heater_bed.max_temp ) | min %}
	
	INIT_LAYER_GCODE LAYERS="{LAYERS}"
	{% if CHAMBER > 0.0 %}
	M141 S{CHAMBER}
	{% endif %}
	
	M140 S{bed_overshoot}
	{% if actions_at_temp %}
	
	
	M104 S{km.start_extruder_probing_temp if km.start_extruder_probing_temp > 0
	else (km.start_extruder_preheat_scale * EXTRUDER)|round(0,'ceil')|int}
	{% else %}
	M104 S{EXTRUDER}
	{% endif %}
	
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing RESET_STACK=1
	G28
	G90
	{% if BED > 0.0 %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=bed_heating RESET_STACK=1
	
	{% if not bed_at_target %}
	PARK
	
	M190 S{bed_overshoot}
	G4 P{km.start_bed_heat_delay / 2}
	M190 R{BED}
	G4 P{km.start_bed_heat_delay / 2}
	{% endif %}
	{% endif %}
	
	{% if CHAMBER > 0.0 %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=chamber_heating RESET_STACK=1
	_KM_PARK_IF_NEEDED HEATER="chamber" RANGE=ABOVE
	M191 S{CHAMBER}
	{% endif %}
	
	{% if BED > 0.0 and bed_at_target%}
	M190 R{BED}
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="probing"

[gcode_macro _print_start_phase_probing]
description = Inserted by slicer at start of print. Performs probing (including
	mesh bed level) and other operations that should be run when the bed and
	chamber are stabilized at their target temps.
	Usage: See PRINT_START.
gcode = 
	_PRINT_START_PHASE_CHECK PHASE=probing
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set MESH_MIN = print.MESH_MIN|default(None) %}
	{% set MESH_MAX = print.MESH_MAX|default(None) %}
	
	{% if km.start_random_placement_max > 0 and print.PRINT_MIN and MESH_MIN %}
	{% set PRINT_MIN = print.PRINT_MIN.split(",")|map('float')|list %}
	{% set PRINT_MAX = print.PRINT_MAX.split(",")|map('float')|list %}
	{% set x_offset = (((km.print_max[0] - km.print_min[0] - PRINT_MAX[0] +
	PRINT_MIN[0] - 2 * km.start_random_placement_padding)|int,
	km.start_random_placement_max * 2)|min, 0)|max %}
	{% set y_offset = (((km.print_max[1] - km.print_min[1] - PRINT_MAX[1] +
	PRINT_MIN[1] - 2 * km.start_random_placement_padding)|int,
	km.start_random_placement_max * 2)|min, 0)|max %}
	{% if x_offset > 0 %}
	{% set x_offset = range(x_offset)|random + km.print_min[0] -
	PRINT_MIN[0] + km.start_random_placement_padding %}
	{% endif %}
	{% if y_offset > 0 %}
	{% set y_offset = range(y_offset)|random + km.print_min[1] -
	PRINT_MIN[1] + km.start_random_placement_padding %}
	{% endif %}
	
	
	{% set MESH_MIN = MESH_MIN.split(",")|map('float')|list %}
	{% set MESH_MAX = MESH_MAX.split(",")|map('float')|list %}
	{% set MESH_MIN_NEW = (MESH_MIN[0] + x_offset, MESH_MIN[1] + y_offset) %}
	{% set MESH_MAX_NEW = (MESH_MAX[0] + x_offset, MESH_MAX[1] + y_offset) %}
	{action_respond_info(
	"Relocating print origin from (%.3f,%.3f) "|format(*MESH_MIN) +
	"to (%.3f,%.3f)"|format(*MESH_MIN_NEW))}
	{% set MESH_MIN = (MESH_MIN_NEW[0], MESH_MIN_NEW[1])|join(',') %}
	{% set MESH_MAX = (MESH_MAX_NEW[0], MESH_MAX_NEW[1])|join(',') %}
	PRINT_START_SET PRINT_OFFSET={"%d,%d" % (x_offset,y_offset)}
	{% endif %}
	
	{% set EXTRUDER = print.EXTRUDER|int %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set start_level_bed_at_temp = km.start_level_bed_at_temp and
	not printer.bed_mesh.profile_name %}
	{% set start_home_z_at_temp = km.start_home_z_at_temp and
	not print.BED_AT_TARGET|int %}
	{% set actions_at_temp = start_level_bed_at_temp or
	km.start_quad_gantry_level_at_temp or
	km.start_z_tilt_adjust_at_temp or
	start_home_z_at_temp %}
	{% if actions_at_temp %}
	{% if km.start_extruder_probing_temp > 0 %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating RESET_STACK=1
	_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=2
	M109 R{km.start_extruder_probing_temp}
	{% else %}
	M104 S{EXTRUDER}
	{% endif %}
	{% if start_home_z_at_temp %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing RESET_STACK=1
	G28 Z
	{% endif %}
	{% if km.start_z_tilt_adjust_at_temp %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=calibrating_z RESET_STACK=1
	Z_TILT_ADJUST
	{% endif %}
	{% if km.start_quad_gantry_level_at_temp %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=leveling_gantry RESET_STACK=1
	QUAD_GANTRY_LEVEL
	{% endif %}
	{% if start_level_bed_at_temp %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=meshing RESET_STACK=1
	_km_mesh_if_needed {% if MESH_MIN %} MESH_MIN={MESH_MIN}{% endif
	%}{% if MESH_MAX %} MESH_MAX={MESH_MAX}{% endif %}
	{% endif %}
	{% if km.start_extruder_probing_temp > 0 %}
	M104 S{EXTRUDER}
	{% endif %}
	G4
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="extruder"

[gcode_macro _print_start_phase_extruder]
description = Inserted by slicer at start of print. Preheats the extruder.
	Usage: See PRINT_START.
gcode = 
	_PRINT_START_PHASE_CHECK PHASE=extruder
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set EXTRUDER = print.EXTRUDER|default(print.EXTRUDER_TEMP)|float %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	
	{% if EXTRUDER > 0 %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating RESET_STACK=1
	_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=ABOVE
	M109 S{EXTRUDER}
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="purge"

[gcode_macro _print_start_phase_purge]
description = Inserted by slicer at start of print. Generates purge lines.
	Usage: See PRINT_START.
gcode = 
	_PRINT_START_PHASE_CHECK PHASE=purge
	
	_KM_APPLY_PRINT_OFFSET
	
	_APPLY_BED_SURFACE_OFFSET
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set MESH_MIN = print.MESH_MIN|default(None) %}
	{% set MESH_MAX = print.MESH_MAX|default(None) %}
	{% set NOZZLE_SIZE = print.NOZZLE_SIZE|default(print.NOZZLE_SIZE)|
	default(printer.configfile.settings.extruder.nozzle_diameter)|float %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% if km.start_purge_length > 0.0 and printer.extruder.can_extrude %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=purging RESET_STACK=1
	DRAW_PURGE_LINE WIDTH="{NOZZLE_SIZE * 1.25}" HEIGHT="{NOZZLE_SIZE * 0.625
	}"{% if MESH_MIN %} PRINT_MIN={MESH_MIN}{% endif
	%}{% if MESH_MAX %} PRINT_MAX={MESH_MAX}{% endif %}
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="printing"
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=printing RESET_STACK=1

[gcode_macro _km_park_if_needed]
description = Parks the extruder if the current temperature of the supplied
	heater is not within the specified target range.
	Usage: _KM_PARK_IF_NEEDED HEATER=<heater> RANGE=[<percentage>|ABOVE|BELOW]
gcode = 
	
	{% set HEATER = params.HEATER if params.HEATER in
	printer.heaters.available_heaters else
	("heater_generic " ~ params.HEATER) %}
	{% set RANGE = (params.RANGE|default(1))|string|upper %}
	
	{% if printer[HEATER].target %}
	{% if RANGE == "ABOVE" %}
	{% if printer[HEATER].temperature < printer[HEATER].target %}
	PARK
	{% endif %}
	{% elif RANGE == "BELOW" %}
	{% if printer[HEATER].temperature > printer[HEATER].target %}
	PARK
	{% endif %}
	{% elif (printer[HEATER].temperature - printer[HEATER].target)|abs >
	(printer[HEATER].target * RANGE|float * 0.01)|abs %}
	PARK
	{% endif %}
	{% endif %}

[gcode_macro _km_apply_print_offset]
variable_offset = []
gcode = 
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% if params.RESET|default(0)|int and offset and
	not printer["gcode_macro _km_save_state"].is_ephemeral%}
	{% set PRINT_OFFSET = [offset.pop(0) * -1, offset.pop() * -1] %}
	{% elif print.PRINT_OFFSET and not offset and
	not printer["gcode_macro _km_save_state"].is_ephemeral %}
	{% set PRINT_OFFSET = print.PRINT_OFFSET.split(",")|map('float')|list %}
	{% set dummy = offset.extend(PRINT_OFFSET) %}
	{% endif %}
	
	{% if PRINT_OFFSET %}
	_KM_SET_GCODE_OFFSET_BASE {"X_ADJUST=%.2f Y_ADJUST=%.2f"|
	format(*PRINT_OFFSET)}
	{% endif %}

[gcode_macro _km_mesh_if_needed]
gcode = 
	
	
	
	{% if not printer.bed_mesh.profile_name %}
	BED_MESH_CALIBRATE_FAST {rawparams}
	{% endif %}

[gcode_macro print_start_set]
description = Inserted by slicer to set values used by PRINT_START.
	Usage: PRINT_START_SET <VARIABLE>=<value>
variable_print = {}
gcode = 
	{%for k in params %}
	{% set dummy = print.__setitem__(k|upper, params[k]) %}
	{% endfor %}

[gcode_macro _print_start_phase_check]
gcode = 
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set PRINT_START_PHASE = print.PRINT_START_PHASE|default("none") %}
	{% if PRINT_START_PHASE != params.PHASE %}
	
	SET_GCODE_VARIABLE MACRO=print_start_set VARIABLE=print VALUE="{{}}"
	{% if params.PHASE != 'none' %}
	{% set error = "PRINT_START phase error. Expected '%s' but found '%s'" %
	(params.PHASE, PRINT_START_PHASE) %}
	
	{% if not 'virtual_sdcard' in printer or
	not printer.virtual_sdcard.is_active or 'CANCEL_PRINT' not in
	printer.configfile.settings.virtual_sdcard.on_error_gcode|
	default("")|upper %}
	{action_respond_info(error)}
	CANCEL_PRINT
	{% else %}
	{action_raise_error(error)}
	{% endif %}
	{% else %}
	{ action_respond_info("Expected phase '%s' but found '%s'. Resetting."
	% (params.PHASE, PRINT_START_PHASE)) }
	{% endif %}
	{% endif %}

[gcode_macro print_end]
description = Inserted by slicer at end of print.
	Usage: PRINT_END
gcode = 
	_KM_CHECK_IS_PRINTING
	M400
	_PRINT_END_INNER
	
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% if km.start_clear_adjustments_at_end != 0 %}
	RESET_HEATER_SCALING
	RESET_FAN_SCALING
	M220 S100
	M221 S100
	{% endif %}
	_RESET_LAYER_GCODE
	_RESET_VELOCITY_LIMITS
	TURN_OFF_HEATERS
	M107; turn off fan
	{% if printer.bed_mesh %}BED_MESH_CLEAR{% endif %}
	
	{% if printer.toolhead.homed_axes|lower == "xyz" %}
	PARK Y="{km.start_end_park_y}"
	{% endif %}
	M84
	CLEAR_PAUSE
	SET_GCODE_VARIABLE MACRO=print_start_set VARIABLE=print VALUE="{{}}"
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready RESET_STACK=1

[gcode_macro _print_end_inner]
variable_cancelled = False
gcode = 
	SET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{False}"
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set toolhead = printer.toolhead %}
	{% set origin = printer.gcode_move.homing_origin%}
	{% set max_x = km.print_max[0] - origin.x %}
	{% set max_y = km.print_max[1] - origin.y %}
	{% set max_z = toolhead.axis_maximum.z - origin.z %}
	
	{% if not cancelled %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=completing
	{% endif %}
	
	{% if printer.extruder.can_extrude %}
	
	{% if not printer.pause_resume.is_paused and not cancelled and
	toolhead.homed_axes|lower == "xyz" %}
	{% set x_safe = (max_x - toolhead.position.x, 2.0)|min %}
	{% set y_safe = (max_y - toolhead.position.y, 2.0)|min %}
	{% set z_safe = (max_z - toolhead.position.z, 2.0)|min %}
	G91
	G0 Z{z_safe} E-1.0 F{km.travel_speed_z * 2}
	G0 X{x_safe} Y{y_safe} E-1.0 F{km.travel_speed_xy}
	
	_KM_APPLY_PRINT_OFFSET RESET=1
	{% endif %}
	
	
	G92 E0
	G1 E-5.0 F3600
	M400
	{% endif %}

[gcode_macro _km_check_is_printing]
variable_debug_state = False
description = Throws an error if print is not currently in progress.
gcode = 
	{% if not debug_state and
	printer.idle_timeout.state|string != "Printing" and
	not (printer.virtual_sdcard|default({})).is_active|default(False) and
	not printer.pause_resume.is_paused %}
	{ action_raise_error("No active print.") }
	{% endif %}

[gcode_macro _km_check_and_set_print_bounds]
description = Validates all print bounds and caches their values.
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set print = printer["gcode_macro print_start_set"].print %}
	
	
	{% if print.MESH_MIN %}
	{% set MESH_MIN = print.MESH_MIN.split(",")|map('float')|list %}
	{% set MESH_MAX = print.MESH_MAX.split(",")|map('float')|list %}
	{%if MESH_MIN[0] < km.print_min[0] or MESH_MIN[1] < km.print_min[1] %}
	{action_raise_error("MESH_MIN %s is outside the printable bounds" %
	(MESH_MIN|string, km.print_min|string))}
	{%elif MESH_MAX[0] > km.print_max[0] or MESH_MAX[1] > km.print_max[1] %}
	{action_raise_error("MESH_MAX %s is outside the printable bounds %s" %
	(MESH_MAX|string, km.print_max|string))}
	{% endif %}
	{% endif %}
	
	
	{% set points = [] %}
	{% if print.MODEL_MIN or print.MODEL_MAX %}
	{% set MODEL_MIN = print.MODEL_MIN.split(",")|map('float')|list %}
	{% set MODEL_MAX = print.MODEL_MAX.split(",")|map('float')|list %}
	{% set points = [MODEL_MIN, MODEL_MAX] %}
	{% endif %}
	{% if (printer.exclude_object|default({})).objects %}
	{% set points = printer.exclude_object.objects|selectattr('polygon')|
	map(attribute='polygon')|sum(start=points) %}
	{% set points_len = points|length %}
	{% if points_len >= 2 %}
	{% set x_coords = (points|map(attribute=0)|sort|list)[0::points_len-1] %}
	{% set y_coords = (points|map(attribute=1)|sort|list)[0::points_len-1] %}
	{% set MODEL_MIN = (x_coords[0],y_coords[0])|map('float')|list %}
	{% set MODEL_MAX = (x_coords[1],y_coords[1])|map('float')|list %}
	PRINT_START_SET MODEL_MIN="{MODEL_MIN|join(',')
	}" MODEL_MAX="{MODEL_MAX|join(',')}"
	{% endif %}
	{% endif %}
	
	{% if MODEL_MIN %}
	
	{% if MODEL_MIN[0] < km.print_min[0] or MODEL_MIN[1] < km.print_min[1] %}
	{action_raise_error("MODEL_MIN %s is outside the printable bounds" %
	(MODEL_MIN|string, km.print_min|string))}
	{% elif MODEL_MAX[0] > km.print_max[0] or MODEL_MAX[1] > km.print_max[1] %}
	{action_raise_error("MODEL_MAX %s is outside the printable bounds %s" %
	(MODEL_MAX|string, km.print_max|string))}
	{% endif %}
	{% endif %}
	
	
	{% if MESH_MIN and MODEL_MIN %}
	PRINT_START_SET PRINT_MIN="{((MODEL_MIN[0],MESH_MIN[0])|min,
	(MODEL_MIN[1],MESH_MIN[1])|min)|join(',')
	}" PRINT_MAX="{((MODEL_MAX[0],MESH_MAX[0])|max,
	(MODEL_MAX[1],MESH_MAX[1])|max)|join(',')}"
	{% else %}
	PRINT_START_SET PRINT_MIN="{km.print_min|join(',')
	}" PRINT_MAX="{km.print_max|join(',')}"
	{% endif %}

[gcode_macro _km_save_state]
description = Tracks gcode state.
variable_state_set = {}
variable_is_ephemeral = 0
gcode = 
	{% if params.SAVE|int %}
	{% set dummy = state_set.__setitem__(params.NAME, None) %}
	{% else %}
	{% set dummy = state_set.__delitem__(params.NAME) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=_km_save_state VARIABLE=is_ephemeral VALUE="{
	1 if state_set|length > 0 else 0 }"

[gcode_macro save_gcode_state]
description = Wraps SAVE_GCODE_STATE to track persistence state.
	Usage: See Klipper documentation
rename_existing = _KM_SAVE_GCODE_STATE
gcode = 
	_KM_SAVE_GCODE_STATE {rawparams}
	{% set NAME = params.NAME|default("default") %}
	_km_save_state NAME={NAME} SAVE=1

[gcode_macro restore_gcode_state]
description = Wraps RESTORE_GCODE_STATE to track persistence state.
	Usage: See Klipper documentation
rename_existing = _KM_RESTORE_GCODE_STATE
gcode = 
	_KM_RESTORE_GCODE_STATE {rawparams}
	{% set NAME = params.NAME|default("default") %}
	_km_save_state NAME={NAME} SAVE=0

[gcode_macro _abort_on_gcode_state]
gcode = 
	{% set save_state = printer["gcode_macro _km_save_state"] %}
	{% if save_state.is_ephemeral %}
	{action_raise_error("Encountered unexpected save state " +
	save_state.state_set|list|sort|string)}
	{% endif %}

[gcode_macro _km_print_status]
variable_last_status = 'none'
variable_status_stack = []
variable_command_list = {}
variable_status_list = [
	'ready',
	'filament_load',
	'filament_unload',
	'bed_heating',
	'chamber_heating',
	'homing',
	'leveling_gantry',
	'calibrating_z',
	'meshing',
	'extruder_heating',
	'purging',
	'printing',
	'pausing',
	'cancelling',
	'completing',
	]
gcode = 
	{% set ACTION = params.ACTION|trim|upper %}
	{% set STATUS = params.STATUS|default("")|trim|lower %}
	
	
	{% if ACTION == "ADD_EVENT" %}
	{% set COMMAND = params.COMMAND %}
	{% set ARGS = params.ARGS|default(0)|int != 0 %}
	{% set TYPE = params.TYPE|default('ENTER')|trim|upper %}
	{% set WHEN = params.WHEN|default('PRINTING')|trim|upper %}
	{% set FILTER_ENTER =
	(params.FILTER_ENTER|default("")|trim|lower).split(',')|
	select()|unique|list %}
	{% set FILTER_LEAVE =
	(params.FILTER_LEAVE|default("")|trim|lower).split(',')|
	select()|unique|list %}
	
	{% set STATUSES = STATUS.split(',')|map('trim')|list %}
	{% for s in (STATUSES if STATUSES[0] != 'all' else status_list) %}
	{% if not s in command_list %}
	{% set dummy = command_list.__setitem__(s,[]) %}
	{% endif %}
	{% set dummy = command_list[s].append({'cmd':COMMAND, 'args':ARGS,
	'type':TYPE, 'when':WHEN,
	'filt_e':FILTER_ENTER,
	'filt_l':FILTER_LEAVE}) %}
	{% endfor %}
	
	
	{% elif ACTION == "CHANGE" %}
	{% if params.RESET_STACK|default(0)|int %}
	{% for dummy in range(status_stack|length) %}
	{% set dummy = status_stack.pop() %}
	{% endfor %}
	
	
	{% elif STATUS == "pop_status" %}
	{% set STATUS = (status_stack|default(['ready'], True)).pop() %}
	{% endif %}
	
	{% if STATUS not in status_list %}
	{action_raise_error("Status '%s' not valid."|format(STATUS))}
	{% endif %}
	
	{% if STATUS != last_status %}
	{% set is_printing =
	printer["gcode_macro print_start_set"].print.PRINT_START_PHASE|
	default("")|length != 0 %}
	{% set print_states = ('ALWAYS', 'PRINTING' if is_printing else 'IDLE') %}
	
	{% for c in command_list[last_status]|default([]) %}
	{% if c.type in ('BOTH','LEAVE') and c.when in print_states and
	(not c.filt_l or STATUS in c.filt_l) %}
	M400
	{c.cmd}{% if c.args %} TYPE=LEAVE WHEN={print_states[1]
	} LAST_STATUS={last_status} NEXT_STATUS={STATUS}{% endif %}
	{% endif %}
	{% endfor %}
	
	{% for c in command_list[STATUS]|default([]) %}
	{% if c.type in ('BOTH','ENTER') and c.when in print_states and
	(not c.filt_e or STATUS in c.filt_e) %}
	M400
	{c.cmd}{% if c.args %} TYPE=ENTER WHEN={print_states[1]
	} LAST_STATUS={last_status} NEXT_STATUS={STATUS}{% endif %}
	{% endif %}
	{% endfor %}
	SET_GCODE_VARIABLE MACRO=_km_print_status VARIABLE=last_status VALUE="'{
	STATUS}'"
	{% endif %}
	
	
	{% elif ACTION == "PUSH_STATUS" %}
	{% set dummy = status_stack.append(last_status) %}
	
	
	{% else %}
	{action_raise_error("Action '%s' not valid."|format(ACTION))}
	{% endif %}

[gcode_macro gcode_on_print_status]
description = Adds a gcode command for a status event.
	Usage: GCODE_ON_PRINT_STATUS STATUS=<status> COMMAND=<gcode> [ARGS=<1|0>]
	[WHEN=<PRINTING|IDLE|ALWAYS>]
	[TYPE=<ENTER|LEAVE|BOTH>]
	[FILTER_ENTER=<status list>]
	[FILTER_LEAVE=<status list>]
gcode = 
	{% set STATUS = (params.STATUS|lower).split(',')|map('trim')|list %}
	{% set TYPE = params.TYPE|default('ENTER')|trim|upper %}
	{% set WHEN = params.WHEN|default('PRINTING')|trim|upper %}
	{% set FILTER_ENTER =
	(params.FILTER_ENTER|default("")|trim|lower).split(',')|select()|list %}
	{% set FILTER_LEAVE =
	(params.FILTER_LEAVE|default("")|trim|lower).split(',')|select()|list %}
	
	
	{% set status_list = printer["gcode_macro _km_print_status"].status_list %}
	{% for s in STATUS %}
	{% if not (s in status_list or s == 'all' and STATUS|length == 1) %}
	{action_raise_error("STATUS parameter '%s' not valid."|format(s))}
	{% endif %}
	{% endfor %}
	
	{% if TYPE not in ('ENTER', 'LEAVE', 'BOTH') %}
	{action_raise_error("TYPE paramater '%s' not valid."|format(TYPE))}
	{% elif WHEN not in ('PRINTING', 'IDLE', 'ALWAYS') %}
	{action_raise_error("WHEN parameter '%s' not valid."|format(WHEN))}
	{% elif TYPE == 'ENTER' and FILTER_LEAVE %}
	{action_raise_error("FILTER_LEAVE not valid with TYPE=ENTER.")}
	{% elif TYPE == 'LEAVE' and FILTER_ENTER %}
	{action_raise_error("FILTER_ENTER not valid with TYPE=LEAVE.")}
	{% endif %}
	{% for f in FILTER_ENTER %}
	{% if f not in status_list %}
	{action_raise_error("FILTER_ENTER parameter '%s' not valid."|format(f))}
	{% endif %}
	{% endfor %}
	{% for f in FILTER_LEAVE %}
	{% if f not in status_list %}
	{action_raise_error("FILTER_LEAVE parameter '%s' not valid."|format(f))}
	{% endif %}
	{% endfor %}
	
	
	_KM_PRINT_STATUS ACTION=ADD_EVENT {rawparams}

[gcode_macro m201]
description = Sets maximum accelleration.
	Usage: M201 [X<accel>] [Y<accel>]
variable_max_accel = 1.7976931348623157e+308
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% if 'X' in params or 'Y' in params %}
	{% set accel = (params.X|default(params.Y)|float,
	params.Y|default(params.X)|float)|min %}
	SET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{accel}"
	{% else %}
	SET_VELOCITY_LIMIT
	{% endif %}

[gcode_macro m203]
description = Sets maximum velocity.
	Usage: M203 [X<velocity>] [Y<velocity>]
gcode = 
	{% if 'X' in params or 'Y' in params %}
	{% set velocity = (params.X|default(params.Y)|float,
	params.Y|default(params.X)|float)|min %}
	SET_VELOCITY_LIMIT VELOCITY="{velocity}"
	{% else %}
	SET_VELOCITY_LIMIT
	{% endif %}

[gcode_macro m205]
description = Sets square corner velocity.
	Usage: M203 [X<velocity>] [Y<velocity>]
gcode = 
	{% if 'X' in params or 'Y' in params %}
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY="{
	(params.X|default(0)|float, params.Y|default(0)|float)|min}"
	{% else %}
	SET_VELOCITY_LIMIT
	{% endif %}

[gcode_macro m900]
description = Sets pressure advance.
	Usage: M900 [K<advance>] [T<extruder_index>]
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% if km.pressure_advance_scale > 0.0 %}
	{% set extruder = "extruder" ~ params.T|replace('0', '')
	if "T" in params else printer.toolhead.extruder %}
	{% if 'K' in params %}
	SET_PRESSURE_ADVANCE EXTRUDER="{extruder}" ADVANCE="{
	params.K|float * km.pressure_advance_scale}"
	{% endif %}
	{% endif %}

[gcode_macro _reset_velocity_limits]
description = Sets maximum accelleration.
	Usage: M204 [S<accel>] [P<accel> T<accel>]
gcode = 
	SET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{1.7976931348623157e+308}"

[gcode_macro bed_mesh_calibrate]
rename_existing = _KM_BED_MESH_CALIBRATE_BASE
description = Wraps BED_MESH_CALIBRATE, scaling probe count to specified area.
	Usage: See Klipper documentation.
gcode = 
	BED_MESH_CALIBRATE_FAST{%for k in params%}{' '~k~'="'~params[k]~'"'}{%endfor%}

[gcode_macro g29]
gcode = 
	BED_MESH_CALIBRATE

[idle_timeout]
gcode = 
	_KM_IDLE_TIMEOUT

[respond]

[gcode_macro PRINT_START]
rename_existing = KM_PRINT_START
gcode = 
	
	STATUS_HOMING
	KM_PRINT_START {rawparams}
	STATUS_PRINTING

[board_pins EBB36_G0B1_v1.2]
mcu = ebbcan
aliases = 
aliases_step = 
	EXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15
aliases_limitsw = 
	LIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6
aliases_bltouch = 
	PROBE_1=PB9,PROBE_2=PB8
aliases_fans = 
	FAN0=PA1,FAN1=PA0
aliases_thermistors = 
	TH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7
aliases_heaters = 
	HE0=PB13
aliases_rgb = 
	RGBLED=PD3
aliases_adxl = 
	ADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11
aliases_i2c = 
	AUX0=PB3,AUX1=PB4

[neopixel sb_leds]
pin = ebbcan:RGBLED
chain_count = 6
color_order = RGB
initial_red = 0.0
initial_green = 0.0
initial_blue = 0.0
initial_white = 1.0

[save_variables]
filename = ~/printer_data/variables.cfg

[mcu CB1]
serial = /tmp/klipper_host_mcu

[mcu]
canbus_uuid = f94e10a9add8

[mcu ebbcan]
canbus_uuid = 57244ec148c0

[printer]
kinematics = corexy
max_velocity = 600
max_accel = 10000
max_accel_to_decel = 5000
max_z_velocity = 5
max_z_accel = 100

[stepper_x]
step_pin = PE2
dir_pin = !PB4
enable_pin = !PC11
microsteps = 16
rotation_distance = 40
endstop_pin = !ebbcan:LIMIT_2
position_endstop = 220
position_min = -4
position_max = 220
homing_speed = 50

[tmc2209 stepper_x]
uart_pin = PC10
diag_pin = PF3
run_current = 1.1

[tmc2209 stepper_y]
uart_pin = PF13
diag_pin = PF4
run_current = 1.1

[tmc2209 stepper_z]
uart_pin = PF9
diag_pin = PF5
run_current = 0.650

[tmc2209 extruder]
uart_pin = ebbcan:EXT_UART
diag_pin = ebbcan:LIMIT_3
run_current = 0.650

[stepper_y]
step_pin = PF12
dir_pin = !PF11
enable_pin = !PB3
microsteps = 16
rotation_distance = 40
endstop_pin = ^PF3
position_endstop = 220
position_min = -4
position_max = 220
homing_speed = 50

[stepper_z]
step_pin = PD7
dir_pin = !PD6
enable_pin = !PF10
microsteps = 16
rotation_distance = 8
endstop_pin = probe:z_virtual_endstop
position_max = 300
position_min = -3

[heater_bed]
heater_pin = PB7
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PA0
min_temp = 0
max_temp = 130
control = pid
pid_kp = 63.528
pid_ki = 0.875
pid_kd = 1153.041

[temperature_sensor raspberry_pi]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor mcu_temp]
sensor_type = temperature_mcu
min_temp = 0
max_temp = 100

[controller_fan MCU_Fan]
pin = PE6
heater = extruder
fan_speed = 1

[heater_fan heatbreak_cooling_fan]
pin = ebbcan:FAN0
kick_start_time = 0.25
heater = extruder
heater_temp = 50.0
fan_speed = 1

[fan]
pin = ebbcan:FAN1

[safe_z_home]
home_xy_position = 140, 140
speed = 100
z_hop = 10
z_hop_speed = 20

[extruder]
step_pin = ebbcan:EXT_STEP
dir_pin = ebbcan:EXT_DIR
enable_pin = !ebbcan:EXT_EN
microsteps = 16
rotation_distance = 4.71
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.750
max_extrude_only_distance = 101.0
heater_pin = ebbcan:HE0
sensor_type = ATC Semitec 104NT-4-R025H42G
sensor_pin = ebbcan:TH0
min_temp = 0
max_temp = 300
max_extrude_cross_section = 5
pressure_advance = 0.02
control = pid
pid_kp = 20.603
pid_ki = 0.988
pid_kd = 107.392

[bltouch]
sensor_pin = ebbcan:PROBE_2
control_pin = ebbcan:PROBE_1
x_offset = -40
y_offset = -17
samples = 2
samples_tolerance = 0.015
samples_tolerance_retries = 5
z_offset = 2.849

[bed_mesh]
speed = 100
horizontal_move_z = 5
mesh_min = 10, 27
mesh_max = 173, 200
probe_count = 5, 5
algorithm = bicubic
fade_start = 1
fade_end = 10

[bed_screws]
screw1 = 55,55
screw2 = 200,55
screw3 = 200,205
screw4 = 55,205

[screws_tilt_adjust]
screw1 = 65,55
screw1_name = front left screw
screw2 = 218,55
screw2_name = front right screw
screw3 = 218,215
screw3_name = rear right screw
screw4 = 65,215
screw4_name = rear left screw
horizontal_move_z = 10
speed = 50
screw_thread = CW-M4

[display]
lcd_type = st7920
cs_pin = PB12
sclk_pin = PB13
sid_pin = PB15
encoder_pins = ^PB14, ^PB10
click_pin = ^!PB2

[exclude_object]

[firmware_retraction]
retract_length = 0.4
retract_speed = 20
unretract_extra_length = 0
unretract_speed = 10

[input_shaper]
shaper_type_x = 2hump_ei
shaper_freq_x = 86.2
shaper_type_y = zv
shaper_freq_y = 44.8

[gcode_arcs]
resolution = 1.0

[adxl345]
cs_pin = ebbcan:ADXL_CS
spi_software_sclk_pin = ebbcan:ADXL_SCLK
spi_software_mosi_pin = ebbcan:ADXL_MOSI
spi_software_miso_pin = ebbcan:ADXL_MISO

[resonance_tester]
accel_chip = adxl345
probe_points = 
	120,120,20

[bed_mesh default]
version = 1
points = 
	0.027500, 0.058750, 0.091250, 0.182500
	-0.003750, 0.061250, 0.072500, 0.125000
	0.021250, 0.016250, 0.013750, 0.033750
	-0.023750, -0.018750, -0.036250, -0.037500
x_count = 4
y_count = 4
mesh_x_pps = 2
mesh_y_pps = 2
algo = bicubic
tension = 0.2
min_x = 48.75
max_x = 171.24
min_y = 48.75
max_y = 171.24
=======================
Extruder max_extrude_ratio=2.078758
mcu 'mcu': Starting CAN connect
Created a socket
webhooks client 281473549491072: New connection
webhooks client 281473549491072: Client info {'program': 'Moonraker', 'version': 'v0.8.0-92-g504a3a7'}
Loaded MCU 'mcu' 109 commands (v0.11.0-241-gffb5105b / gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2)
MCU 'mcu' config: ADC_MAX=4095 BUS_PINS_i2c1_PA9_PA10=PA9,PA10 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_i2c2_PB13_PB14=PB13,PB14 BUS_PINS_i2c3_PB3_PB4=PB3,PB4 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3=PB4,PB5,PB3 CANBUS_BRIDGE=1 CLOCK_FREQ=64000000 MCU=stm32g0b1xx PWM_MAX=255 RECEIVE_WINDOW=192 RESERVE_PINS_CAN=PD12,PD13 RESERVE_PINS_USB=PA11,PA12 RESERVE_PINS_crystal=PF0,PF1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
mcu 'CB1': Starting connect
Loaded MCU 'CB1' 113 commands (v0.11.0-241-gffb5105b / gcc: (Debian 10.2.1-6) 10.2.1 20210110 binutils: (GNU Binutils for Debian) 2.35.2)
MCU 'CB1' config: ADC_MAX=4095 CLOCK_FREQ=50000000 MCU=linux PCA9685_MAX=4096 PWM_MAX=32768 STATS_SUMSQ_BASE=256
mcu 'ebbcan': Starting CAN connect
Created a socket
mcu 'ebbcan': got {'count': 501, 'sum': 584117, 'sumsq': 5549806, '#name': 'stats', '#sent_time': 638.574235762, '#receive_time': 638.598549595}
Loaded MCU 'ebbcan' 109 commands (v0.11.0-241-gffb5105b / gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2)
MCU 'ebbcan' config: ADC_MAX=4095 BUS_PINS_i2c1_PA9_PA10=PA9,PA10 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_i2c2_PB13_PB14=PB13,PB14 BUS_PINS_i2c3_PB3_PB4=PB3,PB4 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3=PB4,PB5,PB3 CANBUS_FREQUENCY=1000000 CLOCK_FREQ=64000000 MCU=stm32g0b1xx PWM_MAX=255 RECEIVE_WINDOW=192 RESERVE_PINS_CAN=PB0,PB1 RESERVE_PINS_crystal=PF0,PF1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
mcu_temperature 'mcu' nominal base=-268.847262 slope=1298.126801
Sending MCU 'mcu' printer configuration...
Configured MCU 'mcu' (1024 moves)
Sending MCU 'CB1' printer configuration...
Configured MCU 'CB1' (1024 moves)
Sending MCU 'ebbcan' printer configuration...
Configured MCU 'ebbcan' (1024 moves)
Starting heater checks for heater_bed
bed_mesh: generated points
Index |  Tool Adjusted  |   Probe
  0   | (50.0, 44.0)    | (10.0, 27.0)
  1   | (90.8, 44.0)    | (50.8, 27.0)
  2   | (131.5, 44.0)   | (91.5, 27.0)
  3   | (172.2, 44.0)   | (132.2, 27.0)
  4   | (213.0, 44.0)   | (173.0, 27.0)
  5   | (213.0, 87.2)   | (173.0, 70.2)
  6   | (172.2, 87.2)   | (132.2, 70.2)
  7   | (131.5, 87.2)   | (91.5, 70.2)
  8   | (90.8, 87.2)    | (50.8, 70.2)
  9   | (50.0, 87.2)    | (10.0, 70.2)
  10  | (50.0, 130.5)   | (10.0, 113.5)
  11  | (90.8, 130.5)   | (50.8, 113.5)
  12  | (131.5, 130.5)  | (91.5, 113.5)
  13  | (172.2, 130.5)  | (132.2, 113.5)
  14  | (213.0, 130.5)  | (173.0, 113.5)
  15  | (213.0, 173.8)  | (173.0, 156.8)
  16  | (172.2, 173.8)  | (132.2, 156.8)
  17  | (131.5, 173.8)  | (91.5, 156.8)
  18  | (90.8, 173.8)   | (50.8, 156.8)
  19  | (50.0, 173.8)   | (10.0, 156.8)
  20  | (50.0, 217.0)   | (10.0, 200.0)
  21  | (90.8, 217.0)   | (50.8, 200.0)
  22  | (131.5, 217.0)  | (91.5, 200.0)
  23  | (172.2, 217.0)  | (132.2, 200.0)
  24  | (213.0, 217.0)  | (173.0, 200.0)
Starting heater checks for extruder
Stats 640.4: gcodein=0  mcu: mcu_awake=0.043 mcu_task_avg=0.000014 mcu_task_stddev=0.000009 bytes_write=2983 bytes_read=5725 bytes_retransmit=0 bytes_invalid=0 send_seq=219 receive_seq=216 retransmit_seq=0 srtt=0.003 rttvar=0.002 rto=0.025 ready_bytes=1637 upcoming_bytes=154 freq=64006050 CB1: mcu_awake=0.004 mcu_task_avg=0.000027 mcu_task_stddev=0.000018 bytes_write=819 bytes_read=4523 bytes_retransmit=0 bytes_invalid=0 send_seq=112 receive_seq=112 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000589 adj=49998965 ebbcan: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=1452 bytes_read=4789 bytes_retransmit=0 bytes_invalid=0 send_seq=148 receive_seq=148 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64002220 adj=64003084  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=62.4 mcu_temp: temp=37.0 sysload=0.53 cputime=93.319 memavail=683308 print_time=0.010 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
webhooks: registering remote method 'shutdown_machine' for connection id: 281473549491072
webhooks: registering remote method 'reboot_machine' for connection id: 281473549491072
webhooks: registering remote method 'pause_job_queue' for connection id: 281473549491072
webhooks: registering remote method 'start_job_queue' for connection id: 281473549491072
Active bed surface: default; offset: -0.050
Stats 641.6: gcodein=0  mcu: mcu_awake=0.043 mcu_task_avg=0.000014 mcu_task_stddev=0.000009 bytes_write=4960 bytes_read=6052 bytes_retransmit=0 bytes_invalid=0 send_seq=256 receive_seq=256 retransmit_seq=0 srtt=0.004 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64003216 CB1: mcu_awake=0.004 mcu_task_avg=0.000027 mcu_task_stddev=0.000018 bytes_write=825 bytes_read=4539 bytes_retransmit=0 bytes_invalid=0 send_seq=113 receive_seq=113 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000421 adj=49993765 ebbcan: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=1458 bytes_read=4865 bytes_retransmit=0 bytes_invalid=0 send_seq=149 receive_seq=149 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001411 adj=63992032  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=64.0 mcu_temp: temp=37.3 sysload=0.65 cputime=93.609 memavail=686756 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 642.6: gcodein=0  mcu: mcu_awake=0.043 mcu_task_avg=0.000014 mcu_task_stddev=0.000009 bytes_write=4966 bytes_read=6155 bytes_retransmit=0 bytes_invalid=0 send_seq=257 receive_seq=257 retransmit_seq=0 srtt=0.003 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64002187 CB1: mcu_awake=0.004 mcu_task_avg=0.000027 mcu_task_stddev=0.000018 bytes_write=831 bytes_read=4555 bytes_retransmit=0 bytes_invalid=0 send_seq=114 receive_seq=114 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000148 adj=49998560 ebbcan: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=1464 bytes_read=4926 bytes_retransmit=0 bytes_invalid=0 send_seq=150 receive_seq=150 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000834 adj=63997594  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=64.1 mcu_temp: temp=37.6 sysload=0.65 cputime=93.684 memavail=687152 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 643.6: gcodein=0  mcu: mcu_awake=0.043 mcu_task_avg=0.000014 mcu_task_stddev=0.000009 bytes_write=4972 bytes_read=6258 bytes_retransmit=0 bytes_invalid=0 send_seq=258 receive_seq=258 retransmit_seq=0 srtt=0.003 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001748 CB1: mcu_awake=0.004 mcu_task_avg=0.000027 mcu_task_stddev=0.000018 bytes_write=837 bytes_read=4571 bytes_retransmit=0 bytes_invalid=0 send_seq=115 receive_seq=115 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000050 adj=49999645 ebbcan: mcu_awake=0.006 mcu_task_avg=0.000016 mcu_task_stddev=0.000033 bytes_write=1470 bytes_read=5002 bytes_retransmit=0 bytes_invalid=0 send_seq=151 receive_seq=151 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000663 adj=63998940  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=62.8 mcu_temp: temp=37.5 sysload=0.65 cputime=93.722 memavail=687028 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 644.6: gcodein=0  mcu: mcu_awake=0.110 mcu_task_avg=0.000037 mcu_task_stddev=0.000165 bytes_write=4978 bytes_read=6407 bytes_retransmit=0 bytes_invalid=0 send_seq=259 receive_seq=259 retransmit_seq=0 srtt=0.002 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001623 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000011 bytes_write=843 bytes_read=4600 bytes_retransmit=0 bytes_invalid=0 send_seq=116 receive_seq=116 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000172 adj=49999975 ebbcan: mcu_awake=0.006 mcu_task_avg=0.000016 mcu_task_stddev=0.000033 bytes_write=1476 bytes_read=5078 bytes_retransmit=0 bytes_invalid=0 send_seq=152 receive_seq=152 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000725 adj=63999592  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=61.6 mcu_temp: temp=37.6 sysload=0.65 cputime=93.778 memavail=694152 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 645.6: gcodein=0  mcu: mcu_awake=0.110 mcu_task_avg=0.000037 mcu_task_stddev=0.000165 bytes_write=4984 bytes_read=6510 bytes_retransmit=0 bytes_invalid=0 send_seq=260 receive_seq=260 retransmit_seq=0 srtt=0.002 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001554 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000011 bytes_write=849 bytes_read=4616 bytes_retransmit=0 bytes_invalid=0 send_seq=117 receive_seq=117 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000233 adj=50000235 ebbcan: mcu_awake=0.006 mcu_task_avg=0.000016 mcu_task_stddev=0.000033 bytes_write=1482 bytes_read=5139 bytes_retransmit=0 bytes_invalid=0 send_seq=153 receive_seq=153 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000711 adj=63999915  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=59.4 mcu_temp: temp=37.5 sysload=0.76 cputime=93.839 memavail=694160 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 646.6: gcodein=0  mcu: mcu_awake=0.110 mcu_task_avg=0.000037 mcu_task_stddev=0.000165 bytes_write=4990 bytes_read=6613 bytes_retransmit=0 bytes_invalid=0 send_seq=261 receive_seq=261 retransmit_seq=0 srtt=0.002 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001563 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000011 bytes_write=855 bytes_read=4632 bytes_retransmit=0 bytes_invalid=0 send_seq=118 receive_seq=118 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000133 adj=50000235 ebbcan: mcu_awake=0.006 mcu_task_avg=0.000016 mcu_task_stddev=0.000033 bytes_write=1488 bytes_read=5200 bytes_retransmit=0 bytes_invalid=0 send_seq=154 receive_seq=154 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000708 adj=63999881  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=59.8 mcu_temp: temp=37.8 sysload=0.76 cputime=93.881 memavail=693736 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 647.6: gcodein=0  mcu: mcu_awake=0.110 mcu_task_avg=0.000037 mcu_task_stddev=0.000165 bytes_write=4996 bytes_read=6745 bytes_retransmit=0 bytes_invalid=0 send_seq=262 receive_seq=262 retransmit_seq=0 srtt=0.002 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001501 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000011 bytes_write=861 bytes_read=4648 bytes_retransmit=0 bytes_invalid=0 send_seq=119 receive_seq=119 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000102 adj=49999603 ebbcan: mcu_awake=0.006 mcu_task_avg=0.000016 mcu_task_stddev=0.000033 bytes_write=1532 bytes_read=5294 bytes_retransmit=0 bytes_invalid=0 send_seq=157 receive_seq=157 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000635 adj=63999662  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=61.1 mcu_temp: temp=37.7 sysload=0.76 cputime=93.923 memavail=691020 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 648.6: gcodein=0  mcu: mcu_awake=0.110 mcu_task_avg=0.000037 mcu_task_stddev=0.000165 bytes_write=5008 bytes_read=6848 bytes_retransmit=0 bytes_invalid=0 send_seq=264 receive_seq=263 retransmit_seq=0 srtt=0.002 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001400 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000011 bytes_write=867 bytes_read=4664 bytes_retransmit=0 bytes_invalid=0 send_seq=120 receive_seq=120 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000115 adj=49999492 ebbcan: mcu_awake=0.006 mcu_task_avg=0.000016 mcu_task_stddev=0.000033 bytes_write=1538 bytes_read=5355 bytes_retransmit=0 bytes_invalid=0 send_seq=158 receive_seq=158 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000607 adj=63999512  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=60.4 mcu_temp: temp=37.7 sysload=0.76 cputime=93.979 memavail=691560 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 649.6: gcodein=0  mcu: mcu_awake=0.006 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5014 bytes_read=6982 bytes_retransmit=0 bytes_invalid=0 send_seq=265 receive_seq=265 retransmit_seq=0 srtt=0.001 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001326 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000015 bytes_write=873 bytes_read=4693 bytes_retransmit=0 bytes_invalid=0 send_seq=121 receive_seq=121 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000092 adj=49999728 ebbcan: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000025 bytes_write=1544 bytes_read=5431 bytes_retransmit=0 bytes_invalid=0 send_seq=159 receive_seq=159 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000553 adj=63999748  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=59.8 mcu_temp: temp=37.6 sysload=0.76 cputime=94.024 memavail=691576 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 650.6: gcodein=0  mcu: mcu_awake=0.006 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5020 bytes_read=7114 bytes_retransmit=0 bytes_invalid=0 send_seq=266 receive_seq=266 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001279 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000015 bytes_write=879 bytes_read=4709 bytes_retransmit=0 bytes_invalid=0 send_seq=122 receive_seq=122 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000082 adj=49999645 ebbcan: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000025 bytes_write=1550 bytes_read=5507 bytes_retransmit=0 bytes_invalid=0 send_seq=160 receive_seq=160 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000508 adj=63999649  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=60.8 mcu_temp: temp=37.8 sysload=0.70 cputime=94.062 memavail=692208 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 651.6: gcodein=0  mcu: mcu_awake=0.006 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5026 bytes_read=7217 bytes_retransmit=0 bytes_invalid=0 send_seq=267 receive_seq=267 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001266 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000015 bytes_write=885 bytes_read=4725 bytes_retransmit=0 bytes_invalid=0 send_seq=123 receive_seq=123 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000114 adj=49999644 ebbcan: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000025 bytes_write=1556 bytes_read=5568 bytes_retransmit=0 bytes_invalid=0 send_seq=161 receive_seq=161 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000523 adj=63999566  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=59.8 mcu_temp: temp=37.8 sysload=0.70 cputime=94.114 memavail=691736 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 652.6: gcodein=0  mcu: mcu_awake=0.006 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5032 bytes_read=7320 bytes_retransmit=0 bytes_invalid=0 send_seq=268 receive_seq=268 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001238 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000015 bytes_write=891 bytes_read=4741 bytes_retransmit=0 bytes_invalid=0 send_seq=124 receive_seq=124 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000096 adj=49999679 ebbcan: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000025 bytes_write=1562 bytes_read=5629 bytes_retransmit=0 bytes_invalid=0 send_seq=162 receive_seq=162 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000539 adj=63999595  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=59.8 mcu_temp: temp=37.7 sysload=0.70 cputime=94.166 memavail=691828 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 653.6: gcodein=0  mcu: mcu_awake=0.006 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5038 bytes_read=7452 bytes_retransmit=0 bytes_invalid=0 send_seq=269 receive_seq=269 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001221 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000015 bytes_write=897 bytes_read=4757 bytes_retransmit=0 bytes_invalid=0 send_seq=125 receive_seq=125 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000142 adj=49999595 ebbcan: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000025 bytes_write=1568 bytes_read=5705 bytes_retransmit=0 bytes_invalid=0 send_seq=163 receive_seq=163 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000506 adj=63999702  heater_bed: target=0 temp=25.5 pwm=0.000 raspberry_pi: temp=60.1 mcu_temp: temp=37.9 sysload=0.70 cputime=94.203 memavail=691608 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 654.6: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5044 bytes_read=7570 bytes_retransmit=0 bytes_invalid=0 send_seq=270 receive_seq=270 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001212 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=903 bytes_read=4786 bytes_retransmit=0 bytes_invalid=0 send_seq=126 receive_seq=126 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000157 adj=49999754 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1574 bytes_read=5780 bytes_retransmit=0 bytes_invalid=0 send_seq=164 receive_seq=164 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000481 adj=63999533  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=60.2 mcu_temp: temp=37.7 sysload=0.70 cputime=94.254 memavail=691976 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 655.6: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5050 bytes_read=7673 bytes_retransmit=0 bytes_invalid=0 send_seq=271 receive_seq=271 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001201 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=909 bytes_read=4802 bytes_retransmit=0 bytes_invalid=0 send_seq=127 receive_seq=127 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000133 adj=49999718 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1580 bytes_read=5841 bytes_retransmit=0 bytes_invalid=0 send_seq=165 receive_seq=165 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000461 adj=63999397  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=60.0 mcu_temp: temp=37.9 sysload=0.64 cputime=94.291 memavail=693036 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 656.6: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5056 bytes_read=7805 bytes_retransmit=0 bytes_invalid=0 send_seq=272 receive_seq=272 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001190 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=915 bytes_read=4818 bytes_retransmit=0 bytes_invalid=0 send_seq=128 receive_seq=128 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000124 adj=49999516 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1586 bytes_read=5917 bytes_retransmit=0 bytes_invalid=0 send_seq=166 receive_seq=166 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000463 adj=63999461  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=60.0 mcu_temp: temp=37.8 sysload=0.64 cputime=94.330 memavail=692636 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 657.6: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5062 bytes_read=7908 bytes_retransmit=0 bytes_invalid=0 send_seq=273 receive_seq=273 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001180 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=921 bytes_read=4834 bytes_retransmit=0 bytes_invalid=0 send_seq=129 receive_seq=129 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000109 adj=49999431 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1592 bytes_read=5978 bytes_retransmit=0 bytes_invalid=0 send_seq=167 receive_seq=167 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000473 adj=63999476  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=59.9 mcu_temp: temp=37.8 sysload=0.64 cputime=94.376 memavail=692872 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 658.6: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5068 bytes_read=8011 bytes_retransmit=0 bytes_invalid=0 send_seq=274 receive_seq=274 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001178 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=927 bytes_read=4850 bytes_retransmit=0 bytes_invalid=0 send_seq=130 receive_seq=130 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000103 adj=49999276 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1598 bytes_read=6039 bytes_retransmit=0 bytes_invalid=0 send_seq=168 receive_seq=168 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000457 adj=63999454  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=60.2 mcu_temp: temp=37.8 sysload=0.64 cputime=94.413 memavail=693232 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 659.6: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5074 bytes_read=8158 bytes_retransmit=0 bytes_invalid=0 send_seq=275 receive_seq=275 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001173 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000012 bytes_write=933 bytes_read=4879 bytes_retransmit=0 bytes_invalid=0 send_seq=131 receive_seq=131 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000117 adj=49999227 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1604 bytes_read=6129 bytes_retransmit=0 bytes_invalid=0 send_seq=169 receive_seq=169 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000443 adj=63999342  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=60.3 mcu_temp: temp=37.9 sysload=0.64 cputime=94.456 memavail=692856 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 660.6: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5080 bytes_read=8261 bytes_retransmit=0 bytes_invalid=0 send_seq=276 receive_seq=276 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001207 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000012 bytes_write=939 bytes_read=4895 bytes_retransmit=0 bytes_invalid=0 send_seq=132 receive_seq=132 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000110 adj=49999318 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1610 bytes_read=6190 bytes_retransmit=0 bytes_invalid=0 send_seq=170 receive_seq=170 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000439 adj=63999272  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=60.6 mcu_temp: temp=37.7 sysload=0.59 cputime=94.491 memavail=692948 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 661.6: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5086 bytes_read=8364 bytes_retransmit=0 bytes_invalid=0 send_seq=277 receive_seq=277 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001206 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000012 bytes_write=945 bytes_read=4911 bytes_retransmit=0 bytes_invalid=0 send_seq=133 receive_seq=133 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000108 adj=49999092 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1616 bytes_read=6251 bytes_retransmit=0 bytes_invalid=0 send_seq=171 receive_seq=171 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000440 adj=63999046  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=60.2 mcu_temp: temp=37.7 sysload=0.59 cputime=94.537 memavail=692996 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 662.6: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5092 bytes_read=8496 bytes_retransmit=0 bytes_invalid=0 send_seq=278 receive_seq=278 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001199 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000012 bytes_write=951 bytes_read=4927 bytes_retransmit=0 bytes_invalid=0 send_seq=134 receive_seq=134 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000125 adj=49999097 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1622 bytes_read=6327 bytes_retransmit=0 bytes_invalid=0 send_seq=172 receive_seq=172 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000435 adj=63999101  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=59.7 mcu_temp: temp=37.9 sysload=0.59 cputime=94.585 memavail=692804 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 663.6: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5098 bytes_read=8599 bytes_retransmit=0 bytes_invalid=0 send_seq=279 receive_seq=279 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001194 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000012 bytes_write=957 bytes_read=4943 bytes_retransmit=0 bytes_invalid=0 send_seq=135 receive_seq=135 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000120 adj=49999257 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1634 bytes_read=6404 bytes_retransmit=0 bytes_invalid=0 send_seq=174 receive_seq=174 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000425 adj=63999148  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=60.2 mcu_temp: temp=37.9 sysload=0.59 cputime=94.623 memavail=692616 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 664.6: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5104 bytes_read=8717 bytes_retransmit=0 bytes_invalid=0 send_seq=280 receive_seq=280 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001208 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000011 bytes_write=963 bytes_read=4972 bytes_retransmit=0 bytes_invalid=0 send_seq=136 receive_seq=136 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000117 adj=49999240 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1640 bytes_read=6479 bytes_retransmit=0 bytes_invalid=0 send_seq=175 receive_seq=175 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000419 adj=63999143  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=60.7 mcu_temp: temp=37.7 sysload=0.59 cputime=94.667 memavail=692432 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 665.6: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5110 bytes_read=8849 bytes_retransmit=0 bytes_invalid=0 send_seq=281 receive_seq=281 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001200 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000011 bytes_write=969 bytes_read=4988 bytes_retransmit=0 bytes_invalid=0 send_seq=137 receive_seq=137 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000115 adj=49999125 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1646 bytes_read=6555 bytes_retransmit=0 bytes_invalid=0 send_seq=176 receive_seq=176 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000415 adj=63999031  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=60.4 mcu_temp: temp=37.9 sysload=0.54 cputime=94.704 memavail=692692 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 666.6: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5116 bytes_read=8952 bytes_retransmit=0 bytes_invalid=0 send_seq=282 receive_seq=282 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001204 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000011 bytes_write=975 bytes_read=5004 bytes_retransmit=0 bytes_invalid=0 send_seq=138 receive_seq=138 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000120 adj=49999167 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1652 bytes_read=6616 bytes_retransmit=0 bytes_invalid=0 send_seq=177 receive_seq=177 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000420 adj=63999105  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=60.2 mcu_temp: temp=37.8 sysload=0.54 cputime=94.746 memavail=692596 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 667.6: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5122 bytes_read=9055 bytes_retransmit=0 bytes_invalid=0 send_seq=283 receive_seq=283 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001200 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000011 bytes_write=981 bytes_read=5020 bytes_retransmit=0 bytes_invalid=0 send_seq=139 receive_seq=139 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000124 adj=49999185 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1658 bytes_read=6677 bytes_retransmit=0 bytes_invalid=0 send_seq=178 receive_seq=178 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000413 adj=63999133  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=59.6 mcu_temp: temp=37.9 sysload=0.54 cputime=94.792 memavail=691908 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 668.6: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5128 bytes_read=9187 bytes_retransmit=0 bytes_invalid=0 send_seq=284 receive_seq=284 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001193 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000011 bytes_write=987 bytes_read=5036 bytes_retransmit=0 bytes_invalid=0 send_seq=140 receive_seq=140 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000117 adj=49999234 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1664 bytes_read=6753 bytes_retransmit=0 bytes_invalid=0 send_seq=179 receive_seq=179 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000407 adj=63999135  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=60.6 mcu_temp: temp=37.7 sysload=0.54 cputime=94.828 memavail=692224 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 669.6: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5134 bytes_read=9305 bytes_retransmit=0 bytes_invalid=0 send_seq=285 receive_seq=285 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001215 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=993 bytes_read=5065 bytes_retransmit=0 bytes_invalid=0 send_seq=141 receive_seq=141 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000111 adj=49999208 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1670 bytes_read=6828 bytes_retransmit=0 bytes_invalid=0 send_seq=180 receive_seq=180 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000417 adj=63999161  heater_bed: target=0 temp=25.5 pwm=0.000 raspberry_pi: temp=60.0 mcu_temp: temp=37.8 sysload=0.54 cputime=94.878 memavail=692228 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 670.6: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5140 bytes_read=9408 bytes_retransmit=0 bytes_invalid=0 send_seq=286 receive_seq=286 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001214 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=999 bytes_read=5081 bytes_retransmit=0 bytes_invalid=0 send_seq=142 receive_seq=142 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000110 adj=49999036 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1676 bytes_read=6889 bytes_retransmit=0 bytes_invalid=0 send_seq=181 receive_seq=181 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000412 adj=63999090  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=59.4 mcu_temp: temp=37.9 sysload=0.50 cputime=94.913 memavail=692528 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 671.6: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5146 bytes_read=9540 bytes_retransmit=0 bytes_invalid=0 send_seq=287 receive_seq=287 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001205 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=1005 bytes_read=5097 bytes_retransmit=0 bytes_invalid=0 send_seq=143 receive_seq=143 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000107 adj=49999064 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1682 bytes_read=6965 bytes_retransmit=0 bytes_invalid=0 send_seq=182 receive_seq=182 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000408 adj=63999147  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=60.3 mcu_temp: temp=37.8 sysload=0.50 cputime=94.952 memavail=692856 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 672.6: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5152 bytes_read=9643 bytes_retransmit=0 bytes_invalid=0 send_seq=288 receive_seq=288 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001199 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=1011 bytes_read=5113 bytes_retransmit=0 bytes_invalid=0 send_seq=144 receive_seq=144 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000105 adj=49999119 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1688 bytes_read=7026 bytes_retransmit=0 bytes_invalid=0 send_seq=183 receive_seq=183 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000421 adj=63999199  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=60.2 mcu_temp: temp=37.7 sysload=0.50 cputime=94.996 memavail=693036 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 673.6: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5158 bytes_read=9746 bytes_retransmit=0 bytes_invalid=0 send_seq=289 receive_seq=289 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001195 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=1017 bytes_read=5129 bytes_retransmit=0 bytes_invalid=0 send_seq=145 receive_seq=145 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000101 adj=49999148 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1694 bytes_read=7087 bytes_retransmit=0 bytes_invalid=0 send_seq=184 receive_seq=184 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000433 adj=63999344  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=60.3 mcu_temp: temp=38.0 sysload=0.50 cputime=95.032 memavail=692812 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 674.6: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5164 bytes_read=9893 bytes_retransmit=0 bytes_invalid=0 send_seq=290 receive_seq=290 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001200 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=1023 bytes_read=5158 bytes_retransmit=0 bytes_invalid=0 send_seq=146 receive_seq=146 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000115 adj=49999149 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1700 bytes_read=7177 bytes_retransmit=0 bytes_invalid=0 send_seq=185 receive_seq=185 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000433 adj=63999445  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=60.2 mcu_temp: temp=37.7 sysload=0.50 cputime=95.086 memavail=692804 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 675.6: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5170 bytes_read=9996 bytes_retransmit=0 bytes_invalid=0 send_seq=291 receive_seq=291 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001203 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=1029 bytes_read=5174 bytes_retransmit=0 bytes_invalid=0 send_seq=147 receive_seq=147 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000114 adj=49999242 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1706 bytes_read=7238 bytes_retransmit=0 bytes_invalid=0 send_seq=186 receive_seq=186 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000427 adj=63999353  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=59.5 mcu_temp: temp=37.8 sysload=0.62 cputime=95.124 memavail=693804 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 676.6: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5176 bytes_read=10099 bytes_retransmit=0 bytes_invalid=0 send_seq=292 receive_seq=292 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001197 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=1035 bytes_read=5190 bytes_retransmit=0 bytes_invalid=0 send_seq=148 receive_seq=148 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000112 adj=49999194 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1712 bytes_read=7299 bytes_retransmit=0 bytes_invalid=0 send_seq=187 receive_seq=187 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000421 adj=63999248  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=60.0 mcu_temp: temp=38.0 sysload=0.62 cputime=95.160 memavail=693332 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 677.6: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5182 bytes_read=10231 bytes_retransmit=0 bytes_invalid=0 send_seq=293 receive_seq=293 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001192 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=1041 bytes_read=5206 bytes_retransmit=0 bytes_invalid=0 send_seq=149 receive_seq=149 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000109 adj=49999209 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1718 bytes_read=7375 bytes_retransmit=0 bytes_invalid=0 send_seq=188 receive_seq=188 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000417 adj=63999242  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=60.1 mcu_temp: temp=37.8 sysload=0.62 cputime=95.210 memavail=692904 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 678.6: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5188 bytes_read=10334 bytes_retransmit=0 bytes_invalid=0 send_seq=294 receive_seq=294 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001187 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=1047 bytes_read=5222 bytes_retransmit=0 bytes_invalid=0 send_seq=150 receive_seq=150 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000106 adj=49999214 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1724 bytes_read=7436 bytes_retransmit=0 bytes_invalid=0 send_seq=189 receive_seq=189 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000414 adj=63999245  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=60.3 mcu_temp: temp=37.9 sysload=0.62 cputime=95.247 memavail=692908 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 679.6: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5194 bytes_read=10452 bytes_retransmit=0 bytes_invalid=0 send_seq=295 receive_seq=295 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001189 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000012 bytes_write=1053 bytes_read=5251 bytes_retransmit=0 bytes_invalid=0 send_seq=151 receive_seq=151 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000110 adj=49999220 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1730 bytes_read=7511 bytes_retransmit=0 bytes_invalid=0 send_seq=190 receive_seq=190 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000409 adj=63999266  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=59.7 mcu_temp: temp=37.7 sysload=0.62 cputime=95.298 memavail=693268 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 680.6: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5200 bytes_read=10584 bytes_retransmit=0 bytes_invalid=0 send_seq=296 receive_seq=296 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001184 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000012 bytes_write=1059 bytes_read=5267 bytes_retransmit=0 bytes_invalid=0 send_seq=152 receive_seq=152 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000117 adj=49999231 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1736 bytes_read=7587 bytes_retransmit=0 bytes_invalid=0 send_seq=191 receive_seq=191 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000406 adj=63999189  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=59.9 mcu_temp: temp=37.7 sysload=0.57 cputime=95.335 memavail=693504 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 681.6: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5206 bytes_read=10687 bytes_retransmit=0 bytes_invalid=0 send_seq=297 receive_seq=297 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001180 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000012 bytes_write=1065 bytes_read=5283 bytes_retransmit=0 bytes_invalid=0 send_seq=153 receive_seq=153 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000111 adj=49999316 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1742 bytes_read=7648 bytes_retransmit=0 bytes_invalid=0 send_seq=192 receive_seq=192 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000408 adj=63999209  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=60.1 mcu_temp: temp=38.1 sysload=0.57 cputime=95.377 memavail=693088 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 682.6: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5212 bytes_read=10790 bytes_retransmit=0 bytes_invalid=0 send_seq=298 receive_seq=298 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001187 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000012 bytes_write=1071 bytes_read=5299 bytes_retransmit=0 bytes_invalid=0 send_seq=154 receive_seq=154 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000112 adj=49999260 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1748 bytes_read=7709 bytes_retransmit=0 bytes_invalid=0 send_seq=193 receive_seq=193 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000405 adj=63999274  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=59.5 mcu_temp: temp=37.9 sysload=0.57 cputime=95.427 memavail=692652 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 683.6: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5218 bytes_read=10922 bytes_retransmit=0 bytes_invalid=0 send_seq=299 receive_seq=299 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001183 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000012 bytes_write=1077 bytes_read=5315 bytes_retransmit=0 bytes_invalid=0 send_seq=155 receive_seq=155 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000111 adj=49999207 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1754 bytes_read=7785 bytes_retransmit=0 bytes_invalid=0 send_seq=194 receive_seq=194 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000402 adj=63999171  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=60.6 mcu_temp: temp=37.8 sysload=0.57 cputime=95.465 memavail=692756 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 684.6: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5224 bytes_read=11040 bytes_retransmit=0 bytes_invalid=0 send_seq=300 receive_seq=300 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001179 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=1083 bytes_read=5344 bytes_retransmit=0 bytes_invalid=0 send_seq=156 receive_seq=156 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000108 adj=49999215 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1760 bytes_read=7860 bytes_retransmit=0 bytes_invalid=0 send_seq=195 receive_seq=195 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000404 adj=63999190  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=60.2 mcu_temp: temp=37.8 sysload=0.57 cputime=95.516 memavail=693232 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 685.6: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5230 bytes_read=11158 bytes_retransmit=0 bytes_invalid=0 send_seq=301 receive_seq=301 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001176 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=1089 bytes_read=5360 bytes_retransmit=0 bytes_invalid=0 send_seq=157 receive_seq=157 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000113 adj=49999232 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1766 bytes_read=7921 bytes_retransmit=0 bytes_invalid=0 send_seq=196 receive_seq=196 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000403 adj=63999259  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=59.6 mcu_temp: temp=37.9 sysload=0.68 cputime=95.559 memavail=692832 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 686.6: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5236 bytes_read=11275 bytes_retransmit=0 bytes_invalid=0 send_seq=302 receive_seq=302 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001173 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=1101 bytes_read=5392 bytes_retransmit=0 bytes_invalid=0 send_seq=159 receive_seq=159 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000106 adj=49999289 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1772 bytes_read=7997 bytes_retransmit=0 bytes_invalid=0 send_seq=197 receive_seq=197 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000404 adj=63999268  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=60.6 mcu_temp: temp=37.9 sysload=0.68 cputime=95.599 memavail=693368 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 687.6: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5242 bytes_read=11378 bytes_retransmit=0 bytes_invalid=0 send_seq=303 receive_seq=303 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001177 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=1107 bytes_read=5408 bytes_retransmit=0 bytes_invalid=0 send_seq=160 receive_seq=160 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000104 adj=49999224 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1778 bytes_read=8058 bytes_retransmit=0 bytes_invalid=0 send_seq=198 receive_seq=198 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000402 adj=63999307  heater_bed: target=0 temp=25.6 pwm=0.000 raspberry_pi: temp=60.1 mcu_temp: temp=37.8 sysload=0.68 cputime=95.642 memavail=692204 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 738.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5588 bytes_read=17267 bytes_retransmit=0 bytes_invalid=0 send_seq=357 receive_seq=357 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001175 CB1: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000019 bytes_write=1413 bytes_read=6349 bytes_retransmit=0 bytes_invalid=0 send_seq=211 receive_seq=211 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000116 adj=49999227 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=2090 bytes_read=11562 bytes_retransmit=0 bytes_invalid=0 send_seq=250 receive_seq=250 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000396 adj=63999195  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=59.1 mcu_temp: temp=37.9 sysload=1.35 cputime=98.102 memavail=692452 print_time=110.575 buffer_time=0.519 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Attempting MCU 'CB1' config_reset command
b'Got EOF when reading from device'
Attempting MCU 'ebbcan' reset command
Attempting MCU 'mcu' reset command
webhooks client 281473549491072: Disconnected
Restarting printer
Start printer at Mon Aug 21 00:49:33 2023 (1692578973.6 740.5)
===== Config file =====
[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancels the current print.
	Usage: CANCEL_PRINT
rename_existing = _KM_CANCEL_PRINT_BASE
gcode = 
	_KM_CHECK_IS_PRINTING
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=cancelling RESET_STACK=1
	SET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{True}"
	PRINT_END
	_KM_CANCEL_PRINT_BASE
	{% if printer.pause_resume.is_paused %}
	RESTORE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE MOVE=0
	{% endif %}
	CLEAR_PAUSE
	_KM_APPLY_PRINT_OFFSET RESET=1
	{% if 'virtual_sdcard' in printer and not printer.virtual_sdcard.is_active %}
	SDCARD_RESET_FILE
	{% endif %}

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
variable_restore_idle_timeout = 0
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set idle_timeout = client.idle_timeout|default(0) %}
	
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE={printer[printer.toolhead.extruder].target}
	
	{% if idle_timeout > 0 %}
	SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
	SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
	{% endif %}
	PAUSE_BASE
	_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
variable_last_extruder_temp = 0
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move = client.speed_move|default(velocity) %}
	
	
	{% if printer['gcode_macro PAUSE'].restore_idle_timeout > 0 %}
	SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro PAUSE'].restore_idle_timeout}
	{% endif %}
	M109 S{last_extruder_temp}
	_CLIENT_EXTRUDE
	RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	_KM_CHECK_IS_PRINTING
	{% set pause_next_layer =
	printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE | default(1) | int != 0 %}
	{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VALUE="{
	{ 'enable': False, 'call': MACRO }}" VARIABLE=pause_next_layer
	GCODE_AT_LAYER COMMAND="{MACRO|replace('\"','\\\"')
	}" CANCEL="{0 if ENABLE else 1}" LAYER="next"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	_KM_CHECK_IS_PRINTING
	{% set pause_at_layer =
	printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	
	{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined else
	params.LAYER is defined %}
	{% set LAYER = params.LAYER |
	default((pause_at_layer.layer|int,
	printer.print_stats.info.current_layer|int + 1)|max)%}
	{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}
	
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{
	{ 'enable': False, 'layer': 0, 'call': MACRO }}"
	{% if ENABLE and pause_at_layer.enable %}
	
	GCODE_AT_LAYER COMMAND="{pause_at_layer.call|replace('\"','\\\"')
	}" CANCEL="{1}" LAYER="{pause_at_layer.layer}"
	{% endif %}
	
	GCODE_AT_LAYER COMMAND="{MACRO|replace('\"','\\\"')
	}" CANCEL="{0 if ENABLE else 1}" LAYER="{LAYER}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = _KM_SET_PRINT_STATS_INFO
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	_KM_SET_PRINT_STATS_INFO {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.extruder.can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[gcode_macro _km_options]
variable_load_length = 90.0
variable_menu_temperature = [
	{'name' : 'PLA',  'extruder' : 200.0, 'bed' : 60.0},
	{'name' : 'PETG', 'extruder' : 230.0, 'bed' : 85.0},
	{'name' : 'ABS',  'extruder' : 245.0, 'bed' : 110.0, 'chamber' : 60}]
variable_start_purge_length = 50
variable_start_extruder_probing_temp = 150
variable_park_x = 200.0
variable_park_y = 200.0
gcode = 

[gcode_macro bed_mesh_calibrate_fast]
description = Wraps BED_MESH_CALIBRATE, scaling probe count to specified area.
	Usage: See Klipper documentation.
gcode = 
	
	BED_MESH_CHECK ABORT=1
	
	
	{% set calibrate_cmd =
	(printer["gcode_macro list_macros"].macros.bed_mesh_calibrate|
	default(["bed_mesh_calibrate"],True))[-1] %}
	
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set probe_mesh_padding = km.probe_mesh_padding %}
	{% set probe_min_count = km.probe_min_count %}
	{% set probe_count_scale = km.probe_count_scale %}
	{% set bed_mesh = printer.configfile.settings.bed_mesh %}
	
	
	{%if "mesh_radius" not in bed_mesh and
	"MESH_RADIUS" not in params %}
	{% set safe_min_x = bed_mesh.mesh_min[0] %}
	{% set safe_min_y = bed_mesh.mesh_min[1] %}
	{% set safe_max_x = bed_mesh.mesh_max[0] %}
	{% set safe_max_y = bed_mesh.mesh_max[1] %}
	
	
	{% if "MESH_MIN" in params %}
	{% set mesh_min_x = (params.MESH_MIN.split(",")[0]|float -
	probe_mesh_padding, safe_min_x)|max %}
	{% set mesh_min_y = (params.MESH_MIN.split(",")[1]|float -
	probe_mesh_padding, safe_min_y)|max %}
	{% else %}
	{% set mesh_min_x = safe_min_x %}
	{% set mesh_min_y = safe_min_y %}
	{% endif %}
	{% if "MESH_MAX" in params %}
	{% set mesh_max_x = (params.MESH_MAX.split(",")[0]|float +
	probe_mesh_padding, safe_max_x)|min %}
	{% set mesh_max_y = (params.MESH_MAX.split(",")[1]|float +
	probe_mesh_padding, safe_max_y)|min %}
	{% else %}
	{% set mesh_max_x = safe_max_x %}
	{% set mesh_max_y = safe_max_y %}
	{% endif %}
	
	{% set probe_count = bed_mesh.probe_count if not params.PROBE_COUNT else
	params.PROBE_COUNT.split(",")|map('int')|list %}
	
	{% if "PROBE_COUNT" not in params %}
	{% set max_x_probes = probe_count[0] %}
	{% set max_y_probes = probe_count[-1] %}
	
	{% set x_probes = (max_x_probes * (mesh_max_x - mesh_min_x) /
	(safe_max_x - safe_min_x) * probe_count_scale)
	| round(0) | int %}
	{% set x_probes = ((x_probes, probe_min_count)|max, max_x_probes)|min %}
	
	{% set y_probes = (max_y_probes * (mesh_max_y - mesh_min_y ) /
	(safe_max_y - safe_min_y) * probe_count_scale )
	| round(0) | int %}
	{% set y_probes = ((y_probes, probe_min_count)|max, max_y_probes)|min %}
	
	{% if x_probes > 6 and y_probes < 4 %}
	{% set y_probes = 4 %}
	{% elif y_probes > 6 and x_probes < 4 %}
	{% set x_probes = 4 %}
	{% endif %}
	{% set probe_count = [x_probes,y_probes] %}
	{% elif probe_count|length == 1 %}
	{% set dummy = probe_count.append(probe_count[0]) %}
	{% endif %}
	
	
	
	
	
	
	
	{% if "relative_reference_index" in bed_mesh %}
	{% set row = (bed_mesh.relative_reference_index / bed_mesh.probe_count[0]
	)|int%}
	{% set rrf_x = (((safe_max_x - safe_min_x) /
	(bed_mesh.probe_count[0] - 1))|round(2, 'floor')) *
	(bed_mesh.relative_reference_index %
	bed_mesh.probe_count[-1]) %}
	{% if row % 2 %}
	{% set rrf_x = safe_max_x - rrf_x %}
	{% else %}
	{% set rrf_x = safe_min_x + rrf_x %}
	{% endif %}
	{% set rrf_y = (((safe_max_y - safe_min_y) /
	(bed_mesh.probe_count[-1] - 1))|round(2, 'floor')) *
	row + safe_min_x %}
	{% set x_dist = (mesh_max_x - mesh_min_x) / (probe_count[0] - 1) %}
	{% set y_dist = (mesh_max_y - mesh_min_y) / (probe_count[1] - 1) %}
	{% set rrf = {'x':0, 'y':0, 'dist':safe_max_x**2+safe_max_y**2,'pos':0} %}
	{% for row in range(probe_count[1])%}
	{% for col in range(probe_count[0])%}
	{% if row % 2 %}
	{% set x = mesh_max_x - col * x_dist %}
	{% else %}
	{% set x = mesh_min_x + col * x_dist %}
	{% endif %}
	{% set y = mesh_min_y + row * y_dist %}
	{% set dist = ((x - rrf_x)**2 + (y - rrf_y)**2)**0.5 %}
	{% if dist < rrf.dist %}
	{% set dummy = rrf.__setitem__("dist", dist) %}
	{% set dummy = rrf.__setitem__("x", x) %}
	{% set dummy = rrf.__setitem__("y", y) %}
	{% set dummy = rrf.__setitem__("pos", row * probe_count[1] + col) %}
	{% endif %}
	{% endfor %}
	{% endfor %}
	{% if rrf.x != rrf_x or rrf.y != rrf_y %}
	{action_respond_info("relative_reference_index remapped to"
	" %d (%.2f,%.2f) from %d (%.2f,%.2f)" %
	(rrf.pos, rrf.x, rrf.y,
	bed_mesh.relative_reference_index, rrf_x, rrf_y))}
	{% endif %}
	{% set dummy = params.__setitem__("RELATIVE_REFERENCE_INDEX", rrf.pos) %}
	{% endif %}
	
	{% set dummy = params.__setitem__("MESH_MIN", mesh_min_x~","~mesh_min_y) %}
	{% set dummy = params.__setitem__("MESH_MAX", mesh_max_x~","~mesh_max_y) %}
	{% set dummy = params.__setitem__("PROBE_COUNT", probe_count|join(',')) %}
	
	{% if probe_count[0] > 6 or probe_count[1]|default(0) > 6 %}
	{% set dummy = params.__setitem__("ALGORITHM", "bicubic") %}
	{% endif %}
	
	{% if "MESH_MIN" in params or "MESH_MAX" in params %}
	BED_MESH_CHECK {rawparams}
	{% endif %}
	{% else %}
	
	{% set dummy = params.__delitem__("MESH_MIN") %}
	{% set dummy = params.__delitem__("MESH_MAX") %}
	{% endif %}
	
	{% if "MESH_MIN" in params or "MESH_MAX" in params %}
	BED_MESH_CHECK ABORT=1{%for k in params%}{' '~k~'="'~params[k]~'"'}{%
	endfor%}
	{% endif %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=meshing
	{calibrate_cmd}{%for k in params%}{' '~k~'="'~params[k]~'"'}{%endfor%}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro bed_mesh_check]
description = Warns if bed_mesh config may generate an invalid mesh.
	Usage: BED_MESH_CHECK [MESH_MIN=<x,y>] [MESH_MAX=<x,y>] [ABORT=<0|1>]
gcode = 
	{% if printer.bed_mesh is defined %}
	{% set action = action_respond_info if params.ABORT|default(0)|int == 0 else
	action_raise_error %}
	{% set settings = printer.configfile.settings %}
	{% set x_min = settings.stepper_x.position_min %}
	{% set y_min = settings.stepper_y.position_min %}
	{% set x_max = settings.stepper_x.position_max %}
	{% set y_max = settings.stepper_y.position_max %}
	
	{% set label = "[bed_mesh] config" %}
	{% if "MESH_MIN" in params %}
	{% set label = "BED_MESH_CALIBRATE params" %}
	{% set mesh_min_x = params.MESH_MIN.split(",")[0]|float %}
	{% set mesh_min_y = params.MESH_MIN.split(",")[1]|float %}
	{% else %}
	{% set mesh_min_x = settings.bed_mesh.mesh_min[0] %}
	{% set mesh_min_y = settings.bed_mesh.mesh_min[1] %}
	{% endif %}
	{% if "MESH_MAX" in params %}
	{% set label = "BED_MESH_CALIBRATE params" %}
	{% set mesh_max_x = params.MESH_MAX.split(",")[0]|float %}
	{% set mesh_max_y = params.MESH_MAX.split(",")[1]|float %}
	{% else %}
	{% set mesh_max_x = settings.bed_mesh.mesh_max[0] %}
	{% set mesh_max_y = settings.bed_mesh.mesh_max[1] %}
	{% endif %}
	
	{% if "bltouch" in settings %}
	{% set x_offset = settings.bltouch.x_offset %}
	{% set y_offset = settings.bltouch.y_offset %}
	{% set probe = "bltouch" %}
	{% elif "probe" in settings %}
	{% set x_offset = settings.probe.x_offset %}
	{% set y_offset = settings.probe.y_offset %}
	{% set probe = "probe" %}
	{% else %}
	{% set x_offset = 0.0 %}
	{% set y_offset = 0.0 %}
	{% endif %}
	
	{% set output = [] %}
	{% set warn =
	"* mesh_%s (%f, %f) adjusted by " ~ probe ~
	".%s_offset (%f) can move out of range for "
	"stepper_%s.position_%s (%f)." %}
	{% if x_offset > 0 and (mesh_min_x - x_offset) < x_min %}
	{% set dummy = output.append(warn % ('min', mesh_min_x, mesh_min_y,
	'x', x_offset, 'x', 'min', x_min)) %}
	{% elif x_offset < 0 and (mesh_max_x - x_offset) > x_max %}
	{% set dummy = output.append(warn % ('max', mesh_max_x, mesh_max_y,
	'x', x_offset, 'x', 'max', x_max)) %}
	{% endif %}
	{% if y_offset > 0 and (mesh_min_y - y_offset) < y_min %}
	{% set dummy = output.append(warn % ('min', mesh_min_x, mesh_min_y,
	'y', y_offset, 'y', 'min', y_min)) %}
	{% elif y_offset < 0 and (mesh_max_y - y_offset) > y_max %}
	{% set dummy = output.append(warn % ('max', mesh_max_x, mesh_max_y,
	'y', y_offset, 'y', 'max', y_max)) %}
	{% endif %}
	
	{% if output %}
	{ action(
	"Warning: The following issue(s) were detected in your " ~ label ~
	":\n" ~ output|join("\n")) }
	{% endif %}
	{% endif %}

[gcode_macro _apply_bed_surface_offset]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% if surfaces.active %}
	SET_SURFACE_ACTIVE SURFACE={surfaces.active}
	{% endif %}

[gcode_macro _init_surfaces]
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% if "bed_surfaces" in printer.save_variables.variables %}
	{% set old_surfaces = printer.save_variables.variables.bed_surfaces %}
	{% else %}
	{% set old_surfaces = { 'active' : '', 'available' : {} } %}
	{% endif %}
	{% set settings = printer.configfile.settings %}
	{% set new_probe_z = (settings.probe | default(settings.bltouch) |
	default(settings.smart_effector) | default({})
	).z_offset|default(0.0)|float %}
	{% set new_endstop_z = (settings.stepper_z | default({})).position_endstop |
	default(0.0)|float %}
	{% if 'endstop_z' not in old_surfaces %}
	{% set dummy = old_surfaces.__setitem__('endstop_z', new_endstop_z) %}
	{% endif %}
	{% if 'probe_z' not in old_surfaces %}
	{% set dummy = old_surfaces.__setitem__('probe_z', new_probe_z) %}
	{% endif %}
	{% set surfaces = { 'active' : '', 'available' : {},
	'endstop_z' : old_surfaces.endstop_z,
	'probe_z' : old_surfaces.probe_z } %}
	{% for s in km.bed_surfaces %}
	{% set s = s.split()|join(' ')|lower %}
	{% if s|length > km.bed_surface_max_name_length or
	s|list|select("in", " \r\n\"\'")|list %}
	{action_raise_error('Invalid surface name "%s". Name must be %d or fewer '
	'characters and must not include space or quotation characters'
	| format(s, km.bed_surface_max_name_length))}
	{% endif %}
	{% if s in old_surfaces.available %}
	{% set dummy = surfaces.available.__setitem__(s,
	old_surfaces.available[s]) %}
	{% else %}
	{% set dummy = surfaces.available.__setitem__(s, {'offset' : 0.0}) %}
	{% endif %}
	{% endfor %}
	{% if old_surfaces.active in surfaces.available %}
	{% set dummy = surfaces.__setitem__('active', old_surfaces.active) %}
	{% elif km.bed_surfaces %}
	{% set dummy = surfaces.__setitem__('active', km.bed_surfaces[0]|lower) %}
	{% endif %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	_APPLY_BED_SURFACE_OFFSET
	{% if new_probe_z != surfaces.probe_z or
	new_endstop_z != surfaces.endstop_z %}
	{ action_respond_info(
	'Z probe offset or endstop position changed. Run ADJUST_SURFACE_OFFSETS '
	'to adjust the offset for all saved surfaces by the change differential, '
	'or run ADJUST_SURFACE_OFFSETS IGNORE=1 to hide this message without '
	'making changes.') }
	{% endif %}

[gcode_macro adjust_surface_offsets]
description = Adjusts surface offsets to account for changes in the Z endstop
	position or probe Z offset.
	Usage: ADJUST_SURFACE_OFFSETS [IGNORE]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% set settings = printer.configfile.settings %}
	{% set new_probe_z = (settings.probe | default(settings.bltouch) |
	default(settings.smart_effector) | default({})
	).z_offset|default(0.0)|float %}
	{% set new_endstop_z = (settings.stepper_z | default({})).position_endstop |
	default(0.0)|float %}
	{% set diff = (surfaces.probe_z - new_probe_z +
	surfaces.endstop_z - new_endstop_z)|round(6) %}
	{% if not params.IGNORE|default(0)|int %}
	{% for s in surfaces.available %}
	{% set offset = (surfaces.available[s].offset - diff)|round(6) %}
	{% set dummy = surfaces.available.__setitem__(s, {'offset' : offset}) %}
	{% endfor %}
	{ action_respond_info("All bed surfaces now adjusted by %1.4f"|
	format(diff))}
	{% elif diff != 0 %}
	{ action_respond_info("Status cleared without adjustment") }
	{% endif %}
	{% set dummy = surfaces.__setitem__('endstop_z', new_endstop_z| round(6)) %}
	{% set dummy = surfaces.__setitem__('probe_z', new_probe_z|round(6)) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"

[gcode_macro set_surface_offset]
description = Sets the offset for a surface and moves the toolhead (if homed).
	Usage: SET_SURFACE_OFFSET [OFFSET=<offset>] [SURFACE=<surface>]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}
	{% if SURFACE not in surfaces.available %}
	{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }
	{% endif %}
	{% set active = surfaces.available[SURFACE] %}
	
	{% set OFFSET = params.OFFSET|default(active.offset)|float %}
	{% if OFFSET != active.offset %}
	{% set dummy = surfaces.available[SURFACE].__setitem__("offset", OFFSET) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	{% if SURFACE == surfaces.active %}
	_km_set_gcode_offset_base Z="{OFFSET}" MOVE={
	1 if printer.toolhead.homed_axes == 'xyz' else 0}
	{% endif %}
	{% endif %}
	{ action_respond_info("Bed surface: %s Offset: %.3f"
	| format(SURFACE, OFFSET)) }
	
	{% set dummy = None if True else "
	{% set dummy = params.SURFACE|default(active surface) %}
	{% set dummy = params.OFFSET|default(none)|float %}
	" %}

[gcode_macro set_surface_active]
description = Sets the active bed surface and moves the toolhead (if homed). If
	no SURFACE argument is present the available surfaces are listed and the
	active one is preceded by a "*".
	Usage: SET_SURFACE_ACTIVE [SURFACE=<surface>]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% if "SURFACE" in params %}
	{% set SURFACE = params.SURFACE|lower %}
	{% if SURFACE not in surfaces.available %}
	{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }
	{% endif %}
	{% if SURFACE != surfaces.active %}
	{% set dummy = surfaces.__setitem__("active", SURFACE) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	{% endif %}
	{% if surfaces.available[SURFACE].offset !=
	printer.gcode_move.homing_origin.z %}
	_km_set_gcode_offset_base Z="{surfaces.available[SURFACE].offset
	}" MOVE={1 if printer.toolhead.homed_axes == 'xyz' else 0}
	{% endif %}
	{action_respond_info("Active bed surface: %s; offset: %.3f"
	| format(SURFACE, surfaces.available[SURFACE].offset))}
	{% else %}
	{% set output = [] %}
	{% for s in surfaces.available|list|sort %}
	{% set dummy = output.append("%s&nbsp;%s - offset: %.3f"
	| format("*" if s == surfaces.active else "&nbsp;",
	s, surfaces.available[s].offset)) %}
	{% endfor %}
	{action_respond_info(output|join('\n'))}
	{% endif %}
	
	{% set dummy = None if True else "
	{% set dummy = params.SURFACE|default(none) %}
	" %}

[gcode_macro set_gcode_offset]
description = Wraps SET_GCODE_OFFSET to update the current bed sheet offset.
	Usage: SET_GCODE_OFFSET [X=<pos>|X_ADJUST=<adjust>]
	[Y=<pos>|Y_ADJUST=<adjust>]
	[Z=<pos>|Z_ADJUST=<adjust>]
	[MOVE=1 [MOVE_SPEED=<speed>]]
rename_existing = _KM_SET_GCODE_OFFSET_BASE
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% if surfaces.active and
	not printer["gcode_macro _km_save_state"].is_ephemeral %}
	{% set Z = params.Z|default(0.0)|float|round(6) %}
	{% set Z_ADJUST = params.Z_ADJUST|default(0.0)|float %}
	{% if 'Z' in params and
	Z != surfaces.available[surfaces.active].offset %}
	{% set dummy = surfaces.available[surfaces.active].__setitem__("offset",
	Z) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	{% elif Z_ADJUST != 0.0 %}
	{% set dummy = surfaces.available[surfaces.active].__setitem__(
	"offset", (Z_ADJUST + printer.gcode_move.homing_origin.z)|round(6)) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	{% endif %}
	{% endif %}
	_km_set_gcode_offset_base{% for k in params%}{' '~k~'="'~params[k]~'"'
	}{% endfor %}

[gcode_macro make_surface_mesh]
description = Generates and saves a mesh to automatically load in PRINT_START.
	Usage: MAKE_SURFACE_MESH [SURFACE=<surface>] [BED=<probing temperature>]
	[EXTRUDER=<probing temperature>]
	[MESH_MULTIPLIER=<integer multiple of mesh density>]
	[bed_mesh_calibrate parameters]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}
	{% if SURFACE not in surfaces.available %}
	{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }
	{% endif %}
	{% set dummy = params.__setitem__('PROFILE', SURFACE) %}
	{% set BED = params.BED|default(70) | int %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set EXTRUDER = params.EXTRUDER|default(km.start_extruder_probing_temp) |
	int %}
	{% set MESH_MULTIPLIER = (params.MESH_MULTIPLIER|default(2)|int, 1)|max %}
	
	M104 S{EXTRUDER}
	M140 S{BED}
	G28
	
	
	{% if surfaces.available[SURFACE].offset !=
	printer.gcode_move.homing_origin.z %}
	_km_set_gcode_offset_base Z="{surfaces.available[SURFACE].offset
	}" MOVE=1
	{% endif %}
	
	
	{% if BED > 0 %}
	{action_respond_info("Stabilizing bed at %iC" | format(BED,))}
	_KM_PARK_IF_NEEDED HEATER=heater_bed RANGE=0.5
	{% if BED < (printer.heater_bed.temperature - 0.2) %}
	M190 R{BED}
	G4 P{((km.start_bed_heat_delay * 10, 30000)|min,
	km.start_bed_heat_delay)|max}
	{% else %}
	G4 P{km.start_bed_heat_delay}
	{% endif %}
	M190 R{BED}
	{% endif %}
	
	{% if EXTRUDER > 0 %}
	_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=2
	M109 R{km.start_extruder_probing_temp}
	{% endif %}
	
	{% if km.start_home_z_at_temp and not bed_at_target %}
	G28 Z
	{% endif %}
	
	
	
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count
	if not params.PROBE_COUNT else
	params.PROBE_COUNT.split(",")|map('int')|list %}
	{% set dummy = params.__setitem__('PROBE_COUNT',(
	MESH_MULTIPLIER * (probe_count[0] - 1) + 1,
	MESH_MULTIPLIER * (probe_count[-1] - 1) + 1,)|join(',')) %}
	
	BED_MESH_CLEAR
	BED_MESH_CALIBRATE_FAST {%
	for k in params|reject('in',['BED','SURFACE'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor %}
	SAVE_CONFIG
	
	
	{% set dummy = None if True else "
	{% set dummy = params.MESH_MULTIPLIER|default(2) %}
	{% set dummy = params.SURFACE|default(active surface) %}
	" %}

[gcode_macro load_surface_mesh]
description = Attempts to load a mesh associated with the specified surface.
	Usage: LOAD_SURFACE_MESH [SURFACE=<surface>]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}
	{% if SURFACE != surfaces.active %}
	SET_SURFACE_ACTIVE SURFACE={SURFACE}
	{% endif %}
	
	{% if SURFACE in printer.bed_mesh.profiles %}
	{% set mesh = printer.bed_mesh.profiles[SURFACE].mesh_params %}
	{% set default = printer.configfile.settings.bed_mesh %}
	
	{% if mesh.min_x <= (default.mesh_min[0] + 0.5) and
	mesh.min_y <= (default.mesh_min[1] + 0.5) and
	mesh.max_x >= (default.mesh_max[0] - 0.5) and
	mesh.max_y >= (default.mesh_max[1] - 0.5) and
	mesh.x_count >= default.probe_count[0] and
	mesh.y_count >= default.probe_count[-1] %}
	
	BED_MESH_PROFILE LOAD={SURFACE}
	{action_respond_info("Loaded mesh: %s" | format(SURFACE,))}
	{% endif %}
	{% endif %}

[gcode_macro m300]
description = Emits and audible beep.
	Usage: M300 [P<duration>] [S<frequency>]
gcode = 
	{% set settings = printer.configfile.settings %}
	{% if "output_pin beeper" in printer %}
	{% set P = (params.P|default(100)|int, 0)|max %}
	{% set S = (params.S|default(1000)|int, 1)|max %}
	SET_PIN PIN=beeper VALUE={% if settings["output_pin beeper"].pwm %}{
	settings["output_pin beeper"].scale|default(1.0) * 0.5
	} CYCLE_TIME={ 1.0 / S }{% else %}1{% endif %}
	G4 P{P}
	SET_PIN PIN=beeper VALUE=0
	{% else %}
	{action_respond_info(
	"M300 is disabled. To enable create an [output_pin beeper] config.")}
	{% endif %}

[gcode_macro set_draw_params]
description = Sets the default parameters used by DRAW_LINE_TO.
	Usage: SET_DRAW_PARAMS [HEIGHT=<mm>] [WIDTH=<mm>] [FEEDRATE=<mm/m>]
variable_height = 0.2
variable_width = 0.0
variable_feedrate = 1200
gcode = 
	{% set dparams = printer["gcode_macro set_draw_params"] %}
	{% for k in params %}
	{% set kl = k|lower %}
	{% if kl in dparams %}
	{% if dparams[kl] is float %}
	{% set v = params[k]|float %}
	{% elif dparams[kl] is integer %}
	{% set v = params[k]|int %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=set_draw_params VARIABLE={kl} VALUE="{v}"
	{% endif %}
	{% endfor %}

[gcode_macro draw_line_to]
description = Extrudes a line of filament at the specified height and width from
	the current coordinate to the supplied XY coordinate. (The height is used only
	to calculate the extrusion volume.)
	Usage: DRAW_LINE_TO [X=<pos>] [Y=<pos>] [HEIGHT=<mm>] [WIDTH=<mm>]
	[FEEDRATE=<mm/m>]
gcode = 
	{% set dparams = printer["gcode_macro set_draw_params"] %}
	{% set position = printer.gcode_move.gcode_position %}
	{% set X = params.X|default(position.x)|float %}
	{% set Y = params.Y|default(position.y)|float %}
	{% set HEIGHT = params.HEIGHT|default(dparams.height)|float %}
	{% set WIDTH = params.WIDTH|default(dparams.width)|float %}
	{% set FEEDRATE = params.FEEDRATE|default(dparams.feedrate)|int %}
	
	{% set distance = ((X - position.x) ** 2 + (Y - position.y) ** 2) ** 0.5 %}
	
	{% set filament_area = 3.14159 *
	(printer.configfile.settings[
	printer.toolhead.extruder].filament_diameter ** 2) / 4 %}
	{% set E = distance * ((WIDTH * HEIGHT) / filament_area) %}
	
	
	_KM_SAVE_GCODE_STATE NAME=_KM_PURGE
	G90
	G92 E0.0
	G1 X{"%.3f" % X} Y{"%.3f" % Y} E{"%.5f" % E} F{FEEDRATE}
	_KM_RESTORE_GCODE_STATE NAME=_KM_PURGE MOVE=0

[gcode_macro draw_purge_line]
description = Purges the specified length of filament as a line (or rows of
	lines) in front of the supplied print area. If no print area is specified the
	purge lines are drawn at the front edge of the maximum printable area. If no
	printable area is set it defaults to the XY axis limits.
	Usage: DRAW_PURGE_LINE [PRINT_MIN=<X,Y>] [PRINT_MAX=<X,Y>] [HEIGHT=<mm>]
	[WIDTH=<mm>] [LENGTH=<mm>]
gcode = 
	
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set origin = printer.gcode_move.homing_origin %}
	{% set dummy = km.__setitem__('print_min', (km.print_min[0] - origin.x,
	km.print_min[1] - origin.y)) %}
	{% set dummy = km.__setitem__('print_max', (km.print_max[0] - origin.x,
	km.print_max[1] - origin.y)) %}
	
	{% if "PRINT_MIN" in params %}
	{% set PRINT_MIN = (
	(params.PRINT_MIN.split(",")[0]|float, km.print_min[0])|max,
	(params.PRINT_MIN.split(",")[1]|float, km.print_min[1])|max
	) %}
	{% else %}
	{% set PRINT_MIN = km.print_min %}
	{% endif %}
	{% if "PRINT_MAX" in params %}
	{% set PRINT_MAX = (
	(params.PRINT_MAX.split(",")[0]|float, km.print_max[0])|min,
	(params.PRINT_MAX.split(",")[1]|float, km.print_max[1])|min
	) %}
	{% else %}
	{% set PRINT_MAX = km.print_max %}
	{% endif %}
	{% set extruder = printer.toolhead.extruder|string %}
	{% set HEIGHT = params.HEIGHT|default(
	printer.configfile.settings[extruder].nozzle_diameter * 0.625)|float %}
	{% set WIDTH = params.WIDTH|default(
	printer.configfile.settings[extruder].nozzle_diameter * 1.25)|float %}
	{% set LENGTH = params.LENGTH|default(km.start_purge_length)|float %}
	
	{% set dparams = printer["gcode_macro set_draw_params"] %}
	{% set filament_area = 3.14159 *
	(printer.configfile.settings[extruder].filament_diameter ** 2) / 4 %}
	{% set purge_length = (LENGTH * filament_area) / (WIDTH * HEIGHT) %}
	{% set printable_length = PRINT_MAX[0] - PRINT_MIN[0] %}
	{% set purge_rows = (purge_length / printable_length)|round(0,'ceil')|int %}
	{% set printable_inset = (printable_length - purge_length / purge_rows) / 2 %}
	{% set PRINT_MIN = (PRINT_MIN[0] + printable_inset, PRINT_MIN[1]) %}
	{% set PRINT_MAX = (PRINT_MAX[0] - printable_inset, PRINT_MAX[1]) %}
	
	{% set y_start = (km.print_min[1], PRINT_MIN[1] - km.start_purge_clearance -
	(purge_rows + 0.5) * WIDTH )|max %}
	G90
	
	G1 X{"%.3f" % (PRINT_MIN[0] - 30, km.print_min[0])|max} Y{
	"%.3f" % (y_start - 10, km.print_min[1])|max} F{km.travel_speed_xy}
	
	G1 X{"%.3f" % (PRINT_MIN[0] - 2, km.print_min[0])|max} Y{"%.3f" % y_start} Z{
	"%.4f" % HEIGHT} F{km.travel_speed_xy}
	
	G92 E0.0
	G1 E{"%.3f" % km.start_purge_prime_length} F{km.load_priming_speed}
	G92 E0.0
	
	G1 X{"%.3f" % PRINT_MIN[0]} F{km.travel_speed_xy}
	{% for n in range(purge_rows - 1) %}
	{% set x_pos = PRINT_MIN[0] if n % 2 else PRINT_MAX[0] %}
	DRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{
	WIDTH * n + y_start}"
	DRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{
	WIDTH * (n + 1) + y_start}"
	{% endfor %}
	{% set x_pos = PRINT_MAX[0] if purge_rows % 2 else PRINT_MIN[0] %}
	DRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{
	WIDTH * (purge_rows - 1) + y_start}"
	G92 E0.0

[gcode_macro _check_fan_params]
gcode = 
	{% set MAXIMUM = params.MAXIMUM|default(
	printer["gcode_macro set_fan_scaling"].maximum)|int %}
	{% set MINIMUM = params.MINIMUM|default(
	printer["gcode_macro set_fan_scaling"].minimum)|int %}
	
	{% if params.SCALE and params.SCALE|float <= 0 %}
	{ action_raise_error("SCALE must be a positive value.") }
	{% elif MINIMUM < 0 or MINIMUM > 255 %}
	{ action_raise_error("MINIMUM must be between 0 and 255.") }
	{% elif MAXIMUM < 0 or MAXIMUM > 255 %}
	{ action_raise_error("MAXIMUM must be between 0 and 255.") }
	{% elif params.SPEED and (params.SPEED|int < 0 or params.SPEED|int > 255) %}
	{ action_raise_error("SPEED must be between 0 and 255.") }
	{% elif params.BOOST and (params.BOOST|int < 0 or params.BOOST|int > 255) %}
	{ action_raise_error("BOOST must be between 0 and 255.") }
	{% elif MINIMUM > MAXIMUM %}
	{ action_raise_error("MINIMUM must be less than or equal to MAXIMUM.") }
	{% endif %}

[gcode_macro set_fan_scaling]
description = Sets fan scaling factors applied to M106 command. If a speed is
	provided it will be adjusted according to the scaling parameters.
	Usage: SET_FAN_SCALING [SCALE=<scale>] [BOOST=<boost>] [MAXIMUM=<max>]
	[MINIMUM=<min>] [SPEED=<speed>]
variable_scale = 1.0
variable_boost = 0
variable_minimum = 0
variable_maximum = 255
variable_real_speed = 0
gcode = 
	_CHECK_FAN_PARAMS{% for k in params %}{' '~k~'='~params[k]}{% endfor %}
	{% set SCALE = params.SCALE|default(scale)|float %}
	{% set BOOST = params.BOOST|default(boost)|float %}
	{% set MAXIMUM = params.MAXIMUM|default(maximum)|int %}
	{% set MINIMUM = params.MINIMUM|default(minimum)|int %}
	{% set SPEED = params.SPEED|default(real_speed)|int %}
	
	{% if SCALE != 1.0 or BOOST != 0 or MAXIMUM != 255 or MINIMUM != 0 %}
	{action_respond_info("Fan: Scale: %.2f Minimum:%i Maximum: %i Speed: %i"|
	format(SCALE, MINIMUM, MAXIMUM, SPEED))}
	{% endif %}
	
	
	{% if params|length > 0 %}
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=scale VALUE="{SCALE}"
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=boost VALUE="{BOOST}"
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=minimum VALUE="{MINIMUM}"
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=maximum VALUE="{MAXIMUM}"
	
	M106 S{SPEED}
	{% endif %}
	
	{% set dummy = None if True else "
	{% set dummy = params.SCALE|default(1.0)|float %}
	{% set dummy = params.BUMP|default(0)|int %}
	{% set dummy = params.MAXIMUM|default(255)|int %}
	{% set dummy = params.MINIMUM|default(0)|int %}
	{% set dummy = params.SPEED|default(current speed)|int %}
	" %}

[gcode_macro reset_fan_scaling]
description = Clears all fan scaling factors.
	Usage: RESET_FAN_SCALING
gcode = 
	SET_FAN_SCALING SCALE=1.0 BOOST=0 MAXIMUM=255 MINIMUM=0

[gcode_macro m106]
description = Wraps M106 to implement scaling overrides.
rename_existing = M106.6245197
gcode = 
	{% set S = params.S|default(255)|int %}
	{% set scale = printer["gcode_macro set_fan_scaling"] %}
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=real_speed VALUE="{S}"
	M106.6245197 S{((((S + scale.boost) * scale.scale) | round | int,
	scale.minimum) | max, scale.maximum) | min}

[gcode_macro _load_unload]
gcode = 
	{% set saved_extruder = printer.toolhead.extruder %}
	{% set EXTRUDER = params.EXTRUDER|default(saved_extruder)|lower %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% set BEEPS = params.BEEPS|default(8)|int if "output_pin beeper" in printer
	else 0 %}
	{% set default_minimum = km.load_min_temp if km.load_min_temp else
	(printer.configfile.settings[EXTRUDER].min_extrude_temp + 5) %}
	{% if 'MINIMUM' in params %}
	{% set MINIMUM = params.MINIMUM|int %}
	
	{% elif printer.pause_resume.is_paused and printer[EXTRUDER].target == 0 and
	printer["gcode_macro resume"].saved_extruder_temp %}
	{% set MINIMUM = printer["gcode_macro resume"].saved_extruder_temp %}
	
	{% elif printer[EXTRUDER].target > default_minimum %}
	{% set MINIMUM = printer[EXTRUDER].target %}
	{% else %}
	{% set MINIMUM = default_minimum %}
	{% endif %}
	{% if MINIMUM < printer.configfile.settings[EXTRUDER].min_extrude_temp %}
	{ action_raise_error("Extrude below minimum temp.") }
	{% elif printer.pause_resume.is_paused %}
	
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"
	{% endif %}
	{% set SPEED = params.SPEED|default(km.load_speed)|int %}
	{% set priming_length = km.load_priming_length %}
	{% set LENGTH = params.LENGTH|default(km.load_length)|float - priming_length%}
	{% if LENGTH < 0 %}
	{% set priming_length = (priming_length + LENGTH, 0)|max %}
	{% set LENGTH = 0 %}
	{% endif %}
	SAVE_GCODE_STATE NAME=_KM_LOAD_UNLOAD
	{% if EXTRUDER != saved_extruder%}
	ACTIVATE_EXTRUDER EXTRUDER={EXTRUDER}
	{% endif %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	{% if not printer.extruder.can_extrude or
	printer[EXTRUDER].target < default_minimum %}
	{action_respond_info("Preheating %s to %d" | format(EXTRUDER, MINIMUM))}
	M109 S{MINIMUM}
	{% endif %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS={"filament_load"
	if params.LOAD|int else "filament_unload"}
	M83
	{% set priming_speed = (km.load_priming_speed, SPEED)|min %}
	{% if params.LOAD|int %}
	G0 E{LENGTH} F{SPEED}
	G0 E{priming_length} F{priming_speed}
	G0 E{'%.4f' % -printer["gcode_macro resume"].saved_e} F{km.load_speed}
	{% else %}
	{% set pre_prime_distance = 5.0 %}
	{% set shaping_moves = 5 %}
	{% set shaping_distance = (shaping_moves * (1 + shaping_moves)/20) %}
	
	G0 E{pre_prime_distance} F{SPEED}
	G4 P500
	G0 E{'%.4f' % -(priming_length - shaping_distance)} F{SPEED}
	
	
	{% for i in range(1, shaping_moves + 1) %}
	G0 E2 F{priming_speed}
	G0 E-{2 + (0.1 * i)} F{priming_speed}
	{% endfor %}
	
	G0 E{'%.4f' % -(LENGTH + pre_prime_distance)} F{SPEED}
	{% endif %}
	RESTORE_GCODE_STATE NAME=_KM_LOAD_UNLOAD
	
	
	{% for i in range(BEEPS) %}
	M300 P100
	G4 P200
	{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro LOAD_FILAMENT]
description = Loads filament to the extruder.
	Usage: LOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]
	[EXTRUDER=<extruder>] [MINIMUM=<temperature>]
	[BEEPS=<beep count on completion>]
gcode = 
	_LOAD_UNLOAD LOAD=1{% for k in params
	%}{' '~k~'="'~params[k]~'"'}{% endfor %}
	
	
	{% set dummy = None if True else "
	M109
	{% set dummy = params.LENGTH|default(variable_load_length)|float %}
	{% set dummy = params.SPEED|default(variable_load_speed)|float %}
	{% set dummy = params.EXTRUDER|default(current extruder) %}
	{% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}
	{% set dummy = params.BEEPS|default(10)|int %}
	" %}

[gcode_macro UNLOAD_FILAMENT]
description = Unloads filament from the extruder.
	Usage: UNLOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]
	[EXTRUDER=<extruder>] [MINIMUM=<temperature>]
	[BEEPS=<beep count on completion>]
gcode = 
	_LOAD_UNLOAD LOAD=0{% for k in params
	%}{' '~k~'="'~params[k]~'"'}{% endfor %}
	
	
	{% set dummy = None if True else "
	M109
	{% set dummy = params.LENGTH|default(variable_load_length)|float %}
	{% set dummy = params.SPEED|default(variable_load_speed)|float %}
	{% set dummy = params.EXTRUDER|default(default extruder) %}
	{% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}
	{% set dummy = params.BEEPS|default(10)|int %}
	" %}

[gcode_macro _pause_inner_m700]
gcode = 
	{% set extruder = "extruder" ~ params.T|replace('0', '')
	if "T" in params else printer.toolhead.extruder %}
	{% if extruder != printer.toolhead.extruder%}
	ACTIVATE_EXTRUDER EXTRUDER={extruder}
	{% endif %}
	
	{% set z_param = (' Z="%f"' % params.Z) if 'Z' in params else "" %}
	
	{% if printer.idle_timeout.state|string == "Printing" %}
	PAUSE B="{0}" P=2{z_param}
	{% elif not printer.pause_resume.is_paused%}
	PARK B="{0}" P=2{z_param}
	{% endif %}

[gcode_macro m701]
description = Pauses/parks the toolhead then loads filament to the extruder.
	Usage: M701 [L<distance>] [Z<pos>] [T<extruder>]
gcode = 
	{% if 'U' in params %}
	{% if not 'L' in params %}
	RESPOND TYPE=error MSG="Argument \"U\" substituted for missing \"L\"."
	{% set dummy = params.__setitem__("L", params.U) %}
	{% else %}
	RESPOND TYPE=error MSG="Invalid argument \"U\" ignored."
	{% endif %}
	{% endif %}
	
	_PAUSE_INNER_M700 {% for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	LOAD_FILAMENT BEEPS="{10}" LENGTH={
	params.L|default(printer["gcode_macro _km_globals"].load_length)|float}

[gcode_macro m702]
description = Pauses/parks the toolhead then unloads filament from the extruder.
	Usage: M702 [U<distance>] [Z<pos>] [T<extruder>]
gcode = 
	{% if 'L' in params %}
	{% if not 'U' in params %}
	RESPOND TYPE=error MSG="Argument \"L\" substituted for missing \"U\"."
	{% set dummy = params.__setitem__("U", params.L) %}
	{% else %}
	RESPOND TYPE=error MSG="Invalid argument \"L\" ignored."
	{% endif %}
	{% endif %}
	
	_PAUSE_INNER_M700 {% for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	UNLOAD_FILAMENT BEEPS="{10}" LENGTH={
	params.U|default(printer["gcode_macro _km_globals"].load_length)|float}

[gcode_macro _km_globals]
variable_bed_surface_max_name_length = 10
variable_bed_surfaces = ['default']
variable_load_length = 90.0
variable_load_min_temp = 0
variable_load_priming_length = 20.0
variable_load_priming_speed = 200
variable_load_speed = 1200
variable_menu_show_octoprint = True
variable_menu_show_sdcard = True
variable_menu_temperature = [
	{'name' : 'PLA',  'extruder' : 200, 'bed' : 60},
	{'name' : 'PETG', 'extruder' : 230, 'bed' : 85},
	{'name' : 'ABS',  'extruder' : 245, 'bed' : 110}]
variable_park_x = 0.0
variable_park_y = 0.0
variable_park_z = 20.0
variable_print_min = ()
variable_print_max = ()
variable_pressure_advance_scale = -1.0
variable_probe_mesh_padding = 5.0
variable_probe_min_count = 3
variable_probe_count_scale = 1.0
variable_start_bed_heat_delay = 2000
variable_start_bed_heat_overshoot = 2.0
variable_start_clear_adjustments_at_end = True
variable_start_end_park_y = 0.0
variable_start_extruder_preheat_scale = 0.5
variable_start_extruder_probing_temp = 0
variable_start_home_z_at_temp = True
variable_start_level_bed_at_temp = True
variable_start_purge_clearance = 2.0
variable_start_purge_length = 0.0
variable_start_purge_prime_length = 12.0
variable_start_quad_gantry_level_at_temp = True
variable_start_random_placement_max = 0
variable_start_random_placement_padding = 10.0
variable_start_try_saved_surface_mesh = False
variable_start_z_tilt_adjust_at_temp = True
variable_travel_speed_xy = 3000
variable_travel_speed_z = 600
description = Initializes our globals, including any _km_options overrides.
gcode = 
	
	
	
	
	
	
	
	
	{% set required_sections = {"heater_bed" : None,
	"extruder" : None,
	"gcode_macro _km_options" : None,
	"idle_timeout" : ("gcode", "_KM_IDLE_TIMEOUT"),
	"pause_resume" : None,
	"respond" : None,
	"save_variables" : None,
	"virtual_sdcard" :
	("on_error_gcode", "CANCEL_PRINT")
	} %}
	{% set warn_removed = {
	"start_extruder_set_target_before_level" :
	"The start_extruder_set_target_before_level option has been removed. "
	"Use the start_extruder_probing_temp option instead to set a fixed "
	"probing temperature.",
	"start_gcode_before_print" :
	"The start_gcode_before_print option has been removed. The same effect "
	"can now be achieved by inserting custom gcode before the "
	"_PRINT_START_PHASE_PURGE line in your slicer's start gcode, or by "
	"wrapping the _PRINT_START_PHASE_PURGE macro. See the Slicer "
	"Configuration section in the readme for more information.",
	"velocity_decel_scale" :
	"The velocity_decel_scale option has been removed. Klipper's input "
	"shaping provides a superior mechanism for improving print quality "
	"at higher speeds.",
	} %}
	{% set output = [] %}
	{% for s in required_sections %}
	{% set f = required_sections[s][0] if required_sections[s] else None %}
	{% set v = required_sections[s][1] if required_sections[s] else None %}
	{% if s not in printer.configfile.config %}
	{% set dummy = output.append("Missing [%s] section.\n" | format(s)) %}
	{% elif f and
	(v not in printer.configfile.config[s][f]|default("")|upper) %}
	{% set dummy = output.append("Missing %s in %s for [%s] section.\n"
	| format(v, f, s)) %}
	{% endif %}
	{% endfor %}
	{% if output %}
	{ action_emergency_stop((
	"required printer.cfg section(s) missing:\n"
	~ output | join("\n")) ~
	"See readme: https://github.com/jschuh/klipper-macros\x23klipper-setup")
	}
	{% endif %}
	
	
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_level_bed_at_temp VALUE="{
	1 if printer.bed_mesh is defined else 0}"
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_quad_gantry_level_at_temp VALUE="{
	1 if printer.quad_gantry_level is defined else 0}"
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_z_tilt_adjust_at_temp VALUE="{
	1 if printer.z_tilt is defined else 0}"
	{% set toolhead = printer.toolhead %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=print_min VALUE="{
	(toolhead.axis_minimum.x, toolhead.axis_minimum.y)}"
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=print_max VALUE="{
	(toolhead.axis_maximum.x, toolhead.axis_maximum.y)}"
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_end_park_y VALUE="{
	toolhead.axis_maximum.y}"
	{% set settings = printer.configfile.settings %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_home_z_at_temp VALUE="{
	1 if ("stepper_z" in settings and
	settings.stepper_z.endstop_pin.split()|join("")|lower ==
	"probe:z_virtual_endstop") else 0}"
	
	{% set options = printer["gcode_macro _km_options"] %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	
	{% if options.park_x|default("")|string|lower == "min" %}
	{% set dummy = options.__setitem__("park_x",
	printer.configfile.settings.stepper_x.position_min) %}
	{% elif options.park_x|default("")|string|lower == "max" %}
	{% set dummy = options.__setitem__("park_x",
	printer.configfile.settings.stepper_x.position_max) %}
	{% endif %}
	{% if options.park_y|default("")|string|lower == "min" %}
	{% set dummy = options.__setitem__("park_y",
	printer.configfile.settings.stepper_y.position_min) %}
	{% elif options.park_y|default("")|string|lower == "max" %}
	{% set dummy = options.__setitem__("park_y",
	printer.configfile.settings.stepper_y.position_max) %}
	{% endif %}
	{% if options.start_end_park_y|default("")|string|lower == "min" %}
	{% set dummy = options.__setitem__("start_end_park_y",
	printer.configfile.settings.stepper_y.position_min) %}
	{% elif options.start_end_park_y|default("")|string|lower == "max" %}
	{% set dummy = options.__setitem__("start_end_park_y",
	printer.configfile.settings.stepper_y.position_max) %}
	{% endif %}
	{% if options.park_z|default("")|string|lower == "min" %}
	{% set dummy = options.__setitem__("park_z",
	printer.configfile.settings.stepper_z.position_min) %}
	{% elif options.park_z|default("")|string|lower == "max" %}
	{% set dummy = options.__setitem__("park_z",
	printer.configfile.settings.stepper_z.position_max) %}
	{% endif %}
	
	
	{% for k in options %}
	{% if k not in km %}
	{% if k in warn_removed %}
	{action_respond_info(warn_removed[k])}
	{% else %}
	{% set dummy = output.append("%s is not valid for _KM_OPTIONS." |
	format(k)) %}
	{% endif %}
	{% elif km[k] is string %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k
	} VALUE="'{options[k]|replace('\\','\\\\')|replace('\'','\\\'')
	|replace('\"','\\\"')}'"
	{% elif km[k] is float %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k
	} VALUE="{options[k]|float}"
	{% elif km[k] is integer or km[k] is boolean %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k} VALUE="{options[k]|int}"
	{% elif km[k] is mapping %}
	{% if options[k] is not mapping %}
	{% set dummy = output.append("%s requires a mapping type." |
	format(k)) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k
	} VALUE="{options[k]|replace('\"','\\\"')}"
	{% elif km[k] is sequence %}
	{% if options[k] is not sequence %}
	{% set dummy = output.append("%s requires a sequence type." |
	format(k)) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k
	} VALUE="{options[k]|replace('\"','\\\"')}"
	{% else %}
	{% set dummy = output.append("%s is not a valid type for _KM_OPTIONS." |
	format(k)) %}
	{% endif %}
	{% endfor %}
	
	{% if "homing_override" in printer.configfile.config %}
	{% for l in printer.configfile.config.homing_override.gcode.split("\n") %}
	{% if " g28 " in (" " ~ l.split("\x23")[0].split(";")[0]|lower ~ " ") %}
	{% set dummy = output.append(
	"G28 in [homing_override] gcode. Replace with G28.6245197 to "
	"fix recursive macro call.\n"
	"See readme: https://github.com/jschuh/klipper-macros\x23g28") %}
	{% endif %}
	{% endfor %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=check_km_config VARIABLE=load_errors VALUE="{
	output|replace('\"','\\\"')}"
	M400

[delayed_gcode INIT_GLOBALS]
initial_duration = 1
gcode = 
	LIST_MACROS SILENT=1
	_KM_GLOBALS
	
	CHECK_KM_CONFIG
	_INIT_SURFACES
	BED_MESH_CHECK
	
	SET_DRAW_PARAMS WIDTH="{printer.configfile.settings.extruder.nozzle_diameter}"
	
	_KM_OPTIONS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready

[gcode_macro check_km_config]
variable_load_errors = []
description = Checks global variables and throws an error on any invalid values.
	Does nothing if the config has no errors.
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set toolhead = printer.toolhead %}
	{% set output = load_errors %}
	{% if km.park_x > toolhead.axis_maximum.x or
	km.park_x < toolhead.axis_minimum.x %}
	{% set dummy = output.append("park_x is invalid.") %}
	{% endif %}
	{% if km.park_y > toolhead.axis_maximum.y or
	km.park_y < toolhead.axis_minimum.y %}
	{% set dummy = output.append("park_y is invalid.") %}
	{% endif %}
	{% if km.park_z > toolhead.axis_maximum.z or
	km.park_z < toolhead.axis_minimum.z %}
	{% set dummy = output.append("park_z is invalid.") %}
	{% endif %}
	{% if km.print_max[0] > toolhead.axis_maximum.x or
	km.print_max[1] > toolhead.axis_maximum.y %}
	{% set dummy = output.append("print_max is invalid.") %}
	{% endif %}
	{% if km.print_min[0] < toolhead.axis_minimum.x or
	km.print_min[1] < toolhead.axis_minimum.y %}
	{% set dummy = output.append("print_min is invalid.") %}
	{% endif %}
	{% if km.start_extruder_preheat_scale > 1.0 or
	km.start_extruder_preheat_scale < 0.0 %}
	{% set dummy = output.append("extruder_preheat_scale is invalid.") %}
	{% endif %}
	{% if km.load_length >
	printer.configfile.settings["extruder"].max_extrude_only_distance %}
	{% set dummy = output.append(
	"load_length exceeds max_extrude_only_distance.") %}
	{% endif %}
	{% if km.load_length < km.load_priming_length %}
	{% set dummy = output.append(
	"load_length is shorter than load_priming_length.") %}
	{% endif %}
	{% if km.load_length < 0.0 %}
	{% set dummy = output.append("load_length is negative.") %}
	{% endif %}
	{% if km.load_priming_length < 0.0 %}
	{% set dummy = output.append("load_priming_length is negative.") %}
	{% endif %}
	
	
	{% if output %}
	{ action_raise_error(output|sort|join('\nError: ')) }
	{% endif %}
	M400

[gcode_macro kmvars]
description = Lists global variables used by klipper-macros.
	Usage: KMVARS [SEARCH=<search_string>]
gcode = 
	{% set SEARCH = params.SEARCH|default(params.S|default(""))|lower %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set output = [] %}
	{% for k in km %}
	{% if SEARCH in k %}
	{% set dummy = output.append(k ~ ": " ~ km[k]) %}
	{% endif %}
	{% endfor %}
	{ action_respond_info(output|sort|join('\n')) }

[gcode_macro check_macro_docs]
description = Lists macros lacking proper documentation.
	Usage: CHECK_MACRO_DOCS [USAGE=<0|1>] [HIDDEN=<1|0>] [RENAMED=<1|0>]
gcode = 
	{% set USAGE = params.USAGE|default(0)|int %}
	{% set HIDDEN = params.HIDDEN|default(0)|int %}
	{% set RENAMED = params.RENAMED|default(0)|int %}
	{% set output = [] %}
	{%set config = printer.configfile.config %}
	{% for k in config|sort %}
	{% if k.startswith("gcode_macro") %}
	{% set name = k.split()[1] %}
	{% set desc = config[k].description|default("") %}
	{% set is_renamed = config[k].rename_existing|default("") %}
	{% if (not desc or (USAGE and not "Usage: "~name.upper() in desc)) and
	(HIDDEN or not name.startswith('_')) and (RENAMED or is_renamed) %}
	{% set dummy = output.append("%s&nbsp;%s: missing %s."
	| format("*" if is_renamed else "&nbsp;", name,
	"description" if not desc else "usage")) %}
	{% endif %}
	{% endif %}
	{% endfor %}
	{action_respond_info(output|join("\n"))}

[gcode_macro listvars]
description = Lists per-macro variables with a name containing SEARCH. This is
	useful for debugging macros by allowing you to probe printer state. Be very
	careful, however, as an overly broad SEARCH parameter can take a long time
	to process and potentially hang or crash klipper.
	Usage: LISTVARS SEARCH=<search_string>
gcode = 
	
	{% if 'SEARCH' not in params and 'S' not in params %}
	{ action_raise_error("Must provide a SEARCH parameter.") }
	{% endif %}
	{% set SEARCH = params.SEARCH|default(params.S)|lower %}
	{% set ns = namespace() %}
	{% set output = [] %}
	{% for item in printer %}
	{% if item is not string %}
	{% set ns.path = ['printer', "[%s]" % (item|string), ''] %}
	{% elif ' ' in item %}
	{% set ns.path = ['printer', "['%s']" % (item), ''] %}
	{% else %}
	{% set ns.path = ['printer.', item, ''] %}
	{% endif %}
	
	{% if SEARCH in ns.path|lower %}
	{% set dummy = output.append(ns.path|join) %}
	{% endif %}
	
	{% if printer[item].items() %}
	{% for childkey, child in printer[item].items() recursive %}
	{% set ns.path = ns.path[:loop.depth|int + 1] %}
	{% if childkey is not string %}
	{% set null = ns.path.append("[%s]" % (childkey|string)) %}
	{% elif ' ' in childkey %}
	{% set null = ns.path.append("['%s']" % (childkey)) %}
	{% else %}
	{% set null = ns.path.append(".%s" % (childkey)) %}
	{% endif %}
	
	{% if child is mapping  %}
	{loop(child.items())}
	{% else %}
	{% if SEARCH in ns.path|lower %}
	{% set dummy = output.append("%s : %s" % (ns.path|join, child)) %}
	{% endif %}
	{% endif %}
	{% endfor %}
	{% endif %}
	{% endfor %}
	{ action_respond_info(output|join("\n")) }

[gcode_macro list_macros]
description = Lists registered macros (and optionally show variable state).
	Usage: LISTVARS SEARCH=<search_string> VARS=<0|1> SILENT=<0|1>
variable_macros = {}
gcode = 
	
	{% if not macros %}
	{% set renames = {} %}
	{% for k in printer.configfile.config %}
	{% if k.lower().startswith("gcode_macro") and
	printer.configfile.config[k].rename_existing %}
	{% set name = k.split(None, 1)[1] | lower %}
	{% set dummy = renames.__setitem__(name,
	[printer.configfile.config[k].rename_existing|lower] +
	renames[name]|default([])) %}
	{% endif %}
	{% endfor %}
	{% for k in printer %}
	{% if k.lower().startswith("gcode_macro") %}
	{% set name = k.split(None, 1)[1] | lower %}
	{% set dummy = macros.__setitem__(name, renames[name]|default([])) %}
	{% endif %}
	{% endfor %}
	{% endif %}
	
	{% if params.SILENT|default(0)|int == 0 %}
	_LIST_MACROS_DISPLAY {rawparams}
	{% endif %}

[gcode_macro _list_macros_display]
gcode = 
	{% set SEARCH = params.SEARCH | default(params.S) | default("") | lower %}
	{% set VARS = params.VARS | default(params.V) | default(0) | int != 0 %}
	
	{% set macros = printer["gcode_macro list_macros"].macros %}
	{% set output = [] %}
	{% for k in macros %}
	{% if SEARCH in k | lower %}
	{% set line = k ~ ((" (renames: %s)" % (macros[k]|join(","))) if macros[k]
	else "") %}
	{% set outvars = [] %}
	{% if VARS %}
	{% for v in printer["gcode_macro " ~ k] | sort %}
	{% set dummy = outvars.append("\n* %s: %s" %
	(v, printer["gcode_macro " ~ k][v]|string)) %}
	{% endfor %}
	{% endif %}
	{% set dummy = output.append(line + outvars | join("")) %}
	{% endif %}
	{% endfor %}
	{ action_respond_info(output | sort | join("\n")) }

[gcode_macro set_heater_temperature_scaled]
gcode = 
	{% set HEATER = params.HEATER.lower() %}
	{% set TARGET = params.TARGET|default(0.0)|float %}
	{% set scaled_heaters =
	printer["gcode_macro set_heater_scaling"].scaled_heaters %}
	{% if HEATER in scaled_heaters %}
	{% set scales = scaled_heaters[HEATER] %}
	{% set dummy = scales.__setitem__("real_target", TARGET) %}
	{%if TARGET > 0.0 %}
	{% set TARGET = (((TARGET + scales.bump) * scales.scale, scales.minimum)
	| max, scales.maximum)|min %}
	{% endif %}
	{% endif %}
	SET_HEATER_TEMPERATURE HEATER="{HEATER}" TARGET={TARGET}

[gcode_macro temperature_wait_scaled]
gcode = 
	{% set SENSOR = params.SENSOR.lower() %}
	{% set heater = SENSOR if not SENSOR.startswith("heater_generic") else
	SENSOR.split()[1] %}
	{% set scaled_heaters =
	printer["gcode_macro set_heater_scaling"].scaled_heaters %}
	{% if heater in scaled_heaters %}
	{% set scales = scaled_heaters[heater] %}
	{% if "MINIMUM" in params and MINIMUM > 0.0 %}
	{% set MINIMUM = (((MINIMUM + scales.bump) * scales.scale, scales.minimum)
	| max, scales.maximum)|min %}
	{% endif %}
	{% if "MAXIMUM" in params and MAXIMUM > 0.0 %}
	{% set MAXIMUM = (((MAXIMUM + scales.bump) * scales.scale, scales.minimum)
	| max, scales.maximum)|min %}
	{% endif %}
	{% else %}
	{% set settings = printer.configfile.settings[SENSOR] %}
	{% set MINIMUM = params.MINIMUM|default(settings.min_temp) %}
	{% set MAXIMUM = params.MAXIMUM|default(settings.max_temp) %}
	{% endif %}
	{% if printer[sensor].temperature < MINIMUM or
	printer[sensor].temperature > MAXIMUM %}
	TEMPERATURE_WAIT SENSOR="{SENSOR}" MINIMUM={MINIMUM} MAXIMUM={MAXIMUM}
	{% endif %}

[gcode_macro _gcode_wait_wrapper_inner]
gcode = 
	
	
	{% set sensor = params.HEATER if params.HEATER in
	printer.heaters.available_heaters
	else ("heater_generic " ~ params.HEATER) %}
	{% set target = printer[sensor].target %}
	{% if 'R' in params and target > 0.0 %}
	{% set T = params.T|default("") %}
	M{params.M}.6245197 S{target} { (" T"~T) if T else "" }
	{% elif printer[sensor].temperature < target %}
	TEMPERATURE_WAIT SENSOR="{sensor}" MINIMUM={target}
	{% endif %}

[gcode_macro _gcode_wait_wrapper]
gcode = 
	{% set target = params.S | default(params.R | default(0))| float %}
	SET_HEATER_TEMPERATURE_SCALED HEATER="{params.HEATER}" TARGET={target}
	_GCODE_WAIT_WRAPPER_INNER{%
	for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}

[gcode_macro m109]
rename_existing = M109.6245197
gcode = 
	{% set extruder = "extruder" ~ params.T|replace('0', '')
	if "T" in params else printer.toolhead.extruder %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating
	_GCODE_WAIT_WRAPPER HEATER={extruder}{%
	for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro m190]
rename_existing = M190.6245197
gcode = 
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=bed_heating
	_GCODE_WAIT_WRAPPER HEATER=heater_bed {%
	for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro m191]
description = Sets chamber temperature (with wait for heating).
	Usage: M191 [S<temp>]
gcode = 
	
	{% if "R" in params %}
	{% set dummy = params.__setitem__("S", params.R) %}
	{% endif %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=chamber_heating
	_GCODE_WAIT_WRAPPER HEATER=chamber {%
	for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro m104]
rename_existing = M104.6245197
gcode = 
	{% set extruder = "extruder" ~ params.T|replace('0', '')
	if "T" in params else printer.toolhead.extruder %}
	SET_HEATER_TEMPERATURE_SCALED HEATER={extruder} TARGET={params.S|default(0)}

[gcode_macro m140]
rename_existing = M140.6245197
gcode = 
	SET_HEATER_TEMPERATURE_SCALED HEATER=heater_bed TARGET={params.S|default(0)}

[gcode_macro m141]
description = Sets chamber temperature.
	Usage: M141 [S<temp>]
gcode = 
	SET_HEATER_TEMPERATURE_SCALED HEATER=chamber TARGET={params.S|default(0)}

[gcode_macro _check_heater_params]
gcode = 
	{% set HEATER = params.HEATER|lower %}
	{% set sensor = params.HEATER %}
	{% if HEATER not in printer.heaters.available_heaters %}
	{% set sensor = "heater_generic " ~ HEATER %}
	{% if sensor not in printer.heaters.available_heaters %}
	{ action_raise_error("The value '%s' is not valid for HEATER"
	| format(HEATER)) }
	{% endif %}
	{% endif %}
	{% set settings = printer.configfile.settings[sensor] %}
	{% set scaled_heaters =
	printer["gcode_macro set_heater_scaling"].scaled_heaters %}
	{% if HEATER is in scaled_heaters %}
	{% set scales = scaled_heaters[HEATER] %}
	{% else %}
	{% set scales = { "scale": 1.0, "bump": 0.0, "minimum": settings.min_temp,
	"maximum": settings.max_temp,
	"real_target": printer[sensor].target} %}
	{% endif %}
	{% set SCALE = params.SCALE|default(scales.scale)|float %}
	{% set BUMP = params.BUMP|default(scales.bump)|float %}
	{% set MINIMUM = params.MINIMUM|default(scales.minimum)|float %}
	{% set MAXIMUM = params.MAXIMUM|default(scales.maximum)|float %}
	
	{% if SCALE <= 0 %}
	{ action_raise_error("SCALE must be a positive value.") }
	{% elif MINIMUM < settings.min_temp or MINIMUM > settings.max_temp %}
	{ action_raise_error("MINIMUM must be between %.1f and %.1f" |
	format(settings.min_temp, settings.max_temp)) }
	{% elif MAXIMUM < settings.min_temp or MAXIMUM > settings.max_temp %}
	{ action_raise_error("MAXIMUM must be between %.1f and %.1f" |
	format(settings.min_temp, settings.max_temp)) }
	{% elif MINIMUM >= MAXIMUM %}
	{ action_raise_error("MINIMUM must be less than MAXIMUM.") }
	{% elif "TARGET" in params and (params.TARGET|float < MINIMUM or
	params.TARGET|float > MAXIMUM) %}
	{ action_raise_error("TARGET must be between %.1f and %.1f" |
	format(settings.min_temp, settings.max_temp)) }
	{% endif %}

[gcode_macro set_heater_scaling]
description = Sets scaling parameters for heater. If a new target temperature is
	passed it will be adjusted to the scaling parameters.
	Usage: SET_HEATER_SCALING [HEATER=<heater>] [SCALE=<scale_factor>]
	[BUMP=<degrees>] [MAXIMUM=<degrees>]
	[MINIMUM=<degrees>] [TARGET=<temp>]
variable_scaled_heaters = {}
gcode = 
	
	{% if "HEATER" is not in params %}
	{% set output = [] %}
	{% for h in scaled_heaters %}
	{% set dummy = output.append(
	"%s: Scale: %.2f Bump: %.1f Minimum:%.1f Maximum: %.1f"
	| format(h, scaled_heaters[h].scale, scaled_heaters[h].bump,
	scaled_heaters[h].minimum, scaled_heaters[h].maximum)) %}
	{% endfor %}
	{% if output %}}{action_respond_info(output|join('\n'))}{% endif %}
	{% else %}
	
	{% set HEATER = params.HEATER.lower() %}
	{% set settings = printer.configfile.settings[HEATER] %}
	{% if HEATER is not in scaled_heaters %}
	{% set dummy = scaled_heaters.__setitem__(HEATER, {"scale": 1.0,
	"bump": 0.0, "minimum": settings.min_temp,
	"maximum": settings.max_temp,
	"real_target": printer[HEATER].target}) %}
	{% endif %}
	_CHECK_HEATER_PARAMS{% for k in params %}{' '~k~'='~params[k]}{% endfor %}
	{% set scales = scaled_heaters[HEATER] %}
	{% set SCALE = params.SCALE|default(scales.scale)|float %}
	{% set BUMP = params.BUMP|default(scales.bump)|float %}
	{% set MAXIMUM = params.MAXIMUM|default(scales.maximum)|float %}
	{% set MINIMUM = params.MINIMUM|default(scales.minimum)|float %}
	{% set TARGET = params.TARGET|default(scales.real_target)|float %}
	{% set dummy = scales.__setitem__("scale", SCALE) %}
	{% set dummy = scales.__setitem__("bump", BUMP) %}
	{% set dummy = scales.__setitem__("maximum", MAXIMUM) %}
	{% set dummy = scales.__setitem__("minimum", MINIMUM) %}
	{% set dummy = scales.__setitem__("real_target", TARGET) %}
	
	{% set settings = printer.configfile.settings[HEATER] %}
	{% if SCALE != 1.0 or BUMP != 0.0 or MINIMUM != settings.min_temp or
	MAXIMUM != settings.max_temp %}
	{% set dummy = scaled_heaters.__setitem__(HEATER, scales) %}
	{% else %}
	{% set dummy = scaled_heaters.__delitem__(HEATER) %}
	{% endif %}
	SET_HEATER_TEMPERATURE_SCALED HEATER={HEATER} TARGET={TARGET}
	{action_respond_info(
	"%s: Scale: %.2f Bump: %.1f Minimum:%.1f Maximum: %.1f Target: %.1f"
	| format(HEATER, SCALE, BUMP, MINIMUM, MAXIMUM, TARGET))}
	{% endif %}
	
	{% set dummy = None if True else "
	{% set dummy = params.HEATER|default(e.g. extruder) %}
	{% set dummy = params.SCALE|default(1.0)|float %}
	{% set dummy = params.BUMP|default(0.0)|float %}
	{% set dummy = params.MAXIMUM|default(max_temp)|float %}
	{% set dummy = params.MINIMUM|default(min_temp)|float %}
	{% set dummy = params.TARGET|default(current target)|float %}
	" %}

[gcode_macro reset_heater_scaling]
description = Clears scaling for heater (or all heaters if none specified).
	Usage: RESET_HEATER_SCALING [HEATER=<heater>]
gcode = 
	{% if "HEATER" in params %}
	{% set HEATER = params.HEATER.lower() %}
	{% if HEATER not in printer.heaters.available_heaters %}
	{ action_raise_error("The value '%s' is not valid for HEATER"
	| format(HEATER)) }
	{% endif %}
	{% set settings = printer.configfile.settings[HEATER] %}
	SET_HEATER_SCALING HEATER={HEATER
	} SCALE=1.0 BUMP=0.0 MINIMUM={settings.min_temp
	} MAXIMUM={settings.max_temp}
	{% else %}
	
	SET_GCODE_VARIABLE MACRO=set_heater_scaling VARIABLE=scaled_heaters VALUE={
	"{}"}
	{% endif %}

[gcode_macro _km_idle_timeout]
gcode = 
	{% if printer.pause_resume.is_paused %}
	{action_respond_info("Extruder powered down on idle timeout.")}
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{
	printer[printer.toolhead.extruder].target}"
	M104; Turn off extruder but leave the bed on.
	{% else %}
	TURN_OFF_HEATERS
	M107; turn off fan
	M84
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready
	{% endif %}

[gcode_macro _check_kinematic_limits]
gcode = 
	{% set toolhead = printer.toolhead %}
	{% if params.X and (params.X|float < toolhead.axis_minimum.x or
	params.X|float > toolhead.axis_maximum.x) %}
	{action_raise_error("X[%.3f] must be between %.3f and %.3f."
	| format(params.X|float, toolhead.axis_minimum.x,
	toolhead.axis_maximum.x))}
	{% elif params.Y and (params.Y|float < toolhead.axis_minimum.y or
	params.Y|float > toolhead.axis_maximum.y) %}
	{action_raise_error("Y[%.3f] must be between %.3f and %.3f."
	| format(params.Y|float, toolhead.axis_minimum.y,
	toolhead.axis_maximum.y))}
	{% elif params.Z and (params.Z|float < toolhead.axis_minimum.z or
	params.Z|float > toolhead.axis_maximum.z) %}
	{action_raise_error("Z[%.3f] must be between %.3f and %.3f."
	| format(params.Z|float, toolhead.axis_minimum.z,
	toolhead.axis_maximum.z))}
	{% elif params.E and (params.E|float|abs > printer.configfile.settings[
	"extruder"].max_extrude_only_distance) %}
	{action_raise_error("E[%.4f] exceeds max_extrude_only_distance[%.4f]."
	| format(params.E|float|abs, printer.configfile.settings[
	"extruder"].max_extrude_only_distance))}
	{% endif %}

[gcode_macro lazy_home]
description = Homes the specified axes. If lazy is true, already homed axes
	are skipped.
	Usage: LAZY_HOME [LAZY=<1|0>] [AXES=<axes_string>]
gcode = 
	
	LIST_MACROS SILENT=1
	_LAZY_HOME_INNER {rawparams}

[gcode_macro _lazy_home_inner]
gcode = 
	
	{% set G28 = (printer["gcode_macro list_macros"].macros.g28|
	default(["g28"],True))[-1] %}
	{% set axes = 'XYZ'|select('in', params.AXES|default("XYZ")|upper|list) %}
	{% if not axes %}
	{% set axes = 'XYZ' %}
	{% endif %}
	{% if params.LAZY|default(1)|int %}
	{% set axes = axes|reject('in', printer.toolhead.homed_axes|upper)|join() %}
	{% endif %}
	
	{% if axes %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing
	{G28}{% for k in axes %}{' ' ~ k}{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status
	{% endif %}

[gcode_macro g28]
description = Wraps the G28 command to add the Marlin "O" parameter so that
	already homed axes will not be homed again. See the Klipper documentation on
	G28 for the behavior of the other parameters.
	Usage: G28 [O] ...
rename_existing = G28.6245197
gcode = 
	{% set axes = 'XYZ'|select('in', params)|join() %}
	LAZY_HOME LAZY={('O' in params)|int}{%if axes%} AXES={axes}{%endif%}

[gcode_macro before_layer_change]
description = Add this to the "before layer change" input box in the slicer.
	Usage: BEFORE_LAYER_CHANGE HEIGHT=<current_height> LAYER=<current_layer>
gcode = 
	{% set height = params.HEIGHT|default(printer.toolhead.position.z)|float %}
	{% set layer = params.LAYER|default(-1)|int + 1 %}
	{% if height >= 0.0 and layer >= 0 %}
	SET_PRINT_STATS_INFO CURRENT_LAYER="{layer}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{height}"
	{% if printer["gcode_macro _km_layer_run"].clearance_z < height %}
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{
	height}"
	{% endif %}
	{% endif %}

[gcode_macro after_layer_change]
description = Add this to the "after layer change" input box in the slicer.
	Usage: AFTER_LAYER_CHANGE
gcode = 
	_KM_LAYER_RUN

[gcode_macro gcode_at_layer]
description = Schedules the specified g-code command to be run at the specified
	layer. LAYER=next will cause the command to run at the next layer change.
	Usage: GCODE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } COMMAND=<gcode>
	[CANCEL=<0|1>]
gcode = 
	{% set tot_layers = printer.print_stats.info.total_layer %}
	{% if params|length > 0 %}
	_KM_CHECK_IS_PRINTING
	
	{% set CANCEL = params.CANCEL|default(0)|int != 0 %}
	{% set COMMAND = params.COMMAND|default(None) %}
	{% if COMMAND %}
	{% set COMMAND = COMMAND.lstrip().split(None, 1) %}
	{% set COMMAND = " ".join([COMMAND[0]|upper] + COMMAND[1:]) %}
	{% endif %}
	
	{% if "LAYER" in params %}
	{% set cmd_container = "commands_layer" %}
	{% set cur_layer = printer.print_stats.info.current_layer|int %}
	{% if "HEIGHT" in params %}
	{action_raise_error("Conflicting HEIGHT and LAYER arguments provided.")}
	{% elif params.LAYER|string|lower == "next" %}
	{% set LAYER = cur_layer + 1 %}
	{% else %}
	{% set LAYER = params.LAYER|int %}
	{% endif %}
	{% if LAYER <= cur_layer %}
	{action_raise_error("LAYER[%i] must be above current print layer[%i]."
	| format(LAYER, cur_layer))}
	{% elif tot_layers and LAYER > tot_layers %}
	{action_raise_error("LAYER[%i] must not be above top layer[%i]."
	| format(LAYER, tot_layers))}
	{% endif %}
	{% set key = LAYER %}
	
	{% elif "HEIGHT" in params %}
	{% set cmd_container = "commands_height" %}
	{% set HEIGHT = params.HEIGHT|float %}
	{% set cur_height = printer["gcode_macro _km_layer_run"].cur_height %}
	{% if HEIGHT <= cur_height %}
	{action_raise_error(
	"HEIGHT[%.3f] must be above current print height[%.3f].")
	| format(HEIGHT, cur_height)}
	{% elif HEIGHT >= printer.toolhead.axis_maximum.z %}
	{action_raise_error(
	"HEIGHT[%.3f] must be below maximum Z height[%.3f].")
	| format(HEIGHT, printer.toolhead.axis_maximum.z)}
	{% endif %}
	{% set key = HEIGHT %}
	
	{% else %}
	{action_raise_error("No HEIGHT or LAYER argument provided.")}
	{% endif %}
	
	{% set commands = printer["gcode_macro _km_layer_run"][cmd_container] %}
	{% if key not in commands and not CANCEL %}
	{% set dummy = commands.__setitem__(key, []) %}
	{% endif %}
	
	{% if CANCEL %}
	{% if key in commands %}
	{% set pos = ("%i"|format(key)) if key is integer else
	("%.3fmm"|format(key)) %}
	{% if COMMAND %}
	{% set dummy = commands[key].remove(COMMAND) %}
	{% if commands[key]|length == 0 %}
	{% set dummy = commands.__delitem__(key) %}
	{% endif %}
	{action_respond_info("Cancelled %s %s:\n* %s" |
	format("layer" if k is integer else "height",
	pos, COMMAND))}
	{% else %}
	{% set dummy = commands.__delitem__(key) %}
	{action_respond_info("Cancelled all commands at %s %s." |
	format("layer" if k is integer else "height",
	pos))}
	{% endif %}
	{% endif %}
	{% elif not COMMAND %}
	{action_raise_error("No COMMAND argument provided.")}
	{% elif COMMAND in commands[key] %}
	{action_raise_error("Duplicate command previously scheduled.")}
	{% else %}
	{% set dummy = commands[key].append(COMMAND) %}
	{% set pos = ("%i"|format(key)) if key is integer else
	("%.3fmm"|format(key)) %}
	{action_respond_info("%s %s:\n* %s" |
	format("layer" if key is integer else "height",
	pos, COMMAND))}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE={cmd_container} VALUE="{
	commands|replace('\"','\\\"')}"
	_UPDATE_LAYER_COMPAT
	
	
	{% else %}
	{% set output = [] %}
	{% set commands = printer["gcode_macro _km_layer_run"].commands_layer %}
	{% for key in commands|list|sort %}
	{% set dummy = output.append("layer %i:" | format(key)) %}
	{% for c in commands[key] %}
	{% set dummy = output.append("* %s" | format(c)) %}
	{% endfor %}
	{% endfor %}
	{% set commands = printer["gcode_macro _km_layer_run"].commands_height %}
	{% for key in commands|list|sort %}
	{% set dummy = output.append("height %.3fmm:" | format(key)) %}
	{% for c in commands[key] %}
	{% set dummy = output.append("* %s" | format(c)) %}
	{% endfor %}
	{% endfor %}
	{action_respond_info(output|join('\n'))}
	{% endif %}

[gcode_macro _km_layer_run]
description = Runs pending commands for the current layer change.
	Usage: _KM_LAYER_RUN
variable_cur_height = 0.0
variable_clearance_z = 0.0
variable_commands_layer = {}
variable_commands_height = {}
gcode = 
	{% set cur_layer = printer.print_stats.info.current_layer %}
	{% for key in commands_layer | select("<=", cur_layer) | sort %}
	{action_respond_info("Executing scheduled commands at layer %d:\n%s" |
	format(key, commands_layer[key]|join('\n')))}
	{% for c in commands_layer[key] %}
	{c}
	{% endfor %}
	{% set dummy = commands_layer.__delitem__(key) %}
	{% endfor %}
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{
	commands_layer|replace('\"','\\\"')}"
	{% for key in commands_height | select("<=", cur_height) | sort %}
	{action_respond_info("Executing scheduled commands at height %.3f:\n%s" |
	format(key, commands_height[key]|join('\n')))}
	{% for c in commands_height[key] %}
	{c}
	{% endfor %}
	{% set dummy = commands_height.__delitem__(key) %}
	{% endfor %}
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{
	commands_height|replace('\"','\\\"')}"
	_UPDATE_LAYER_COMPAT

[gcode_macro init_layer_gcode]
description = Clears scheduled gcode commands and state for all layers.
	Usage: INIT_LAYER_GCODE LAYERS=<num>
gcode = 
	SET_PRINT_STATS_INFO TOTAL_LAYER="{params.LAYERS|int + 1}" CURRENT_LAYER="{0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"
	_UPDATE_LAYER_COMPAT

[gcode_macro _reset_layer_gcode]
description = Clears scheduled gcode commands and state for all layers.
	Usage: _RESET_LAYER_GCODE
gcode = 
	SET_PRINT_STATS_INFO TOTAL_LAYER="{0}" CURRENT_LAYER="{0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"
	_UPDATE_LAYER_COMPAT

[gcode_macro cancel_all_layer_gcode]
description = Clears all scheduled gcode commands.
	Usage: CANCEL_ALL_LAYER_GCODE
gcode = 
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"
	_UPDATE_LAYER_COMPAT

[gcode_macro _update_layer_compat]
gcode = 
	{% set next_layer = printer.print_stats.info.current_layer|int + 1 %}
	{% set commands_layer = printer["gcode_macro _km_layer_run"].commands_layer %}
	{% set keys = commands_layer | sort(reverse=True) %}
	
	{% set pause_next_layer = {'enable': False, 'call':
	printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer.call} %}
	{% if pause_next_layer.call in commands_layer[next_layer] | default([]) %}
	{% set dummy = pause_next_layer.__setitem__('enable', True) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{
	pause_next_layer|replace('\"','\\\"') }"
	
	
	{% set pause_at_layer = {'enable': False, 'layer': 0, 'call':
	printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer.call} %}
	{% if pause_next_layer.enable and
	pause_next_layer.call == pause_at_layer.call %}
	{% set keys = keys | reject("==", next_layer) %}
	{% endif %}
	
	
	
	
	{% for key in keys %}
	{% if pause_at_layer.call in commands_layer[key] %}
	{% set dummy = pause_at_layer.__setitem__('enable', True) %}
	{% set dummy = pause_at_layer.__setitem__('layer', key) %}
	{% endif %}
	{% endfor %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{
	pause_at_layer|replace('\"','\\\"') }"

[gcode_macro pause_next_layer]
description = Convenience macro to schedule the current print to pause at the
	next layer change. See PAUSE for additional arguments.
	Usage: PAUSE_NEXT_LAYER ...
gcode = 
	_CHECK_KINEMATIC_LIMITS{% for k in params%}{' ' ~k~ '=' ~ params[k]
	}{% endfor %}
	GCODE_AT_LAYER LAYER=NEXT COMMAND="PAUSE{% for k in params %}{
	' ' ~ k ~ '=' ~ params[k]}{% endfor %}"

[gcode_macro pause_at_layer]
description = Convenience macro to schedule the current print to pause at the
	specified layer change. LAYER=next will cause the command to run at the next
	layer change. See PAUSE for additional arguments.
	Usage: PAUSE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...
gcode = 
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	" %}
	{% set filtered_params = params|reject('in',['HEIGHT','LAYER'])|list|sort %}
	_CHECK_KINEMATIC_LIMITS{% for k in filtered_params%}{' ' ~k~ '=' ~ params[k]
	}{% endfor %}
	GCODE_AT_LAYER {% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor
	%} COMMAND="PAUSE{% for k in filtered_params %}{
	' ' ~ k ~ '=' ~ params[k]}{% endfor %}"

[gcode_macro speed_at_layer]
description = Convenience macro to schedule a feedrate adjustment at the
	specified layer change. LAYER=next will cause the command to run at the next
	layer change. (SPEED parameter behaves the same as the M220 S parameter.)
	Usage: SPEED_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } SPEED=<percentage>
gcode = 
	{% set SPEED = params.SPEED|default(0)|int %}
	{% if SPEED < 1 or SPEED > 500 %}
	{action_raise_error("SPEED[%i] parameter between 1 and 500 is required."
	% SPEED)}
	{% endif %}
	GCODE_AT_LAYER {% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor %} COMMAND="M220 S{SPEED|int}"
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	{% set dummy = params.SPEED|default(percentage)|int %}
	" %}

[gcode_macro flow_at_layer]
description = Convenience macro to schedule a flow percentage adjustment at the
	specified layer change. LAYER=next will cause the command to run at the next
	layer change. (FLOW parameter behaves the same as the M221 S parameter.)
	Usage: FLOW_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } FLOW=<percentage>
gcode = 
	{% set FLOW = params.FLOW|default(0)|int %}
	{% if FLOW < 1 or FLOW > 500 %}
	{action_raise_error("FLOW[%i] parameter between 1 and 500 is required."
	% FLOW)}
	{% endif %}
	GCODE_AT_LAYER {% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor %} COMMAND="M221 S{FLOW|int}"
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	{% set dummy = params.FLOW|default(percentage)|int %}
	" %}

[gcode_macro fan_at_layer]
description = Convenience macro to schedule a fan adjustment at the specified
	layer change. LAYER=next will cause the command to run at the next layer
	change. See SET_FAN_SCALING for additional arguments.
	Usage: FAN_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...
gcode = 
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	{% set dummy = params.SCALE|default(1.0)|float %}
	{% set dummy = params.BUMP|default(0)|int %}
	{% set dummy = params.MAXIMUM|default(0)|int %}
	{% set dummy = params.MINIMUM|default(255)|int %}
	{% set dummy = params.SPEED|default(current speed)|int %}
	" %}
	{% set filtered_params = params|reject('in',['HEIGHT','LAYER'])|list|sort %}
	{% if filtered_params|length == 0 %}
	{action_raise_error("No fan parameters provided.")}
	{% endif %}
	_CHECK_FAN_PARAMS{% for k in filtered_params %}{' '~k~'='~params[k]
	}{% endfor %}
	GCODE_AT_LAYER {% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor
	%} COMMAND="SET_FAN_SCALING{% for k in filtered_params %}{
	' ' ~ k ~ '=' ~ params[k]}{% endfor %}"

[gcode_macro heater_at_layer]
description = Convenience macro to schedule a heater adjustment at the specified
	layer change. LAYER=next will cause the command to run at the next layer
	change. See SET_HEATER_SCALING for additional arguments.
	Usage: HEATER_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...
gcode = 
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	{% set dummy = params.HEATER|default(e.g. extruder) %}
	{% set dummy = params.SCALE|default(1.0)|float %}
	{% set dummy = params.BUMP|default(0.0)|float %}
	{% set dummy = params.MAXIMUM|default(max_temp)|float %}
	{% set dummy = params.MINIMUM|default(min_temp)|float %}
	{% set dummy = params.TARGET|default(current target)|float %}
	" %}
	{% set filtered_params = params|reject('in',['HEIGHT','LAYER'])|list|sort %}
	_CHECK_HEATER_PARAMS{% for k in filtered_params%}{' ' ~ k ~ '=' ~ params[k]
	}{% endfor %}
	GCODE_AT_LAYER{% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor
	%} COMMAND="SET_HEATER_SCALING{% for k in filtered_params %}{
	' ' ~ k ~ '=\\\"' ~ params[k]|replace('\\','\\\\')|replace('\'','\\\'')
	|replace('\"','\\\"') ~ '\\\"'
	}{% endfor %}"

[gcode_macro park]
description = Park the toolhead
	Usage: PARK [P=<0|1|2>] [X=<pos>] [Y=<pos>] [Z=<pos>] [LAZY=<1|0>]
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set LAZY = params.LAZY|default(1)|int %}
	{% if printer.toolhead.homed_axes != "xyz" %}
	{% if LAZY %}
	LAZY_HOME
	{% else %}
	{action_raise_error("Must home axes first.")}
	{% endif %}
	{% endif %}
	
	
	{% set P = (params.P|default(2))|int %}
	{% set X = params.X|default(km.park_x)|float %}
	{% set Y = params.Y|default(km.park_y)|float %}
	{% set Z = params.Z|default(km.park_z)|float %}
	
	M400
	_CHECK_KINEMATIC_LIMITS X="{X}" Y="{Y}" Z="{Z}"
	_PARK_INNER X="{X}" Y="{Y}" Z="{Z}" P="{P}" LAZY="{LAZY}"
	
	{% set dummy = None if True else "
	{% set dummy = params.P|default(mode=<0|1|2>)|int %}
	{% set dummy = params.X|default(X position)|int %}
	{% set dummy = params.Y|default(Y position)|int %}
	{% set dummy = params.Z|default(Z position)|int %}
	" %}

[gcode_macro _park_inner]
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set travel_speed_xy = km.travel_speed_xy %}
	{% set travel_speed_z = km.travel_speed_z %}
	
	{% set position = printer.gcode_move.gcode_position %}
	{% set origin = printer.gcode_move.homing_origin%}
	
	
	
	{% set clearance_z = (printer["gcode_macro _km_layer_run"].clearance_z,
	position.z) | max %}
	{% set P = params.P|int %}
	{% set X = params.X|float - origin.x %}
	{% set Y = params.Y|float - origin.y %}
	{% set Z = params.Z|float %}
	{% set LAZY = params.LAZY|int %}
	
	
	{% if P == 0 %}
	{% if clearance_z > Z %}
	{% set Z = clearance_z %}
	{% endif %}
	{% elif P == 1 %}
	{% set Z = Z - origin.z %}
	{% elif P == 2 %}
	{% set Z = Z + clearance_z %}
	{% else %}
	{action_raise_error("Invalid parameter P=%i. Value must be 0, 1, or 2." |
	format(P)) }
	{% endif %}
	
	
	{% set Z = ((Z, printer.toolhead.axis_maximum.z - origin.z)|min,
	printer.toolhead.axis_minimum.z - origin.z)|max %}
	
	
	{% if (not LAZY) or P != 2 or X != position.x or Y != position.y
	or Z < clearance_z %}
	SAVE_GCODE_STATE NAME=_KM_PARK
	G90
	G0 Z{Z} F{travel_speed_z}
	G0 X{X} Y{Y} F{travel_speed_xy}
	RESTORE_GCODE_STATE NAME=_KM_PARK MOVE=0
	{% endif %}

[gcode_macro g27]
description = Parks the toolhead.
	Usage: G27 [P=<0|1|2>]
gcode = 
	
	PARK P={params.P|default(0)} {% for k in params|reject("in", "GP") %}{
	' '~k~'="'~params[k]~'"'
	}{% endfor %}

[gcode_macro pause]
description = Pauses the current print.
	Usage: PAUSE [X=<pos>] [Y=<pos>] [Z=<pos>] [E=<retract_length>] [B=<beeps>]
rename_existing = _KM_PAUSE_BASE
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% set E = (params.E|default(5))|float %}
	
	{% set B = params.B|default(10)|int if "output_pin beeper" in printer else 0
	%}
	
	{% if printer.pause_resume.is_paused %}
	{ action_respond_info("Print already paused") }
	{% elif printer.idle_timeout.state | string == "Printing" or
	(printer.virtual_sdcard|default({})).is_active|default(False) %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pausing RESET_STACK=1
	{% set position = printer.gcode_move.gcode_position %}
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_x VALUE="{position.x}"
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_y VALUE="{position.y}"
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_z VALUE="{position.z}"
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{E}"
	SAVE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE
	_KM_PAUSE_BASE
	M83
	{% if printer.extruder.can_extrude %}
	G1 E{'%.4f' % -E} F{km.load_speed}
	{% endif %}
	PARK P=2{% for k in params|select("in", "XYZ") %}{
	' '~k~'="'~params[k]~'"'}{% endfor %}
	
	{% for i in range(B) %}
	M300 P100
	G4 P200
	{% endfor %}
	{% else %}
	{ action_respond_info("Print not in progress") }
	{% endif %}

[gcode_macro m600]
description = Pauses the current print.
	Usage: M600 [B<beeps>] [E<pos>] [L<pos>] [R<temp>] [U<pos>] [X<pos>] [Y<pos>]
	[Z<pos>]
gcode = 
	PAUSE B="{0}" P=2{% for k in params|select("in", "EXYZ") %}{
	' '~k~'="'~params[k]~'"'}{% endfor %}
	UNLOAD_FILAMENT{% if 'U' in params %} LENGTH={params.U}{% endif
	%} BEEPS="{params.B|default(10)|int}"
	{% if 'R' in params %}M109 S{params.R}{% endif %}

[gcode_macro m601]
description = Pauses the current print.
	Usage: M601
gcode = 
	PAUSE

[gcode_macro m602]
description = Resumes the currently paused print.
	Usage: M602
gcode = 
	RESUME

[gcode_macro m24]
rename_existing = M24.6245197
gcode = 
	{% if printer.pause_resume.is_paused %}
	RESUME
	{% else %}
	M24.6245197
	{% endif %}

[gcode_macro m25]
rename_existing = M25.6245197
gcode = 
	PAUSE

[gcode_macro resume]
description = Resumes the currently paused print.
	Usage: RESUME [E<pos>]
rename_existing = _KM_RESUME_BASE
variable_saved_extruder_temp = 0
variable_saved_x = 0.0
variable_saved_y = 0.0
variable_saved_z = 0.0
variable_saved_e = 0.0
gcode = 
	{% if printer.pause_resume.is_paused %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% set extruder = printer[printer.toolhead.extruder] %}
	{% if extruder.target <= printer.configfile.settings[
	printer.toolhead.extruder].min_temp
	| float + 0.5 %}
	M109 S{saved_extruder_temp}
	{% endif %}
	
	
	
	{% if 'E' not in params and not saved_e %}
	{% set saved_e = 5.0 %}
	G1 E{'%.4f' % -saved_e } F{km.load_speed}
	{% endif %}
	
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"
	G90
	
	G0 X{saved_x} Y{saved_y} F{km.travel_speed_xy}
	G0 Z{saved_z} F{km.travel_speed_z}
	G91
	
	G1 E{'%.4f' % (params.E|default(saved_e))} F{km.load_speed}
	RESTORE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE MOVE=1
	_KM_RESUME_BASE
	{% else %}
	{ action_respond_info("Printer is not paused.") }
	{% endif %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=printing RESET_STACK=1

[gcode_macro clear_pause]
description = Clears the current pause state.
	Usage: CLEAR_PAUSE
rename_existing = _KM_CLEAR_PAUSE
gcode = 
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"
	_KM_CLEAR_PAUSE

[gcode_macro print_start]
description = Inserted by slicer at start of print. Rather than using this macro
	directly you should configure your slicer as instructed in the readme.
	Usage: PRINT_START BED=<temp> EXTRUDER=<temp> [CHAMBER=<temp>]
	[MESH_MIN=<x,y>] [MESH_MAX=<x,y>] [LAYERS=<num>]
	[NOZZLE_SIZE=<mm>]
gcode = 
	{action_respond_info(
	"This file is using an old The PRINT_START format. This print will run "
	"fine, but you should update your slicer config to take advantage of the "
	"phased PRINT_START macros. The slicer documentation is here:\n"
	"https://github.com/jschuh/klipper-macros\x23slicer-configuration"
	)}
	
	_PRINT_START_PHASE_INIT {rawparams}
	_PRINT_START_PHASE_PREHEAT
	_PRINT_START_PHASE_PROBING
	_PRINT_START_PHASE_EXTRUDER
	_PRINT_START_PHASE_PURGE

[gcode_macro _print_start_phase_init]
description = Inserted by slicer at start of print. Initializes PRINT_START
	phases.
	Usage: See PRINT_START.
gcode = 
	CHECK_KM_CONFIG
	SET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{False}"
	_KM_APPLY_PRINT_OFFSET RESET=1
	_PRINT_START_PHASE_CHECK PHASE=none
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% if not params.BED %}
	{% set dummy = params.__setitem__('BED', params.BED_TEMP|int) %}
	{% endif %}
	{% if not params.EXTRUDER %}
	{% set dummy = params.__setitem__('EXTRUDER', params.EXTRUDER_TEMP|int) %}
	{% endif %}
	
	
	PRINT_START_SET PRINT_START_PHASE="init" {% for k in params %}{' %s=\"%s\"' %
	(k,params[k]|replace('\\','\\\\')|replace('\'','\\\'')|replace('\"','\\\"'))
	}{% endfor %}
	
	
	_km_check_and_set_print_bounds
	
	M107
	CLEAR_PAUSE
	
	M140 S{params.BED}
	{% if params.CHAMBER %}M141 S{params.CHAMBER|int}{% endif %}
	{% if printer.bed_mesh %}BED_MESH_CLEAR{% endif %}
	
	{% if km.start_try_saved_surface_mesh and printer.bed_mesh %}
	LOAD_SURFACE_MESH
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="preheat"

[gcode_macro _print_start_phase_preheat]
description = Inserted by slicer at start of print. Handles the bed and chamber
	heating phases and ends when both are stabilized at their target temperatures.
	Usage: See PRINT_START.
gcode = 
	_PRINT_START_PHASE_CHECK PHASE=preheat
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set BED = print.BED|int %}
	{% set EXTRUDER = print.EXTRUDER|int %}
	{% set CHAMBER = print.CHAMBER|default(0)|int %}
	{% set LAYERS = print.LAYERS|default(0)|int %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% set bed_at_target = (BED + 0.4 - printer.heater_bed.temperature) |
	abs <= 0.6 %}
	PRINT_START_SET BED_AT_TARGET={1 if bed_at_target else 0}
	{% set start_level_bed_at_temp = km.start_level_bed_at_temp and
	not printer.bed_mesh.profile_name %}
	{% set actions_at_temp = start_level_bed_at_temp or
	km.start_quad_gantry_level_at_temp or
	km.start_z_tilt_adjust_at_temp or
	(km.start_home_z_at_temp and not bed_at_target) %}
	{% set bed_overshoot = (BED + (km.start_bed_heat_overshoot if
	(BED and not bed_at_target) else 0.0),
	printer.configfile.settings.heater_bed.max_temp ) | min %}
	
	INIT_LAYER_GCODE LAYERS="{LAYERS}"
	{% if CHAMBER > 0.0 %}
	M141 S{CHAMBER}
	{% endif %}
	
	M140 S{bed_overshoot}
	{% if actions_at_temp %}
	
	
	M104 S{km.start_extruder_probing_temp if km.start_extruder_probing_temp > 0
	else (km.start_extruder_preheat_scale * EXTRUDER)|round(0,'ceil')|int}
	{% else %}
	M104 S{EXTRUDER}
	{% endif %}
	
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing RESET_STACK=1
	G28
	G90
	{% if BED > 0.0 %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=bed_heating RESET_STACK=1
	
	{% if not bed_at_target %}
	PARK
	
	M190 S{bed_overshoot}
	G4 P{km.start_bed_heat_delay / 2}
	M190 R{BED}
	G4 P{km.start_bed_heat_delay / 2}
	{% endif %}
	{% endif %}
	
	{% if CHAMBER > 0.0 %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=chamber_heating RESET_STACK=1
	_KM_PARK_IF_NEEDED HEATER="chamber" RANGE=ABOVE
	M191 S{CHAMBER}
	{% endif %}
	
	{% if BED > 0.0 and bed_at_target%}
	M190 R{BED}
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="probing"

[gcode_macro _print_start_phase_probing]
description = Inserted by slicer at start of print. Performs probing (including
	mesh bed level) and other operations that should be run when the bed and
	chamber are stabilized at their target temps.
	Usage: See PRINT_START.
gcode = 
	_PRINT_START_PHASE_CHECK PHASE=probing
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set MESH_MIN = print.MESH_MIN|default(None) %}
	{% set MESH_MAX = print.MESH_MAX|default(None) %}
	
	{% if km.start_random_placement_max > 0 and print.PRINT_MIN and MESH_MIN %}
	{% set PRINT_MIN = print.PRINT_MIN.split(",")|map('float')|list %}
	{% set PRINT_MAX = print.PRINT_MAX.split(",")|map('float')|list %}
	{% set x_offset = (((km.print_max[0] - km.print_min[0] - PRINT_MAX[0] +
	PRINT_MIN[0] - 2 * km.start_random_placement_padding)|int,
	km.start_random_placement_max * 2)|min, 0)|max %}
	{% set y_offset = (((km.print_max[1] - km.print_min[1] - PRINT_MAX[1] +
	PRINT_MIN[1] - 2 * km.start_random_placement_padding)|int,
	km.start_random_placement_max * 2)|min, 0)|max %}
	{% if x_offset > 0 %}
	{% set x_offset = range(x_offset)|random + km.print_min[0] -
	PRINT_MIN[0] + km.start_random_placement_padding %}
	{% endif %}
	{% if y_offset > 0 %}
	{% set y_offset = range(y_offset)|random + km.print_min[1] -
	PRINT_MIN[1] + km.start_random_placement_padding %}
	{% endif %}
	
	
	{% set MESH_MIN = MESH_MIN.split(",")|map('float')|list %}
	{% set MESH_MAX = MESH_MAX.split(",")|map('float')|list %}
	{% set MESH_MIN_NEW = (MESH_MIN[0] + x_offset, MESH_MIN[1] + y_offset) %}
	{% set MESH_MAX_NEW = (MESH_MAX[0] + x_offset, MESH_MAX[1] + y_offset) %}
	{action_respond_info(
	"Relocating print origin from (%.3f,%.3f) "|format(*MESH_MIN) +
	"to (%.3f,%.3f)"|format(*MESH_MIN_NEW))}
	{% set MESH_MIN = (MESH_MIN_NEW[0], MESH_MIN_NEW[1])|join(',') %}
	{% set MESH_MAX = (MESH_MAX_NEW[0], MESH_MAX_NEW[1])|join(',') %}
	PRINT_START_SET PRINT_OFFSET={"%d,%d" % (x_offset,y_offset)}
	{% endif %}
	
	{% set EXTRUDER = print.EXTRUDER|int %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set start_level_bed_at_temp = km.start_level_bed_at_temp and
	not printer.bed_mesh.profile_name %}
	{% set start_home_z_at_temp = km.start_home_z_at_temp and
	not print.BED_AT_TARGET|int %}
	{% set actions_at_temp = start_level_bed_at_temp or
	km.start_quad_gantry_level_at_temp or
	km.start_z_tilt_adjust_at_temp or
	start_home_z_at_temp %}
	{% if actions_at_temp %}
	{% if km.start_extruder_probing_temp > 0 %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating RESET_STACK=1
	_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=2
	M109 R{km.start_extruder_probing_temp}
	{% else %}
	M104 S{EXTRUDER}
	{% endif %}
	{% if start_home_z_at_temp %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing RESET_STACK=1
	G28 Z
	{% endif %}
	{% if km.start_z_tilt_adjust_at_temp %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=calibrating_z RESET_STACK=1
	Z_TILT_ADJUST
	{% endif %}
	{% if km.start_quad_gantry_level_at_temp %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=leveling_gantry RESET_STACK=1
	QUAD_GANTRY_LEVEL
	{% endif %}
	{% if start_level_bed_at_temp %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=meshing RESET_STACK=1
	_km_mesh_if_needed {% if MESH_MIN %} MESH_MIN={MESH_MIN}{% endif
	%}{% if MESH_MAX %} MESH_MAX={MESH_MAX}{% endif %}
	{% endif %}
	{% if km.start_extruder_probing_temp > 0 %}
	M104 S{EXTRUDER}
	{% endif %}
	G4
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="extruder"

[gcode_macro _print_start_phase_extruder]
description = Inserted by slicer at start of print. Preheats the extruder.
	Usage: See PRINT_START.
gcode = 
	_PRINT_START_PHASE_CHECK PHASE=extruder
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set EXTRUDER = print.EXTRUDER|default(print.EXTRUDER_TEMP)|float %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	
	{% if EXTRUDER > 0 %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating RESET_STACK=1
	_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=ABOVE
	M109 S{EXTRUDER}
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="purge"

[gcode_macro _print_start_phase_purge]
description = Inserted by slicer at start of print. Generates purge lines.
	Usage: See PRINT_START.
gcode = 
	_PRINT_START_PHASE_CHECK PHASE=purge
	
	_KM_APPLY_PRINT_OFFSET
	
	_APPLY_BED_SURFACE_OFFSET
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set MESH_MIN = print.MESH_MIN|default(None) %}
	{% set MESH_MAX = print.MESH_MAX|default(None) %}
	{% set NOZZLE_SIZE = print.NOZZLE_SIZE|default(print.NOZZLE_SIZE)|
	default(printer.configfile.settings.extruder.nozzle_diameter)|float %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% if km.start_purge_length > 0.0 and printer.extruder.can_extrude %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=purging RESET_STACK=1
	DRAW_PURGE_LINE WIDTH="{NOZZLE_SIZE * 1.25}" HEIGHT="{NOZZLE_SIZE * 0.625
	}"{% if MESH_MIN %} PRINT_MIN={MESH_MIN}{% endif
	%}{% if MESH_MAX %} PRINT_MAX={MESH_MAX}{% endif %}
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="printing"
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=printing RESET_STACK=1

[gcode_macro _km_park_if_needed]
description = Parks the extruder if the current temperature of the supplied
	heater is not within the specified target range.
	Usage: _KM_PARK_IF_NEEDED HEATER=<heater> RANGE=[<percentage>|ABOVE|BELOW]
gcode = 
	
	{% set HEATER = params.HEATER if params.HEATER in
	printer.heaters.available_heaters else
	("heater_generic " ~ params.HEATER) %}
	{% set RANGE = (params.RANGE|default(1))|string|upper %}
	
	{% if printer[HEATER].target %}
	{% if RANGE == "ABOVE" %}
	{% if printer[HEATER].temperature < printer[HEATER].target %}
	PARK
	{% endif %}
	{% elif RANGE == "BELOW" %}
	{% if printer[HEATER].temperature > printer[HEATER].target %}
	PARK
	{% endif %}
	{% elif (printer[HEATER].temperature - printer[HEATER].target)|abs >
	(printer[HEATER].target * RANGE|float * 0.01)|abs %}
	PARK
	{% endif %}
	{% endif %}

[gcode_macro _km_apply_print_offset]
variable_offset = []
gcode = 
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% if params.RESET|default(0)|int and offset and
	not printer["gcode_macro _km_save_state"].is_ephemeral%}
	{% set PRINT_OFFSET = [offset.pop(0) * -1, offset.pop() * -1] %}
	{% elif print.PRINT_OFFSET and not offset and
	not printer["gcode_macro _km_save_state"].is_ephemeral %}
	{% set PRINT_OFFSET = print.PRINT_OFFSET.split(",")|map('float')|list %}
	{% set dummy = offset.extend(PRINT_OFFSET) %}
	{% endif %}
	
	{% if PRINT_OFFSET %}
	_KM_SET_GCODE_OFFSET_BASE {"X_ADJUST=%.2f Y_ADJUST=%.2f"|
	format(*PRINT_OFFSET)}
	{% endif %}

[gcode_macro _km_mesh_if_needed]
gcode = 
	
	
	
	{% if not printer.bed_mesh.profile_name %}
	BED_MESH_CALIBRATE_FAST {rawparams}
	{% endif %}

[gcode_macro print_start_set]
description = Inserted by slicer to set values used by PRINT_START.
	Usage: PRINT_START_SET <VARIABLE>=<value>
variable_print = {}
gcode = 
	{%for k in params %}
	{% set dummy = print.__setitem__(k|upper, params[k]) %}
	{% endfor %}

[gcode_macro _print_start_phase_check]
gcode = 
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set PRINT_START_PHASE = print.PRINT_START_PHASE|default("none") %}
	{% if PRINT_START_PHASE != params.PHASE %}
	
	SET_GCODE_VARIABLE MACRO=print_start_set VARIABLE=print VALUE="{{}}"
	{% if params.PHASE != 'none' %}
	{% set error = "PRINT_START phase error. Expected '%s' but found '%s'" %
	(params.PHASE, PRINT_START_PHASE) %}
	
	{% if not 'virtual_sdcard' in printer or
	not printer.virtual_sdcard.is_active or 'CANCEL_PRINT' not in
	printer.configfile.settings.virtual_sdcard.on_error_gcode|
	default("")|upper %}
	{action_respond_info(error)}
	CANCEL_PRINT
	{% else %}
	{action_raise_error(error)}
	{% endif %}
	{% else %}
	{ action_respond_info("Expected phase '%s' but found '%s'. Resetting."
	% (params.PHASE, PRINT_START_PHASE)) }
	{% endif %}
	{% endif %}

[gcode_macro print_end]
description = Inserted by slicer at end of print.
	Usage: PRINT_END
gcode = 
	_KM_CHECK_IS_PRINTING
	M400
	_PRINT_END_INNER
	
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% if km.start_clear_adjustments_at_end != 0 %}
	RESET_HEATER_SCALING
	RESET_FAN_SCALING
	M220 S100
	M221 S100
	{% endif %}
	_RESET_LAYER_GCODE
	_RESET_VELOCITY_LIMITS
	TURN_OFF_HEATERS
	M107; turn off fan
	{% if printer.bed_mesh %}BED_MESH_CLEAR{% endif %}
	
	{% if printer.toolhead.homed_axes|lower == "xyz" %}
	PARK Y="{km.start_end_park_y}"
	{% endif %}
	M84
	CLEAR_PAUSE
	SET_GCODE_VARIABLE MACRO=print_start_set VARIABLE=print VALUE="{{}}"
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready RESET_STACK=1

[gcode_macro _print_end_inner]
variable_cancelled = False
gcode = 
	SET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{False}"
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set toolhead = printer.toolhead %}
	{% set origin = printer.gcode_move.homing_origin%}
	{% set max_x = km.print_max[0] - origin.x %}
	{% set max_y = km.print_max[1] - origin.y %}
	{% set max_z = toolhead.axis_maximum.z - origin.z %}
	
	{% if not cancelled %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=completing
	{% endif %}
	
	{% if printer.extruder.can_extrude %}
	
	{% if not printer.pause_resume.is_paused and not cancelled and
	toolhead.homed_axes|lower == "xyz" %}
	{% set x_safe = (max_x - toolhead.position.x, 2.0)|min %}
	{% set y_safe = (max_y - toolhead.position.y, 2.0)|min %}
	{% set z_safe = (max_z - toolhead.position.z, 2.0)|min %}
	G91
	G0 Z{z_safe} E-1.0 F{km.travel_speed_z * 2}
	G0 X{x_safe} Y{y_safe} E-1.0 F{km.travel_speed_xy}
	
	_KM_APPLY_PRINT_OFFSET RESET=1
	{% endif %}
	
	
	G92 E0
	G1 E-5.0 F3600
	M400
	{% endif %}

[gcode_macro _km_check_is_printing]
variable_debug_state = False
description = Throws an error if print is not currently in progress.
gcode = 
	{% if not debug_state and
	printer.idle_timeout.state|string != "Printing" and
	not (printer.virtual_sdcard|default({})).is_active|default(False) and
	not printer.pause_resume.is_paused %}
	{ action_raise_error("No active print.") }
	{% endif %}

[gcode_macro _km_check_and_set_print_bounds]
description = Validates all print bounds and caches their values.
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set print = printer["gcode_macro print_start_set"].print %}
	
	
	{% if print.MESH_MIN %}
	{% set MESH_MIN = print.MESH_MIN.split(",")|map('float')|list %}
	{% set MESH_MAX = print.MESH_MAX.split(",")|map('float')|list %}
	{%if MESH_MIN[0] < km.print_min[0] or MESH_MIN[1] < km.print_min[1] %}
	{action_raise_error("MESH_MIN %s is outside the printable bounds" %
	(MESH_MIN|string, km.print_min|string))}
	{%elif MESH_MAX[0] > km.print_max[0] or MESH_MAX[1] > km.print_max[1] %}
	{action_raise_error("MESH_MAX %s is outside the printable bounds %s" %
	(MESH_MAX|string, km.print_max|string))}
	{% endif %}
	{% endif %}
	
	
	{% set points = [] %}
	{% if print.MODEL_MIN or print.MODEL_MAX %}
	{% set MODEL_MIN = print.MODEL_MIN.split(",")|map('float')|list %}
	{% set MODEL_MAX = print.MODEL_MAX.split(",")|map('float')|list %}
	{% set points = [MODEL_MIN, MODEL_MAX] %}
	{% endif %}
	{% if (printer.exclude_object|default({})).objects %}
	{% set points = printer.exclude_object.objects|selectattr('polygon')|
	map(attribute='polygon')|sum(start=points) %}
	{% set points_len = points|length %}
	{% if points_len >= 2 %}
	{% set x_coords = (points|map(attribute=0)|sort|list)[0::points_len-1] %}
	{% set y_coords = (points|map(attribute=1)|sort|list)[0::points_len-1] %}
	{% set MODEL_MIN = (x_coords[0],y_coords[0])|map('float')|list %}
	{% set MODEL_MAX = (x_coords[1],y_coords[1])|map('float')|list %}
	PRINT_START_SET MODEL_MIN="{MODEL_MIN|join(',')
	}" MODEL_MAX="{MODEL_MAX|join(',')}"
	{% endif %}
	{% endif %}
	
	{% if MODEL_MIN %}
	
	{% if MODEL_MIN[0] < km.print_min[0] or MODEL_MIN[1] < km.print_min[1] %}
	{action_raise_error("MODEL_MIN %s is outside the printable bounds" %
	(MODEL_MIN|string, km.print_min|string))}
	{% elif MODEL_MAX[0] > km.print_max[0] or MODEL_MAX[1] > km.print_max[1] %}
	{action_raise_error("MODEL_MAX %s is outside the printable bounds %s" %
	(MODEL_MAX|string, km.print_max|string))}
	{% endif %}
	{% endif %}
	
	
	{% if MESH_MIN and MODEL_MIN %}
	PRINT_START_SET PRINT_MIN="{((MODEL_MIN[0],MESH_MIN[0])|min,
	(MODEL_MIN[1],MESH_MIN[1])|min)|join(',')
	}" PRINT_MAX="{((MODEL_MAX[0],MESH_MAX[0])|max,
	(MODEL_MAX[1],MESH_MAX[1])|max)|join(',')}"
	{% else %}
	PRINT_START_SET PRINT_MIN="{km.print_min|join(',')
	}" PRINT_MAX="{km.print_max|join(',')}"
	{% endif %}

[gcode_macro _km_save_state]
description = Tracks gcode state.
variable_state_set = {}
variable_is_ephemeral = 0
gcode = 
	{% if params.SAVE|int %}
	{% set dummy = state_set.__setitem__(params.NAME, None) %}
	{% else %}
	{% set dummy = state_set.__delitem__(params.NAME) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=_km_save_state VARIABLE=is_ephemeral VALUE="{
	1 if state_set|length > 0 else 0 }"

[gcode_macro save_gcode_state]
description = Wraps SAVE_GCODE_STATE to track persistence state.
	Usage: See Klipper documentation
rename_existing = _KM_SAVE_GCODE_STATE
gcode = 
	_KM_SAVE_GCODE_STATE {rawparams}
	{% set NAME = params.NAME|default("default") %}
	_km_save_state NAME={NAME} SAVE=1

[gcode_macro restore_gcode_state]
description = Wraps RESTORE_GCODE_STATE to track persistence state.
	Usage: See Klipper documentation
rename_existing = _KM_RESTORE_GCODE_STATE
gcode = 
	_KM_RESTORE_GCODE_STATE {rawparams}
	{% set NAME = params.NAME|default("default") %}
	_km_save_state NAME={NAME} SAVE=0

[gcode_macro _abort_on_gcode_state]
gcode = 
	{% set save_state = printer["gcode_macro _km_save_state"] %}
	{% if save_state.is_ephemeral %}
	{action_raise_error("Encountered unexpected save state " +
	save_state.state_set|list|sort|string)}
	{% endif %}

[gcode_macro _km_print_status]
variable_last_status = 'none'
variable_status_stack = []
variable_command_list = {}
variable_status_list = [
	'ready',
	'filament_load',
	'filament_unload',
	'bed_heating',
	'chamber_heating',
	'homing',
	'leveling_gantry',
	'calibrating_z',
	'meshing',
	'extruder_heating',
	'purging',
	'printing',
	'pausing',
	'cancelling',
	'completing',
	]
gcode = 
	{% set ACTION = params.ACTION|trim|upper %}
	{% set STATUS = params.STATUS|default("")|trim|lower %}
	
	
	{% if ACTION == "ADD_EVENT" %}
	{% set COMMAND = params.COMMAND %}
	{% set ARGS = params.ARGS|default(0)|int != 0 %}
	{% set TYPE = params.TYPE|default('ENTER')|trim|upper %}
	{% set WHEN = params.WHEN|default('PRINTING')|trim|upper %}
	{% set FILTER_ENTER =
	(params.FILTER_ENTER|default("")|trim|lower).split(',')|
	select()|unique|list %}
	{% set FILTER_LEAVE =
	(params.FILTER_LEAVE|default("")|trim|lower).split(',')|
	select()|unique|list %}
	
	{% set STATUSES = STATUS.split(',')|map('trim')|list %}
	{% for s in (STATUSES if STATUSES[0] != 'all' else status_list) %}
	{% if not s in command_list %}
	{% set dummy = command_list.__setitem__(s,[]) %}
	{% endif %}
	{% set dummy = command_list[s].append({'cmd':COMMAND, 'args':ARGS,
	'type':TYPE, 'when':WHEN,
	'filt_e':FILTER_ENTER,
	'filt_l':FILTER_LEAVE}) %}
	{% endfor %}
	
	
	{% elif ACTION == "CHANGE" %}
	{% if params.RESET_STACK|default(0)|int %}
	{% for dummy in range(status_stack|length) %}
	{% set dummy = status_stack.pop() %}
	{% endfor %}
	
	
	{% elif STATUS == "pop_status" %}
	{% set STATUS = (status_stack|default(['ready'], True)).pop() %}
	{% endif %}
	
	{% if STATUS not in status_list %}
	{action_raise_error("Status '%s' not valid."|format(STATUS))}
	{% endif %}
	
	{% if STATUS != last_status %}
	{% set is_printing =
	printer["gcode_macro print_start_set"].print.PRINT_START_PHASE|
	default("")|length != 0 %}
	{% set print_states = ('ALWAYS', 'PRINTING' if is_printing else 'IDLE') %}
	
	{% for c in command_list[last_status]|default([]) %}
	{% if c.type in ('BOTH','LEAVE') and c.when in print_states and
	(not c.filt_l or STATUS in c.filt_l) %}
	M400
	{c.cmd}{% if c.args %} TYPE=LEAVE WHEN={print_states[1]
	} LAST_STATUS={last_status} NEXT_STATUS={STATUS}{% endif %}
	{% endif %}
	{% endfor %}
	
	{% for c in command_list[STATUS]|default([]) %}
	{% if c.type in ('BOTH','ENTER') and c.when in print_states and
	(not c.filt_e or STATUS in c.filt_e) %}
	M400
	{c.cmd}{% if c.args %} TYPE=ENTER WHEN={print_states[1]
	} LAST_STATUS={last_status} NEXT_STATUS={STATUS}{% endif %}
	{% endif %}
	{% endfor %}
	SET_GCODE_VARIABLE MACRO=_km_print_status VARIABLE=last_status VALUE="'{
	STATUS}'"
	{% endif %}
	
	
	{% elif ACTION == "PUSH_STATUS" %}
	{% set dummy = status_stack.append(last_status) %}
	
	
	{% else %}
	{action_raise_error("Action '%s' not valid."|format(ACTION))}
	{% endif %}

[gcode_macro gcode_on_print_status]
description = Adds a gcode command for a status event.
	Usage: GCODE_ON_PRINT_STATUS STATUS=<status> COMMAND=<gcode> [ARGS=<1|0>]
	[WHEN=<PRINTING|IDLE|ALWAYS>]
	[TYPE=<ENTER|LEAVE|BOTH>]
	[FILTER_ENTER=<status list>]
	[FILTER_LEAVE=<status list>]
gcode = 
	{% set STATUS = (params.STATUS|lower).split(',')|map('trim')|list %}
	{% set TYPE = params.TYPE|default('ENTER')|trim|upper %}
	{% set WHEN = params.WHEN|default('PRINTING')|trim|upper %}
	{% set FILTER_ENTER =
	(params.FILTER_ENTER|default("")|trim|lower).split(',')|select()|list %}
	{% set FILTER_LEAVE =
	(params.FILTER_LEAVE|default("")|trim|lower).split(',')|select()|list %}
	
	
	{% set status_list = printer["gcode_macro _km_print_status"].status_list %}
	{% for s in STATUS %}
	{% if not (s in status_list or s == 'all' and STATUS|length == 1) %}
	{action_raise_error("STATUS parameter '%s' not valid."|format(s))}
	{% endif %}
	{% endfor %}
	
	{% if TYPE not in ('ENTER', 'LEAVE', 'BOTH') %}
	{action_raise_error("TYPE paramater '%s' not valid."|format(TYPE))}
	{% elif WHEN not in ('PRINTING', 'IDLE', 'ALWAYS') %}
	{action_raise_error("WHEN parameter '%s' not valid."|format(WHEN))}
	{% elif TYPE == 'ENTER' and FILTER_LEAVE %}
	{action_raise_error("FILTER_LEAVE not valid with TYPE=ENTER.")}
	{% elif TYPE == 'LEAVE' and FILTER_ENTER %}
	{action_raise_error("FILTER_ENTER not valid with TYPE=LEAVE.")}
	{% endif %}
	{% for f in FILTER_ENTER %}
	{% if f not in status_list %}
	{action_raise_error("FILTER_ENTER parameter '%s' not valid."|format(f))}
	{% endif %}
	{% endfor %}
	{% for f in FILTER_LEAVE %}
	{% if f not in status_list %}
	{action_raise_error("FILTER_LEAVE parameter '%s' not valid."|format(f))}
	{% endif %}
	{% endfor %}
	
	
	_KM_PRINT_STATUS ACTION=ADD_EVENT {rawparams}

[gcode_macro m201]
description = Sets maximum accelleration.
	Usage: M201 [X<accel>] [Y<accel>]
variable_max_accel = 1.7976931348623157e+308
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% if 'X' in params or 'Y' in params %}
	{% set accel = (params.X|default(params.Y)|float,
	params.Y|default(params.X)|float)|min %}
	SET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{accel}"
	{% else %}
	SET_VELOCITY_LIMIT
	{% endif %}

[gcode_macro m203]
description = Sets maximum velocity.
	Usage: M203 [X<velocity>] [Y<velocity>]
gcode = 
	{% if 'X' in params or 'Y' in params %}
	{% set velocity = (params.X|default(params.Y)|float,
	params.Y|default(params.X)|float)|min %}
	SET_VELOCITY_LIMIT VELOCITY="{velocity}"
	{% else %}
	SET_VELOCITY_LIMIT
	{% endif %}

[gcode_macro m205]
description = Sets square corner velocity.
	Usage: M203 [X<velocity>] [Y<velocity>]
gcode = 
	{% if 'X' in params or 'Y' in params %}
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY="{
	(params.X|default(0)|float, params.Y|default(0)|float)|min}"
	{% else %}
	SET_VELOCITY_LIMIT
	{% endif %}

[gcode_macro m900]
description = Sets pressure advance.
	Usage: M900 [K<advance>] [T<extruder_index>]
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% if km.pressure_advance_scale > 0.0 %}
	{% set extruder = "extruder" ~ params.T|replace('0', '')
	if "T" in params else printer.toolhead.extruder %}
	{% if 'K' in params %}
	SET_PRESSURE_ADVANCE EXTRUDER="{extruder}" ADVANCE="{
	params.K|float * km.pressure_advance_scale}"
	{% endif %}
	{% endif %}

[gcode_macro _reset_velocity_limits]
description = Sets maximum accelleration.
	Usage: M204 [S<accel>] [P<accel> T<accel>]
gcode = 
	SET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{1.7976931348623157e+308}"

[gcode_macro bed_mesh_calibrate]
rename_existing = _KM_BED_MESH_CALIBRATE_BASE
description = Wraps BED_MESH_CALIBRATE, scaling probe count to specified area.
	Usage: See Klipper documentation.
gcode = 
	BED_MESH_CALIBRATE_FAST{%for k in params%}{' '~k~'="'~params[k]~'"'}{%endfor%}

[gcode_macro g29]
gcode = 
	BED_MESH_CALIBRATE

[idle_timeout]
gcode = 
	_KM_IDLE_TIMEOUT

[respond]

[gcode_macro PRINT_START]
rename_existing = KM_PRINT_START
gcode = 
	
	STATUS_HOMING
	KM_PRINT_START {rawparams}
	STATUS_PRINTING

[board_pins EBB36_G0B1_v1.2]
mcu = ebbcan
aliases = 
aliases_step = 
	EXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15
aliases_limitsw = 
	LIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6
aliases_bltouch = 
	PROBE_1=PB9,PROBE_2=PB8
aliases_fans = 
	FAN0=PA1,FAN1=PA0
aliases_thermistors = 
	TH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7
aliases_heaters = 
	HE0=PB13
aliases_rgb = 
	RGBLED=PD3
aliases_adxl = 
	ADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11
aliases_i2c = 
	AUX0=PB3,AUX1=PB4

[neopixel sb_leds]
pin = ebbcan:RGBLED
chain_count = 3
color_order = RGBW
initial_red = 0.0
initial_green = 0.0
initial_blue = 0.0
initial_white = 1.0

[save_variables]
filename = ~/printer_data/variables.cfg

[mcu CB1]
serial = /tmp/klipper_host_mcu

[mcu]
canbus_uuid = f94e10a9add8

[mcu ebbcan]
canbus_uuid = 57244ec148c0

[printer]
kinematics = corexy
max_velocity = 600
max_accel = 10000
max_accel_to_decel = 5000
max_z_velocity = 5
max_z_accel = 100

[stepper_x]
step_pin = PE2
dir_pin = !PB4
enable_pin = !PC11
microsteps = 16
rotation_distance = 40
endstop_pin = !ebbcan:LIMIT_2
position_endstop = 220
position_min = -4
position_max = 220
homing_speed = 50

[tmc2209 stepper_x]
uart_pin = PC10
diag_pin = PF3
run_current = 1.1

[tmc2209 stepper_y]
uart_pin = PF13
diag_pin = PF4
run_current = 1.1

[tmc2209 stepper_z]
uart_pin = PF9
diag_pin = PF5
run_current = 0.650

[tmc2209 extruder]
uart_pin = ebbcan:EXT_UART
diag_pin = ebbcan:LIMIT_3
run_current = 0.650

[stepper_y]
step_pin = PF12
dir_pin = !PF11
enable_pin = !PB3
microsteps = 16
rotation_distance = 40
endstop_pin = ^PF3
position_endstop = 220
position_min = -4
position_max = 220
homing_speed = 50

[stepper_z]
step_pin = PD7
dir_pin = !PD6
enable_pin = !PF10
microsteps = 16
rotation_distance = 8
endstop_pin = probe:z_virtual_endstop
position_max = 300
position_min = -3

[heater_bed]
heater_pin = PB7
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PA0
min_temp = 0
max_temp = 130
control = pid
pid_kp = 63.528
pid_ki = 0.875
pid_kd = 1153.041

[temperature_sensor raspberry_pi]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor mcu_temp]
sensor_type = temperature_mcu
min_temp = 0
max_temp = 100

[controller_fan MCU_Fan]
pin = PE6
heater = extruder
fan_speed = 1

[heater_fan heatbreak_cooling_fan]
pin = ebbcan:FAN0
kick_start_time = 0.25
heater = extruder
heater_temp = 50.0
fan_speed = 1

[fan]
pin = ebbcan:FAN1

[safe_z_home]
home_xy_position = 140, 140
speed = 100
z_hop = 10
z_hop_speed = 20

[extruder]
step_pin = ebbcan:EXT_STEP
dir_pin = ebbcan:EXT_DIR
enable_pin = !ebbcan:EXT_EN
microsteps = 16
rotation_distance = 4.71
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.750
max_extrude_only_distance = 101.0
heater_pin = ebbcan:HE0
sensor_type = ATC Semitec 104NT-4-R025H42G
sensor_pin = ebbcan:TH0
min_temp = 0
max_temp = 300
max_extrude_cross_section = 5
pressure_advance = 0.02
control = pid
pid_kp = 20.603
pid_ki = 0.988
pid_kd = 107.392

[bltouch]
sensor_pin = ebbcan:PROBE_2
control_pin = ebbcan:PROBE_1
x_offset = -40
y_offset = -17
samples = 2
samples_tolerance = 0.015
samples_tolerance_retries = 5
z_offset = 2.849

[bed_mesh]
speed = 100
horizontal_move_z = 5
mesh_min = 10, 27
mesh_max = 173, 200
probe_count = 5, 5
algorithm = bicubic
fade_start = 1
fade_end = 10

[bed_screws]
screw1 = 55,55
screw2 = 200,55
screw3 = 200,205
screw4 = 55,205

[screws_tilt_adjust]
screw1 = 65,55
screw1_name = front left screw
screw2 = 218,55
screw2_name = front right screw
screw3 = 218,215
screw3_name = rear right screw
screw4 = 65,215
screw4_name = rear left screw
horizontal_move_z = 10
speed = 50
screw_thread = CW-M4

[display]
lcd_type = st7920
cs_pin = PB12
sclk_pin = PB13
sid_pin = PB15
encoder_pins = ^PB14, ^PB10
click_pin = ^!PB2

[exclude_object]

[firmware_retraction]
retract_length = 0.4
retract_speed = 20
unretract_extra_length = 0
unretract_speed = 10

[input_shaper]
shaper_type_x = 2hump_ei
shaper_freq_x = 86.2
shaper_type_y = zv
shaper_freq_y = 44.8

[gcode_arcs]
resolution = 1.0

[adxl345]
cs_pin = ebbcan:ADXL_CS
spi_software_sclk_pin = ebbcan:ADXL_SCLK
spi_software_mosi_pin = ebbcan:ADXL_MOSI
spi_software_miso_pin = ebbcan:ADXL_MISO

[resonance_tester]
accel_chip = adxl345
probe_points = 
	120,120,20

[bed_mesh default]
version = 1
points = 
	0.027500, 0.058750, 0.091250, 0.182500
	-0.003750, 0.061250, 0.072500, 0.125000
	0.021250, 0.016250, 0.013750, 0.033750
	-0.023750, -0.018750, -0.036250, -0.037500
x_count = 4
y_count = 4
mesh_x_pps = 2
mesh_y_pps = 2
algo = bicubic
tension = 0.2
min_x = 48.75
max_x = 171.24
min_y = 48.75
max_y = 171.24
=======================
Extruder max_extrude_ratio=2.078758
mcu 'mcu': Starting CAN connect
Created a socket
webhooks client 281473542983344: New connection
webhooks client 281473542983344: Client info {'program': 'Moonraker', 'version': 'v0.8.0-92-g504a3a7'}
Loaded MCU 'mcu' 109 commands (v0.11.0-241-gffb5105b / gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2)
MCU 'mcu' config: ADC_MAX=4095 BUS_PINS_i2c1_PA9_PA10=PA9,PA10 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_i2c2_PB13_PB14=PB13,PB14 BUS_PINS_i2c3_PB3_PB4=PB3,PB4 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3=PB4,PB5,PB3 CANBUS_BRIDGE=1 CLOCK_FREQ=64000000 MCU=stm32g0b1xx PWM_MAX=255 RECEIVE_WINDOW=192 RESERVE_PINS_CAN=PD12,PD13 RESERVE_PINS_USB=PA11,PA12 RESERVE_PINS_crystal=PF0,PF1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
mcu 'CB1': Starting connect
Loaded MCU 'CB1' 113 commands (v0.11.0-241-gffb5105b / gcc: (Debian 10.2.1-6) 10.2.1 20210110 binutils: (GNU Binutils for Debian) 2.35.2)
MCU 'CB1' config: ADC_MAX=4095 CLOCK_FREQ=50000000 MCU=linux PCA9685_MAX=4096 PWM_MAX=32768 STATS_SUMSQ_BASE=256
mcu 'ebbcan': Starting CAN connect
Created a socket
mcu 'ebbcan': got {'count': 497, 'sum': 580273, 'sumsq': 5524465, '#name': 'stats', '#sent_time': 749.285376773, '#receive_time': 749.285981106}
Loaded MCU 'ebbcan' 109 commands (v0.11.0-241-gffb5105b / gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2)
MCU 'ebbcan' config: ADC_MAX=4095 BUS_PINS_i2c1_PA9_PA10=PA9,PA10 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_i2c2_PB13_PB14=PB13,PB14 BUS_PINS_i2c3_PB3_PB4=PB3,PB4 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3=PB4,PB5,PB3 CANBUS_FREQUENCY=1000000 CLOCK_FREQ=64000000 MCU=stm32g0b1xx PWM_MAX=255 RECEIVE_WINDOW=192 RESERVE_PINS_CAN=PB0,PB1 RESERVE_PINS_crystal=PF0,PF1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
mcu_temperature 'mcu' nominal base=-268.847262 slope=1298.126801
Sending MCU 'mcu' printer configuration...
Configured MCU 'mcu' (1024 moves)
Sending MCU 'CB1' printer configuration...
Configured MCU 'CB1' (1024 moves)
Sending MCU 'ebbcan' printer configuration...
Configured MCU 'ebbcan' (1024 moves)
Starting heater checks for heater_bed
bed_mesh: generated points
Index |  Tool Adjusted  |   Probe
  0   | (50.0, 44.0)    | (10.0, 27.0)
  1   | (90.8, 44.0)    | (50.8, 27.0)
  2   | (131.5, 44.0)   | (91.5, 27.0)
  3   | (172.2, 44.0)   | (132.2, 27.0)
  4   | (213.0, 44.0)   | (173.0, 27.0)
  5   | (213.0, 87.2)   | (173.0, 70.2)
  6   | (172.2, 87.2)   | (132.2, 70.2)
  7   | (131.5, 87.2)   | (91.5, 70.2)
  8   | (90.8, 87.2)    | (50.8, 70.2)
  9   | (50.0, 87.2)    | (10.0, 70.2)
  10  | (50.0, 130.5)   | (10.0, 113.5)
  11  | (90.8, 130.5)   | (50.8, 113.5)
  12  | (131.5, 130.5)  | (91.5, 113.5)
  13  | (172.2, 130.5)  | (132.2, 113.5)
  14  | (213.0, 130.5)  | (173.0, 113.5)
  15  | (213.0, 173.8)  | (173.0, 156.8)
  16  | (172.2, 173.8)  | (132.2, 156.8)
  17  | (131.5, 173.8)  | (91.5, 156.8)
  18  | (90.8, 173.8)   | (50.8, 156.8)
  19  | (50.0, 173.8)   | (10.0, 156.8)
  20  | (50.0, 217.0)   | (10.0, 200.0)
  21  | (90.8, 217.0)   | (50.8, 200.0)
  22  | (131.5, 217.0)  | (91.5, 200.0)
  23  | (172.2, 217.0)  | (132.2, 200.0)
  24  | (213.0, 217.0)  | (173.0, 200.0)
Starting heater checks for extruder
Stats 751.2: gcodein=0  mcu: mcu_awake=0.043 mcu_task_avg=0.000014 mcu_task_stddev=0.000009 bytes_write=2847 bytes_read=5685 bytes_retransmit=0 bytes_invalid=0 send_seq=211 receive_seq=208 retransmit_seq=0 srtt=0.002 rttvar=0.002 rto=0.025 ready_bytes=1733 upcoming_bytes=154 freq=64006344 CB1: mcu_awake=0.004 mcu_task_avg=0.000028 mcu_task_stddev=0.000018 bytes_write=819 bytes_read=4524 bytes_retransmit=0 bytes_invalid=0 send_seq=112 receive_seq=112 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999584 adj=49999443 ebbcan: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=1499 bytes_read=4839 bytes_retransmit=0 bytes_invalid=0 send_seq=158 receive_seq=158 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001868 adj=64000801  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=62.0 mcu_temp: temp=37.1 sysload=1.33 cputime=106.526 memavail=688728 print_time=0.010 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
webhooks: registering remote method 'shutdown_machine' for connection id: 281473542983344
webhooks: registering remote method 'reboot_machine' for connection id: 281473542983344
webhooks: registering remote method 'pause_job_queue' for connection id: 281473542983344
webhooks: registering remote method 'start_job_queue' for connection id: 281473542983344
Active bed surface: default; offset: -0.050
Stats 752.3: gcodein=0  mcu: mcu_awake=0.043 mcu_task_avg=0.000014 mcu_task_stddev=0.000009 bytes_write=4930 bytes_read=6022 bytes_retransmit=0 bytes_invalid=0 send_seq=250 receive_seq=250 retransmit_seq=0 srtt=0.004 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64003365 CB1: mcu_awake=0.004 mcu_task_avg=0.000028 mcu_task_stddev=0.000018 bytes_write=825 bytes_read=4540 bytes_retransmit=0 bytes_invalid=0 send_seq=113 receive_seq=113 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000050 adj=49991555 ebbcan: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=1505 bytes_read=4915 bytes_retransmit=0 bytes_invalid=0 send_seq=159 receive_seq=159 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64003120 adj=63992170  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=62.5 mcu_temp: temp=37.4 sysload=1.33 cputime=106.835 memavail=692996 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 753.3: gcodein=0  mcu: mcu_awake=0.043 mcu_task_avg=0.000014 mcu_task_stddev=0.000009 bytes_write=4936 bytes_read=6125 bytes_retransmit=0 bytes_invalid=0 send_seq=251 receive_seq=251 retransmit_seq=0 srtt=0.003 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64003384 CB1: mcu_awake=0.004 mcu_task_avg=0.000028 mcu_task_stddev=0.000018 bytes_write=831 bytes_read=4556 bytes_retransmit=0 bytes_invalid=0 send_seq=114 receive_seq=114 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999897 adj=49998074 ebbcan: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=1511 bytes_read=4976 bytes_retransmit=0 bytes_invalid=0 send_seq=160 receive_seq=160 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001349 adj=64001391  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=63.2 mcu_temp: temp=37.2 sysload=1.33 cputime=106.914 memavail=689592 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 754.3: gcodein=0  mcu: mcu_awake=0.111 mcu_task_avg=0.000037 mcu_task_stddev=0.000164 bytes_write=4942 bytes_read=6260 bytes_retransmit=0 bytes_invalid=0 send_seq=252 receive_seq=252 retransmit_seq=0 srtt=0.003 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64002396 CB1: mcu_awake=0.004 mcu_task_avg=0.000028 mcu_task_stddev=0.000018 bytes_write=837 bytes_read=4572 bytes_retransmit=0 bytes_invalid=0 send_seq=115 receive_seq=115 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999873 adj=49997551 ebbcan: mcu_awake=0.006 mcu_task_avg=0.000016 mcu_task_stddev=0.000027 bytes_write=1517 bytes_read=5052 bytes_retransmit=0 bytes_invalid=0 send_seq=161 receive_seq=161 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000795 adj=63997439  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=61.8 mcu_temp: temp=37.3 sysload=1.33 cputime=106.950 memavail=689168 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 755.3: gcodein=0  mcu: mcu_awake=0.111 mcu_task_avg=0.000037 mcu_task_stddev=0.000164 bytes_write=4948 bytes_read=6377 bytes_retransmit=0 bytes_invalid=0 send_seq=253 receive_seq=253 retransmit_seq=0 srtt=0.003 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64002005 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000010 bytes_write=843 bytes_read=4601 bytes_retransmit=0 bytes_invalid=0 send_seq=116 receive_seq=116 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999896 adj=49999361 ebbcan: mcu_awake=0.006 mcu_task_avg=0.000016 mcu_task_stddev=0.000027 bytes_write=1523 bytes_read=5128 bytes_retransmit=0 bytes_invalid=0 send_seq=162 receive_seq=162 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000554 adj=63998825  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=61.2 mcu_temp: temp=37.5 sysload=1.33 cputime=106.987 memavail=690708 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 756.3: gcodein=0  mcu: mcu_awake=0.111 mcu_task_avg=0.000037 mcu_task_stddev=0.000164 bytes_write=4954 bytes_read=6480 bytes_retransmit=0 bytes_invalid=0 send_seq=254 receive_seq=254 retransmit_seq=0 srtt=0.002 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001695 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000010 bytes_write=849 bytes_read=4617 bytes_retransmit=0 bytes_invalid=0 send_seq=117 receive_seq=117 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999878 adj=49999919 ebbcan: mcu_awake=0.006 mcu_task_avg=0.000016 mcu_task_stddev=0.000027 bytes_write=1529 bytes_read=5189 bytes_retransmit=0 bytes_invalid=0 send_seq=163 receive_seq=163 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000510 adj=63999199  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=61.4 mcu_temp: temp=37.5 sysload=1.22 cputime=107.028 memavail=690848 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 757.3: gcodein=0  mcu: mcu_awake=0.111 mcu_task_avg=0.000037 mcu_task_stddev=0.000164 bytes_write=4960 bytes_read=6598 bytes_retransmit=0 bytes_invalid=0 send_seq=255 receive_seq=255 retransmit_seq=0 srtt=0.002 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001512 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000010 bytes_write=855 bytes_read=4633 bytes_retransmit=0 bytes_invalid=0 send_seq=118 receive_seq=118 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999857 adj=50000193 ebbcan: mcu_awake=0.006 mcu_task_avg=0.000016 mcu_task_stddev=0.000027 bytes_write=1535 bytes_read=5250 bytes_retransmit=0 bytes_invalid=0 send_seq=164 receive_seq=164 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000471 adj=63999843  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=61.4 mcu_temp: temp=37.5 sysload=1.22 cputime=107.065 memavail=690640 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 758.3: gcodein=0  mcu: mcu_awake=0.111 mcu_task_avg=0.000037 mcu_task_stddev=0.000164 bytes_write=4972 bytes_read=6731 bytes_retransmit=0 bytes_invalid=0 send_seq=257 receive_seq=257 retransmit_seq=0 srtt=0.002 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001390 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000010 bytes_write=861 bytes_read=4649 bytes_retransmit=0 bytes_invalid=0 send_seq=119 receive_seq=119 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999961 adj=50000177 ebbcan: mcu_awake=0.006 mcu_task_avg=0.000016 mcu_task_stddev=0.000027 bytes_write=1568 bytes_read=5344 bytes_retransmit=0 bytes_invalid=0 send_seq=167 receive_seq=167 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000419 adj=64000059  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=61.1 mcu_temp: temp=37.5 sysload=1.22 cputime=107.111 memavail=690400 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 759.3: gcodein=0  mcu: mcu_awake=0.006 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=4978 bytes_read=6849 bytes_retransmit=0 bytes_invalid=0 send_seq=258 receive_seq=258 retransmit_seq=0 srtt=0.002 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001353 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000010 bytes_write=867 bytes_read=4665 bytes_retransmit=0 bytes_invalid=0 send_seq=120 receive_seq=120 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999926 adj=50000466 ebbcan: mcu_awake=0.006 mcu_task_avg=0.000016 mcu_task_stddev=0.000027 bytes_write=1601 bytes_read=5423 bytes_retransmit=0 bytes_invalid=0 send_seq=170 receive_seq=170 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000395 adj=64000198  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=60.9 mcu_temp: temp=37.3 sysload=1.22 cputime=107.152 memavail=690456 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 760.3: gcodein=0  mcu: mcu_awake=0.006 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=4984 bytes_read=6967 bytes_retransmit=0 bytes_invalid=0 send_seq=259 receive_seq=259 retransmit_seq=0 srtt=0.001 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001304 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000012 bytes_write=873 bytes_read=4694 bytes_retransmit=0 bytes_invalid=0 send_seq=121 receive_seq=121 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999929 adj=50000157 ebbcan: mcu_awake=0.002 mcu_task_avg=0.000015 mcu_task_stddev=0.000023 bytes_write=1634 bytes_read=5516 bytes_retransmit=0 bytes_invalid=0 send_seq=173 receive_seq=173 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000371 adj=63999960  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=61.3 mcu_temp: temp=37.5 sysload=1.22 cputime=107.202 memavail=690656 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 761.3: gcodein=0  mcu: mcu_awake=0.006 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=4990 bytes_read=7084 bytes_retransmit=0 bytes_invalid=0 send_seq=260 receive_seq=260 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001276 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000012 bytes_write=879 bytes_read=4710 bytes_retransmit=0 bytes_invalid=0 send_seq=122 receive_seq=122 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000020 adj=49999991 ebbcan: mcu_awake=0.002 mcu_task_avg=0.000015 mcu_task_stddev=0.000023 bytes_write=1640 bytes_read=5592 bytes_retransmit=0 bytes_invalid=0 send_seq=174 receive_seq=174 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000368 adj=63999830  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=61.7 mcu_temp: temp=37.7 sysload=1.29 cputime=107.244 memavail=686764 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 762.3: gcodein=0  mcu: mcu_awake=0.006 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=4996 bytes_read=7187 bytes_retransmit=0 bytes_invalid=0 send_seq=261 receive_seq=261 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001270 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000012 bytes_write=885 bytes_read=4726 bytes_retransmit=0 bytes_invalid=0 send_seq=123 receive_seq=123 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000013 adj=50000168 ebbcan: mcu_awake=0.002 mcu_task_avg=0.000015 mcu_task_stddev=0.000023 bytes_write=1673 bytes_read=5671 bytes_retransmit=0 bytes_invalid=0 send_seq=177 receive_seq=177 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000428 adj=63999739  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=63.5 mcu_temp: temp=37.4 sysload=1.29 cputime=107.290 memavail=691900 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 763.3: gcodein=0  mcu: mcu_awake=0.006 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5002 bytes_read=7305 bytes_retransmit=0 bytes_invalid=0 send_seq=262 receive_seq=262 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001246 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000012 bytes_write=891 bytes_read=4742 bytes_retransmit=0 bytes_invalid=0 send_seq=124 receive_seq=124 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000003 adj=49999871 ebbcan: mcu_awake=0.002 mcu_task_avg=0.000015 mcu_task_stddev=0.000023 bytes_write=1679 bytes_read=5747 bytes_retransmit=0 bytes_invalid=0 send_seq=178 receive_seq=178 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000410 adj=63999845  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=61.9 mcu_temp: temp=37.4 sysload=1.29 cputime=107.327 memavail=692212 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 764.3: gcodein=0  mcu: mcu_awake=0.006 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5008 bytes_read=7422 bytes_retransmit=0 bytes_invalid=0 send_seq=263 receive_seq=263 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001234 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000012 bytes_write=897 bytes_read=4758 bytes_retransmit=0 bytes_invalid=0 send_seq=125 receive_seq=125 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999997 adj=49999700 ebbcan: mcu_awake=0.002 mcu_task_avg=0.000015 mcu_task_stddev=0.000023 bytes_write=1685 bytes_read=5808 bytes_retransmit=0 bytes_invalid=0 send_seq=179 receive_seq=179 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000396 adj=63999707  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=61.3 mcu_temp: temp=37.6 sysload=1.29 cputime=107.366 memavail=692308 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 765.3: gcodein=0  mcu: mcu_awake=0.006 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5014 bytes_read=7540 bytes_retransmit=0 bytes_invalid=0 send_seq=264 receive_seq=264 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001242 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000014 bytes_write=903 bytes_read=4787 bytes_retransmit=0 bytes_invalid=0 send_seq=126 receive_seq=126 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000037 adj=49999550 ebbcan: mcu_awake=0.002 mcu_task_avg=0.000015 mcu_task_stddev=0.000022 bytes_write=1691 bytes_read=5883 bytes_retransmit=0 bytes_invalid=0 send_seq=180 receive_seq=180 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000415 adj=63999563  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=60.1 mcu_temp: temp=37.5 sysload=1.29 cputime=107.426 memavail=692876 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 766.3: gcodein=0  mcu: mcu_awake=0.006 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5020 bytes_read=7658 bytes_retransmit=0 bytes_invalid=0 send_seq=265 receive_seq=265 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001243 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000014 bytes_write=909 bytes_read=4803 bytes_retransmit=0 bytes_invalid=0 send_seq=127 receive_seq=127 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000063 adj=49999580 ebbcan: mcu_awake=0.002 mcu_task_avg=0.000015 mcu_task_stddev=0.000022 bytes_write=1697 bytes_read=5959 bytes_retransmit=0 bytes_invalid=0 send_seq=181 receive_seq=181 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000429 adj=63999515  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=59.4 mcu_temp: temp=37.5 sysload=1.18 cputime=107.488 memavail=693196 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 767.3: gcodein=0  mcu: mcu_awake=0.006 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5026 bytes_read=7775 bytes_retransmit=0 bytes_invalid=0 send_seq=266 receive_seq=266 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001240 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000014 bytes_write=915 bytes_read=4819 bytes_retransmit=0 bytes_invalid=0 send_seq=128 receive_seq=128 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000081 adj=49999582 ebbcan: mcu_awake=0.002 mcu_task_avg=0.000015 mcu_task_stddev=0.000022 bytes_write=1703 bytes_read=6020 bytes_retransmit=0 bytes_invalid=0 send_seq=182 receive_seq=182 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000436 adj=63999492  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=59.7 mcu_temp: temp=37.6 sysload=1.18 cputime=107.547 memavail=688992 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 768.3: gcodein=0  mcu: mcu_awake=0.006 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5032 bytes_read=7878 bytes_retransmit=0 bytes_invalid=0 send_seq=267 receive_seq=267 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001270 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000014 bytes_write=921 bytes_read=4835 bytes_retransmit=0 bytes_invalid=0 send_seq=129 receive_seq=129 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000086 adj=49999560 ebbcan: mcu_awake=0.002 mcu_task_avg=0.000015 mcu_task_stddev=0.000022 bytes_write=1709 bytes_read=6081 bytes_retransmit=0 bytes_invalid=0 send_seq=183 receive_seq=183 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000421 adj=63999469  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=61.5 mcu_temp: temp=37.5 sysload=1.18 cputime=107.582 memavail=689260 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 769.3: gcodein=0  mcu: mcu_awake=0.006 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5038 bytes_read=7996 bytes_retransmit=0 bytes_invalid=0 send_seq=268 receive_seq=268 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001276 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000014 bytes_write=927 bytes_read=4851 bytes_retransmit=0 bytes_invalid=0 send_seq=130 receive_seq=130 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000075 adj=49999346 ebbcan: mcu_awake=0.002 mcu_task_avg=0.000015 mcu_task_stddev=0.000022 bytes_write=1715 bytes_read=6157 bytes_retransmit=0 bytes_invalid=0 send_seq=184 receive_seq=184 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000422 adj=63999154  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=61.0 mcu_temp: temp=37.6 sysload=1.18 cputime=107.623 memavail=689976 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 770.3: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5044 bytes_read=8128 bytes_retransmit=0 bytes_invalid=0 send_seq=269 receive_seq=269 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001256 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=933 bytes_read=4880 bytes_retransmit=0 bytes_invalid=0 send_seq=131 receive_seq=131 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000065 adj=49999193 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1721 bytes_read=6232 bytes_retransmit=0 bytes_invalid=0 send_seq=185 receive_seq=185 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000421 adj=63999125  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=60.7 mcu_temp: temp=37.6 sysload=1.18 cputime=107.660 memavail=690060 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 771.3: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5050 bytes_read=8231 bytes_retransmit=0 bytes_invalid=0 send_seq=270 receive_seq=270 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001241 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=939 bytes_read=4896 bytes_retransmit=0 bytes_invalid=0 send_seq=132 receive_seq=132 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000050 adj=49999133 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1727 bytes_read=6293 bytes_retransmit=0 bytes_invalid=0 send_seq=186 receive_seq=186 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000412 adj=63999157  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=61.0 mcu_temp: temp=37.5 sysload=1.09 cputime=107.696 memavail=690060 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 772.3: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5056 bytes_read=8349 bytes_retransmit=0 bytes_invalid=0 send_seq=271 receive_seq=271 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001235 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=945 bytes_read=4912 bytes_retransmit=0 bytes_invalid=0 send_seq=133 receive_seq=133 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000054 adj=49999101 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1733 bytes_read=6369 bytes_retransmit=0 bytes_invalid=0 send_seq=187 receive_seq=187 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000417 adj=63999196  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=61.6 mcu_temp: temp=37.3 sysload=1.09 cputime=107.743 memavail=688904 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 773.3: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5062 bytes_read=8466 bytes_retransmit=0 bytes_invalid=0 send_seq=272 receive_seq=272 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001222 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=951 bytes_read=4928 bytes_retransmit=0 bytes_invalid=0 send_seq=134 receive_seq=134 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000064 adj=49999155 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1739 bytes_read=6430 bytes_retransmit=0 bytes_invalid=0 send_seq=188 receive_seq=188 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000409 adj=63999260  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=61.2 mcu_temp: temp=37.5 sysload=1.09 cputime=107.779 memavail=689156 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 774.3: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5068 bytes_read=8569 bytes_retransmit=0 bytes_invalid=0 send_seq=273 receive_seq=273 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001214 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=957 bytes_read=4944 bytes_retransmit=0 bytes_invalid=0 send_seq=135 receive_seq=135 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000089 adj=49999265 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1751 bytes_read=6507 bytes_retransmit=0 bytes_invalid=0 send_seq=190 receive_seq=190 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000399 adj=63999273  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=60.6 mcu_temp: temp=37.5 sysload=1.09 cputime=107.825 memavail=689688 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 775.3: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5074 bytes_read=8716 bytes_retransmit=0 bytes_invalid=0 send_seq=274 receive_seq=274 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001205 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000014 bytes_write=963 bytes_read=4973 bytes_retransmit=0 bytes_invalid=0 send_seq=136 receive_seq=136 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000081 adj=49999431 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1757 bytes_read=6597 bytes_retransmit=0 bytes_invalid=0 send_seq=191 receive_seq=191 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000393 adj=63999242  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=61.1 mcu_temp: temp=37.4 sysload=1.09 cputime=107.865 memavail=689464 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 776.3: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5080 bytes_read=8819 bytes_retransmit=0 bytes_invalid=0 send_seq=275 receive_seq=275 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001207 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000014 bytes_write=969 bytes_read=4989 bytes_retransmit=0 bytes_invalid=0 send_seq=137 receive_seq=137 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000073 adj=49999351 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1763 bytes_read=6658 bytes_retransmit=0 bytes_invalid=0 send_seq=192 receive_seq=192 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000396 adj=63999249  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=60.9 mcu_temp: temp=37.4 sysload=1.08 cputime=107.904 memavail=689776 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 777.3: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5086 bytes_read=8922 bytes_retransmit=0 bytes_invalid=0 send_seq=276 receive_seq=276 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001208 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000014 bytes_write=975 bytes_read=5005 bytes_retransmit=0 bytes_invalid=0 send_seq=138 receive_seq=138 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000066 adj=49999233 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1769 bytes_read=6719 bytes_retransmit=0 bytes_invalid=0 send_seq=193 receive_seq=193 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000393 adj=63999239  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=61.3 mcu_temp: temp=37.5 sysload=1.08 cputime=107.940 memavail=689568 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 778.3: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5092 bytes_read=9054 bytes_retransmit=0 bytes_invalid=0 send_seq=277 receive_seq=277 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001203 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000014 bytes_write=981 bytes_read=5021 bytes_retransmit=0 bytes_invalid=0 send_seq=139 receive_seq=139 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000060 adj=49999155 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1775 bytes_read=6795 bytes_retransmit=0 bytes_invalid=0 send_seq=194 receive_seq=194 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000409 adj=63999198  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=61.0 mcu_temp: temp=37.6 sysload=1.08 cputime=107.983 memavail=689336 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 779.3: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5098 bytes_read=9157 bytes_retransmit=0 bytes_invalid=0 send_seq=278 receive_seq=278 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001204 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000014 bytes_write=987 bytes_read=5037 bytes_retransmit=0 bytes_invalid=0 send_seq=140 receive_seq=140 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000078 adj=49999129 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1781 bytes_read=6856 bytes_retransmit=0 bytes_invalid=0 send_seq=195 receive_seq=195 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000419 adj=63999343  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=59.9 mcu_temp: temp=37.1 sysload=1.08 cputime=108.042 memavail=689356 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 780.3: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5104 bytes_read=9275 bytes_retransmit=0 bytes_invalid=0 send_seq=279 receive_seq=279 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001207 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=993 bytes_read=5066 bytes_retransmit=0 bytes_invalid=0 send_seq=141 receive_seq=141 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000083 adj=49999259 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1787 bytes_read=6931 bytes_retransmit=0 bytes_invalid=0 send_seq=196 receive_seq=196 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000424 adj=63999380  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=59.1 mcu_temp: temp=37.4 sysload=1.08 cputime=108.104 memavail=689356 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 781.3: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5110 bytes_read=9407 bytes_retransmit=0 bytes_invalid=0 send_seq=280 receive_seq=280 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001210 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=999 bytes_read=5082 bytes_retransmit=0 bytes_invalid=0 send_seq=142 receive_seq=142 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000082 adj=49999245 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1793 bytes_read=7007 bytes_retransmit=0 bytes_invalid=0 send_seq=197 receive_seq=197 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000425 adj=63999348  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=59.0 mcu_temp: temp=37.5 sysload=0.99 cputime=108.165 memavail=689104 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 782.3: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5116 bytes_read=9510 bytes_retransmit=0 bytes_invalid=0 send_seq=281 receive_seq=281 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001212 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=1005 bytes_read=5098 bytes_retransmit=0 bytes_invalid=0 send_seq=143 receive_seq=143 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000084 adj=49999196 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1799 bytes_read=7068 bytes_retransmit=0 bytes_invalid=0 send_seq=198 receive_seq=198 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000419 adj=63999299  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=59.0 mcu_temp: temp=37.5 sysload=0.99 cputime=108.221 memavail=688684 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 783.3: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5122 bytes_read=9613 bytes_retransmit=0 bytes_invalid=0 send_seq=282 receive_seq=282 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001209 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=1011 bytes_read=5114 bytes_retransmit=0 bytes_invalid=0 send_seq=144 receive_seq=144 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000079 adj=49999183 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1805 bytes_read=7129 bytes_retransmit=0 bytes_invalid=0 send_seq=199 receive_seq=199 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000412 adj=63999210  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=60.2 mcu_temp: temp=37.6 sysload=0.99 cputime=108.257 memavail=688976 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 784.3: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5128 bytes_read=9745 bytes_retransmit=0 bytes_invalid=0 send_seq=283 receive_seq=283 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001204 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=1017 bytes_read=5130 bytes_retransmit=0 bytes_invalid=0 send_seq=145 receive_seq=145 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000071 adj=49999146 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1811 bytes_read=7205 bytes_retransmit=0 bytes_invalid=0 send_seq=200 receive_seq=200 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000415 adj=63999186  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=60.2 mcu_temp: temp=37.5 sysload=0.99 cputime=108.298 memavail=688976 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 785.3: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5134 bytes_read=9863 bytes_retransmit=0 bytes_invalid=0 send_seq=284 receive_seq=284 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001205 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000015 bytes_write=1023 bytes_read=5159 bytes_retransmit=0 bytes_invalid=0 send_seq=146 receive_seq=146 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000072 adj=49999112 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1817 bytes_read=7280 bytes_retransmit=0 bytes_invalid=0 send_seq=201 receive_seq=201 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000416 adj=63999261  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=59.3 mcu_temp: temp=37.6 sysload=0.99 cputime=108.363 memavail=689288 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 786.3: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5140 bytes_read=9966 bytes_retransmit=0 bytes_invalid=0 send_seq=285 receive_seq=285 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001208 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000015 bytes_write=1029 bytes_read=5175 bytes_retransmit=0 bytes_invalid=0 send_seq=147 receive_seq=147 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000074 adj=49999125 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1823 bytes_read=7341 bytes_retransmit=0 bytes_invalid=0 send_seq=202 receive_seq=202 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000416 adj=63999246  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=58.9 mcu_temp: temp=37.5 sysload=0.91 cputime=108.424 memavail=689108 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 787.3: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5146 bytes_read=10098 bytes_retransmit=0 bytes_invalid=0 send_seq=286 receive_seq=286 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001214 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000015 bytes_write=1035 bytes_read=5191 bytes_retransmit=0 bytes_invalid=0 send_seq=148 receive_seq=148 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000076 adj=49999119 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1829 bytes_read=7417 bytes_retransmit=0 bytes_invalid=0 send_seq=203 receive_seq=203 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000418 adj=63999208  heater_bed: target=0 temp=26.0 pwm=0.000 raspberry_pi: temp=59.1 mcu_temp: temp=37.6 sysload=0.91 cputime=108.485 memavail=689584 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 788.3: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5152 bytes_read=10201 bytes_retransmit=0 bytes_invalid=0 send_seq=287 receive_seq=287 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001207 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000015 bytes_write=1041 bytes_read=5207 bytes_retransmit=0 bytes_invalid=0 send_seq=149 receive_seq=149 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000079 adj=49999099 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1835 bytes_read=7478 bytes_retransmit=0 bytes_invalid=0 send_seq=204 receive_seq=204 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000413 adj=63999172  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=60.2 mcu_temp: temp=37.5 sysload=0.91 cputime=108.520 memavail=689648 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 789.4: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5158 bytes_read=10304 bytes_retransmit=0 bytes_invalid=0 send_seq=288 receive_seq=288 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001199 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000015 bytes_write=1047 bytes_read=5223 bytes_retransmit=0 bytes_invalid=0 send_seq=150 receive_seq=150 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000074 adj=49999179 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1841 bytes_read=7539 bytes_retransmit=0 bytes_invalid=0 send_seq=205 receive_seq=205 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000409 adj=63999196  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=60.5 mcu_temp: temp=37.7 sysload=0.91 cputime=108.558 memavail=689648 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 790.4: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5164 bytes_read=10451 bytes_retransmit=0 bytes_invalid=0 send_seq=289 receive_seq=289 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001201 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000014 bytes_write=1053 bytes_read=5252 bytes_retransmit=0 bytes_invalid=0 send_seq=151 receive_seq=151 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000079 adj=49999137 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1847 bytes_read=7629 bytes_retransmit=0 bytes_invalid=0 send_seq=206 receive_seq=206 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000409 adj=63999185  heater_bed: target=0 temp=26.0 pwm=0.000 raspberry_pi: temp=59.0 mcu_temp: temp=37.7 sysload=0.91 cputime=108.621 memavail=689652 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 791.4: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5170 bytes_read=10554 bytes_retransmit=0 bytes_invalid=0 send_seq=290 receive_seq=290 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001201 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000014 bytes_write=1059 bytes_read=5268 bytes_retransmit=0 bytes_invalid=0 send_seq=152 receive_seq=152 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000080 adj=49999174 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1853 bytes_read=7690 bytes_retransmit=0 bytes_invalid=0 send_seq=207 receive_seq=207 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000411 adj=63999180  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=58.8 mcu_temp: temp=37.6 sysload=0.84 cputime=108.683 memavail=689652 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 792.4: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5176 bytes_read=10657 bytes_retransmit=0 bytes_invalid=0 send_seq=291 receive_seq=291 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001196 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000014 bytes_write=1065 bytes_read=5284 bytes_retransmit=0 bytes_invalid=0 send_seq=153 receive_seq=153 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000083 adj=49999178 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1859 bytes_read=7751 bytes_retransmit=0 bytes_invalid=0 send_seq=208 receive_seq=208 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000408 adj=63999206  heater_bed: target=0 temp=26.0 pwm=0.000 raspberry_pi: temp=60.1 mcu_temp: temp=37.8 sysload=0.84 cputime=108.733 memavail=688924 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 793.4: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5182 bytes_read=10789 bytes_retransmit=0 bytes_invalid=0 send_seq=292 receive_seq=292 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001192 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000014 bytes_write=1071 bytes_read=5300 bytes_retransmit=0 bytes_invalid=0 send_seq=154 receive_seq=154 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000080 adj=49999231 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1865 bytes_read=7827 bytes_retransmit=0 bytes_invalid=0 send_seq=209 receive_seq=209 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000403 adj=63999220  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=60.6 mcu_temp: temp=37.5 sysload=0.84 cputime=108.769 memavail=688676 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 794.4: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5188 bytes_read=10892 bytes_retransmit=0 bytes_invalid=0 send_seq=293 receive_seq=293 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001188 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000014 bytes_write=1077 bytes_read=5316 bytes_retransmit=0 bytes_invalid=0 send_seq=155 receive_seq=155 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000074 adj=49999206 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1871 bytes_read=7888 bytes_retransmit=0 bytes_invalid=0 send_seq=210 receive_seq=210 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000410 adj=63999218  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=60.1 mcu_temp: temp=37.7 sysload=0.84 cputime=108.813 memavail=688940 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 795.4: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5194 bytes_read=11010 bytes_retransmit=0 bytes_invalid=0 send_seq=294 receive_seq=294 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001186 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=1089 bytes_read=5361 bytes_retransmit=0 bytes_invalid=0 send_seq=157 receive_seq=157 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000065 adj=49999168 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1877 bytes_read=7963 bytes_retransmit=0 bytes_invalid=0 send_seq=211 receive_seq=211 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000413 adj=63999315  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=60.2 mcu_temp: temp=37.5 sysload=0.84 cputime=108.850 memavail=689224 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 796.4: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5200 bytes_read=11142 bytes_retransmit=0 bytes_invalid=0 send_seq=295 receive_seq=295 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001190 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=1095 bytes_read=5377 bytes_retransmit=0 bytes_invalid=0 send_seq=158 receive_seq=158 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000070 adj=49999096 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1883 bytes_read=8039 bytes_retransmit=0 bytes_invalid=0 send_seq=212 receive_seq=212 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000411 adj=63999345  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=60.7 mcu_temp: temp=37.5 sysload=0.93 cputime=108.895 memavail=688784 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 797.4: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5206 bytes_read=11245 bytes_retransmit=0 bytes_invalid=0 send_seq=296 receive_seq=296 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001190 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=1101 bytes_read=5393 bytes_retransmit=0 bytes_invalid=0 send_seq=159 receive_seq=159 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000068 adj=49999115 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1889 bytes_read=8100 bytes_retransmit=0 bytes_invalid=0 send_seq=213 receive_seq=213 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000411 adj=63999258  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=59.2 mcu_temp: temp=37.8 sysload=0.93 cputime=108.950 memavail=688048 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 798.4: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5212 bytes_read=11348 bytes_retransmit=0 bytes_invalid=0 send_seq=297 receive_seq=297 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001186 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=1107 bytes_read=5409 bytes_retransmit=0 bytes_invalid=0 send_seq=160 receive_seq=160 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000066 adj=49999104 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1895 bytes_read=8161 bytes_retransmit=0 bytes_invalid=0 send_seq=214 receive_seq=214 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000412 adj=63999240  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=60.6 mcu_temp: temp=37.7 sysload=0.93 cputime=108.988 memavail=687620 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Stats 827.4: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5392 bytes_read=14698 bytes_retransmit=0 bytes_invalid=0 send_seq=327 receive_seq=327 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001177 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000014 bytes_write=1281 bytes_read=5948 bytes_retransmit=0 bytes_invalid=0 send_seq=189 receive_seq=189 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000078 adj=49999157 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=2094 bytes_read=10164 bytes_retransmit=0 bytes_invalid=0 send_seq=245 receive_seq=245 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000395 adj=63999234  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=58.7 mcu_temp: temp=37.8 sysload=0.62 cputime=110.377 memavail=686084 print_time=88.587 buffer_time=0.510 print_stall=0 extruder: target=0 temp=25.4 pwm=0.000
Attempting MCU 'CB1' config_reset command
b'Got EOF when reading from device'
Attempting MCU 'ebbcan' reset command
Attempting MCU 'mcu' reset command
b'Got error -1 in can read: (100)Network is down'
webhooks client 281473542983344: Disconnected
Restarting printer
Start printer at Mon Aug 21 00:51:02 2023 (1692579062.3 829.2)
===== Config file =====
[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancels the current print.
	Usage: CANCEL_PRINT
rename_existing = _KM_CANCEL_PRINT_BASE
gcode = 
	_KM_CHECK_IS_PRINTING
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=cancelling RESET_STACK=1
	SET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{True}"
	PRINT_END
	_KM_CANCEL_PRINT_BASE
	{% if printer.pause_resume.is_paused %}
	RESTORE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE MOVE=0
	{% endif %}
	CLEAR_PAUSE
	_KM_APPLY_PRINT_OFFSET RESET=1
	{% if 'virtual_sdcard' in printer and not printer.virtual_sdcard.is_active %}
	SDCARD_RESET_FILE
	{% endif %}

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
variable_restore_idle_timeout = 0
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set idle_timeout = client.idle_timeout|default(0) %}
	
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE={printer[printer.toolhead.extruder].target}
	
	{% if idle_timeout > 0 %}
	SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
	SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
	{% endif %}
	PAUSE_BASE
	_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
variable_last_extruder_temp = 0
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move = client.speed_move|default(velocity) %}
	
	
	{% if printer['gcode_macro PAUSE'].restore_idle_timeout > 0 %}
	SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro PAUSE'].restore_idle_timeout}
	{% endif %}
	M109 S{last_extruder_temp}
	_CLIENT_EXTRUDE
	RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	_KM_CHECK_IS_PRINTING
	{% set pause_next_layer =
	printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE | default(1) | int != 0 %}
	{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VALUE="{
	{ 'enable': False, 'call': MACRO }}" VARIABLE=pause_next_layer
	GCODE_AT_LAYER COMMAND="{MACRO|replace('\"','\\\"')
	}" CANCEL="{0 if ENABLE else 1}" LAYER="next"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	_KM_CHECK_IS_PRINTING
	{% set pause_at_layer =
	printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	
	{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined else
	params.LAYER is defined %}
	{% set LAYER = params.LAYER |
	default((pause_at_layer.layer|int,
	printer.print_stats.info.current_layer|int + 1)|max)%}
	{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}
	
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{
	{ 'enable': False, 'layer': 0, 'call': MACRO }}"
	{% if ENABLE and pause_at_layer.enable %}
	
	GCODE_AT_LAYER COMMAND="{pause_at_layer.call|replace('\"','\\\"')
	}" CANCEL="{1}" LAYER="{pause_at_layer.layer}"
	{% endif %}
	
	GCODE_AT_LAYER COMMAND="{MACRO|replace('\"','\\\"')
	}" CANCEL="{0 if ENABLE else 1}" LAYER="{LAYER}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = _KM_SET_PRINT_STATS_INFO
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	_KM_SET_PRINT_STATS_INFO {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.extruder.can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[gcode_macro _km_options]
variable_load_length = 90.0
variable_menu_temperature = [
	{'name' : 'PLA',  'extruder' : 200.0, 'bed' : 60.0},
	{'name' : 'PETG', 'extruder' : 230.0, 'bed' : 85.0},
	{'name' : 'ABS',  'extruder' : 245.0, 'bed' : 110.0, 'chamber' : 60}]
variable_start_purge_length = 50
variable_start_extruder_probing_temp = 150
variable_park_x = 200.0
variable_park_y = 200.0
gcode = 

[gcode_macro bed_mesh_calibrate_fast]
description = Wraps BED_MESH_CALIBRATE, scaling probe count to specified area.
	Usage: See Klipper documentation.
gcode = 
	
	BED_MESH_CHECK ABORT=1
	
	
	{% set calibrate_cmd =
	(printer["gcode_macro list_macros"].macros.bed_mesh_calibrate|
	default(["bed_mesh_calibrate"],True))[-1] %}
	
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set probe_mesh_padding = km.probe_mesh_padding %}
	{% set probe_min_count = km.probe_min_count %}
	{% set probe_count_scale = km.probe_count_scale %}
	{% set bed_mesh = printer.configfile.settings.bed_mesh %}
	
	
	{%if "mesh_radius" not in bed_mesh and
	"MESH_RADIUS" not in params %}
	{% set safe_min_x = bed_mesh.mesh_min[0] %}
	{% set safe_min_y = bed_mesh.mesh_min[1] %}
	{% set safe_max_x = bed_mesh.mesh_max[0] %}
	{% set safe_max_y = bed_mesh.mesh_max[1] %}
	
	
	{% if "MESH_MIN" in params %}
	{% set mesh_min_x = (params.MESH_MIN.split(",")[0]|float -
	probe_mesh_padding, safe_min_x)|max %}
	{% set mesh_min_y = (params.MESH_MIN.split(",")[1]|float -
	probe_mesh_padding, safe_min_y)|max %}
	{% else %}
	{% set mesh_min_x = safe_min_x %}
	{% set mesh_min_y = safe_min_y %}
	{% endif %}
	{% if "MESH_MAX" in params %}
	{% set mesh_max_x = (params.MESH_MAX.split(",")[0]|float +
	probe_mesh_padding, safe_max_x)|min %}
	{% set mesh_max_y = (params.MESH_MAX.split(",")[1]|float +
	probe_mesh_padding, safe_max_y)|min %}
	{% else %}
	{% set mesh_max_x = safe_max_x %}
	{% set mesh_max_y = safe_max_y %}
	{% endif %}
	
	{% set probe_count = bed_mesh.probe_count if not params.PROBE_COUNT else
	params.PROBE_COUNT.split(",")|map('int')|list %}
	
	{% if "PROBE_COUNT" not in params %}
	{% set max_x_probes = probe_count[0] %}
	{% set max_y_probes = probe_count[-1] %}
	
	{% set x_probes = (max_x_probes * (mesh_max_x - mesh_min_x) /
	(safe_max_x - safe_min_x) * probe_count_scale)
	| round(0) | int %}
	{% set x_probes = ((x_probes, probe_min_count)|max, max_x_probes)|min %}
	
	{% set y_probes = (max_y_probes * (mesh_max_y - mesh_min_y ) /
	(safe_max_y - safe_min_y) * probe_count_scale )
	| round(0) | int %}
	{% set y_probes = ((y_probes, probe_min_count)|max, max_y_probes)|min %}
	
	{% if x_probes > 6 and y_probes < 4 %}
	{% set y_probes = 4 %}
	{% elif y_probes > 6 and x_probes < 4 %}
	{% set x_probes = 4 %}
	{% endif %}
	{% set probe_count = [x_probes,y_probes] %}
	{% elif probe_count|length == 1 %}
	{% set dummy = probe_count.append(probe_count[0]) %}
	{% endif %}
	
	
	
	
	
	
	
	{% if "relative_reference_index" in bed_mesh %}
	{% set row = (bed_mesh.relative_reference_index / bed_mesh.probe_count[0]
	)|int%}
	{% set rrf_x = (((safe_max_x - safe_min_x) /
	(bed_mesh.probe_count[0] - 1))|round(2, 'floor')) *
	(bed_mesh.relative_reference_index %
	bed_mesh.probe_count[-1]) %}
	{% if row % 2 %}
	{% set rrf_x = safe_max_x - rrf_x %}
	{% else %}
	{% set rrf_x = safe_min_x + rrf_x %}
	{% endif %}
	{% set rrf_y = (((safe_max_y - safe_min_y) /
	(bed_mesh.probe_count[-1] - 1))|round(2, 'floor')) *
	row + safe_min_x %}
	{% set x_dist = (mesh_max_x - mesh_min_x) / (probe_count[0] - 1) %}
	{% set y_dist = (mesh_max_y - mesh_min_y) / (probe_count[1] - 1) %}
	{% set rrf = {'x':0, 'y':0, 'dist':safe_max_x**2+safe_max_y**2,'pos':0} %}
	{% for row in range(probe_count[1])%}
	{% for col in range(probe_count[0])%}
	{% if row % 2 %}
	{% set x = mesh_max_x - col * x_dist %}
	{% else %}
	{% set x = mesh_min_x + col * x_dist %}
	{% endif %}
	{% set y = mesh_min_y + row * y_dist %}
	{% set dist = ((x - rrf_x)**2 + (y - rrf_y)**2)**0.5 %}
	{% if dist < rrf.dist %}
	{% set dummy = rrf.__setitem__("dist", dist) %}
	{% set dummy = rrf.__setitem__("x", x) %}
	{% set dummy = rrf.__setitem__("y", y) %}
	{% set dummy = rrf.__setitem__("pos", row * probe_count[1] + col) %}
	{% endif %}
	{% endfor %}
	{% endfor %}
	{% if rrf.x != rrf_x or rrf.y != rrf_y %}
	{action_respond_info("relative_reference_index remapped to"
	" %d (%.2f,%.2f) from %d (%.2f,%.2f)" %
	(rrf.pos, rrf.x, rrf.y,
	bed_mesh.relative_reference_index, rrf_x, rrf_y))}
	{% endif %}
	{% set dummy = params.__setitem__("RELATIVE_REFERENCE_INDEX", rrf.pos) %}
	{% endif %}
	
	{% set dummy = params.__setitem__("MESH_MIN", mesh_min_x~","~mesh_min_y) %}
	{% set dummy = params.__setitem__("MESH_MAX", mesh_max_x~","~mesh_max_y) %}
	{% set dummy = params.__setitem__("PROBE_COUNT", probe_count|join(',')) %}
	
	{% if probe_count[0] > 6 or probe_count[1]|default(0) > 6 %}
	{% set dummy = params.__setitem__("ALGORITHM", "bicubic") %}
	{% endif %}
	
	{% if "MESH_MIN" in params or "MESH_MAX" in params %}
	BED_MESH_CHECK {rawparams}
	{% endif %}
	{% else %}
	
	{% set dummy = params.__delitem__("MESH_MIN") %}
	{% set dummy = params.__delitem__("MESH_MAX") %}
	{% endif %}
	
	{% if "MESH_MIN" in params or "MESH_MAX" in params %}
	BED_MESH_CHECK ABORT=1{%for k in params%}{' '~k~'="'~params[k]~'"'}{%
	endfor%}
	{% endif %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=meshing
	{calibrate_cmd}{%for k in params%}{' '~k~'="'~params[k]~'"'}{%endfor%}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro bed_mesh_check]
description = Warns if bed_mesh config may generate an invalid mesh.
	Usage: BED_MESH_CHECK [MESH_MIN=<x,y>] [MESH_MAX=<x,y>] [ABORT=<0|1>]
gcode = 
	{% if printer.bed_mesh is defined %}
	{% set action = action_respond_info if params.ABORT|default(0)|int == 0 else
	action_raise_error %}
	{% set settings = printer.configfile.settings %}
	{% set x_min = settings.stepper_x.position_min %}
	{% set y_min = settings.stepper_y.position_min %}
	{% set x_max = settings.stepper_x.position_max %}
	{% set y_max = settings.stepper_y.position_max %}
	
	{% set label = "[bed_mesh] config" %}
	{% if "MESH_MIN" in params %}
	{% set label = "BED_MESH_CALIBRATE params" %}
	{% set mesh_min_x = params.MESH_MIN.split(",")[0]|float %}
	{% set mesh_min_y = params.MESH_MIN.split(",")[1]|float %}
	{% else %}
	{% set mesh_min_x = settings.bed_mesh.mesh_min[0] %}
	{% set mesh_min_y = settings.bed_mesh.mesh_min[1] %}
	{% endif %}
	{% if "MESH_MAX" in params %}
	{% set label = "BED_MESH_CALIBRATE params" %}
	{% set mesh_max_x = params.MESH_MAX.split(",")[0]|float %}
	{% set mesh_max_y = params.MESH_MAX.split(",")[1]|float %}
	{% else %}
	{% set mesh_max_x = settings.bed_mesh.mesh_max[0] %}
	{% set mesh_max_y = settings.bed_mesh.mesh_max[1] %}
	{% endif %}
	
	{% if "bltouch" in settings %}
	{% set x_offset = settings.bltouch.x_offset %}
	{% set y_offset = settings.bltouch.y_offset %}
	{% set probe = "bltouch" %}
	{% elif "probe" in settings %}
	{% set x_offset = settings.probe.x_offset %}
	{% set y_offset = settings.probe.y_offset %}
	{% set probe = "probe" %}
	{% else %}
	{% set x_offset = 0.0 %}
	{% set y_offset = 0.0 %}
	{% endif %}
	
	{% set output = [] %}
	{% set warn =
	"* mesh_%s (%f, %f) adjusted by " ~ probe ~
	".%s_offset (%f) can move out of range for "
	"stepper_%s.position_%s (%f)." %}
	{% if x_offset > 0 and (mesh_min_x - x_offset) < x_min %}
	{% set dummy = output.append(warn % ('min', mesh_min_x, mesh_min_y,
	'x', x_offset, 'x', 'min', x_min)) %}
	{% elif x_offset < 0 and (mesh_max_x - x_offset) > x_max %}
	{% set dummy = output.append(warn % ('max', mesh_max_x, mesh_max_y,
	'x', x_offset, 'x', 'max', x_max)) %}
	{% endif %}
	{% if y_offset > 0 and (mesh_min_y - y_offset) < y_min %}
	{% set dummy = output.append(warn % ('min', mesh_min_x, mesh_min_y,
	'y', y_offset, 'y', 'min', y_min)) %}
	{% elif y_offset < 0 and (mesh_max_y - y_offset) > y_max %}
	{% set dummy = output.append(warn % ('max', mesh_max_x, mesh_max_y,
	'y', y_offset, 'y', 'max', y_max)) %}
	{% endif %}
	
	{% if output %}
	{ action(
	"Warning: The following issue(s) were detected in your " ~ label ~
	":\n" ~ output|join("\n")) }
	{% endif %}
	{% endif %}

[gcode_macro _apply_bed_surface_offset]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% if surfaces.active %}
	SET_SURFACE_ACTIVE SURFACE={surfaces.active}
	{% endif %}

[gcode_macro _init_surfaces]
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% if "bed_surfaces" in printer.save_variables.variables %}
	{% set old_surfaces = printer.save_variables.variables.bed_surfaces %}
	{% else %}
	{% set old_surfaces = { 'active' : '', 'available' : {} } %}
	{% endif %}
	{% set settings = printer.configfile.settings %}
	{% set new_probe_z = (settings.probe | default(settings.bltouch) |
	default(settings.smart_effector) | default({})
	).z_offset|default(0.0)|float %}
	{% set new_endstop_z = (settings.stepper_z | default({})).position_endstop |
	default(0.0)|float %}
	{% if 'endstop_z' not in old_surfaces %}
	{% set dummy = old_surfaces.__setitem__('endstop_z', new_endstop_z) %}
	{% endif %}
	{% if 'probe_z' not in old_surfaces %}
	{% set dummy = old_surfaces.__setitem__('probe_z', new_probe_z) %}
	{% endif %}
	{% set surfaces = { 'active' : '', 'available' : {},
	'endstop_z' : old_surfaces.endstop_z,
	'probe_z' : old_surfaces.probe_z } %}
	{% for s in km.bed_surfaces %}
	{% set s = s.split()|join(' ')|lower %}
	{% if s|length > km.bed_surface_max_name_length or
	s|list|select("in", " \r\n\"\'")|list %}
	{action_raise_error('Invalid surface name "%s". Name must be %d or fewer '
	'characters and must not include space or quotation characters'
	| format(s, km.bed_surface_max_name_length))}
	{% endif %}
	{% if s in old_surfaces.available %}
	{% set dummy = surfaces.available.__setitem__(s,
	old_surfaces.available[s]) %}
	{% else %}
	{% set dummy = surfaces.available.__setitem__(s, {'offset' : 0.0}) %}
	{% endif %}
	{% endfor %}
	{% if old_surfaces.active in surfaces.available %}
	{% set dummy = surfaces.__setitem__('active', old_surfaces.active) %}
	{% elif km.bed_surfaces %}
	{% set dummy = surfaces.__setitem__('active', km.bed_surfaces[0]|lower) %}
	{% endif %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	_APPLY_BED_SURFACE_OFFSET
	{% if new_probe_z != surfaces.probe_z or
	new_endstop_z != surfaces.endstop_z %}
	{ action_respond_info(
	'Z probe offset or endstop position changed. Run ADJUST_SURFACE_OFFSETS '
	'to adjust the offset for all saved surfaces by the change differential, '
	'or run ADJUST_SURFACE_OFFSETS IGNORE=1 to hide this message without '
	'making changes.') }
	{% endif %}

[gcode_macro adjust_surface_offsets]
description = Adjusts surface offsets to account for changes in the Z endstop
	position or probe Z offset.
	Usage: ADJUST_SURFACE_OFFSETS [IGNORE]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% set settings = printer.configfile.settings %}
	{% set new_probe_z = (settings.probe | default(settings.bltouch) |
	default(settings.smart_effector) | default({})
	).z_offset|default(0.0)|float %}
	{% set new_endstop_z = (settings.stepper_z | default({})).position_endstop |
	default(0.0)|float %}
	{% set diff = (surfaces.probe_z - new_probe_z +
	surfaces.endstop_z - new_endstop_z)|round(6) %}
	{% if not params.IGNORE|default(0)|int %}
	{% for s in surfaces.available %}
	{% set offset = (surfaces.available[s].offset - diff)|round(6) %}
	{% set dummy = surfaces.available.__setitem__(s, {'offset' : offset}) %}
	{% endfor %}
	{ action_respond_info("All bed surfaces now adjusted by %1.4f"|
	format(diff))}
	{% elif diff != 0 %}
	{ action_respond_info("Status cleared without adjustment") }
	{% endif %}
	{% set dummy = surfaces.__setitem__('endstop_z', new_endstop_z| round(6)) %}
	{% set dummy = surfaces.__setitem__('probe_z', new_probe_z|round(6)) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"

[gcode_macro set_surface_offset]
description = Sets the offset for a surface and moves the toolhead (if homed).
	Usage: SET_SURFACE_OFFSET [OFFSET=<offset>] [SURFACE=<surface>]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}
	{% if SURFACE not in surfaces.available %}
	{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }
	{% endif %}
	{% set active = surfaces.available[SURFACE] %}
	
	{% set OFFSET = params.OFFSET|default(active.offset)|float %}
	{% if OFFSET != active.offset %}
	{% set dummy = surfaces.available[SURFACE].__setitem__("offset", OFFSET) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	{% if SURFACE == surfaces.active %}
	_km_set_gcode_offset_base Z="{OFFSET}" MOVE={
	1 if printer.toolhead.homed_axes == 'xyz' else 0}
	{% endif %}
	{% endif %}
	{ action_respond_info("Bed surface: %s Offset: %.3f"
	| format(SURFACE, OFFSET)) }
	
	{% set dummy = None if True else "
	{% set dummy = params.SURFACE|default(active surface) %}
	{% set dummy = params.OFFSET|default(none)|float %}
	" %}

[gcode_macro set_surface_active]
description = Sets the active bed surface and moves the toolhead (if homed). If
	no SURFACE argument is present the available surfaces are listed and the
	active one is preceded by a "*".
	Usage: SET_SURFACE_ACTIVE [SURFACE=<surface>]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% if "SURFACE" in params %}
	{% set SURFACE = params.SURFACE|lower %}
	{% if SURFACE not in surfaces.available %}
	{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }
	{% endif %}
	{% if SURFACE != surfaces.active %}
	{% set dummy = surfaces.__setitem__("active", SURFACE) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	{% endif %}
	{% if surfaces.available[SURFACE].offset !=
	printer.gcode_move.homing_origin.z %}
	_km_set_gcode_offset_base Z="{surfaces.available[SURFACE].offset
	}" MOVE={1 if printer.toolhead.homed_axes == 'xyz' else 0}
	{% endif %}
	{action_respond_info("Active bed surface: %s; offset: %.3f"
	| format(SURFACE, surfaces.available[SURFACE].offset))}
	{% else %}
	{% set output = [] %}
	{% for s in surfaces.available|list|sort %}
	{% set dummy = output.append("%s&nbsp;%s - offset: %.3f"
	| format("*" if s == surfaces.active else "&nbsp;",
	s, surfaces.available[s].offset)) %}
	{% endfor %}
	{action_respond_info(output|join('\n'))}
	{% endif %}
	
	{% set dummy = None if True else "
	{% set dummy = params.SURFACE|default(none) %}
	" %}

[gcode_macro set_gcode_offset]
description = Wraps SET_GCODE_OFFSET to update the current bed sheet offset.
	Usage: SET_GCODE_OFFSET [X=<pos>|X_ADJUST=<adjust>]
	[Y=<pos>|Y_ADJUST=<adjust>]
	[Z=<pos>|Z_ADJUST=<adjust>]
	[MOVE=1 [MOVE_SPEED=<speed>]]
rename_existing = _KM_SET_GCODE_OFFSET_BASE
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% if surfaces.active and
	not printer["gcode_macro _km_save_state"].is_ephemeral %}
	{% set Z = params.Z|default(0.0)|float|round(6) %}
	{% set Z_ADJUST = params.Z_ADJUST|default(0.0)|float %}
	{% if 'Z' in params and
	Z != surfaces.available[surfaces.active].offset %}
	{% set dummy = surfaces.available[surfaces.active].__setitem__("offset",
	Z) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	{% elif Z_ADJUST != 0.0 %}
	{% set dummy = surfaces.available[surfaces.active].__setitem__(
	"offset", (Z_ADJUST + printer.gcode_move.homing_origin.z)|round(6)) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	{% endif %}
	{% endif %}
	_km_set_gcode_offset_base{% for k in params%}{' '~k~'="'~params[k]~'"'
	}{% endfor %}

[gcode_macro make_surface_mesh]
description = Generates and saves a mesh to automatically load in PRINT_START.
	Usage: MAKE_SURFACE_MESH [SURFACE=<surface>] [BED=<probing temperature>]
	[EXTRUDER=<probing temperature>]
	[MESH_MULTIPLIER=<integer multiple of mesh density>]
	[bed_mesh_calibrate parameters]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}
	{% if SURFACE not in surfaces.available %}
	{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }
	{% endif %}
	{% set dummy = params.__setitem__('PROFILE', SURFACE) %}
	{% set BED = params.BED|default(70) | int %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set EXTRUDER = params.EXTRUDER|default(km.start_extruder_probing_temp) |
	int %}
	{% set MESH_MULTIPLIER = (params.MESH_MULTIPLIER|default(2)|int, 1)|max %}
	
	M104 S{EXTRUDER}
	M140 S{BED}
	G28
	
	
	{% if surfaces.available[SURFACE].offset !=
	printer.gcode_move.homing_origin.z %}
	_km_set_gcode_offset_base Z="{surfaces.available[SURFACE].offset
	}" MOVE=1
	{% endif %}
	
	
	{% if BED > 0 %}
	{action_respond_info("Stabilizing bed at %iC" | format(BED,))}
	_KM_PARK_IF_NEEDED HEATER=heater_bed RANGE=0.5
	{% if BED < (printer.heater_bed.temperature - 0.2) %}
	M190 R{BED}
	G4 P{((km.start_bed_heat_delay * 10, 30000)|min,
	km.start_bed_heat_delay)|max}
	{% else %}
	G4 P{km.start_bed_heat_delay}
	{% endif %}
	M190 R{BED}
	{% endif %}
	
	{% if EXTRUDER > 0 %}
	_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=2
	M109 R{km.start_extruder_probing_temp}
	{% endif %}
	
	{% if km.start_home_z_at_temp and not bed_at_target %}
	G28 Z
	{% endif %}
	
	
	
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count
	if not params.PROBE_COUNT else
	params.PROBE_COUNT.split(",")|map('int')|list %}
	{% set dummy = params.__setitem__('PROBE_COUNT',(
	MESH_MULTIPLIER * (probe_count[0] - 1) + 1,
	MESH_MULTIPLIER * (probe_count[-1] - 1) + 1,)|join(',')) %}
	
	BED_MESH_CLEAR
	BED_MESH_CALIBRATE_FAST {%
	for k in params|reject('in',['BED','SURFACE'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor %}
	SAVE_CONFIG
	
	
	{% set dummy = None if True else "
	{% set dummy = params.MESH_MULTIPLIER|default(2) %}
	{% set dummy = params.SURFACE|default(active surface) %}
	" %}

[gcode_macro load_surface_mesh]
description = Attempts to load a mesh associated with the specified surface.
	Usage: LOAD_SURFACE_MESH [SURFACE=<surface>]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}
	{% if SURFACE != surfaces.active %}
	SET_SURFACE_ACTIVE SURFACE={SURFACE}
	{% endif %}
	
	{% if SURFACE in printer.bed_mesh.profiles %}
	{% set mesh = printer.bed_mesh.profiles[SURFACE].mesh_params %}
	{% set default = printer.configfile.settings.bed_mesh %}
	
	{% if mesh.min_x <= (default.mesh_min[0] + 0.5) and
	mesh.min_y <= (default.mesh_min[1] + 0.5) and
	mesh.max_x >= (default.mesh_max[0] - 0.5) and
	mesh.max_y >= (default.mesh_max[1] - 0.5) and
	mesh.x_count >= default.probe_count[0] and
	mesh.y_count >= default.probe_count[-1] %}
	
	BED_MESH_PROFILE LOAD={SURFACE}
	{action_respond_info("Loaded mesh: %s" | format(SURFACE,))}
	{% endif %}
	{% endif %}

[gcode_macro m300]
description = Emits and audible beep.
	Usage: M300 [P<duration>] [S<frequency>]
gcode = 
	{% set settings = printer.configfile.settings %}
	{% if "output_pin beeper" in printer %}
	{% set P = (params.P|default(100)|int, 0)|max %}
	{% set S = (params.S|default(1000)|int, 1)|max %}
	SET_PIN PIN=beeper VALUE={% if settings["output_pin beeper"].pwm %}{
	settings["output_pin beeper"].scale|default(1.0) * 0.5
	} CYCLE_TIME={ 1.0 / S }{% else %}1{% endif %}
	G4 P{P}
	SET_PIN PIN=beeper VALUE=0
	{% else %}
	{action_respond_info(
	"M300 is disabled. To enable create an [output_pin beeper] config.")}
	{% endif %}

[gcode_macro set_draw_params]
description = Sets the default parameters used by DRAW_LINE_TO.
	Usage: SET_DRAW_PARAMS [HEIGHT=<mm>] [WIDTH=<mm>] [FEEDRATE=<mm/m>]
variable_height = 0.2
variable_width = 0.0
variable_feedrate = 1200
gcode = 
	{% set dparams = printer["gcode_macro set_draw_params"] %}
	{% for k in params %}
	{% set kl = k|lower %}
	{% if kl in dparams %}
	{% if dparams[kl] is float %}
	{% set v = params[k]|float %}
	{% elif dparams[kl] is integer %}
	{% set v = params[k]|int %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=set_draw_params VARIABLE={kl} VALUE="{v}"
	{% endif %}
	{% endfor %}

[gcode_macro draw_line_to]
description = Extrudes a line of filament at the specified height and width from
	the current coordinate to the supplied XY coordinate. (The height is used only
	to calculate the extrusion volume.)
	Usage: DRAW_LINE_TO [X=<pos>] [Y=<pos>] [HEIGHT=<mm>] [WIDTH=<mm>]
	[FEEDRATE=<mm/m>]
gcode = 
	{% set dparams = printer["gcode_macro set_draw_params"] %}
	{% set position = printer.gcode_move.gcode_position %}
	{% set X = params.X|default(position.x)|float %}
	{% set Y = params.Y|default(position.y)|float %}
	{% set HEIGHT = params.HEIGHT|default(dparams.height)|float %}
	{% set WIDTH = params.WIDTH|default(dparams.width)|float %}
	{% set FEEDRATE = params.FEEDRATE|default(dparams.feedrate)|int %}
	
	{% set distance = ((X - position.x) ** 2 + (Y - position.y) ** 2) ** 0.5 %}
	
	{% set filament_area = 3.14159 *
	(printer.configfile.settings[
	printer.toolhead.extruder].filament_diameter ** 2) / 4 %}
	{% set E = distance * ((WIDTH * HEIGHT) / filament_area) %}
	
	
	_KM_SAVE_GCODE_STATE NAME=_KM_PURGE
	G90
	G92 E0.0
	G1 X{"%.3f" % X} Y{"%.3f" % Y} E{"%.5f" % E} F{FEEDRATE}
	_KM_RESTORE_GCODE_STATE NAME=_KM_PURGE MOVE=0

[gcode_macro draw_purge_line]
description = Purges the specified length of filament as a line (or rows of
	lines) in front of the supplied print area. If no print area is specified the
	purge lines are drawn at the front edge of the maximum printable area. If no
	printable area is set it defaults to the XY axis limits.
	Usage: DRAW_PURGE_LINE [PRINT_MIN=<X,Y>] [PRINT_MAX=<X,Y>] [HEIGHT=<mm>]
	[WIDTH=<mm>] [LENGTH=<mm>]
gcode = 
	
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set origin = printer.gcode_move.homing_origin %}
	{% set dummy = km.__setitem__('print_min', (km.print_min[0] - origin.x,
	km.print_min[1] - origin.y)) %}
	{% set dummy = km.__setitem__('print_max', (km.print_max[0] - origin.x,
	km.print_max[1] - origin.y)) %}
	
	{% if "PRINT_MIN" in params %}
	{% set PRINT_MIN = (
	(params.PRINT_MIN.split(",")[0]|float, km.print_min[0])|max,
	(params.PRINT_MIN.split(",")[1]|float, km.print_min[1])|max
	) %}
	{% else %}
	{% set PRINT_MIN = km.print_min %}
	{% endif %}
	{% if "PRINT_MAX" in params %}
	{% set PRINT_MAX = (
	(params.PRINT_MAX.split(",")[0]|float, km.print_max[0])|min,
	(params.PRINT_MAX.split(",")[1]|float, km.print_max[1])|min
	) %}
	{% else %}
	{% set PRINT_MAX = km.print_max %}
	{% endif %}
	{% set extruder = printer.toolhead.extruder|string %}
	{% set HEIGHT = params.HEIGHT|default(
	printer.configfile.settings[extruder].nozzle_diameter * 0.625)|float %}
	{% set WIDTH = params.WIDTH|default(
	printer.configfile.settings[extruder].nozzle_diameter * 1.25)|float %}
	{% set LENGTH = params.LENGTH|default(km.start_purge_length)|float %}
	
	{% set dparams = printer["gcode_macro set_draw_params"] %}
	{% set filament_area = 3.14159 *
	(printer.configfile.settings[extruder].filament_diameter ** 2) / 4 %}
	{% set purge_length = (LENGTH * filament_area) / (WIDTH * HEIGHT) %}
	{% set printable_length = PRINT_MAX[0] - PRINT_MIN[0] %}
	{% set purge_rows = (purge_length / printable_length)|round(0,'ceil')|int %}
	{% set printable_inset = (printable_length - purge_length / purge_rows) / 2 %}
	{% set PRINT_MIN = (PRINT_MIN[0] + printable_inset, PRINT_MIN[1]) %}
	{% set PRINT_MAX = (PRINT_MAX[0] - printable_inset, PRINT_MAX[1]) %}
	
	{% set y_start = (km.print_min[1], PRINT_MIN[1] - km.start_purge_clearance -
	(purge_rows + 0.5) * WIDTH )|max %}
	G90
	
	G1 X{"%.3f" % (PRINT_MIN[0] - 30, km.print_min[0])|max} Y{
	"%.3f" % (y_start - 10, km.print_min[1])|max} F{km.travel_speed_xy}
	
	G1 X{"%.3f" % (PRINT_MIN[0] - 2, km.print_min[0])|max} Y{"%.3f" % y_start} Z{
	"%.4f" % HEIGHT} F{km.travel_speed_xy}
	
	G92 E0.0
	G1 E{"%.3f" % km.start_purge_prime_length} F{km.load_priming_speed}
	G92 E0.0
	
	G1 X{"%.3f" % PRINT_MIN[0]} F{km.travel_speed_xy}
	{% for n in range(purge_rows - 1) %}
	{% set x_pos = PRINT_MIN[0] if n % 2 else PRINT_MAX[0] %}
	DRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{
	WIDTH * n + y_start}"
	DRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{
	WIDTH * (n + 1) + y_start}"
	{% endfor %}
	{% set x_pos = PRINT_MAX[0] if purge_rows % 2 else PRINT_MIN[0] %}
	DRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{
	WIDTH * (purge_rows - 1) + y_start}"
	G92 E0.0

[gcode_macro _check_fan_params]
gcode = 
	{% set MAXIMUM = params.MAXIMUM|default(
	printer["gcode_macro set_fan_scaling"].maximum)|int %}
	{% set MINIMUM = params.MINIMUM|default(
	printer["gcode_macro set_fan_scaling"].minimum)|int %}
	
	{% if params.SCALE and params.SCALE|float <= 0 %}
	{ action_raise_error("SCALE must be a positive value.") }
	{% elif MINIMUM < 0 or MINIMUM > 255 %}
	{ action_raise_error("MINIMUM must be between 0 and 255.") }
	{% elif MAXIMUM < 0 or MAXIMUM > 255 %}
	{ action_raise_error("MAXIMUM must be between 0 and 255.") }
	{% elif params.SPEED and (params.SPEED|int < 0 or params.SPEED|int > 255) %}
	{ action_raise_error("SPEED must be between 0 and 255.") }
	{% elif params.BOOST and (params.BOOST|int < 0 or params.BOOST|int > 255) %}
	{ action_raise_error("BOOST must be between 0 and 255.") }
	{% elif MINIMUM > MAXIMUM %}
	{ action_raise_error("MINIMUM must be less than or equal to MAXIMUM.") }
	{% endif %}

[gcode_macro set_fan_scaling]
description = Sets fan scaling factors applied to M106 command. If a speed is
	provided it will be adjusted according to the scaling parameters.
	Usage: SET_FAN_SCALING [SCALE=<scale>] [BOOST=<boost>] [MAXIMUM=<max>]
	[MINIMUM=<min>] [SPEED=<speed>]
variable_scale = 1.0
variable_boost = 0
variable_minimum = 0
variable_maximum = 255
variable_real_speed = 0
gcode = 
	_CHECK_FAN_PARAMS{% for k in params %}{' '~k~'='~params[k]}{% endfor %}
	{% set SCALE = params.SCALE|default(scale)|float %}
	{% set BOOST = params.BOOST|default(boost)|float %}
	{% set MAXIMUM = params.MAXIMUM|default(maximum)|int %}
	{% set MINIMUM = params.MINIMUM|default(minimum)|int %}
	{% set SPEED = params.SPEED|default(real_speed)|int %}
	
	{% if SCALE != 1.0 or BOOST != 0 or MAXIMUM != 255 or MINIMUM != 0 %}
	{action_respond_info("Fan: Scale: %.2f Minimum:%i Maximum: %i Speed: %i"|
	format(SCALE, MINIMUM, MAXIMUM, SPEED))}
	{% endif %}
	
	
	{% if params|length > 0 %}
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=scale VALUE="{SCALE}"
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=boost VALUE="{BOOST}"
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=minimum VALUE="{MINIMUM}"
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=maximum VALUE="{MAXIMUM}"
	
	M106 S{SPEED}
	{% endif %}
	
	{% set dummy = None if True else "
	{% set dummy = params.SCALE|default(1.0)|float %}
	{% set dummy = params.BUMP|default(0)|int %}
	{% set dummy = params.MAXIMUM|default(255)|int %}
	{% set dummy = params.MINIMUM|default(0)|int %}
	{% set dummy = params.SPEED|default(current speed)|int %}
	" %}

[gcode_macro reset_fan_scaling]
description = Clears all fan scaling factors.
	Usage: RESET_FAN_SCALING
gcode = 
	SET_FAN_SCALING SCALE=1.0 BOOST=0 MAXIMUM=255 MINIMUM=0

[gcode_macro m106]
description = Wraps M106 to implement scaling overrides.
rename_existing = M106.6245197
gcode = 
	{% set S = params.S|default(255)|int %}
	{% set scale = printer["gcode_macro set_fan_scaling"] %}
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=real_speed VALUE="{S}"
	M106.6245197 S{((((S + scale.boost) * scale.scale) | round | int,
	scale.minimum) | max, scale.maximum) | min}

[gcode_macro _load_unload]
gcode = 
	{% set saved_extruder = printer.toolhead.extruder %}
	{% set EXTRUDER = params.EXTRUDER|default(saved_extruder)|lower %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% set BEEPS = params.BEEPS|default(8)|int if "output_pin beeper" in printer
	else 0 %}
	{% set default_minimum = km.load_min_temp if km.load_min_temp else
	(printer.configfile.settings[EXTRUDER].min_extrude_temp + 5) %}
	{% if 'MINIMUM' in params %}
	{% set MINIMUM = params.MINIMUM|int %}
	
	{% elif printer.pause_resume.is_paused and printer[EXTRUDER].target == 0 and
	printer["gcode_macro resume"].saved_extruder_temp %}
	{% set MINIMUM = printer["gcode_macro resume"].saved_extruder_temp %}
	
	{% elif printer[EXTRUDER].target > default_minimum %}
	{% set MINIMUM = printer[EXTRUDER].target %}
	{% else %}
	{% set MINIMUM = default_minimum %}
	{% endif %}
	{% if MINIMUM < printer.configfile.settings[EXTRUDER].min_extrude_temp %}
	{ action_raise_error("Extrude below minimum temp.") }
	{% elif printer.pause_resume.is_paused %}
	
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"
	{% endif %}
	{% set SPEED = params.SPEED|default(km.load_speed)|int %}
	{% set priming_length = km.load_priming_length %}
	{% set LENGTH = params.LENGTH|default(km.load_length)|float - priming_length%}
	{% if LENGTH < 0 %}
	{% set priming_length = (priming_length + LENGTH, 0)|max %}
	{% set LENGTH = 0 %}
	{% endif %}
	SAVE_GCODE_STATE NAME=_KM_LOAD_UNLOAD
	{% if EXTRUDER != saved_extruder%}
	ACTIVATE_EXTRUDER EXTRUDER={EXTRUDER}
	{% endif %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	{% if not printer.extruder.can_extrude or
	printer[EXTRUDER].target < default_minimum %}
	{action_respond_info("Preheating %s to %d" | format(EXTRUDER, MINIMUM))}
	M109 S{MINIMUM}
	{% endif %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS={"filament_load"
	if params.LOAD|int else "filament_unload"}
	M83
	{% set priming_speed = (km.load_priming_speed, SPEED)|min %}
	{% if params.LOAD|int %}
	G0 E{LENGTH} F{SPEED}
	G0 E{priming_length} F{priming_speed}
	G0 E{'%.4f' % -printer["gcode_macro resume"].saved_e} F{km.load_speed}
	{% else %}
	{% set pre_prime_distance = 5.0 %}
	{% set shaping_moves = 5 %}
	{% set shaping_distance = (shaping_moves * (1 + shaping_moves)/20) %}
	
	G0 E{pre_prime_distance} F{SPEED}
	G4 P500
	G0 E{'%.4f' % -(priming_length - shaping_distance)} F{SPEED}
	
	
	{% for i in range(1, shaping_moves + 1) %}
	G0 E2 F{priming_speed}
	G0 E-{2 + (0.1 * i)} F{priming_speed}
	{% endfor %}
	
	G0 E{'%.4f' % -(LENGTH + pre_prime_distance)} F{SPEED}
	{% endif %}
	RESTORE_GCODE_STATE NAME=_KM_LOAD_UNLOAD
	
	
	{% for i in range(BEEPS) %}
	M300 P100
	G4 P200
	{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro LOAD_FILAMENT]
description = Loads filament to the extruder.
	Usage: LOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]
	[EXTRUDER=<extruder>] [MINIMUM=<temperature>]
	[BEEPS=<beep count on completion>]
gcode = 
	_LOAD_UNLOAD LOAD=1{% for k in params
	%}{' '~k~'="'~params[k]~'"'}{% endfor %}
	
	
	{% set dummy = None if True else "
	M109
	{% set dummy = params.LENGTH|default(variable_load_length)|float %}
	{% set dummy = params.SPEED|default(variable_load_speed)|float %}
	{% set dummy = params.EXTRUDER|default(current extruder) %}
	{% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}
	{% set dummy = params.BEEPS|default(10)|int %}
	" %}

[gcode_macro UNLOAD_FILAMENT]
description = Unloads filament from the extruder.
	Usage: UNLOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]
	[EXTRUDER=<extruder>] [MINIMUM=<temperature>]
	[BEEPS=<beep count on completion>]
gcode = 
	_LOAD_UNLOAD LOAD=0{% for k in params
	%}{' '~k~'="'~params[k]~'"'}{% endfor %}
	
	
	{% set dummy = None if True else "
	M109
	{% set dummy = params.LENGTH|default(variable_load_length)|float %}
	{% set dummy = params.SPEED|default(variable_load_speed)|float %}
	{% set dummy = params.EXTRUDER|default(default extruder) %}
	{% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}
	{% set dummy = params.BEEPS|default(10)|int %}
	" %}

[gcode_macro _pause_inner_m700]
gcode = 
	{% set extruder = "extruder" ~ params.T|replace('0', '')
	if "T" in params else printer.toolhead.extruder %}
	{% if extruder != printer.toolhead.extruder%}
	ACTIVATE_EXTRUDER EXTRUDER={extruder}
	{% endif %}
	
	{% set z_param = (' Z="%f"' % params.Z) if 'Z' in params else "" %}
	
	{% if printer.idle_timeout.state|string == "Printing" %}
	PAUSE B="{0}" P=2{z_param}
	{% elif not printer.pause_resume.is_paused%}
	PARK B="{0}" P=2{z_param}
	{% endif %}

[gcode_macro m701]
description = Pauses/parks the toolhead then loads filament to the extruder.
	Usage: M701 [L<distance>] [Z<pos>] [T<extruder>]
gcode = 
	{% if 'U' in params %}
	{% if not 'L' in params %}
	RESPOND TYPE=error MSG="Argument \"U\" substituted for missing \"L\"."
	{% set dummy = params.__setitem__("L", params.U) %}
	{% else %}
	RESPOND TYPE=error MSG="Invalid argument \"U\" ignored."
	{% endif %}
	{% endif %}
	
	_PAUSE_INNER_M700 {% for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	LOAD_FILAMENT BEEPS="{10}" LENGTH={
	params.L|default(printer["gcode_macro _km_globals"].load_length)|float}

[gcode_macro m702]
description = Pauses/parks the toolhead then unloads filament from the extruder.
	Usage: M702 [U<distance>] [Z<pos>] [T<extruder>]
gcode = 
	{% if 'L' in params %}
	{% if not 'U' in params %}
	RESPOND TYPE=error MSG="Argument \"L\" substituted for missing \"U\"."
	{% set dummy = params.__setitem__("U", params.L) %}
	{% else %}
	RESPOND TYPE=error MSG="Invalid argument \"L\" ignored."
	{% endif %}
	{% endif %}
	
	_PAUSE_INNER_M700 {% for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	UNLOAD_FILAMENT BEEPS="{10}" LENGTH={
	params.U|default(printer["gcode_macro _km_globals"].load_length)|float}

[gcode_macro _km_globals]
variable_bed_surface_max_name_length = 10
variable_bed_surfaces = ['default']
variable_load_length = 90.0
variable_load_min_temp = 0
variable_load_priming_length = 20.0
variable_load_priming_speed = 200
variable_load_speed = 1200
variable_menu_show_octoprint = True
variable_menu_show_sdcard = True
variable_menu_temperature = [
	{'name' : 'PLA',  'extruder' : 200, 'bed' : 60},
	{'name' : 'PETG', 'extruder' : 230, 'bed' : 85},
	{'name' : 'ABS',  'extruder' : 245, 'bed' : 110}]
variable_park_x = 0.0
variable_park_y = 0.0
variable_park_z = 20.0
variable_print_min = ()
variable_print_max = ()
variable_pressure_advance_scale = -1.0
variable_probe_mesh_padding = 5.0
variable_probe_min_count = 3
variable_probe_count_scale = 1.0
variable_start_bed_heat_delay = 2000
variable_start_bed_heat_overshoot = 2.0
variable_start_clear_adjustments_at_end = True
variable_start_end_park_y = 0.0
variable_start_extruder_preheat_scale = 0.5
variable_start_extruder_probing_temp = 0
variable_start_home_z_at_temp = True
variable_start_level_bed_at_temp = True
variable_start_purge_clearance = 2.0
variable_start_purge_length = 0.0
variable_start_purge_prime_length = 12.0
variable_start_quad_gantry_level_at_temp = True
variable_start_random_placement_max = 0
variable_start_random_placement_padding = 10.0
variable_start_try_saved_surface_mesh = False
variable_start_z_tilt_adjust_at_temp = True
variable_travel_speed_xy = 3000
variable_travel_speed_z = 600
description = Initializes our globals, including any _km_options overrides.
gcode = 
	
	
	
	
	
	
	
	
	{% set required_sections = {"heater_bed" : None,
	"extruder" : None,
	"gcode_macro _km_options" : None,
	"idle_timeout" : ("gcode", "_KM_IDLE_TIMEOUT"),
	"pause_resume" : None,
	"respond" : None,
	"save_variables" : None,
	"virtual_sdcard" :
	("on_error_gcode", "CANCEL_PRINT")
	} %}
	{% set warn_removed = {
	"start_extruder_set_target_before_level" :
	"The start_extruder_set_target_before_level option has been removed. "
	"Use the start_extruder_probing_temp option instead to set a fixed "
	"probing temperature.",
	"start_gcode_before_print" :
	"The start_gcode_before_print option has been removed. The same effect "
	"can now be achieved by inserting custom gcode before the "
	"_PRINT_START_PHASE_PURGE line in your slicer's start gcode, or by "
	"wrapping the _PRINT_START_PHASE_PURGE macro. See the Slicer "
	"Configuration section in the readme for more information.",
	"velocity_decel_scale" :
	"The velocity_decel_scale option has been removed. Klipper's input "
	"shaping provides a superior mechanism for improving print quality "
	"at higher speeds.",
	} %}
	{% set output = [] %}
	{% for s in required_sections %}
	{% set f = required_sections[s][0] if required_sections[s] else None %}
	{% set v = required_sections[s][1] if required_sections[s] else None %}
	{% if s not in printer.configfile.config %}
	{% set dummy = output.append("Missing [%s] section.\n" | format(s)) %}
	{% elif f and
	(v not in printer.configfile.config[s][f]|default("")|upper) %}
	{% set dummy = output.append("Missing %s in %s for [%s] section.\n"
	| format(v, f, s)) %}
	{% endif %}
	{% endfor %}
	{% if output %}
	{ action_emergency_stop((
	"required printer.cfg section(s) missing:\n"
	~ output | join("\n")) ~
	"See readme: https://github.com/jschuh/klipper-macros\x23klipper-setup")
	}
	{% endif %}
	
	
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_level_bed_at_temp VALUE="{
	1 if printer.bed_mesh is defined else 0}"
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_quad_gantry_level_at_temp VALUE="{
	1 if printer.quad_gantry_level is defined else 0}"
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_z_tilt_adjust_at_temp VALUE="{
	1 if printer.z_tilt is defined else 0}"
	{% set toolhead = printer.toolhead %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=print_min VALUE="{
	(toolhead.axis_minimum.x, toolhead.axis_minimum.y)}"
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=print_max VALUE="{
	(toolhead.axis_maximum.x, toolhead.axis_maximum.y)}"
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_end_park_y VALUE="{
	toolhead.axis_maximum.y}"
	{% set settings = printer.configfile.settings %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_home_z_at_temp VALUE="{
	1 if ("stepper_z" in settings and
	settings.stepper_z.endstop_pin.split()|join("")|lower ==
	"probe:z_virtual_endstop") else 0}"
	
	{% set options = printer["gcode_macro _km_options"] %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	
	{% if options.park_x|default("")|string|lower == "min" %}
	{% set dummy = options.__setitem__("park_x",
	printer.configfile.settings.stepper_x.position_min) %}
	{% elif options.park_x|default("")|string|lower == "max" %}
	{% set dummy = options.__setitem__("park_x",
	printer.configfile.settings.stepper_x.position_max) %}
	{% endif %}
	{% if options.park_y|default("")|string|lower == "min" %}
	{% set dummy = options.__setitem__("park_y",
	printer.configfile.settings.stepper_y.position_min) %}
	{% elif options.park_y|default("")|string|lower == "max" %}
	{% set dummy = options.__setitem__("park_y",
	printer.configfile.settings.stepper_y.position_max) %}
	{% endif %}
	{% if options.start_end_park_y|default("")|string|lower == "min" %}
	{% set dummy = options.__setitem__("start_end_park_y",
	printer.configfile.settings.stepper_y.position_min) %}
	{% elif options.start_end_park_y|default("")|string|lower == "max" %}
	{% set dummy = options.__setitem__("start_end_park_y",
	printer.configfile.settings.stepper_y.position_max) %}
	{% endif %}
	{% if options.park_z|default("")|string|lower == "min" %}
	{% set dummy = options.__setitem__("park_z",
	printer.configfile.settings.stepper_z.position_min) %}
	{% elif options.park_z|default("")|string|lower == "max" %}
	{% set dummy = options.__setitem__("park_z",
	printer.configfile.settings.stepper_z.position_max) %}
	{% endif %}
	
	
	{% for k in options %}
	{% if k not in km %}
	{% if k in warn_removed %}
	{action_respond_info(warn_removed[k])}
	{% else %}
	{% set dummy = output.append("%s is not valid for _KM_OPTIONS." |
	format(k)) %}
	{% endif %}
	{% elif km[k] is string %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k
	} VALUE="'{options[k]|replace('\\','\\\\')|replace('\'','\\\'')
	|replace('\"','\\\"')}'"
	{% elif km[k] is float %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k
	} VALUE="{options[k]|float}"
	{% elif km[k] is integer or km[k] is boolean %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k} VALUE="{options[k]|int}"
	{% elif km[k] is mapping %}
	{% if options[k] is not mapping %}
	{% set dummy = output.append("%s requires a mapping type." |
	format(k)) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k
	} VALUE="{options[k]|replace('\"','\\\"')}"
	{% elif km[k] is sequence %}
	{% if options[k] is not sequence %}
	{% set dummy = output.append("%s requires a sequence type." |
	format(k)) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k
	} VALUE="{options[k]|replace('\"','\\\"')}"
	{% else %}
	{% set dummy = output.append("%s is not a valid type for _KM_OPTIONS." |
	format(k)) %}
	{% endif %}
	{% endfor %}
	
	{% if "homing_override" in printer.configfile.config %}
	{% for l in printer.configfile.config.homing_override.gcode.split("\n") %}
	{% if " g28 " in (" " ~ l.split("\x23")[0].split(";")[0]|lower ~ " ") %}
	{% set dummy = output.append(
	"G28 in [homing_override] gcode. Replace with G28.6245197 to "
	"fix recursive macro call.\n"
	"See readme: https://github.com/jschuh/klipper-macros\x23g28") %}
	{% endif %}
	{% endfor %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=check_km_config VARIABLE=load_errors VALUE="{
	output|replace('\"','\\\"')}"
	M400

[delayed_gcode INIT_GLOBALS]
initial_duration = 1
gcode = 
	LIST_MACROS SILENT=1
	_KM_GLOBALS
	
	CHECK_KM_CONFIG
	_INIT_SURFACES
	BED_MESH_CHECK
	
	SET_DRAW_PARAMS WIDTH="{printer.configfile.settings.extruder.nozzle_diameter}"
	
	_KM_OPTIONS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready

[gcode_macro check_km_config]
variable_load_errors = []
description = Checks global variables and throws an error on any invalid values.
	Does nothing if the config has no errors.
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set toolhead = printer.toolhead %}
	{% set output = load_errors %}
	{% if km.park_x > toolhead.axis_maximum.x or
	km.park_x < toolhead.axis_minimum.x %}
	{% set dummy = output.append("park_x is invalid.") %}
	{% endif %}
	{% if km.park_y > toolhead.axis_maximum.y or
	km.park_y < toolhead.axis_minimum.y %}
	{% set dummy = output.append("park_y is invalid.") %}
	{% endif %}
	{% if km.park_z > toolhead.axis_maximum.z or
	km.park_z < toolhead.axis_minimum.z %}
	{% set dummy = output.append("park_z is invalid.") %}
	{% endif %}
	{% if km.print_max[0] > toolhead.axis_maximum.x or
	km.print_max[1] > toolhead.axis_maximum.y %}
	{% set dummy = output.append("print_max is invalid.") %}
	{% endif %}
	{% if km.print_min[0] < toolhead.axis_minimum.x or
	km.print_min[1] < toolhead.axis_minimum.y %}
	{% set dummy = output.append("print_min is invalid.") %}
	{% endif %}
	{% if km.start_extruder_preheat_scale > 1.0 or
	km.start_extruder_preheat_scale < 0.0 %}
	{% set dummy = output.append("extruder_preheat_scale is invalid.") %}
	{% endif %}
	{% if km.load_length >
	printer.configfile.settings["extruder"].max_extrude_only_distance %}
	{% set dummy = output.append(
	"load_length exceeds max_extrude_only_distance.") %}
	{% endif %}
	{% if km.load_length < km.load_priming_length %}
	{% set dummy = output.append(
	"load_length is shorter than load_priming_length.") %}
	{% endif %}
	{% if km.load_length < 0.0 %}
	{% set dummy = output.append("load_length is negative.") %}
	{% endif %}
	{% if km.load_priming_length < 0.0 %}
	{% set dummy = output.append("load_priming_length is negative.") %}
	{% endif %}
	
	
	{% if output %}
	{ action_raise_error(output|sort|join('\nError: ')) }
	{% endif %}
	M400

[gcode_macro kmvars]
description = Lists global variables used by klipper-macros.
	Usage: KMVARS [SEARCH=<search_string>]
gcode = 
	{% set SEARCH = params.SEARCH|default(params.S|default(""))|lower %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set output = [] %}
	{% for k in km %}
	{% if SEARCH in k %}
	{% set dummy = output.append(k ~ ": " ~ km[k]) %}
	{% endif %}
	{% endfor %}
	{ action_respond_info(output|sort|join('\n')) }

[gcode_macro check_macro_docs]
description = Lists macros lacking proper documentation.
	Usage: CHECK_MACRO_DOCS [USAGE=<0|1>] [HIDDEN=<1|0>] [RENAMED=<1|0>]
gcode = 
	{% set USAGE = params.USAGE|default(0)|int %}
	{% set HIDDEN = params.HIDDEN|default(0)|int %}
	{% set RENAMED = params.RENAMED|default(0)|int %}
	{% set output = [] %}
	{%set config = printer.configfile.config %}
	{% for k in config|sort %}
	{% if k.startswith("gcode_macro") %}
	{% set name = k.split()[1] %}
	{% set desc = config[k].description|default("") %}
	{% set is_renamed = config[k].rename_existing|default("") %}
	{% if (not desc or (USAGE and not "Usage: "~name.upper() in desc)) and
	(HIDDEN or not name.startswith('_')) and (RENAMED or is_renamed) %}
	{% set dummy = output.append("%s&nbsp;%s: missing %s."
	| format("*" if is_renamed else "&nbsp;", name,
	"description" if not desc else "usage")) %}
	{% endif %}
	{% endif %}
	{% endfor %}
	{action_respond_info(output|join("\n"))}

[gcode_macro listvars]
description = Lists per-macro variables with a name containing SEARCH. This is
	useful for debugging macros by allowing you to probe printer state. Be very
	careful, however, as an overly broad SEARCH parameter can take a long time
	to process and potentially hang or crash klipper.
	Usage: LISTVARS SEARCH=<search_string>
gcode = 
	
	{% if 'SEARCH' not in params and 'S' not in params %}
	{ action_raise_error("Must provide a SEARCH parameter.") }
	{% endif %}
	{% set SEARCH = params.SEARCH|default(params.S)|lower %}
	{% set ns = namespace() %}
	{% set output = [] %}
	{% for item in printer %}
	{% if item is not string %}
	{% set ns.path = ['printer', "[%s]" % (item|string), ''] %}
	{% elif ' ' in item %}
	{% set ns.path = ['printer', "['%s']" % (item), ''] %}
	{% else %}
	{% set ns.path = ['printer.', item, ''] %}
	{% endif %}
	
	{% if SEARCH in ns.path|lower %}
	{% set dummy = output.append(ns.path|join) %}
	{% endif %}
	
	{% if printer[item].items() %}
	{% for childkey, child in printer[item].items() recursive %}
	{% set ns.path = ns.path[:loop.depth|int + 1] %}
	{% if childkey is not string %}
	{% set null = ns.path.append("[%s]" % (childkey|string)) %}
	{% elif ' ' in childkey %}
	{% set null = ns.path.append("['%s']" % (childkey)) %}
	{% else %}
	{% set null = ns.path.append(".%s" % (childkey)) %}
	{% endif %}
	
	{% if child is mapping  %}
	{loop(child.items())}
	{% else %}
	{% if SEARCH in ns.path|lower %}
	{% set dummy = output.append("%s : %s" % (ns.path|join, child)) %}
	{% endif %}
	{% endif %}
	{% endfor %}
	{% endif %}
	{% endfor %}
	{ action_respond_info(output|join("\n")) }

[gcode_macro list_macros]
description = Lists registered macros (and optionally show variable state).
	Usage: LISTVARS SEARCH=<search_string> VARS=<0|1> SILENT=<0|1>
variable_macros = {}
gcode = 
	
	{% if not macros %}
	{% set renames = {} %}
	{% for k in printer.configfile.config %}
	{% if k.lower().startswith("gcode_macro") and
	printer.configfile.config[k].rename_existing %}
	{% set name = k.split(None, 1)[1] | lower %}
	{% set dummy = renames.__setitem__(name,
	[printer.configfile.config[k].rename_existing|lower] +
	renames[name]|default([])) %}
	{% endif %}
	{% endfor %}
	{% for k in printer %}
	{% if k.lower().startswith("gcode_macro") %}
	{% set name = k.split(None, 1)[1] | lower %}
	{% set dummy = macros.__setitem__(name, renames[name]|default([])) %}
	{% endif %}
	{% endfor %}
	{% endif %}
	
	{% if params.SILENT|default(0)|int == 0 %}
	_LIST_MACROS_DISPLAY {rawparams}
	{% endif %}

[gcode_macro _list_macros_display]
gcode = 
	{% set SEARCH = params.SEARCH | default(params.S) | default("") | lower %}
	{% set VARS = params.VARS | default(params.V) | default(0) | int != 0 %}
	
	{% set macros = printer["gcode_macro list_macros"].macros %}
	{% set output = [] %}
	{% for k in macros %}
	{% if SEARCH in k | lower %}
	{% set line = k ~ ((" (renames: %s)" % (macros[k]|join(","))) if macros[k]
	else "") %}
	{% set outvars = [] %}
	{% if VARS %}
	{% for v in printer["gcode_macro " ~ k] | sort %}
	{% set dummy = outvars.append("\n* %s: %s" %
	(v, printer["gcode_macro " ~ k][v]|string)) %}
	{% endfor %}
	{% endif %}
	{% set dummy = output.append(line + outvars | join("")) %}
	{% endif %}
	{% endfor %}
	{ action_respond_info(output | sort | join("\n")) }

[gcode_macro set_heater_temperature_scaled]
gcode = 
	{% set HEATER = params.HEATER.lower() %}
	{% set TARGET = params.TARGET|default(0.0)|float %}
	{% set scaled_heaters =
	printer["gcode_macro set_heater_scaling"].scaled_heaters %}
	{% if HEATER in scaled_heaters %}
	{% set scales = scaled_heaters[HEATER] %}
	{% set dummy = scales.__setitem__("real_target", TARGET) %}
	{%if TARGET > 0.0 %}
	{% set TARGET = (((TARGET + scales.bump) * scales.scale, scales.minimum)
	| max, scales.maximum)|min %}
	{% endif %}
	{% endif %}
	SET_HEATER_TEMPERATURE HEATER="{HEATER}" TARGET={TARGET}

[gcode_macro temperature_wait_scaled]
gcode = 
	{% set SENSOR = params.SENSOR.lower() %}
	{% set heater = SENSOR if not SENSOR.startswith("heater_generic") else
	SENSOR.split()[1] %}
	{% set scaled_heaters =
	printer["gcode_macro set_heater_scaling"].scaled_heaters %}
	{% if heater in scaled_heaters %}
	{% set scales = scaled_heaters[heater] %}
	{% if "MINIMUM" in params and MINIMUM > 0.0 %}
	{% set MINIMUM = (((MINIMUM + scales.bump) * scales.scale, scales.minimum)
	| max, scales.maximum)|min %}
	{% endif %}
	{% if "MAXIMUM" in params and MAXIMUM > 0.0 %}
	{% set MAXIMUM = (((MAXIMUM + scales.bump) * scales.scale, scales.minimum)
	| max, scales.maximum)|min %}
	{% endif %}
	{% else %}
	{% set settings = printer.configfile.settings[SENSOR] %}
	{% set MINIMUM = params.MINIMUM|default(settings.min_temp) %}
	{% set MAXIMUM = params.MAXIMUM|default(settings.max_temp) %}
	{% endif %}
	{% if printer[sensor].temperature < MINIMUM or
	printer[sensor].temperature > MAXIMUM %}
	TEMPERATURE_WAIT SENSOR="{SENSOR}" MINIMUM={MINIMUM} MAXIMUM={MAXIMUM}
	{% endif %}

[gcode_macro _gcode_wait_wrapper_inner]
gcode = 
	
	
	{% set sensor = params.HEATER if params.HEATER in
	printer.heaters.available_heaters
	else ("heater_generic " ~ params.HEATER) %}
	{% set target = printer[sensor].target %}
	{% if 'R' in params and target > 0.0 %}
	{% set T = params.T|default("") %}
	M{params.M}.6245197 S{target} { (" T"~T) if T else "" }
	{% elif printer[sensor].temperature < target %}
	TEMPERATURE_WAIT SENSOR="{sensor}" MINIMUM={target}
	{% endif %}

[gcode_macro _gcode_wait_wrapper]
gcode = 
	{% set target = params.S | default(params.R | default(0))| float %}
	SET_HEATER_TEMPERATURE_SCALED HEATER="{params.HEATER}" TARGET={target}
	_GCODE_WAIT_WRAPPER_INNER{%
	for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}

[gcode_macro m109]
rename_existing = M109.6245197
gcode = 
	{% set extruder = "extruder" ~ params.T|replace('0', '')
	if "T" in params else printer.toolhead.extruder %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating
	_GCODE_WAIT_WRAPPER HEATER={extruder}{%
	for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro m190]
rename_existing = M190.6245197
gcode = 
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=bed_heating
	_GCODE_WAIT_WRAPPER HEATER=heater_bed {%
	for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro m191]
description = Sets chamber temperature (with wait for heating).
	Usage: M191 [S<temp>]
gcode = 
	
	{% if "R" in params %}
	{% set dummy = params.__setitem__("S", params.R) %}
	{% endif %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=chamber_heating
	_GCODE_WAIT_WRAPPER HEATER=chamber {%
	for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro m104]
rename_existing = M104.6245197
gcode = 
	{% set extruder = "extruder" ~ params.T|replace('0', '')
	if "T" in params else printer.toolhead.extruder %}
	SET_HEATER_TEMPERATURE_SCALED HEATER={extruder} TARGET={params.S|default(0)}

[gcode_macro m140]
rename_existing = M140.6245197
gcode = 
	SET_HEATER_TEMPERATURE_SCALED HEATER=heater_bed TARGET={params.S|default(0)}

[gcode_macro m141]
description = Sets chamber temperature.
	Usage: M141 [S<temp>]
gcode = 
	SET_HEATER_TEMPERATURE_SCALED HEATER=chamber TARGET={params.S|default(0)}

[gcode_macro _check_heater_params]
gcode = 
	{% set HEATER = params.HEATER|lower %}
	{% set sensor = params.HEATER %}
	{% if HEATER not in printer.heaters.available_heaters %}
	{% set sensor = "heater_generic " ~ HEATER %}
	{% if sensor not in printer.heaters.available_heaters %}
	{ action_raise_error("The value '%s' is not valid for HEATER"
	| format(HEATER)) }
	{% endif %}
	{% endif %}
	{% set settings = printer.configfile.settings[sensor] %}
	{% set scaled_heaters =
	printer["gcode_macro set_heater_scaling"].scaled_heaters %}
	{% if HEATER is in scaled_heaters %}
	{% set scales = scaled_heaters[HEATER] %}
	{% else %}
	{% set scales = { "scale": 1.0, "bump": 0.0, "minimum": settings.min_temp,
	"maximum": settings.max_temp,
	"real_target": printer[sensor].target} %}
	{% endif %}
	{% set SCALE = params.SCALE|default(scales.scale)|float %}
	{% set BUMP = params.BUMP|default(scales.bump)|float %}
	{% set MINIMUM = params.MINIMUM|default(scales.minimum)|float %}
	{% set MAXIMUM = params.MAXIMUM|default(scales.maximum)|float %}
	
	{% if SCALE <= 0 %}
	{ action_raise_error("SCALE must be a positive value.") }
	{% elif MINIMUM < settings.min_temp or MINIMUM > settings.max_temp %}
	{ action_raise_error("MINIMUM must be between %.1f and %.1f" |
	format(settings.min_temp, settings.max_temp)) }
	{% elif MAXIMUM < settings.min_temp or MAXIMUM > settings.max_temp %}
	{ action_raise_error("MAXIMUM must be between %.1f and %.1f" |
	format(settings.min_temp, settings.max_temp)) }
	{% elif MINIMUM >= MAXIMUM %}
	{ action_raise_error("MINIMUM must be less than MAXIMUM.") }
	{% elif "TARGET" in params and (params.TARGET|float < MINIMUM or
	params.TARGET|float > MAXIMUM) %}
	{ action_raise_error("TARGET must be between %.1f and %.1f" |
	format(settings.min_temp, settings.max_temp)) }
	{% endif %}

[gcode_macro set_heater_scaling]
description = Sets scaling parameters for heater. If a new target temperature is
	passed it will be adjusted to the scaling parameters.
	Usage: SET_HEATER_SCALING [HEATER=<heater>] [SCALE=<scale_factor>]
	[BUMP=<degrees>] [MAXIMUM=<degrees>]
	[MINIMUM=<degrees>] [TARGET=<temp>]
variable_scaled_heaters = {}
gcode = 
	
	{% if "HEATER" is not in params %}
	{% set output = [] %}
	{% for h in scaled_heaters %}
	{% set dummy = output.append(
	"%s: Scale: %.2f Bump: %.1f Minimum:%.1f Maximum: %.1f"
	| format(h, scaled_heaters[h].scale, scaled_heaters[h].bump,
	scaled_heaters[h].minimum, scaled_heaters[h].maximum)) %}
	{% endfor %}
	{% if output %}}{action_respond_info(output|join('\n'))}{% endif %}
	{% else %}
	
	{% set HEATER = params.HEATER.lower() %}
	{% set settings = printer.configfile.settings[HEATER] %}
	{% if HEATER is not in scaled_heaters %}
	{% set dummy = scaled_heaters.__setitem__(HEATER, {"scale": 1.0,
	"bump": 0.0, "minimum": settings.min_temp,
	"maximum": settings.max_temp,
	"real_target": printer[HEATER].target}) %}
	{% endif %}
	_CHECK_HEATER_PARAMS{% for k in params %}{' '~k~'='~params[k]}{% endfor %}
	{% set scales = scaled_heaters[HEATER] %}
	{% set SCALE = params.SCALE|default(scales.scale)|float %}
	{% set BUMP = params.BUMP|default(scales.bump)|float %}
	{% set MAXIMUM = params.MAXIMUM|default(scales.maximum)|float %}
	{% set MINIMUM = params.MINIMUM|default(scales.minimum)|float %}
	{% set TARGET = params.TARGET|default(scales.real_target)|float %}
	{% set dummy = scales.__setitem__("scale", SCALE) %}
	{% set dummy = scales.__setitem__("bump", BUMP) %}
	{% set dummy = scales.__setitem__("maximum", MAXIMUM) %}
	{% set dummy = scales.__setitem__("minimum", MINIMUM) %}
	{% set dummy = scales.__setitem__("real_target", TARGET) %}
	
	{% set settings = printer.configfile.settings[HEATER] %}
	{% if SCALE != 1.0 or BUMP != 0.0 or MINIMUM != settings.min_temp or
	MAXIMUM != settings.max_temp %}
	{% set dummy = scaled_heaters.__setitem__(HEATER, scales) %}
	{% else %}
	{% set dummy = scaled_heaters.__delitem__(HEATER) %}
	{% endif %}
	SET_HEATER_TEMPERATURE_SCALED HEATER={HEATER} TARGET={TARGET}
	{action_respond_info(
	"%s: Scale: %.2f Bump: %.1f Minimum:%.1f Maximum: %.1f Target: %.1f"
	| format(HEATER, SCALE, BUMP, MINIMUM, MAXIMUM, TARGET))}
	{% endif %}
	
	{% set dummy = None if True else "
	{% set dummy = params.HEATER|default(e.g. extruder) %}
	{% set dummy = params.SCALE|default(1.0)|float %}
	{% set dummy = params.BUMP|default(0.0)|float %}
	{% set dummy = params.MAXIMUM|default(max_temp)|float %}
	{% set dummy = params.MINIMUM|default(min_temp)|float %}
	{% set dummy = params.TARGET|default(current target)|float %}
	" %}

[gcode_macro reset_heater_scaling]
description = Clears scaling for heater (or all heaters if none specified).
	Usage: RESET_HEATER_SCALING [HEATER=<heater>]
gcode = 
	{% if "HEATER" in params %}
	{% set HEATER = params.HEATER.lower() %}
	{% if HEATER not in printer.heaters.available_heaters %}
	{ action_raise_error("The value '%s' is not valid for HEATER"
	| format(HEATER)) }
	{% endif %}
	{% set settings = printer.configfile.settings[HEATER] %}
	SET_HEATER_SCALING HEATER={HEATER
	} SCALE=1.0 BUMP=0.0 MINIMUM={settings.min_temp
	} MAXIMUM={settings.max_temp}
	{% else %}
	
	SET_GCODE_VARIABLE MACRO=set_heater_scaling VARIABLE=scaled_heaters VALUE={
	"{}"}
	{% endif %}

[gcode_macro _km_idle_timeout]
gcode = 
	{% if printer.pause_resume.is_paused %}
	{action_respond_info("Extruder powered down on idle timeout.")}
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{
	printer[printer.toolhead.extruder].target}"
	M104; Turn off extruder but leave the bed on.
	{% else %}
	TURN_OFF_HEATERS
	M107; turn off fan
	M84
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready
	{% endif %}

[gcode_macro _check_kinematic_limits]
gcode = 
	{% set toolhead = printer.toolhead %}
	{% if params.X and (params.X|float < toolhead.axis_minimum.x or
	params.X|float > toolhead.axis_maximum.x) %}
	{action_raise_error("X[%.3f] must be between %.3f and %.3f."
	| format(params.X|float, toolhead.axis_minimum.x,
	toolhead.axis_maximum.x))}
	{% elif params.Y and (params.Y|float < toolhead.axis_minimum.y or
	params.Y|float > toolhead.axis_maximum.y) %}
	{action_raise_error("Y[%.3f] must be between %.3f and %.3f."
	| format(params.Y|float, toolhead.axis_minimum.y,
	toolhead.axis_maximum.y))}
	{% elif params.Z and (params.Z|float < toolhead.axis_minimum.z or
	params.Z|float > toolhead.axis_maximum.z) %}
	{action_raise_error("Z[%.3f] must be between %.3f and %.3f."
	| format(params.Z|float, toolhead.axis_minimum.z,
	toolhead.axis_maximum.z))}
	{% elif params.E and (params.E|float|abs > printer.configfile.settings[
	"extruder"].max_extrude_only_distance) %}
	{action_raise_error("E[%.4f] exceeds max_extrude_only_distance[%.4f]."
	| format(params.E|float|abs, printer.configfile.settings[
	"extruder"].max_extrude_only_distance))}
	{% endif %}

[gcode_macro lazy_home]
description = Homes the specified axes. If lazy is true, already homed axes
	are skipped.
	Usage: LAZY_HOME [LAZY=<1|0>] [AXES=<axes_string>]
gcode = 
	
	LIST_MACROS SILENT=1
	_LAZY_HOME_INNER {rawparams}

[gcode_macro _lazy_home_inner]
gcode = 
	
	{% set G28 = (printer["gcode_macro list_macros"].macros.g28|
	default(["g28"],True))[-1] %}
	{% set axes = 'XYZ'|select('in', params.AXES|default("XYZ")|upper|list) %}
	{% if not axes %}
	{% set axes = 'XYZ' %}
	{% endif %}
	{% if params.LAZY|default(1)|int %}
	{% set axes = axes|reject('in', printer.toolhead.homed_axes|upper)|join() %}
	{% endif %}
	
	{% if axes %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing
	{G28}{% for k in axes %}{' ' ~ k}{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status
	{% endif %}

[gcode_macro g28]
description = Wraps the G28 command to add the Marlin "O" parameter so that
	already homed axes will not be homed again. See the Klipper documentation on
	G28 for the behavior of the other parameters.
	Usage: G28 [O] ...
rename_existing = G28.6245197
gcode = 
	{% set axes = 'XYZ'|select('in', params)|join() %}
	LAZY_HOME LAZY={('O' in params)|int}{%if axes%} AXES={axes}{%endif%}

[gcode_macro before_layer_change]
description = Add this to the "before layer change" input box in the slicer.
	Usage: BEFORE_LAYER_CHANGE HEIGHT=<current_height> LAYER=<current_layer>
gcode = 
	{% set height = params.HEIGHT|default(printer.toolhead.position.z)|float %}
	{% set layer = params.LAYER|default(-1)|int + 1 %}
	{% if height >= 0.0 and layer >= 0 %}
	SET_PRINT_STATS_INFO CURRENT_LAYER="{layer}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{height}"
	{% if printer["gcode_macro _km_layer_run"].clearance_z < height %}
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{
	height}"
	{% endif %}
	{% endif %}

[gcode_macro after_layer_change]
description = Add this to the "after layer change" input box in the slicer.
	Usage: AFTER_LAYER_CHANGE
gcode = 
	_KM_LAYER_RUN

[gcode_macro gcode_at_layer]
description = Schedules the specified g-code command to be run at the specified
	layer. LAYER=next will cause the command to run at the next layer change.
	Usage: GCODE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } COMMAND=<gcode>
	[CANCEL=<0|1>]
gcode = 
	{% set tot_layers = printer.print_stats.info.total_layer %}
	{% if params|length > 0 %}
	_KM_CHECK_IS_PRINTING
	
	{% set CANCEL = params.CANCEL|default(0)|int != 0 %}
	{% set COMMAND = params.COMMAND|default(None) %}
	{% if COMMAND %}
	{% set COMMAND = COMMAND.lstrip().split(None, 1) %}
	{% set COMMAND = " ".join([COMMAND[0]|upper] + COMMAND[1:]) %}
	{% endif %}
	
	{% if "LAYER" in params %}
	{% set cmd_container = "commands_layer" %}
	{% set cur_layer = printer.print_stats.info.current_layer|int %}
	{% if "HEIGHT" in params %}
	{action_raise_error("Conflicting HEIGHT and LAYER arguments provided.")}
	{% elif params.LAYER|string|lower == "next" %}
	{% set LAYER = cur_layer + 1 %}
	{% else %}
	{% set LAYER = params.LAYER|int %}
	{% endif %}
	{% if LAYER <= cur_layer %}
	{action_raise_error("LAYER[%i] must be above current print layer[%i]."
	| format(LAYER, cur_layer))}
	{% elif tot_layers and LAYER > tot_layers %}
	{action_raise_error("LAYER[%i] must not be above top layer[%i]."
	| format(LAYER, tot_layers))}
	{% endif %}
	{% set key = LAYER %}
	
	{% elif "HEIGHT" in params %}
	{% set cmd_container = "commands_height" %}
	{% set HEIGHT = params.HEIGHT|float %}
	{% set cur_height = printer["gcode_macro _km_layer_run"].cur_height %}
	{% if HEIGHT <= cur_height %}
	{action_raise_error(
	"HEIGHT[%.3f] must be above current print height[%.3f].")
	| format(HEIGHT, cur_height)}
	{% elif HEIGHT >= printer.toolhead.axis_maximum.z %}
	{action_raise_error(
	"HEIGHT[%.3f] must be below maximum Z height[%.3f].")
	| format(HEIGHT, printer.toolhead.axis_maximum.z)}
	{% endif %}
	{% set key = HEIGHT %}
	
	{% else %}
	{action_raise_error("No HEIGHT or LAYER argument provided.")}
	{% endif %}
	
	{% set commands = printer["gcode_macro _km_layer_run"][cmd_container] %}
	{% if key not in commands and not CANCEL %}
	{% set dummy = commands.__setitem__(key, []) %}
	{% endif %}
	
	{% if CANCEL %}
	{% if key in commands %}
	{% set pos = ("%i"|format(key)) if key is integer else
	("%.3fmm"|format(key)) %}
	{% if COMMAND %}
	{% set dummy = commands[key].remove(COMMAND) %}
	{% if commands[key]|length == 0 %}
	{% set dummy = commands.__delitem__(key) %}
	{% endif %}
	{action_respond_info("Cancelled %s %s:\n* %s" |
	format("layer" if k is integer else "height",
	pos, COMMAND))}
	{% else %}
	{% set dummy = commands.__delitem__(key) %}
	{action_respond_info("Cancelled all commands at %s %s." |
	format("layer" if k is integer else "height",
	pos))}
	{% endif %}
	{% endif %}
	{% elif not COMMAND %}
	{action_raise_error("No COMMAND argument provided.")}
	{% elif COMMAND in commands[key] %}
	{action_raise_error("Duplicate command previously scheduled.")}
	{% else %}
	{% set dummy = commands[key].append(COMMAND) %}
	{% set pos = ("%i"|format(key)) if key is integer else
	("%.3fmm"|format(key)) %}
	{action_respond_info("%s %s:\n* %s" |
	format("layer" if key is integer else "height",
	pos, COMMAND))}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE={cmd_container} VALUE="{
	commands|replace('\"','\\\"')}"
	_UPDATE_LAYER_COMPAT
	
	
	{% else %}
	{% set output = [] %}
	{% set commands = printer["gcode_macro _km_layer_run"].commands_layer %}
	{% for key in commands|list|sort %}
	{% set dummy = output.append("layer %i:" | format(key)) %}
	{% for c in commands[key] %}
	{% set dummy = output.append("* %s" | format(c)) %}
	{% endfor %}
	{% endfor %}
	{% set commands = printer["gcode_macro _km_layer_run"].commands_height %}
	{% for key in commands|list|sort %}
	{% set dummy = output.append("height %.3fmm:" | format(key)) %}
	{% for c in commands[key] %}
	{% set dummy = output.append("* %s" | format(c)) %}
	{% endfor %}
	{% endfor %}
	{action_respond_info(output|join('\n'))}
	{% endif %}

[gcode_macro _km_layer_run]
description = Runs pending commands for the current layer change.
	Usage: _KM_LAYER_RUN
variable_cur_height = 0.0
variable_clearance_z = 0.0
variable_commands_layer = {}
variable_commands_height = {}
gcode = 
	{% set cur_layer = printer.print_stats.info.current_layer %}
	{% for key in commands_layer | select("<=", cur_layer) | sort %}
	{action_respond_info("Executing scheduled commands at layer %d:\n%s" |
	format(key, commands_layer[key]|join('\n')))}
	{% for c in commands_layer[key] %}
	{c}
	{% endfor %}
	{% set dummy = commands_layer.__delitem__(key) %}
	{% endfor %}
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{
	commands_layer|replace('\"','\\\"')}"
	{% for key in commands_height | select("<=", cur_height) | sort %}
	{action_respond_info("Executing scheduled commands at height %.3f:\n%s" |
	format(key, commands_height[key]|join('\n')))}
	{% for c in commands_height[key] %}
	{c}
	{% endfor %}
	{% set dummy = commands_height.__delitem__(key) %}
	{% endfor %}
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{
	commands_height|replace('\"','\\\"')}"
	_UPDATE_LAYER_COMPAT

[gcode_macro init_layer_gcode]
description = Clears scheduled gcode commands and state for all layers.
	Usage: INIT_LAYER_GCODE LAYERS=<num>
gcode = 
	SET_PRINT_STATS_INFO TOTAL_LAYER="{params.LAYERS|int + 1}" CURRENT_LAYER="{0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"
	_UPDATE_LAYER_COMPAT

[gcode_macro _reset_layer_gcode]
description = Clears scheduled gcode commands and state for all layers.
	Usage: _RESET_LAYER_GCODE
gcode = 
	SET_PRINT_STATS_INFO TOTAL_LAYER="{0}" CURRENT_LAYER="{0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"
	_UPDATE_LAYER_COMPAT

[gcode_macro cancel_all_layer_gcode]
description = Clears all scheduled gcode commands.
	Usage: CANCEL_ALL_LAYER_GCODE
gcode = 
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"
	_UPDATE_LAYER_COMPAT

[gcode_macro _update_layer_compat]
gcode = 
	{% set next_layer = printer.print_stats.info.current_layer|int + 1 %}
	{% set commands_layer = printer["gcode_macro _km_layer_run"].commands_layer %}
	{% set keys = commands_layer | sort(reverse=True) %}
	
	{% set pause_next_layer = {'enable': False, 'call':
	printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer.call} %}
	{% if pause_next_layer.call in commands_layer[next_layer] | default([]) %}
	{% set dummy = pause_next_layer.__setitem__('enable', True) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{
	pause_next_layer|replace('\"','\\\"') }"
	
	
	{% set pause_at_layer = {'enable': False, 'layer': 0, 'call':
	printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer.call} %}
	{% if pause_next_layer.enable and
	pause_next_layer.call == pause_at_layer.call %}
	{% set keys = keys | reject("==", next_layer) %}
	{% endif %}
	
	
	
	
	{% for key in keys %}
	{% if pause_at_layer.call in commands_layer[key] %}
	{% set dummy = pause_at_layer.__setitem__('enable', True) %}
	{% set dummy = pause_at_layer.__setitem__('layer', key) %}
	{% endif %}
	{% endfor %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{
	pause_at_layer|replace('\"','\\\"') }"

[gcode_macro pause_next_layer]
description = Convenience macro to schedule the current print to pause at the
	next layer change. See PAUSE for additional arguments.
	Usage: PAUSE_NEXT_LAYER ...
gcode = 
	_CHECK_KINEMATIC_LIMITS{% for k in params%}{' ' ~k~ '=' ~ params[k]
	}{% endfor %}
	GCODE_AT_LAYER LAYER=NEXT COMMAND="PAUSE{% for k in params %}{
	' ' ~ k ~ '=' ~ params[k]}{% endfor %}"

[gcode_macro pause_at_layer]
description = Convenience macro to schedule the current print to pause at the
	specified layer change. LAYER=next will cause the command to run at the next
	layer change. See PAUSE for additional arguments.
	Usage: PAUSE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...
gcode = 
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	" %}
	{% set filtered_params = params|reject('in',['HEIGHT','LAYER'])|list|sort %}
	_CHECK_KINEMATIC_LIMITS{% for k in filtered_params%}{' ' ~k~ '=' ~ params[k]
	}{% endfor %}
	GCODE_AT_LAYER {% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor
	%} COMMAND="PAUSE{% for k in filtered_params %}{
	' ' ~ k ~ '=' ~ params[k]}{% endfor %}"

[gcode_macro speed_at_layer]
description = Convenience macro to schedule a feedrate adjustment at the
	specified layer change. LAYER=next will cause the command to run at the next
	layer change. (SPEED parameter behaves the same as the M220 S parameter.)
	Usage: SPEED_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } SPEED=<percentage>
gcode = 
	{% set SPEED = params.SPEED|default(0)|int %}
	{% if SPEED < 1 or SPEED > 500 %}
	{action_raise_error("SPEED[%i] parameter between 1 and 500 is required."
	% SPEED)}
	{% endif %}
	GCODE_AT_LAYER {% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor %} COMMAND="M220 S{SPEED|int}"
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	{% set dummy = params.SPEED|default(percentage)|int %}
	" %}

[gcode_macro flow_at_layer]
description = Convenience macro to schedule a flow percentage adjustment at the
	specified layer change. LAYER=next will cause the command to run at the next
	layer change. (FLOW parameter behaves the same as the M221 S parameter.)
	Usage: FLOW_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } FLOW=<percentage>
gcode = 
	{% set FLOW = params.FLOW|default(0)|int %}
	{% if FLOW < 1 or FLOW > 500 %}
	{action_raise_error("FLOW[%i] parameter between 1 and 500 is required."
	% FLOW)}
	{% endif %}
	GCODE_AT_LAYER {% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor %} COMMAND="M221 S{FLOW|int}"
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	{% set dummy = params.FLOW|default(percentage)|int %}
	" %}

[gcode_macro fan_at_layer]
description = Convenience macro to schedule a fan adjustment at the specified
	layer change. LAYER=next will cause the command to run at the next layer
	change. See SET_FAN_SCALING for additional arguments.
	Usage: FAN_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...
gcode = 
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	{% set dummy = params.SCALE|default(1.0)|float %}
	{% set dummy = params.BUMP|default(0)|int %}
	{% set dummy = params.MAXIMUM|default(0)|int %}
	{% set dummy = params.MINIMUM|default(255)|int %}
	{% set dummy = params.SPEED|default(current speed)|int %}
	" %}
	{% set filtered_params = params|reject('in',['HEIGHT','LAYER'])|list|sort %}
	{% if filtered_params|length == 0 %}
	{action_raise_error("No fan parameters provided.")}
	{% endif %}
	_CHECK_FAN_PARAMS{% for k in filtered_params %}{' '~k~'='~params[k]
	}{% endfor %}
	GCODE_AT_LAYER {% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor
	%} COMMAND="SET_FAN_SCALING{% for k in filtered_params %}{
	' ' ~ k ~ '=' ~ params[k]}{% endfor %}"

[gcode_macro heater_at_layer]
description = Convenience macro to schedule a heater adjustment at the specified
	layer change. LAYER=next will cause the command to run at the next layer
	change. See SET_HEATER_SCALING for additional arguments.
	Usage: HEATER_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...
gcode = 
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	{% set dummy = params.HEATER|default(e.g. extruder) %}
	{% set dummy = params.SCALE|default(1.0)|float %}
	{% set dummy = params.BUMP|default(0.0)|float %}
	{% set dummy = params.MAXIMUM|default(max_temp)|float %}
	{% set dummy = params.MINIMUM|default(min_temp)|float %}
	{% set dummy = params.TARGET|default(current target)|float %}
	" %}
	{% set filtered_params = params|reject('in',['HEIGHT','LAYER'])|list|sort %}
	_CHECK_HEATER_PARAMS{% for k in filtered_params%}{' ' ~ k ~ '=' ~ params[k]
	}{% endfor %}
	GCODE_AT_LAYER{% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor
	%} COMMAND="SET_HEATER_SCALING{% for k in filtered_params %}{
	' ' ~ k ~ '=\\\"' ~ params[k]|replace('\\','\\\\')|replace('\'','\\\'')
	|replace('\"','\\\"') ~ '\\\"'
	}{% endfor %}"

[gcode_macro park]
description = Park the toolhead
	Usage: PARK [P=<0|1|2>] [X=<pos>] [Y=<pos>] [Z=<pos>] [LAZY=<1|0>]
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set LAZY = params.LAZY|default(1)|int %}
	{% if printer.toolhead.homed_axes != "xyz" %}
	{% if LAZY %}
	LAZY_HOME
	{% else %}
	{action_raise_error("Must home axes first.")}
	{% endif %}
	{% endif %}
	
	
	{% set P = (params.P|default(2))|int %}
	{% set X = params.X|default(km.park_x)|float %}
	{% set Y = params.Y|default(km.park_y)|float %}
	{% set Z = params.Z|default(km.park_z)|float %}
	
	M400
	_CHECK_KINEMATIC_LIMITS X="{X}" Y="{Y}" Z="{Z}"
	_PARK_INNER X="{X}" Y="{Y}" Z="{Z}" P="{P}" LAZY="{LAZY}"
	
	{% set dummy = None if True else "
	{% set dummy = params.P|default(mode=<0|1|2>)|int %}
	{% set dummy = params.X|default(X position)|int %}
	{% set dummy = params.Y|default(Y position)|int %}
	{% set dummy = params.Z|default(Z position)|int %}
	" %}

[gcode_macro _park_inner]
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set travel_speed_xy = km.travel_speed_xy %}
	{% set travel_speed_z = km.travel_speed_z %}
	
	{% set position = printer.gcode_move.gcode_position %}
	{% set origin = printer.gcode_move.homing_origin%}
	
	
	
	{% set clearance_z = (printer["gcode_macro _km_layer_run"].clearance_z,
	position.z) | max %}
	{% set P = params.P|int %}
	{% set X = params.X|float - origin.x %}
	{% set Y = params.Y|float - origin.y %}
	{% set Z = params.Z|float %}
	{% set LAZY = params.LAZY|int %}
	
	
	{% if P == 0 %}
	{% if clearance_z > Z %}
	{% set Z = clearance_z %}
	{% endif %}
	{% elif P == 1 %}
	{% set Z = Z - origin.z %}
	{% elif P == 2 %}
	{% set Z = Z + clearance_z %}
	{% else %}
	{action_raise_error("Invalid parameter P=%i. Value must be 0, 1, or 2." |
	format(P)) }
	{% endif %}
	
	
	{% set Z = ((Z, printer.toolhead.axis_maximum.z - origin.z)|min,
	printer.toolhead.axis_minimum.z - origin.z)|max %}
	
	
	{% if (not LAZY) or P != 2 or X != position.x or Y != position.y
	or Z < clearance_z %}
	SAVE_GCODE_STATE NAME=_KM_PARK
	G90
	G0 Z{Z} F{travel_speed_z}
	G0 X{X} Y{Y} F{travel_speed_xy}
	RESTORE_GCODE_STATE NAME=_KM_PARK MOVE=0
	{% endif %}

[gcode_macro g27]
description = Parks the toolhead.
	Usage: G27 [P=<0|1|2>]
gcode = 
	
	PARK P={params.P|default(0)} {% for k in params|reject("in", "GP") %}{
	' '~k~'="'~params[k]~'"'
	}{% endfor %}

[gcode_macro pause]
description = Pauses the current print.
	Usage: PAUSE [X=<pos>] [Y=<pos>] [Z=<pos>] [E=<retract_length>] [B=<beeps>]
rename_existing = _KM_PAUSE_BASE
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% set E = (params.E|default(5))|float %}
	
	{% set B = params.B|default(10)|int if "output_pin beeper" in printer else 0
	%}
	
	{% if printer.pause_resume.is_paused %}
	{ action_respond_info("Print already paused") }
	{% elif printer.idle_timeout.state | string == "Printing" or
	(printer.virtual_sdcard|default({})).is_active|default(False) %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pausing RESET_STACK=1
	{% set position = printer.gcode_move.gcode_position %}
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_x VALUE="{position.x}"
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_y VALUE="{position.y}"
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_z VALUE="{position.z}"
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{E}"
	SAVE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE
	_KM_PAUSE_BASE
	M83
	{% if printer.extruder.can_extrude %}
	G1 E{'%.4f' % -E} F{km.load_speed}
	{% endif %}
	PARK P=2{% for k in params|select("in", "XYZ") %}{
	' '~k~'="'~params[k]~'"'}{% endfor %}
	
	{% for i in range(B) %}
	M300 P100
	G4 P200
	{% endfor %}
	{% else %}
	{ action_respond_info("Print not in progress") }
	{% endif %}

[gcode_macro m600]
description = Pauses the current print.
	Usage: M600 [B<beeps>] [E<pos>] [L<pos>] [R<temp>] [U<pos>] [X<pos>] [Y<pos>]
	[Z<pos>]
gcode = 
	PAUSE B="{0}" P=2{% for k in params|select("in", "EXYZ") %}{
	' '~k~'="'~params[k]~'"'}{% endfor %}
	UNLOAD_FILAMENT{% if 'U' in params %} LENGTH={params.U}{% endif
	%} BEEPS="{params.B|default(10)|int}"
	{% if 'R' in params %}M109 S{params.R}{% endif %}

[gcode_macro m601]
description = Pauses the current print.
	Usage: M601
gcode = 
	PAUSE

[gcode_macro m602]
description = Resumes the currently paused print.
	Usage: M602
gcode = 
	RESUME

[gcode_macro m24]
rename_existing = M24.6245197
gcode = 
	{% if printer.pause_resume.is_paused %}
	RESUME
	{% else %}
	M24.6245197
	{% endif %}

[gcode_macro m25]
rename_existing = M25.6245197
gcode = 
	PAUSE

[gcode_macro resume]
description = Resumes the currently paused print.
	Usage: RESUME [E<pos>]
rename_existing = _KM_RESUME_BASE
variable_saved_extruder_temp = 0
variable_saved_x = 0.0
variable_saved_y = 0.0
variable_saved_z = 0.0
variable_saved_e = 0.0
gcode = 
	{% if printer.pause_resume.is_paused %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% set extruder = printer[printer.toolhead.extruder] %}
	{% if extruder.target <= printer.configfile.settings[
	printer.toolhead.extruder].min_temp
	| float + 0.5 %}
	M109 S{saved_extruder_temp}
	{% endif %}
	
	
	
	{% if 'E' not in params and not saved_e %}
	{% set saved_e = 5.0 %}
	G1 E{'%.4f' % -saved_e } F{km.load_speed}
	{% endif %}
	
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"
	G90
	
	G0 X{saved_x} Y{saved_y} F{km.travel_speed_xy}
	G0 Z{saved_z} F{km.travel_speed_z}
	G91
	
	G1 E{'%.4f' % (params.E|default(saved_e))} F{km.load_speed}
	RESTORE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE MOVE=1
	_KM_RESUME_BASE
	{% else %}
	{ action_respond_info("Printer is not paused.") }
	{% endif %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=printing RESET_STACK=1

[gcode_macro clear_pause]
description = Clears the current pause state.
	Usage: CLEAR_PAUSE
rename_existing = _KM_CLEAR_PAUSE
gcode = 
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"
	_KM_CLEAR_PAUSE

[gcode_macro print_start]
description = Inserted by slicer at start of print. Rather than using this macro
	directly you should configure your slicer as instructed in the readme.
	Usage: PRINT_START BED=<temp> EXTRUDER=<temp> [CHAMBER=<temp>]
	[MESH_MIN=<x,y>] [MESH_MAX=<x,y>] [LAYERS=<num>]
	[NOZZLE_SIZE=<mm>]
gcode = 
	{action_respond_info(
	"This file is using an old The PRINT_START format. This print will run "
	"fine, but you should update your slicer config to take advantage of the "
	"phased PRINT_START macros. The slicer documentation is here:\n"
	"https://github.com/jschuh/klipper-macros\x23slicer-configuration"
	)}
	
	_PRINT_START_PHASE_INIT {rawparams}
	_PRINT_START_PHASE_PREHEAT
	_PRINT_START_PHASE_PROBING
	_PRINT_START_PHASE_EXTRUDER
	_PRINT_START_PHASE_PURGE

[gcode_macro _print_start_phase_init]
description = Inserted by slicer at start of print. Initializes PRINT_START
	phases.
	Usage: See PRINT_START.
gcode = 
	CHECK_KM_CONFIG
	SET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{False}"
	_KM_APPLY_PRINT_OFFSET RESET=1
	_PRINT_START_PHASE_CHECK PHASE=none
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% if not params.BED %}
	{% set dummy = params.__setitem__('BED', params.BED_TEMP|int) %}
	{% endif %}
	{% if not params.EXTRUDER %}
	{% set dummy = params.__setitem__('EXTRUDER', params.EXTRUDER_TEMP|int) %}
	{% endif %}
	
	
	PRINT_START_SET PRINT_START_PHASE="init" {% for k in params %}{' %s=\"%s\"' %
	(k,params[k]|replace('\\','\\\\')|replace('\'','\\\'')|replace('\"','\\\"'))
	}{% endfor %}
	
	
	_km_check_and_set_print_bounds
	
	M107
	CLEAR_PAUSE
	
	M140 S{params.BED}
	{% if params.CHAMBER %}M141 S{params.CHAMBER|int}{% endif %}
	{% if printer.bed_mesh %}BED_MESH_CLEAR{% endif %}
	
	{% if km.start_try_saved_surface_mesh and printer.bed_mesh %}
	LOAD_SURFACE_MESH
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="preheat"

[gcode_macro _print_start_phase_preheat]
description = Inserted by slicer at start of print. Handles the bed and chamber
	heating phases and ends when both are stabilized at their target temperatures.
	Usage: See PRINT_START.
gcode = 
	_PRINT_START_PHASE_CHECK PHASE=preheat
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set BED = print.BED|int %}
	{% set EXTRUDER = print.EXTRUDER|int %}
	{% set CHAMBER = print.CHAMBER|default(0)|int %}
	{% set LAYERS = print.LAYERS|default(0)|int %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% set bed_at_target = (BED + 0.4 - printer.heater_bed.temperature) |
	abs <= 0.6 %}
	PRINT_START_SET BED_AT_TARGET={1 if bed_at_target else 0}
	{% set start_level_bed_at_temp = km.start_level_bed_at_temp and
	not printer.bed_mesh.profile_name %}
	{% set actions_at_temp = start_level_bed_at_temp or
	km.start_quad_gantry_level_at_temp or
	km.start_z_tilt_adjust_at_temp or
	(km.start_home_z_at_temp and not bed_at_target) %}
	{% set bed_overshoot = (BED + (km.start_bed_heat_overshoot if
	(BED and not bed_at_target) else 0.0),
	printer.configfile.settings.heater_bed.max_temp ) | min %}
	
	INIT_LAYER_GCODE LAYERS="{LAYERS}"
	{% if CHAMBER > 0.0 %}
	M141 S{CHAMBER}
	{% endif %}
	
	M140 S{bed_overshoot}
	{% if actions_at_temp %}
	
	
	M104 S{km.start_extruder_probing_temp if km.start_extruder_probing_temp > 0
	else (km.start_extruder_preheat_scale * EXTRUDER)|round(0,'ceil')|int}
	{% else %}
	M104 S{EXTRUDER}
	{% endif %}
	
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing RESET_STACK=1
	G28
	G90
	{% if BED > 0.0 %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=bed_heating RESET_STACK=1
	
	{% if not bed_at_target %}
	PARK
	
	M190 S{bed_overshoot}
	G4 P{km.start_bed_heat_delay / 2}
	M190 R{BED}
	G4 P{km.start_bed_heat_delay / 2}
	{% endif %}
	{% endif %}
	
	{% if CHAMBER > 0.0 %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=chamber_heating RESET_STACK=1
	_KM_PARK_IF_NEEDED HEATER="chamber" RANGE=ABOVE
	M191 S{CHAMBER}
	{% endif %}
	
	{% if BED > 0.0 and bed_at_target%}
	M190 R{BED}
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="probing"

[gcode_macro _print_start_phase_probing]
description = Inserted by slicer at start of print. Performs probing (including
	mesh bed level) and other operations that should be run when the bed and
	chamber are stabilized at their target temps.
	Usage: See PRINT_START.
gcode = 
	_PRINT_START_PHASE_CHECK PHASE=probing
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set MESH_MIN = print.MESH_MIN|default(None) %}
	{% set MESH_MAX = print.MESH_MAX|default(None) %}
	
	{% if km.start_random_placement_max > 0 and print.PRINT_MIN and MESH_MIN %}
	{% set PRINT_MIN = print.PRINT_MIN.split(",")|map('float')|list %}
	{% set PRINT_MAX = print.PRINT_MAX.split(",")|map('float')|list %}
	{% set x_offset = (((km.print_max[0] - km.print_min[0] - PRINT_MAX[0] +
	PRINT_MIN[0] - 2 * km.start_random_placement_padding)|int,
	km.start_random_placement_max * 2)|min, 0)|max %}
	{% set y_offset = (((km.print_max[1] - km.print_min[1] - PRINT_MAX[1] +
	PRINT_MIN[1] - 2 * km.start_random_placement_padding)|int,
	km.start_random_placement_max * 2)|min, 0)|max %}
	{% if x_offset > 0 %}
	{% set x_offset = range(x_offset)|random + km.print_min[0] -
	PRINT_MIN[0] + km.start_random_placement_padding %}
	{% endif %}
	{% if y_offset > 0 %}
	{% set y_offset = range(y_offset)|random + km.print_min[1] -
	PRINT_MIN[1] + km.start_random_placement_padding %}
	{% endif %}
	
	
	{% set MESH_MIN = MESH_MIN.split(",")|map('float')|list %}
	{% set MESH_MAX = MESH_MAX.split(",")|map('float')|list %}
	{% set MESH_MIN_NEW = (MESH_MIN[0] + x_offset, MESH_MIN[1] + y_offset) %}
	{% set MESH_MAX_NEW = (MESH_MAX[0] + x_offset, MESH_MAX[1] + y_offset) %}
	{action_respond_info(
	"Relocating print origin from (%.3f,%.3f) "|format(*MESH_MIN) +
	"to (%.3f,%.3f)"|format(*MESH_MIN_NEW))}
	{% set MESH_MIN = (MESH_MIN_NEW[0], MESH_MIN_NEW[1])|join(',') %}
	{% set MESH_MAX = (MESH_MAX_NEW[0], MESH_MAX_NEW[1])|join(',') %}
	PRINT_START_SET PRINT_OFFSET={"%d,%d" % (x_offset,y_offset)}
	{% endif %}
	
	{% set EXTRUDER = print.EXTRUDER|int %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set start_level_bed_at_temp = km.start_level_bed_at_temp and
	not printer.bed_mesh.profile_name %}
	{% set start_home_z_at_temp = km.start_home_z_at_temp and
	not print.BED_AT_TARGET|int %}
	{% set actions_at_temp = start_level_bed_at_temp or
	km.start_quad_gantry_level_at_temp or
	km.start_z_tilt_adjust_at_temp or
	start_home_z_at_temp %}
	{% if actions_at_temp %}
	{% if km.start_extruder_probing_temp > 0 %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating RESET_STACK=1
	_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=2
	M109 R{km.start_extruder_probing_temp}
	{% else %}
	M104 S{EXTRUDER}
	{% endif %}
	{% if start_home_z_at_temp %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing RESET_STACK=1
	G28 Z
	{% endif %}
	{% if km.start_z_tilt_adjust_at_temp %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=calibrating_z RESET_STACK=1
	Z_TILT_ADJUST
	{% endif %}
	{% if km.start_quad_gantry_level_at_temp %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=leveling_gantry RESET_STACK=1
	QUAD_GANTRY_LEVEL
	{% endif %}
	{% if start_level_bed_at_temp %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=meshing RESET_STACK=1
	_km_mesh_if_needed {% if MESH_MIN %} MESH_MIN={MESH_MIN}{% endif
	%}{% if MESH_MAX %} MESH_MAX={MESH_MAX}{% endif %}
	{% endif %}
	{% if km.start_extruder_probing_temp > 0 %}
	M104 S{EXTRUDER}
	{% endif %}
	G4
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="extruder"

[gcode_macro _print_start_phase_extruder]
description = Inserted by slicer at start of print. Preheats the extruder.
	Usage: See PRINT_START.
gcode = 
	_PRINT_START_PHASE_CHECK PHASE=extruder
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set EXTRUDER = print.EXTRUDER|default(print.EXTRUDER_TEMP)|float %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	
	{% if EXTRUDER > 0 %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating RESET_STACK=1
	_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=ABOVE
	M109 S{EXTRUDER}
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="purge"

[gcode_macro _print_start_phase_purge]
description = Inserted by slicer at start of print. Generates purge lines.
	Usage: See PRINT_START.
gcode = 
	_PRINT_START_PHASE_CHECK PHASE=purge
	
	_KM_APPLY_PRINT_OFFSET
	
	_APPLY_BED_SURFACE_OFFSET
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set MESH_MIN = print.MESH_MIN|default(None) %}
	{% set MESH_MAX = print.MESH_MAX|default(None) %}
	{% set NOZZLE_SIZE = print.NOZZLE_SIZE|default(print.NOZZLE_SIZE)|
	default(printer.configfile.settings.extruder.nozzle_diameter)|float %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% if km.start_purge_length > 0.0 and printer.extruder.can_extrude %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=purging RESET_STACK=1
	DRAW_PURGE_LINE WIDTH="{NOZZLE_SIZE * 1.25}" HEIGHT="{NOZZLE_SIZE * 0.625
	}"{% if MESH_MIN %} PRINT_MIN={MESH_MIN}{% endif
	%}{% if MESH_MAX %} PRINT_MAX={MESH_MAX}{% endif %}
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="printing"
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=printing RESET_STACK=1

[gcode_macro _km_park_if_needed]
description = Parks the extruder if the current temperature of the supplied
	heater is not within the specified target range.
	Usage: _KM_PARK_IF_NEEDED HEATER=<heater> RANGE=[<percentage>|ABOVE|BELOW]
gcode = 
	
	{% set HEATER = params.HEATER if params.HEATER in
	printer.heaters.available_heaters else
	("heater_generic " ~ params.HEATER) %}
	{% set RANGE = (params.RANGE|default(1))|string|upper %}
	
	{% if printer[HEATER].target %}
	{% if RANGE == "ABOVE" %}
	{% if printer[HEATER].temperature < printer[HEATER].target %}
	PARK
	{% endif %}
	{% elif RANGE == "BELOW" %}
	{% if printer[HEATER].temperature > printer[HEATER].target %}
	PARK
	{% endif %}
	{% elif (printer[HEATER].temperature - printer[HEATER].target)|abs >
	(printer[HEATER].target * RANGE|float * 0.01)|abs %}
	PARK
	{% endif %}
	{% endif %}

[gcode_macro _km_apply_print_offset]
variable_offset = []
gcode = 
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% if params.RESET|default(0)|int and offset and
	not printer["gcode_macro _km_save_state"].is_ephemeral%}
	{% set PRINT_OFFSET = [offset.pop(0) * -1, offset.pop() * -1] %}
	{% elif print.PRINT_OFFSET and not offset and
	not printer["gcode_macro _km_save_state"].is_ephemeral %}
	{% set PRINT_OFFSET = print.PRINT_OFFSET.split(",")|map('float')|list %}
	{% set dummy = offset.extend(PRINT_OFFSET) %}
	{% endif %}
	
	{% if PRINT_OFFSET %}
	_KM_SET_GCODE_OFFSET_BASE {"X_ADJUST=%.2f Y_ADJUST=%.2f"|
	format(*PRINT_OFFSET)}
	{% endif %}

[gcode_macro _km_mesh_if_needed]
gcode = 
	
	
	
	{% if not printer.bed_mesh.profile_name %}
	BED_MESH_CALIBRATE_FAST {rawparams}
	{% endif %}

[gcode_macro print_start_set]
description = Inserted by slicer to set values used by PRINT_START.
	Usage: PRINT_START_SET <VARIABLE>=<value>
variable_print = {}
gcode = 
	{%for k in params %}
	{% set dummy = print.__setitem__(k|upper, params[k]) %}
	{% endfor %}

[gcode_macro _print_start_phase_check]
gcode = 
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set PRINT_START_PHASE = print.PRINT_START_PHASE|default("none") %}
	{% if PRINT_START_PHASE != params.PHASE %}
	
	SET_GCODE_VARIABLE MACRO=print_start_set VARIABLE=print VALUE="{{}}"
	{% if params.PHASE != 'none' %}
	{% set error = "PRINT_START phase error. Expected '%s' but found '%s'" %
	(params.PHASE, PRINT_START_PHASE) %}
	
	{% if not 'virtual_sdcard' in printer or
	not printer.virtual_sdcard.is_active or 'CANCEL_PRINT' not in
	printer.configfile.settings.virtual_sdcard.on_error_gcode|
	default("")|upper %}
	{action_respond_info(error)}
	CANCEL_PRINT
	{% else %}
	{action_raise_error(error)}
	{% endif %}
	{% else %}
	{ action_respond_info("Expected phase '%s' but found '%s'. Resetting."
	% (params.PHASE, PRINT_START_PHASE)) }
	{% endif %}
	{% endif %}

[gcode_macro print_end]
description = Inserted by slicer at end of print.
	Usage: PRINT_END
gcode = 
	_KM_CHECK_IS_PRINTING
	M400
	_PRINT_END_INNER
	
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% if km.start_clear_adjustments_at_end != 0 %}
	RESET_HEATER_SCALING
	RESET_FAN_SCALING
	M220 S100
	M221 S100
	{% endif %}
	_RESET_LAYER_GCODE
	_RESET_VELOCITY_LIMITS
	TURN_OFF_HEATERS
	M107; turn off fan
	{% if printer.bed_mesh %}BED_MESH_CLEAR{% endif %}
	
	{% if printer.toolhead.homed_axes|lower == "xyz" %}
	PARK Y="{km.start_end_park_y}"
	{% endif %}
	M84
	CLEAR_PAUSE
	SET_GCODE_VARIABLE MACRO=print_start_set VARIABLE=print VALUE="{{}}"
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready RESET_STACK=1

[gcode_macro _print_end_inner]
variable_cancelled = False
gcode = 
	SET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{False}"
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set toolhead = printer.toolhead %}
	{% set origin = printer.gcode_move.homing_origin%}
	{% set max_x = km.print_max[0] - origin.x %}
	{% set max_y = km.print_max[1] - origin.y %}
	{% set max_z = toolhead.axis_maximum.z - origin.z %}
	
	{% if not cancelled %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=completing
	{% endif %}
	
	{% if printer.extruder.can_extrude %}
	
	{% if not printer.pause_resume.is_paused and not cancelled and
	toolhead.homed_axes|lower == "xyz" %}
	{% set x_safe = (max_x - toolhead.position.x, 2.0)|min %}
	{% set y_safe = (max_y - toolhead.position.y, 2.0)|min %}
	{% set z_safe = (max_z - toolhead.position.z, 2.0)|min %}
	G91
	G0 Z{z_safe} E-1.0 F{km.travel_speed_z * 2}
	G0 X{x_safe} Y{y_safe} E-1.0 F{km.travel_speed_xy}
	
	_KM_APPLY_PRINT_OFFSET RESET=1
	{% endif %}
	
	
	G92 E0
	G1 E-5.0 F3600
	M400
	{% endif %}

[gcode_macro _km_check_is_printing]
variable_debug_state = False
description = Throws an error if print is not currently in progress.
gcode = 
	{% if not debug_state and
	printer.idle_timeout.state|string != "Printing" and
	not (printer.virtual_sdcard|default({})).is_active|default(False) and
	not printer.pause_resume.is_paused %}
	{ action_raise_error("No active print.") }
	{% endif %}

[gcode_macro _km_check_and_set_print_bounds]
description = Validates all print bounds and caches their values.
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set print = printer["gcode_macro print_start_set"].print %}
	
	
	{% if print.MESH_MIN %}
	{% set MESH_MIN = print.MESH_MIN.split(",")|map('float')|list %}
	{% set MESH_MAX = print.MESH_MAX.split(",")|map('float')|list %}
	{%if MESH_MIN[0] < km.print_min[0] or MESH_MIN[1] < km.print_min[1] %}
	{action_raise_error("MESH_MIN %s is outside the printable bounds" %
	(MESH_MIN|string, km.print_min|string))}
	{%elif MESH_MAX[0] > km.print_max[0] or MESH_MAX[1] > km.print_max[1] %}
	{action_raise_error("MESH_MAX %s is outside the printable bounds %s" %
	(MESH_MAX|string, km.print_max|string))}
	{% endif %}
	{% endif %}
	
	
	{% set points = [] %}
	{% if print.MODEL_MIN or print.MODEL_MAX %}
	{% set MODEL_MIN = print.MODEL_MIN.split(",")|map('float')|list %}
	{% set MODEL_MAX = print.MODEL_MAX.split(",")|map('float')|list %}
	{% set points = [MODEL_MIN, MODEL_MAX] %}
	{% endif %}
	{% if (printer.exclude_object|default({})).objects %}
	{% set points = printer.exclude_object.objects|selectattr('polygon')|
	map(attribute='polygon')|sum(start=points) %}
	{% set points_len = points|length %}
	{% if points_len >= 2 %}
	{% set x_coords = (points|map(attribute=0)|sort|list)[0::points_len-1] %}
	{% set y_coords = (points|map(attribute=1)|sort|list)[0::points_len-1] %}
	{% set MODEL_MIN = (x_coords[0],y_coords[0])|map('float')|list %}
	{% set MODEL_MAX = (x_coords[1],y_coords[1])|map('float')|list %}
	PRINT_START_SET MODEL_MIN="{MODEL_MIN|join(',')
	}" MODEL_MAX="{MODEL_MAX|join(',')}"
	{% endif %}
	{% endif %}
	
	{% if MODEL_MIN %}
	
	{% if MODEL_MIN[0] < km.print_min[0] or MODEL_MIN[1] < km.print_min[1] %}
	{action_raise_error("MODEL_MIN %s is outside the printable bounds" %
	(MODEL_MIN|string, km.print_min|string))}
	{% elif MODEL_MAX[0] > km.print_max[0] or MODEL_MAX[1] > km.print_max[1] %}
	{action_raise_error("MODEL_MAX %s is outside the printable bounds %s" %
	(MODEL_MAX|string, km.print_max|string))}
	{% endif %}
	{% endif %}
	
	
	{% if MESH_MIN and MODEL_MIN %}
	PRINT_START_SET PRINT_MIN="{((MODEL_MIN[0],MESH_MIN[0])|min,
	(MODEL_MIN[1],MESH_MIN[1])|min)|join(',')
	}" PRINT_MAX="{((MODEL_MAX[0],MESH_MAX[0])|max,
	(MODEL_MAX[1],MESH_MAX[1])|max)|join(',')}"
	{% else %}
	PRINT_START_SET PRINT_MIN="{km.print_min|join(',')
	}" PRINT_MAX="{km.print_max|join(',')}"
	{% endif %}

[gcode_macro _km_save_state]
description = Tracks gcode state.
variable_state_set = {}
variable_is_ephemeral = 0
gcode = 
	{% if params.SAVE|int %}
	{% set dummy = state_set.__setitem__(params.NAME, None) %}
	{% else %}
	{% set dummy = state_set.__delitem__(params.NAME) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=_km_save_state VARIABLE=is_ephemeral VALUE="{
	1 if state_set|length > 0 else 0 }"

[gcode_macro save_gcode_state]
description = Wraps SAVE_GCODE_STATE to track persistence state.
	Usage: See Klipper documentation
rename_existing = _KM_SAVE_GCODE_STATE
gcode = 
	_KM_SAVE_GCODE_STATE {rawparams}
	{% set NAME = params.NAME|default("default") %}
	_km_save_state NAME={NAME} SAVE=1

[gcode_macro restore_gcode_state]
description = Wraps RESTORE_GCODE_STATE to track persistence state.
	Usage: See Klipper documentation
rename_existing = _KM_RESTORE_GCODE_STATE
gcode = 
	_KM_RESTORE_GCODE_STATE {rawparams}
	{% set NAME = params.NAME|default("default") %}
	_km_save_state NAME={NAME} SAVE=0

[gcode_macro _abort_on_gcode_state]
gcode = 
	{% set save_state = printer["gcode_macro _km_save_state"] %}
	{% if save_state.is_ephemeral %}
	{action_raise_error("Encountered unexpected save state " +
	save_state.state_set|list|sort|string)}
	{% endif %}

[gcode_macro _km_print_status]
variable_last_status = 'none'
variable_status_stack = []
variable_command_list = {}
variable_status_list = [
	'ready',
	'filament_load',
	'filament_unload',
	'bed_heating',
	'chamber_heating',
	'homing',
	'leveling_gantry',
	'calibrating_z',
	'meshing',
	'extruder_heating',
	'purging',
	'printing',
	'pausing',
	'cancelling',
	'completing',
	]
gcode = 
	{% set ACTION = params.ACTION|trim|upper %}
	{% set STATUS = params.STATUS|default("")|trim|lower %}
	
	
	{% if ACTION == "ADD_EVENT" %}
	{% set COMMAND = params.COMMAND %}
	{% set ARGS = params.ARGS|default(0)|int != 0 %}
	{% set TYPE = params.TYPE|default('ENTER')|trim|upper %}
	{% set WHEN = params.WHEN|default('PRINTING')|trim|upper %}
	{% set FILTER_ENTER =
	(params.FILTER_ENTER|default("")|trim|lower).split(',')|
	select()|unique|list %}
	{% set FILTER_LEAVE =
	(params.FILTER_LEAVE|default("")|trim|lower).split(',')|
	select()|unique|list %}
	
	{% set STATUSES = STATUS.split(',')|map('trim')|list %}
	{% for s in (STATUSES if STATUSES[0] != 'all' else status_list) %}
	{% if not s in command_list %}
	{% set dummy = command_list.__setitem__(s,[]) %}
	{% endif %}
	{% set dummy = command_list[s].append({'cmd':COMMAND, 'args':ARGS,
	'type':TYPE, 'when':WHEN,
	'filt_e':FILTER_ENTER,
	'filt_l':FILTER_LEAVE}) %}
	{% endfor %}
	
	
	{% elif ACTION == "CHANGE" %}
	{% if params.RESET_STACK|default(0)|int %}
	{% for dummy in range(status_stack|length) %}
	{% set dummy = status_stack.pop() %}
	{% endfor %}
	
	
	{% elif STATUS == "pop_status" %}
	{% set STATUS = (status_stack|default(['ready'], True)).pop() %}
	{% endif %}
	
	{% if STATUS not in status_list %}
	{action_raise_error("Status '%s' not valid."|format(STATUS))}
	{% endif %}
	
	{% if STATUS != last_status %}
	{% set is_printing =
	printer["gcode_macro print_start_set"].print.PRINT_START_PHASE|
	default("")|length != 0 %}
	{% set print_states = ('ALWAYS', 'PRINTING' if is_printing else 'IDLE') %}
	
	{% for c in command_list[last_status]|default([]) %}
	{% if c.type in ('BOTH','LEAVE') and c.when in print_states and
	(not c.filt_l or STATUS in c.filt_l) %}
	M400
	{c.cmd}{% if c.args %} TYPE=LEAVE WHEN={print_states[1]
	} LAST_STATUS={last_status} NEXT_STATUS={STATUS}{% endif %}
	{% endif %}
	{% endfor %}
	
	{% for c in command_list[STATUS]|default([]) %}
	{% if c.type in ('BOTH','ENTER') and c.when in print_states and
	(not c.filt_e or STATUS in c.filt_e) %}
	M400
	{c.cmd}{% if c.args %} TYPE=ENTER WHEN={print_states[1]
	} LAST_STATUS={last_status} NEXT_STATUS={STATUS}{% endif %}
	{% endif %}
	{% endfor %}
	SET_GCODE_VARIABLE MACRO=_km_print_status VARIABLE=last_status VALUE="'{
	STATUS}'"
	{% endif %}
	
	
	{% elif ACTION == "PUSH_STATUS" %}
	{% set dummy = status_stack.append(last_status) %}
	
	
	{% else %}
	{action_raise_error("Action '%s' not valid."|format(ACTION))}
	{% endif %}

[gcode_macro gcode_on_print_status]
description = Adds a gcode command for a status event.
	Usage: GCODE_ON_PRINT_STATUS STATUS=<status> COMMAND=<gcode> [ARGS=<1|0>]
	[WHEN=<PRINTING|IDLE|ALWAYS>]
	[TYPE=<ENTER|LEAVE|BOTH>]
	[FILTER_ENTER=<status list>]
	[FILTER_LEAVE=<status list>]
gcode = 
	{% set STATUS = (params.STATUS|lower).split(',')|map('trim')|list %}
	{% set TYPE = params.TYPE|default('ENTER')|trim|upper %}
	{% set WHEN = params.WHEN|default('PRINTING')|trim|upper %}
	{% set FILTER_ENTER =
	(params.FILTER_ENTER|default("")|trim|lower).split(',')|select()|list %}
	{% set FILTER_LEAVE =
	(params.FILTER_LEAVE|default("")|trim|lower).split(',')|select()|list %}
	
	
	{% set status_list = printer["gcode_macro _km_print_status"].status_list %}
	{% for s in STATUS %}
	{% if not (s in status_list or s == 'all' and STATUS|length == 1) %}
	{action_raise_error("STATUS parameter '%s' not valid."|format(s))}
	{% endif %}
	{% endfor %}
	
	{% if TYPE not in ('ENTER', 'LEAVE', 'BOTH') %}
	{action_raise_error("TYPE paramater '%s' not valid."|format(TYPE))}
	{% elif WHEN not in ('PRINTING', 'IDLE', 'ALWAYS') %}
	{action_raise_error("WHEN parameter '%s' not valid."|format(WHEN))}
	{% elif TYPE == 'ENTER' and FILTER_LEAVE %}
	{action_raise_error("FILTER_LEAVE not valid with TYPE=ENTER.")}
	{% elif TYPE == 'LEAVE' and FILTER_ENTER %}
	{action_raise_error("FILTER_ENTER not valid with TYPE=LEAVE.")}
	{% endif %}
	{% for f in FILTER_ENTER %}
	{% if f not in status_list %}
	{action_raise_error("FILTER_ENTER parameter '%s' not valid."|format(f))}
	{% endif %}
	{% endfor %}
	{% for f in FILTER_LEAVE %}
	{% if f not in status_list %}
	{action_raise_error("FILTER_LEAVE parameter '%s' not valid."|format(f))}
	{% endif %}
	{% endfor %}
	
	
	_KM_PRINT_STATUS ACTION=ADD_EVENT {rawparams}

[gcode_macro m201]
description = Sets maximum accelleration.
	Usage: M201 [X<accel>] [Y<accel>]
variable_max_accel = 1.7976931348623157e+308
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% if 'X' in params or 'Y' in params %}
	{% set accel = (params.X|default(params.Y)|float,
	params.Y|default(params.X)|float)|min %}
	SET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{accel}"
	{% else %}
	SET_VELOCITY_LIMIT
	{% endif %}

[gcode_macro m203]
description = Sets maximum velocity.
	Usage: M203 [X<velocity>] [Y<velocity>]
gcode = 
	{% if 'X' in params or 'Y' in params %}
	{% set velocity = (params.X|default(params.Y)|float,
	params.Y|default(params.X)|float)|min %}
	SET_VELOCITY_LIMIT VELOCITY="{velocity}"
	{% else %}
	SET_VELOCITY_LIMIT
	{% endif %}

[gcode_macro m205]
description = Sets square corner velocity.
	Usage: M203 [X<velocity>] [Y<velocity>]
gcode = 
	{% if 'X' in params or 'Y' in params %}
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY="{
	(params.X|default(0)|float, params.Y|default(0)|float)|min}"
	{% else %}
	SET_VELOCITY_LIMIT
	{% endif %}

[gcode_macro m900]
description = Sets pressure advance.
	Usage: M900 [K<advance>] [T<extruder_index>]
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% if km.pressure_advance_scale > 0.0 %}
	{% set extruder = "extruder" ~ params.T|replace('0', '')
	if "T" in params else printer.toolhead.extruder %}
	{% if 'K' in params %}
	SET_PRESSURE_ADVANCE EXTRUDER="{extruder}" ADVANCE="{
	params.K|float * km.pressure_advance_scale}"
	{% endif %}
	{% endif %}

[gcode_macro _reset_velocity_limits]
description = Sets maximum accelleration.
	Usage: M204 [S<accel>] [P<accel> T<accel>]
gcode = 
	SET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{1.7976931348623157e+308}"

[gcode_macro bed_mesh_calibrate]
rename_existing = _KM_BED_MESH_CALIBRATE_BASE
description = Wraps BED_MESH_CALIBRATE, scaling probe count to specified area.
	Usage: See Klipper documentation.
gcode = 
	BED_MESH_CALIBRATE_FAST{%for k in params%}{' '~k~'="'~params[k]~'"'}{%endfor%}

[gcode_macro g29]
gcode = 
	BED_MESH_CALIBRATE

[idle_timeout]
gcode = 
	_KM_IDLE_TIMEOUT

[respond]

[gcode_macro PRINT_START]
rename_existing = KM_PRINT_START
gcode = 
	
	STATUS_HOMING
	KM_PRINT_START {rawparams}
	STATUS_PRINTING

[board_pins EBB36_G0B1_v1.2]
mcu = ebbcan
aliases = 
aliases_step = 
	EXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15
aliases_limitsw = 
	LIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6
aliases_bltouch = 
	PROBE_1=PB9,PROBE_2=PB8
aliases_fans = 
	FAN0=PA1,FAN1=PA0
aliases_thermistors = 
	TH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7
aliases_heaters = 
	HE0=PB13
aliases_rgb = 
	RGBLED=PD3
aliases_adxl = 
	ADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11
aliases_i2c = 
	AUX0=PB3,AUX1=PB4

[neopixel sb_leds]
pin = ebbcan:RGBLED
chain_count = 3
color_order = GRB
initial_red = 0.0
initial_green = 0.0
initial_blue = 0.0
initial_white = 1.0

[save_variables]
filename = ~/printer_data/variables.cfg

[mcu CB1]
serial = /tmp/klipper_host_mcu

[mcu]
canbus_uuid = f94e10a9add8

[mcu ebbcan]
canbus_uuid = 57244ec148c0

[printer]
kinematics = corexy
max_velocity = 600
max_accel = 10000
max_accel_to_decel = 5000
max_z_velocity = 5
max_z_accel = 100

[stepper_x]
step_pin = PE2
dir_pin = !PB4
enable_pin = !PC11
microsteps = 16
rotation_distance = 40
endstop_pin = !ebbcan:LIMIT_2
position_endstop = 220
position_min = -4
position_max = 220
homing_speed = 50

[tmc2209 stepper_x]
uart_pin = PC10
diag_pin = PF3
run_current = 1.1

[tmc2209 stepper_y]
uart_pin = PF13
diag_pin = PF4
run_current = 1.1

[tmc2209 stepper_z]
uart_pin = PF9
diag_pin = PF5
run_current = 0.650

[tmc2209 extruder]
uart_pin = ebbcan:EXT_UART
diag_pin = ebbcan:LIMIT_3
run_current = 0.650

[stepper_y]
step_pin = PF12
dir_pin = !PF11
enable_pin = !PB3
microsteps = 16
rotation_distance = 40
endstop_pin = ^PF3
position_endstop = 220
position_min = -4
position_max = 220
homing_speed = 50

[stepper_z]
step_pin = PD7
dir_pin = !PD6
enable_pin = !PF10
microsteps = 16
rotation_distance = 8
endstop_pin = probe:z_virtual_endstop
position_max = 300
position_min = -3

[heater_bed]
heater_pin = PB7
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PA0
min_temp = 0
max_temp = 130
control = pid
pid_kp = 63.528
pid_ki = 0.875
pid_kd = 1153.041

[temperature_sensor raspberry_pi]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor mcu_temp]
sensor_type = temperature_mcu
min_temp = 0
max_temp = 100

[controller_fan MCU_Fan]
pin = PE6
heater = extruder
fan_speed = 1

[heater_fan heatbreak_cooling_fan]
pin = ebbcan:FAN0
kick_start_time = 0.25
heater = extruder
heater_temp = 50.0
fan_speed = 1

[fan]
pin = ebbcan:FAN1

[safe_z_home]
home_xy_position = 140, 140
speed = 100
z_hop = 10
z_hop_speed = 20

[extruder]
step_pin = ebbcan:EXT_STEP
dir_pin = ebbcan:EXT_DIR
enable_pin = !ebbcan:EXT_EN
microsteps = 16
rotation_distance = 4.71
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.750
max_extrude_only_distance = 101.0
heater_pin = ebbcan:HE0
sensor_type = ATC Semitec 104NT-4-R025H42G
sensor_pin = ebbcan:TH0
min_temp = 0
max_temp = 300
max_extrude_cross_section = 5
pressure_advance = 0.02
control = pid
pid_kp = 20.603
pid_ki = 0.988
pid_kd = 107.392

[bltouch]
sensor_pin = ebbcan:PROBE_2
control_pin = ebbcan:PROBE_1
x_offset = -40
y_offset = -17
samples = 2
samples_tolerance = 0.015
samples_tolerance_retries = 5
z_offset = 2.849

[bed_mesh]
speed = 100
horizontal_move_z = 5
mesh_min = 10, 27
mesh_max = 173, 200
probe_count = 5, 5
algorithm = bicubic
fade_start = 1
fade_end = 10

[bed_screws]
screw1 = 55,55
screw2 = 200,55
screw3 = 200,205
screw4 = 55,205

[screws_tilt_adjust]
screw1 = 65,55
screw1_name = front left screw
screw2 = 218,55
screw2_name = front right screw
screw3 = 218,215
screw3_name = rear right screw
screw4 = 65,215
screw4_name = rear left screw
horizontal_move_z = 10
speed = 50
screw_thread = CW-M4

[display]
lcd_type = st7920
cs_pin = PB12
sclk_pin = PB13
sid_pin = PB15
encoder_pins = ^PB14, ^PB10
click_pin = ^!PB2

[exclude_object]

[firmware_retraction]
retract_length = 0.4
retract_speed = 20
unretract_extra_length = 0
unretract_speed = 10

[input_shaper]
shaper_type_x = 2hump_ei
shaper_freq_x = 86.2
shaper_type_y = zv
shaper_freq_y = 44.8

[gcode_arcs]
resolution = 1.0

[adxl345]
cs_pin = ebbcan:ADXL_CS
spi_software_sclk_pin = ebbcan:ADXL_SCLK
spi_software_mosi_pin = ebbcan:ADXL_MOSI
spi_software_miso_pin = ebbcan:ADXL_MISO

[resonance_tester]
accel_chip = adxl345
probe_points = 
	120,120,20

[bed_mesh default]
version = 1
points = 
	0.027500, 0.058750, 0.091250, 0.182500
	-0.003750, 0.061250, 0.072500, 0.125000
	0.021250, 0.016250, 0.013750, 0.033750
	-0.023750, -0.018750, -0.036250, -0.037500
x_count = 4
y_count = 4
mesh_x_pps = 2
mesh_y_pps = 2
algo = bicubic
tension = 0.2
min_x = 48.75
max_x = 171.24
min_y = 48.75
max_y = 171.24
=======================
Extruder max_extrude_ratio=2.078758
mcu 'mcu': Starting CAN connect
Created a socket
webhooks client 281473550021248: New connection
webhooks client 281473550021248: Client info {'program': 'Moonraker', 'version': 'v0.8.0-92-g504a3a7'}
Loaded MCU 'mcu' 109 commands (v0.11.0-241-gffb5105b / gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2)
MCU 'mcu' config: ADC_MAX=4095 BUS_PINS_i2c1_PA9_PA10=PA9,PA10 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_i2c2_PB13_PB14=PB13,PB14 BUS_PINS_i2c3_PB3_PB4=PB3,PB4 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3=PB4,PB5,PB3 CANBUS_BRIDGE=1 CLOCK_FREQ=64000000 MCU=stm32g0b1xx PWM_MAX=255 RECEIVE_WINDOW=192 RESERVE_PINS_CAN=PD12,PD13 RESERVE_PINS_USB=PA11,PA12 RESERVE_PINS_crystal=PF0,PF1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
mcu 'CB1': Starting connect
Loaded MCU 'CB1' 113 commands (v0.11.0-241-gffb5105b / gcc: (Debian 10.2.1-6) 10.2.1 20210110 binutils: (GNU Binutils for Debian) 2.35.2)
MCU 'CB1' config: ADC_MAX=4095 CLOCK_FREQ=50000000 MCU=linux PCA9685_MAX=4096 PWM_MAX=32768 STATS_SUMSQ_BASE=256
mcu 'ebbcan': Starting CAN connect
Created a socket
mcu 'ebbcan': got {'count': 519, 'sum': 602711, 'sumsq': 5668882, '#name': 'stats', '#sent_time': 837.9370845239999, '#receive_time': 837.982241857}
Loaded MCU 'ebbcan' 109 commands (v0.11.0-241-gffb5105b / gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2)
MCU 'ebbcan' config: ADC_MAX=4095 BUS_PINS_i2c1_PA9_PA10=PA9,PA10 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_i2c2_PB13_PB14=PB13,PB14 BUS_PINS_i2c3_PB3_PB4=PB3,PB4 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3=PB4,PB5,PB3 CANBUS_FREQUENCY=1000000 CLOCK_FREQ=64000000 MCU=stm32g0b1xx PWM_MAX=255 RECEIVE_WINDOW=192 RESERVE_PINS_CAN=PB0,PB1 RESERVE_PINS_crystal=PF0,PF1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
mcu_temperature 'mcu' nominal base=-268.847262 slope=1298.126801
Sending MCU 'mcu' printer configuration...
Configured MCU 'mcu' (1024 moves)
Sending MCU 'CB1' printer configuration...
Configured MCU 'CB1' (1024 moves)
Sending MCU 'ebbcan' printer configuration...
Configured MCU 'ebbcan' (1024 moves)
Starting heater checks for heater_bed
bed_mesh: generated points
Index |  Tool Adjusted  |   Probe
  0   | (50.0, 44.0)    | (10.0, 27.0)
  1   | (90.8, 44.0)    | (50.8, 27.0)
  2   | (131.5, 44.0)   | (91.5, 27.0)
  3   | (172.2, 44.0)   | (132.2, 27.0)
  4   | (213.0, 44.0)   | (173.0, 27.0)
  5   | (213.0, 87.2)   | (173.0, 70.2)
  6   | (172.2, 87.2)   | (132.2, 70.2)
  7   | (131.5, 87.2)   | (91.5, 70.2)
  8   | (90.8, 87.2)    | (50.8, 70.2)
  9   | (50.0, 87.2)    | (10.0, 70.2)
  10  | (50.0, 130.5)   | (10.0, 113.5)
  11  | (90.8, 130.5)   | (50.8, 113.5)
  12  | (131.5, 130.5)  | (91.5, 113.5)
  13  | (172.2, 130.5)  | (132.2, 113.5)
  14  | (213.0, 130.5)  | (173.0, 113.5)
  15  | (213.0, 173.8)  | (173.0, 156.8)
  16  | (172.2, 173.8)  | (132.2, 156.8)
  17  | (131.5, 173.8)  | (91.5, 156.8)
  18  | (90.8, 173.8)   | (50.8, 156.8)
  19  | (50.0, 173.8)   | (10.0, 156.8)
  20  | (50.0, 217.0)   | (10.0, 200.0)
  21  | (90.8, 217.0)   | (50.8, 200.0)
  22  | (131.5, 217.0)  | (91.5, 200.0)
  23  | (172.2, 217.0)  | (132.2, 200.0)
  24  | (213.0, 217.0)  | (173.0, 200.0)
Starting heater checks for extruder
Stats 839.5: gcodein=0  mcu: mcu_awake=0.044 mcu_task_avg=0.000014 mcu_task_stddev=0.000009 bytes_write=3811 bytes_read=5756 bytes_retransmit=0 bytes_invalid=0 send_seq=231 receive_seq=228 retransmit_seq=0 srtt=0.004 rttvar=0.002 rto=0.025 ready_bytes=988 upcoming_bytes=35 freq=64005789 CB1: mcu_awake=0.003 mcu_task_avg=0.000024 mcu_task_stddev=0.000016 bytes_write=819 bytes_read=4523 bytes_retransmit=0 bytes_invalid=0 send_seq=112 receive_seq=112 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000150 adj=49993335 ebbcan: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=1479 bytes_read=4814 bytes_retransmit=0 bytes_invalid=0 send_seq=156 receive_seq=156 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001180 adj=64000548  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=62.6 mcu_temp: temp=37.3 sysload=0.68 cputime=118.553 memavail=685880 print_time=0.010 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
webhooks: registering remote method 'shutdown_machine' for connection id: 281473550021248
webhooks: registering remote method 'reboot_machine' for connection id: 281473550021248
webhooks: registering remote method 'pause_job_queue' for connection id: 281473550021248
webhooks: registering remote method 'start_job_queue' for connection id: 281473550021248
Active bed surface: default; offset: -0.050
Stats 840.6: gcodein=0  mcu: mcu_awake=0.044 mcu_task_avg=0.000014 mcu_task_stddev=0.000009 bytes_write=4940 bytes_read=6003 bytes_retransmit=0 bytes_invalid=0 send_seq=252 receive_seq=252 retransmit_seq=0 srtt=0.004 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64003215 CB1: mcu_awake=0.003 mcu_task_avg=0.000024 mcu_task_stddev=0.000016 bytes_write=825 bytes_read=4539 bytes_retransmit=0 bytes_invalid=0 send_seq=113 receive_seq=113 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999917 adj=49996948 ebbcan: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=1485 bytes_read=4890 bytes_retransmit=0 bytes_invalid=0 send_seq=157 receive_seq=157 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000880 adj=63992040  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=63.2 mcu_temp: temp=37.4 sysload=0.68 cputime=118.817 memavail=683984 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 841.6: gcodein=0  mcu: mcu_awake=0.044 mcu_task_avg=0.000014 mcu_task_stddev=0.000009 bytes_write=4946 bytes_read=6106 bytes_retransmit=0 bytes_invalid=0 send_seq=253 receive_seq=253 retransmit_seq=0 srtt=0.003 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64002182 CB1: mcu_awake=0.003 mcu_task_avg=0.000024 mcu_task_stddev=0.000016 bytes_write=831 bytes_read=4555 bytes_retransmit=0 bytes_invalid=0 send_seq=114 receive_seq=114 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999615 adj=50000214 ebbcan: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=1491 bytes_read=4951 bytes_retransmit=0 bytes_invalid=0 send_seq=158 receive_seq=158 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000729 adj=63997697  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=63.4 mcu_temp: temp=37.4 sysload=0.71 cputime=118.903 memavail=683284 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 842.6: gcodein=0  mcu: mcu_awake=0.044 mcu_task_avg=0.000014 mcu_task_stddev=0.000009 bytes_write=4952 bytes_read=6209 bytes_retransmit=0 bytes_invalid=0 send_seq=254 receive_seq=254 retransmit_seq=0 srtt=0.003 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001756 CB1: mcu_awake=0.003 mcu_task_avg=0.000024 mcu_task_stddev=0.000016 bytes_write=837 bytes_read=4571 bytes_retransmit=0 bytes_invalid=0 send_seq=115 receive_seq=115 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999502 adj=50000701 ebbcan: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=1497 bytes_read=5012 bytes_retransmit=0 bytes_invalid=0 send_seq=159 receive_seq=159 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000634 adj=63999733  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=61.9 mcu_temp: temp=37.3 sysload=0.71 cputime=118.938 memavail=690852 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 843.7: gcodein=0  mcu: mcu_awake=0.110 mcu_task_avg=0.000037 mcu_task_stddev=0.000166 bytes_write=4958 bytes_read=6358 bytes_retransmit=0 bytes_invalid=0 send_seq=255 receive_seq=255 retransmit_seq=0 srtt=0.002 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001488 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=843 bytes_read=4600 bytes_retransmit=0 bytes_invalid=0 send_seq=116 receive_seq=116 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999564 adj=50000592 ebbcan: mcu_awake=0.006 mcu_task_avg=0.000016 mcu_task_stddev=0.000028 bytes_write=1503 bytes_read=5103 bytes_retransmit=0 bytes_invalid=0 send_seq=160 receive_seq=160 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000554 adj=64000295  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=61.9 mcu_temp: temp=37.3 sysload=0.71 cputime=118.976 memavail=690852 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 844.7: gcodein=0  mcu: mcu_awake=0.110 mcu_task_avg=0.000037 mcu_task_stddev=0.000166 bytes_write=4964 bytes_read=6461 bytes_retransmit=0 bytes_invalid=0 send_seq=256 receive_seq=256 retransmit_seq=0 srtt=0.002 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001488 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=849 bytes_read=4616 bytes_retransmit=0 bytes_invalid=0 send_seq=117 receive_seq=117 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999675 adj=50000668 ebbcan: mcu_awake=0.006 mcu_task_avg=0.000016 mcu_task_stddev=0.000028 bytes_write=1509 bytes_read=5164 bytes_retransmit=0 bytes_invalid=0 send_seq=161 receive_seq=161 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000784 adj=64000424  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=61.1 mcu_temp: temp=37.6 sysload=0.71 cputime=119.037 memavail=690852 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 845.7: gcodein=0  mcu: mcu_awake=0.110 mcu_task_avg=0.000037 mcu_task_stddev=0.000166 bytes_write=4970 bytes_read=6564 bytes_retransmit=0 bytes_invalid=0 send_seq=257 receive_seq=257 retransmit_seq=0 srtt=0.002 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001443 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=855 bytes_read=4632 bytes_retransmit=0 bytes_invalid=0 send_seq=118 receive_seq=118 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999696 adj=50000415 ebbcan: mcu_awake=0.006 mcu_task_avg=0.000016 mcu_task_stddev=0.000028 bytes_write=1515 bytes_read=5225 bytes_retransmit=0 bytes_invalid=0 send_seq=162 receive_seq=162 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000764 adj=64000703  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=59.8 mcu_temp: temp=37.4 sysload=0.71 cputime=119.086 memavail=690168 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 846.7: gcodein=0  mcu: mcu_awake=0.110 mcu_task_avg=0.000037 mcu_task_stddev=0.000166 bytes_write=4976 bytes_read=6696 bytes_retransmit=0 bytes_invalid=0 send_seq=258 receive_seq=258 retransmit_seq=0 srtt=0.002 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001355 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=861 bytes_read=4648 bytes_retransmit=0 bytes_invalid=0 send_seq=119 receive_seq=119 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999725 adj=50000144 ebbcan: mcu_awake=0.006 mcu_task_avg=0.000016 mcu_task_stddev=0.000028 bytes_write=1521 bytes_read=5301 bytes_retransmit=0 bytes_invalid=0 send_seq=163 receive_seq=163 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000674 adj=64000437  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=60.8 mcu_temp: temp=37.6 sysload=0.97 cputime=119.123 memavail=689960 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 847.7: gcodein=0  mcu: mcu_awake=0.110 mcu_task_avg=0.000037 mcu_task_stddev=0.000166 bytes_write=4982 bytes_read=6799 bytes_retransmit=0 bytes_invalid=0 send_seq=259 receive_seq=259 retransmit_seq=0 srtt=0.002 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001417 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=867 bytes_read=4664 bytes_retransmit=0 bytes_invalid=0 send_seq=120 receive_seq=120 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999834 adj=50000080 ebbcan: mcu_awake=0.006 mcu_task_avg=0.000016 mcu_task_stddev=0.000028 bytes_write=1527 bytes_read=5362 bytes_retransmit=0 bytes_invalid=0 send_seq=164 receive_seq=164 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000605 adj=64000170  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=60.8 mcu_temp: temp=37.5 sysload=0.97 cputime=119.174 memavail=689960 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 848.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=4988 bytes_read=6917 bytes_retransmit=0 bytes_invalid=0 send_seq=260 receive_seq=260 retransmit_seq=0 srtt=0.001 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001439 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=873 bytes_read=4693 bytes_retransmit=0 bytes_invalid=0 send_seq=121 receive_seq=121 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999857 adj=49999929 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1558 bytes_read=5455 bytes_retransmit=0 bytes_invalid=0 send_seq=167 receive_seq=167 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000542 adj=63999497  heater_bed: target=0 temp=26.0 pwm=0.000 raspberry_pi: temp=60.6 mcu_temp: temp=37.6 sysload=0.97 cputime=119.226 memavail=689836 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 849.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5000 bytes_read=7065 bytes_retransmit=0 bytes_invalid=0 send_seq=262 receive_seq=262 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001315 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=879 bytes_read=4709 bytes_retransmit=0 bytes_invalid=0 send_seq=122 receive_seq=122 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999857 adj=49999650 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1564 bytes_read=5531 bytes_retransmit=0 bytes_invalid=0 send_seq=168 receive_seq=168 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000503 adj=63999260  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=60.7 mcu_temp: temp=37.4 sysload=0.97 cputime=119.266 memavail=689680 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 850.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5006 bytes_read=7168 bytes_retransmit=0 bytes_invalid=0 send_seq=263 receive_seq=263 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001277 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=885 bytes_read=4725 bytes_retransmit=0 bytes_invalid=0 send_seq=123 receive_seq=123 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999879 adj=49999809 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1570 bytes_read=5592 bytes_retransmit=0 bytes_invalid=0 send_seq=169 receive_seq=169 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000525 adj=63999569  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=60.6 mcu_temp: temp=37.7 sysload=0.97 cputime=119.307 memavail=689496 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 851.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5012 bytes_read=7271 bytes_retransmit=0 bytes_invalid=0 send_seq=264 receive_seq=264 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001306 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=891 bytes_read=4741 bytes_retransmit=0 bytes_invalid=0 send_seq=124 receive_seq=124 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999900 adj=49999783 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1576 bytes_read=5653 bytes_retransmit=0 bytes_invalid=0 send_seq=170 receive_seq=170 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000489 adj=63999722  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=61.0 mcu_temp: temp=37.4 sysload=0.97 cputime=119.344 memavail=689276 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 852.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5018 bytes_read=7403 bytes_retransmit=0 bytes_invalid=0 send_seq=265 receive_seq=265 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001278 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=897 bytes_read=4757 bytes_retransmit=0 bytes_invalid=0 send_seq=125 receive_seq=125 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999961 adj=49999546 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1582 bytes_read=5729 bytes_retransmit=0 bytes_invalid=0 send_seq=171 receive_seq=171 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000473 adj=63999324  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=61.2 mcu_temp: temp=37.7 sysload=0.97 cputime=119.393 memavail=689600 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 853.7: gcodein=0  mcu: mcu_awake=0.006 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5024 bytes_read=7521 bytes_retransmit=0 bytes_invalid=0 send_seq=266 receive_seq=266 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001252 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000015 bytes_write=903 bytes_read=4786 bytes_retransmit=0 bytes_invalid=0 send_seq=126 receive_seq=126 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999997 adj=49999763 ebbcan: mcu_awake=0.002 mcu_task_avg=0.000013 mcu_task_stddev=0.000015 bytes_write=1588 bytes_read=5804 bytes_retransmit=0 bytes_invalid=0 send_seq=172 receive_seq=172 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000460 adj=63999349  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=60.2 mcu_temp: temp=37.8 sysload=0.97 cputime=119.430 memavail=689492 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 854.7: gcodein=0  mcu: mcu_awake=0.006 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5030 bytes_read=7624 bytes_retransmit=0 bytes_invalid=0 send_seq=267 receive_seq=267 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001267 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000015 bytes_write=909 bytes_read=4802 bytes_retransmit=0 bytes_invalid=0 send_seq=127 receive_seq=127 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999981 adj=49999833 ebbcan: mcu_awake=0.002 mcu_task_avg=0.000013 mcu_task_stddev=0.000015 bytes_write=1594 bytes_read=5865 bytes_retransmit=0 bytes_invalid=0 send_seq=173 receive_seq=173 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000445 adj=63999377  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=61.1 mcu_temp: temp=37.7 sysload=0.97 cputime=119.467 memavail=689836 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 855.7: gcodein=0  mcu: mcu_awake=0.006 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5036 bytes_read=7756 bytes_retransmit=0 bytes_invalid=0 send_seq=268 receive_seq=268 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001250 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000015 bytes_write=915 bytes_read=4818 bytes_retransmit=0 bytes_invalid=0 send_seq=128 receive_seq=128 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999964 adj=49999486 ebbcan: mcu_awake=0.002 mcu_task_avg=0.000013 mcu_task_stddev=0.000015 bytes_write=1600 bytes_read=5941 bytes_retransmit=0 bytes_invalid=0 send_seq=174 receive_seq=174 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000438 adj=63999184  heater_bed: target=0 temp=26.0 pwm=0.000 raspberry_pi: temp=61.2 mcu_temp: temp=37.7 sysload=0.97 cputime=119.514 memavail=689896 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 856.7: gcodein=0  mcu: mcu_awake=0.006 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5042 bytes_read=7859 bytes_retransmit=0 bytes_invalid=0 send_seq=269 receive_seq=269 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001242 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000015 bytes_write=921 bytes_read=4834 bytes_retransmit=0 bytes_invalid=0 send_seq=129 receive_seq=129 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999959 adj=49999412 ebbcan: mcu_awake=0.002 mcu_task_avg=0.000013 mcu_task_stddev=0.000015 bytes_write=1606 bytes_read=6002 bytes_retransmit=0 bytes_invalid=0 send_seq=175 receive_seq=175 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000430 adj=63999220  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=61.1 mcu_temp: temp=37.8 sysload=0.98 cputime=119.550 memavail=689680 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 857.7: gcodein=0  mcu: mcu_awake=0.006 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5048 bytes_read=7962 bytes_retransmit=0 bytes_invalid=0 send_seq=270 receive_seq=270 retransmit_seq=0 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001231 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000015 bytes_write=927 bytes_read=4850 bytes_retransmit=0 bytes_invalid=0 send_seq=130 receive_seq=130 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999967 adj=49999312 ebbcan: mcu_awake=0.002 mcu_task_avg=0.000013 mcu_task_stddev=0.000015 bytes_write=1612 bytes_read=6063 bytes_retransmit=0 bytes_invalid=0 send_seq=176 receive_seq=176 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000465 adj=63999216  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=61.1 mcu_temp: temp=37.8 sysload=0.98 cputime=119.591 memavail=689892 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 858.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5054 bytes_read=8109 bytes_retransmit=0 bytes_invalid=0 send_seq=271 receive_seq=271 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001217 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000011 bytes_write=933 bytes_read=4879 bytes_retransmit=0 bytes_invalid=0 send_seq=131 receive_seq=131 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999961 adj=49999324 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1618 bytes_read=6153 bytes_retransmit=0 bytes_invalid=0 send_seq=177 receive_seq=177 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000447 adj=63999462  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=61.3 mcu_temp: temp=37.7 sysload=0.98 cputime=119.630 memavail=690580 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 859.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5060 bytes_read=8212 bytes_retransmit=0 bytes_invalid=0 send_seq=272 receive_seq=272 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001205 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000011 bytes_write=939 bytes_read=4895 bytes_retransmit=0 bytes_invalid=0 send_seq=132 receive_seq=132 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999958 adj=49999278 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1624 bytes_read=6214 bytes_retransmit=0 bytes_invalid=0 send_seq=178 receive_seq=178 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000438 adj=63999426  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=61.7 mcu_temp: temp=37.5 sysload=0.98 cputime=119.677 memavail=690356 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 860.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5066 bytes_read=8315 bytes_retransmit=0 bytes_invalid=0 send_seq=273 receive_seq=273 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001203 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000011 bytes_write=945 bytes_read=4911 bytes_retransmit=0 bytes_invalid=0 send_seq=133 receive_seq=133 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999960 adj=49999242 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1630 bytes_read=6275 bytes_retransmit=0 bytes_invalid=0 send_seq=179 receive_seq=179 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000446 adj=63999389  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=60.6 mcu_temp: temp=37.8 sysload=0.98 cputime=119.713 memavail=690384 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 861.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5072 bytes_read=8447 bytes_retransmit=0 bytes_invalid=0 send_seq=274 receive_seq=274 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001212 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000011 bytes_write=951 bytes_read=4927 bytes_retransmit=0 bytes_invalid=0 send_seq=134 receive_seq=134 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999959 adj=49999213 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1636 bytes_read=6351 bytes_retransmit=0 bytes_invalid=0 send_seq=180 receive_seq=180 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000439 adj=63999413  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=61.7 mcu_temp: temp=37.7 sysload=1.14 cputime=119.755 memavail=690636 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 862.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5078 bytes_read=8550 bytes_retransmit=0 bytes_invalid=0 send_seq=275 receive_seq=275 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001206 CB1: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000011 bytes_write=957 bytes_read=4943 bytes_retransmit=0 bytes_invalid=0 send_seq=135 receive_seq=135 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999961 adj=49999115 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1642 bytes_read=6412 bytes_retransmit=0 bytes_invalid=0 send_seq=181 receive_seq=181 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000450 adj=63999274  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=60.8 mcu_temp: temp=37.6 sysload=1.14 cputime=119.792 memavail=690164 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 863.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5084 bytes_read=8668 bytes_retransmit=0 bytes_invalid=0 send_seq=276 receive_seq=276 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001198 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=963 bytes_read=4972 bytes_retransmit=0 bytes_invalid=0 send_seq=136 receive_seq=136 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999960 adj=49999134 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1654 bytes_read=6503 bytes_retransmit=0 bytes_invalid=0 send_seq=183 receive_seq=183 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000445 adj=63999373  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=62.1 mcu_temp: temp=37.4 sysload=1.14 cputime=119.834 memavail=690792 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 864.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5090 bytes_read=8800 bytes_retransmit=0 bytes_invalid=0 send_seq=277 receive_seq=277 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001195 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=969 bytes_read=4988 bytes_retransmit=0 bytes_invalid=0 send_seq=137 receive_seq=137 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999960 adj=49999138 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1660 bytes_read=6579 bytes_retransmit=0 bytes_invalid=0 send_seq=184 receive_seq=184 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000437 adj=63999357  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=61.5 mcu_temp: temp=37.7 sysload=1.14 cputime=119.883 memavail=691284 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 865.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5096 bytes_read=8903 bytes_retransmit=0 bytes_invalid=0 send_seq=278 receive_seq=278 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001191 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=975 bytes_read=5004 bytes_retransmit=0 bytes_invalid=0 send_seq=138 receive_seq=138 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999962 adj=49999127 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1666 bytes_read=6640 bytes_retransmit=0 bytes_invalid=0 send_seq=185 receive_seq=185 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000440 adj=63999295  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=61.6 mcu_temp: temp=37.5 sysload=1.14 cputime=119.918 memavail=690888 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 866.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5102 bytes_read=9006 bytes_retransmit=0 bytes_invalid=0 send_seq=279 receive_seq=279 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001187 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=981 bytes_read=5020 bytes_retransmit=0 bytes_invalid=0 send_seq=139 receive_seq=139 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999984 adj=49999137 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1672 bytes_read=6701 bytes_retransmit=0 bytes_invalid=0 send_seq=186 receive_seq=186 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000433 adj=63999338  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=61.7 mcu_temp: temp=37.7 sysload=1.05 cputime=119.956 memavail=691216 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 867.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5108 bytes_read=9138 bytes_retransmit=0 bytes_invalid=0 send_seq=280 receive_seq=280 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001183 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=987 bytes_read=5036 bytes_retransmit=0 bytes_invalid=0 send_seq=140 receive_seq=140 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999985 adj=49999293 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1678 bytes_read=6777 bytes_retransmit=0 bytes_invalid=0 send_seq=187 receive_seq=187 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000427 adj=63999294  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=62.8 mcu_temp: temp=37.7 sysload=1.05 cputime=119.994 memavail=691340 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 868.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5114 bytes_read=9256 bytes_retransmit=0 bytes_invalid=0 send_seq=281 receive_seq=281 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001192 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000012 bytes_write=993 bytes_read=5065 bytes_retransmit=0 bytes_invalid=0 send_seq=141 receive_seq=141 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999990 adj=49999261 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1684 bytes_read=6852 bytes_retransmit=0 bytes_invalid=0 send_seq=188 receive_seq=188 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000429 adj=63999266  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=61.8 mcu_temp: temp=37.7 sysload=1.05 cputime=120.051 memavail=691592 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 869.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5120 bytes_read=9359 bytes_retransmit=0 bytes_invalid=0 send_seq=282 receive_seq=282 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001194 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000012 bytes_write=999 bytes_read=5081 bytes_retransmit=0 bytes_invalid=0 send_seq=142 receive_seq=142 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999995 adj=49999201 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1690 bytes_read=6913 bytes_retransmit=0 bytes_invalid=0 send_seq=189 receive_seq=189 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000434 adj=63999208  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=59.8 mcu_temp: temp=37.6 sysload=1.05 cputime=120.113 memavail=691440 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 870.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5126 bytes_read=9491 bytes_retransmit=0 bytes_invalid=0 send_seq=283 receive_seq=283 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001187 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000012 bytes_write=1005 bytes_read=5097 bytes_retransmit=0 bytes_invalid=0 send_seq=143 receive_seq=143 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000004 adj=49999189 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1696 bytes_read=6989 bytes_retransmit=0 bytes_invalid=0 send_seq=190 receive_seq=190 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000429 adj=63999235  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=59.3 mcu_temp: temp=37.8 sysload=1.05 cputime=120.165 memavail=691428 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 871.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5132 bytes_read=9594 bytes_retransmit=0 bytes_invalid=0 send_seq=284 receive_seq=284 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001183 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000012 bytes_write=1011 bytes_read=5113 bytes_retransmit=0 bytes_invalid=0 send_seq=144 receive_seq=144 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000001 adj=49999276 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1702 bytes_read=7050 bytes_retransmit=0 bytes_invalid=0 send_seq=191 receive_seq=191 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000423 adj=63999256  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=61.3 mcu_temp: temp=37.5 sysload=0.96 cputime=120.200 memavail=691276 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 872.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5138 bytes_read=9697 bytes_retransmit=0 bytes_invalid=0 send_seq=285 receive_seq=285 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001187 CB1: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000012 bytes_write=1017 bytes_read=5129 bytes_retransmit=0 bytes_invalid=0 send_seq=145 receive_seq=145 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999999 adj=49999223 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1708 bytes_read=7111 bytes_retransmit=0 bytes_invalid=0 send_seq=192 receive_seq=192 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000429 adj=63999238  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=61.5 mcu_temp: temp=37.7 sysload=0.96 cputime=120.247 memavail=691276 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 873.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5144 bytes_read=9844 bytes_retransmit=0 bytes_invalid=0 send_seq=286 receive_seq=286 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001186 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=1023 bytes_read=5158 bytes_retransmit=0 bytes_invalid=0 send_seq=146 receive_seq=146 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000012 adj=49999143 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1714 bytes_read=7201 bytes_retransmit=0 bytes_invalid=0 send_seq=193 receive_seq=193 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000430 adj=63999248  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=60.2 mcu_temp: temp=37.7 sysload=0.96 cputime=120.300 memavail=691100 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 874.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5150 bytes_read=9947 bytes_retransmit=0 bytes_invalid=0 send_seq=287 receive_seq=287 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001187 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=1029 bytes_read=5174 bytes_retransmit=0 bytes_invalid=0 send_seq=147 receive_seq=147 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000013 adj=49999240 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1720 bytes_read=7262 bytes_retransmit=0 bytes_invalid=0 send_seq=194 receive_seq=194 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000423 adj=63999268  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=60.5 mcu_temp: temp=37.9 sysload=0.96 cputime=120.335 memavail=691392 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 875.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5156 bytes_read=10050 bytes_retransmit=0 bytes_invalid=0 send_seq=288 receive_seq=288 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001184 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=1035 bytes_read=5190 bytes_retransmit=0 bytes_invalid=0 send_seq=148 receive_seq=148 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000020 adj=49999205 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1726 bytes_read=7323 bytes_retransmit=0 bytes_invalid=0 send_seq=195 receive_seq=195 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000418 adj=63999195  heater_bed: target=0 temp=26.0 pwm=0.000 raspberry_pi: temp=60.8 mcu_temp: temp=37.9 sysload=0.96 cputime=120.374 memavail=691760 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 876.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5162 bytes_read=10182 bytes_retransmit=0 bytes_invalid=0 send_seq=289 receive_seq=289 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001183 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=1041 bytes_read=5206 bytes_retransmit=0 bytes_invalid=0 send_seq=149 receive_seq=149 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000016 adj=49999257 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1732 bytes_read=7399 bytes_retransmit=0 bytes_invalid=0 send_seq=196 receive_seq=196 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000415 adj=63999192  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=61.3 mcu_temp: temp=37.9 sysload=1.05 cputime=120.411 memavail=691536 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 877.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5168 bytes_read=10285 bytes_retransmit=0 bytes_invalid=0 send_seq=290 receive_seq=290 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001187 CB1: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000013 bytes_write=1047 bytes_read=5222 bytes_retransmit=0 bytes_invalid=0 send_seq=150 receive_seq=150 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000012 adj=49999184 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1738 bytes_read=7460 bytes_retransmit=0 bytes_invalid=0 send_seq=197 receive_seq=197 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000414 adj=63999177  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=61.0 mcu_temp: temp=37.9 sysload=1.05 cputime=120.464 memavail=691096 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 878.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5174 bytes_read=10403 bytes_retransmit=0 bytes_invalid=0 send_seq=291 receive_seq=291 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001187 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000016 bytes_write=1053 bytes_read=5251 bytes_retransmit=0 bytes_invalid=0 send_seq=151 receive_seq=151 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000038 adj=49999101 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1744 bytes_read=7535 bytes_retransmit=0 bytes_invalid=0 send_seq=198 receive_seq=198 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000415 adj=63999153  heater_bed: target=0 temp=25.9 pwm=0.000 raspberry_pi: temp=60.2 mcu_temp: temp=37.9 sysload=1.05 cputime=120.526 memavail=690656 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 879.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5180 bytes_read=10535 bytes_retransmit=0 bytes_invalid=0 send_seq=292 receive_seq=292 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001188 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000016 bytes_write=1059 bytes_read=5267 bytes_retransmit=0 bytes_invalid=0 send_seq=152 receive_seq=152 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000047 adj=49999335 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1750 bytes_read=7611 bytes_retransmit=0 bytes_invalid=0 send_seq=199 receive_seq=199 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000417 adj=63999179  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=59.3 mcu_temp: temp=37.9 sysload=1.05 cputime=120.588 memavail=690432 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 880.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5186 bytes_read=10638 bytes_retransmit=0 bytes_invalid=0 send_seq=293 receive_seq=293 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001184 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000016 bytes_write=1065 bytes_read=5283 bytes_retransmit=0 bytes_invalid=0 send_seq=153 receive_seq=153 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000048 adj=49999351 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1756 bytes_read=7672 bytes_retransmit=0 bytes_invalid=0 send_seq=200 receive_seq=200 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000413 adj=63999200  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=59.7 mcu_temp: temp=37.9 sysload=1.05 cputime=120.623 memavail=689744 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 881.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5192 bytes_read=10741 bytes_retransmit=0 bytes_invalid=0 send_seq=294 receive_seq=294 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001180 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000016 bytes_write=1071 bytes_read=5299 bytes_retransmit=0 bytes_invalid=0 send_seq=154 receive_seq=154 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000043 adj=49999331 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1762 bytes_read=7733 bytes_retransmit=0 bytes_invalid=0 send_seq=201 receive_seq=201 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000409 adj=63999201  heater_bed: target=0 temp=26.1 pwm=0.000 raspberry_pi: temp=61.1 mcu_temp: temp=37.9 sysload=1.04 cputime=120.660 memavail=689476 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 882.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5198 bytes_read=10873 bytes_retransmit=0 bytes_invalid=0 send_seq=295 receive_seq=295 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001179 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000016 bytes_write=1077 bytes_read=5315 bytes_retransmit=0 bytes_invalid=0 send_seq=155 receive_seq=155 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000064 adj=49999267 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1768 bytes_read=7809 bytes_retransmit=0 bytes_invalid=0 send_seq=202 receive_seq=202 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000412 adj=63999213  heater_bed: target=0 temp=25.7 pwm=0.000 raspberry_pi: temp=61.2 mcu_temp: temp=38.1 sysload=1.04 cputime=120.717 memavail=687660 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 883.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5204 bytes_read=10991 bytes_retransmit=0 bytes_invalid=0 send_seq=296 receive_seq=296 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001176 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000016 bytes_write=1083 bytes_read=5331 bytes_retransmit=0 bytes_invalid=0 send_seq=156 receive_seq=156 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000057 adj=49999441 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1774 bytes_read=7884 bytes_retransmit=0 bytes_invalid=0 send_seq=203 receive_seq=203 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000409 adj=63999254  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=62.5 mcu_temp: temp=37.9 sysload=1.04 cputime=120.756 memavail=687800 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 884.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5210 bytes_read=11094 bytes_retransmit=0 bytes_invalid=0 send_seq=297 receive_seq=297 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001173 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000017 bytes_write=1089 bytes_read=5360 bytes_retransmit=0 bytes_invalid=0 send_seq=157 receive_seq=157 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000049 adj=49999319 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1780 bytes_read=7945 bytes_retransmit=0 bytes_invalid=0 send_seq=204 receive_seq=204 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000416 adj=63999248  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=62.0 mcu_temp: temp=37.7 sysload=1.04 cputime=120.791 memavail=687836 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 885.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5216 bytes_read=11226 bytes_retransmit=0 bytes_invalid=0 send_seq=298 receive_seq=298 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001171 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000017 bytes_write=1101 bytes_read=5392 bytes_retransmit=0 bytes_invalid=0 send_seq=159 receive_seq=159 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000042 adj=49999281 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1786 bytes_read=8021 bytes_retransmit=0 bytes_invalid=0 send_seq=205 receive_seq=205 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000413 adj=63999345  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=61.1 mcu_temp: temp=37.8 sysload=1.04 cputime=120.830 memavail=688356 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.5 pwm=0.000
Stats 886.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5222 bytes_read=11329 bytes_retransmit=0 bytes_invalid=0 send_seq=299 receive_seq=299 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001171 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000017 bytes_write=1107 bytes_read=5408 bytes_retransmit=0 bytes_invalid=0 send_seq=160 receive_seq=160 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000038 adj=49999193 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1792 bytes_read=8082 bytes_retransmit=0 bytes_invalid=0 send_seq=206 receive_seq=206 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000415 adj=63999311  heater_bed: target=0 temp=25.8 pwm=0.000 raspberry_pi: temp=61.4 mcu_temp: temp=37.9 sysload=0.96 cputime=120.879 memavail=688816 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Stats 887.7: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000015 mcu_task_stddev=0.000009 bytes_write=5228 bytes_read=11432 bytes_retransmit=0 bytes_invalid=0 send_seq=300 receive_seq=300 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001169 CB1: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000017 bytes_write=1113 bytes_read=5424 bytes_retransmit=0 bytes_invalid=0 send_seq=161 receive_seq=161 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000034 adj=49999139 ebbcan: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000010 bytes_write=1798 bytes_read=8143 bytes_retransmit=0 bytes_invalid=0 send_seq=207 receive_seq=207 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000411 adj=63999312  heater_bed: target=0 temp=26.0 pwm=0.000 raspberry_pi: temp=60.9 mcu_temp: temp=38.0 sysload=0.96 cputime=120.915 memavail=688732 print_time=0.020 buffer_time=0.000 print_stall=0 extruder: target=0 temp=25.6 pwm=0.000
Starting Klippy...
Args: ['/home/biqu/klipper/klippy/klippy.py', '/home/biqu/printer_data/config/printer.cfg', '-I', '/home/biqu/printer_data/comms/klippy.serial', '-l', '/home/biqu/printer_data/logs/klippy.log', '-a', '/home/biqu/printer_data/comms/klippy.sock']
Git version: 'v0.11.0-241-gffb5105b'
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ?
Python: '3.9.2 (default, Feb 28 2021, 17:03:44) \n[GCC 10.2.1 20210110]'
Start printer at Mon Aug 21 01:00:06 2023 (1692579607.0 1373.9)
===== Config file =====
[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancels the current print.
	Usage: CANCEL_PRINT
rename_existing = _KM_CANCEL_PRINT_BASE
gcode = 
	_KM_CHECK_IS_PRINTING
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=cancelling RESET_STACK=1
	SET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{True}"
	PRINT_END
	_KM_CANCEL_PRINT_BASE
	{% if printer.pause_resume.is_paused %}
	RESTORE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE MOVE=0
	{% endif %}
	CLEAR_PAUSE
	_KM_APPLY_PRINT_OFFSET RESET=1
	{% if 'virtual_sdcard' in printer and not printer.virtual_sdcard.is_active %}
	SDCARD_RESET_FILE
	{% endif %}

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
variable_restore_idle_timeout = 0
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set idle_timeout = client.idle_timeout|default(0) %}
	
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE={printer[printer.toolhead.extruder].target}
	
	{% if idle_timeout > 0 %}
	SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
	SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
	{% endif %}
	PAUSE_BASE
	_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
variable_last_extruder_temp = 0
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move = client.speed_move|default(velocity) %}
	
	
	{% if printer['gcode_macro PAUSE'].restore_idle_timeout > 0 %}
	SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro PAUSE'].restore_idle_timeout}
	{% endif %}
	M109 S{last_extruder_temp}
	_CLIENT_EXTRUDE
	RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	_KM_CHECK_IS_PRINTING
	{% set pause_next_layer =
	printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE | default(1) | int != 0 %}
	{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VALUE="{
	{ 'enable': False, 'call': MACRO }}" VARIABLE=pause_next_layer
	GCODE_AT_LAYER COMMAND="{MACRO|replace('\"','\\\"')
	}" CANCEL="{0 if ENABLE else 1}" LAYER="next"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	_KM_CHECK_IS_PRINTING
	{% set pause_at_layer =
	printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	
	{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined else
	params.LAYER is defined %}
	{% set LAYER = params.LAYER |
	default((pause_at_layer.layer|int,
	printer.print_stats.info.current_layer|int + 1)|max)%}
	{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}
	
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{
	{ 'enable': False, 'layer': 0, 'call': MACRO }}"
	{% if ENABLE and pause_at_layer.enable %}
	
	GCODE_AT_LAYER COMMAND="{pause_at_layer.call|replace('\"','\\\"')
	}" CANCEL="{1}" LAYER="{pause_at_layer.layer}"
	{% endif %}
	
	GCODE_AT_LAYER COMMAND="{MACRO|replace('\"','\\\"')
	}" CANCEL="{0 if ENABLE else 1}" LAYER="{LAYER}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = _KM_SET_PRINT_STATS_INFO
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	_KM_SET_PRINT_STATS_INFO {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.extruder.can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[gcode_macro _km_options]
variable_load_length = 90.0
variable_menu_temperature = [
	{'name' : 'PLA',  'extruder' : 200.0, 'bed' : 60.0},
	{'name' : 'PETG', 'extruder' : 230.0, 'bed' : 85.0},
	{'name' : 'ABS',  'extruder' : 245.0, 'bed' : 110.0, 'chamber' : 60}]
variable_start_purge_length = 50
variable_start_extruder_probing_temp = 150
variable_park_x = 200.0
variable_park_y = 200.0
gcode = 

[gcode_macro bed_mesh_calibrate_fast]
description = Wraps BED_MESH_CALIBRATE, scaling probe count to specified area.
	Usage: See Klipper documentation.
gcode = 
	
	BED_MESH_CHECK ABORT=1
	
	
	{% set calibrate_cmd =
	(printer["gcode_macro list_macros"].macros.bed_mesh_calibrate|
	default(["bed_mesh_calibrate"],True))[-1] %}
	
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set probe_mesh_padding = km.probe_mesh_padding %}
	{% set probe_min_count = km.probe_min_count %}
	{% set probe_count_scale = km.probe_count_scale %}
	{% set bed_mesh = printer.configfile.settings.bed_mesh %}
	
	
	{%if "mesh_radius" not in bed_mesh and
	"MESH_RADIUS" not in params %}
	{% set safe_min_x = bed_mesh.mesh_min[0] %}
	{% set safe_min_y = bed_mesh.mesh_min[1] %}
	{% set safe_max_x = bed_mesh.mesh_max[0] %}
	{% set safe_max_y = bed_mesh.mesh_max[1] %}
	
	
	{% if "MESH_MIN" in params %}
	{% set mesh_min_x = (params.MESH_MIN.split(",")[0]|float -
	probe_mesh_padding, safe_min_x)|max %}
	{% set mesh_min_y = (params.MESH_MIN.split(",")[1]|float -
	probe_mesh_padding, safe_min_y)|max %}
	{% else %}
	{% set mesh_min_x = safe_min_x %}
	{% set mesh_min_y = safe_min_y %}
	{% endif %}
	{% if "MESH_MAX" in params %}
	{% set mesh_max_x = (params.MESH_MAX.split(",")[0]|float +
	probe_mesh_padding, safe_max_x)|min %}
	{% set mesh_max_y = (params.MESH_MAX.split(",")[1]|float +
	probe_mesh_padding, safe_max_y)|min %}
	{% else %}
	{% set mesh_max_x = safe_max_x %}
	{% set mesh_max_y = safe_max_y %}
	{% endif %}
	
	{% set probe_count = bed_mesh.probe_count if not params.PROBE_COUNT else
	params.PROBE_COUNT.split(",")|map('int')|list %}
	
	{% if "PROBE_COUNT" not in params %}
	{% set max_x_probes = probe_count[0] %}
	{% set max_y_probes = probe_count[-1] %}
	
	{% set x_probes = (max_x_probes * (mesh_max_x - mesh_min_x) /
	(safe_max_x - safe_min_x) * probe_count_scale)
	| round(0) | int %}
	{% set x_probes = ((x_probes, probe_min_count)|max, max_x_probes)|min %}
	
	{% set y_probes = (max_y_probes * (mesh_max_y - mesh_min_y ) /
	(safe_max_y - safe_min_y) * probe_count_scale )
	| round(0) | int %}
	{% set y_probes = ((y_probes, probe_min_count)|max, max_y_probes)|min %}
	
	{% if x_probes > 6 and y_probes < 4 %}
	{% set y_probes = 4 %}
	{% elif y_probes > 6 and x_probes < 4 %}
	{% set x_probes = 4 %}
	{% endif %}
	{% set probe_count = [x_probes,y_probes] %}
	{% elif probe_count|length == 1 %}
	{% set dummy = probe_count.append(probe_count[0]) %}
	{% endif %}
	
	
	
	
	
	
	
	{% if "relative_reference_index" in bed_mesh %}
	{% set row = (bed_mesh.relative_reference_index / bed_mesh.probe_count[0]
	)|int%}
	{% set rrf_x = (((safe_max_x - safe_min_x) /
	(bed_mesh.probe_count[0] - 1))|round(2, 'floor')) *
	(bed_mesh.relative_reference_index %
	bed_mesh.probe_count[-1]) %}
	{% if row % 2 %}
	{% set rrf_x = safe_max_x - rrf_x %}
	{% else %}
	{% set rrf_x = safe_min_x + rrf_x %}
	{% endif %}
	{% set rrf_y = (((safe_max_y - safe_min_y) /
	(bed_mesh.probe_count[-1] - 1))|round(2, 'floor')) *
	row + safe_min_x %}
	{% set x_dist = (mesh_max_x - mesh_min_x) / (probe_count[0] - 1) %}
	{% set y_dist = (mesh_max_y - mesh_min_y) / (probe_count[1] - 1) %}
	{% set rrf = {'x':0, 'y':0, 'dist':safe_max_x**2+safe_max_y**2,'pos':0} %}
	{% for row in range(probe_count[1])%}
	{% for col in range(probe_count[0])%}
	{% if row % 2 %}
	{% set x = mesh_max_x - col * x_dist %}
	{% else %}
	{% set x = mesh_min_x + col * x_dist %}
	{% endif %}
	{% set y = mesh_min_y + row * y_dist %}
	{% set dist = ((x - rrf_x)**2 + (y - rrf_y)**2)**0.5 %}
	{% if dist < rrf.dist %}
	{% set dummy = rrf.__setitem__("dist", dist) %}
	{% set dummy = rrf.__setitem__("x", x) %}
	{% set dummy = rrf.__setitem__("y", y) %}
	{% set dummy = rrf.__setitem__("pos", row * probe_count[1] + col) %}
	{% endif %}
	{% endfor %}
	{% endfor %}
	{% if rrf.x != rrf_x or rrf.y != rrf_y %}
	{action_respond_info("relative_reference_index remapped to"
	" %d (%.2f,%.2f) from %d (%.2f,%.2f)" %
	(rrf.pos, rrf.x, rrf.y,
	bed_mesh.relative_reference_index, rrf_x, rrf_y))}
	{% endif %}
	{% set dummy = params.__setitem__("RELATIVE_REFERENCE_INDEX", rrf.pos) %}
	{% endif %}
	
	{% set dummy = params.__setitem__("MESH_MIN", mesh_min_x~","~mesh_min_y) %}
	{% set dummy = params.__setitem__("MESH_MAX", mesh_max_x~","~mesh_max_y) %}
	{% set dummy = params.__setitem__("PROBE_COUNT", probe_count|join(',')) %}
	
	{% if probe_count[0] > 6 or probe_count[1]|default(0) > 6 %}
	{% set dummy = params.__setitem__("ALGORITHM", "bicubic") %}
	{% endif %}
	
	{% if "MESH_MIN" in params or "MESH_MAX" in params %}
	BED_MESH_CHECK {rawparams}
	{% endif %}
	{% else %}
	
	{% set dummy = params.__delitem__("MESH_MIN") %}
	{% set dummy = params.__delitem__("MESH_MAX") %}
	{% endif %}
	
	{% if "MESH_MIN" in params or "MESH_MAX" in params %}
	BED_MESH_CHECK ABORT=1{%for k in params%}{' '~k~'="'~params[k]~'"'}{%
	endfor%}
	{% endif %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=meshing
	{calibrate_cmd}{%for k in params%}{' '~k~'="'~params[k]~'"'}{%endfor%}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro bed_mesh_check]
description = Warns if bed_mesh config may generate an invalid mesh.
	Usage: BED_MESH_CHECK [MESH_MIN=<x,y>] [MESH_MAX=<x,y>] [ABORT=<0|1>]
gcode = 
	{% if printer.bed_mesh is defined %}
	{% set action = action_respond_info if params.ABORT|default(0)|int == 0 else
	action_raise_error %}
	{% set settings = printer.configfile.settings %}
	{% set x_min = settings.stepper_x.position_min %}
	{% set y_min = settings.stepper_y.position_min %}
	{% set x_max = settings.stepper_x.position_max %}
	{% set y_max = settings.stepper_y.position_max %}
	
	{% set label = "[bed_mesh] config" %}
	{% if "MESH_MIN" in params %}
	{% set label = "BED_MESH_CALIBRATE params" %}
	{% set mesh_min_x = params.MESH_MIN.split(",")[0]|float %}
	{% set mesh_min_y = params.MESH_MIN.split(",")[1]|float %}
	{% else %}
	{% set mesh_min_x = settings.bed_mesh.mesh_min[0] %}
	{% set mesh_min_y = settings.bed_mesh.mesh_min[1] %}
	{% endif %}
	{% if "MESH_MAX" in params %}
	{% set label = "BED_MESH_CALIBRATE params" %}
	{% set mesh_max_x = params.MESH_MAX.split(",")[0]|float %}
	{% set mesh_max_y = params.MESH_MAX.split(",")[1]|float %}
	{% else %}
	{% set mesh_max_x = settings.bed_mesh.mesh_max[0] %}
	{% set mesh_max_y = settings.bed_mesh.mesh_max[1] %}
	{% endif %}
	
	{% if "bltouch" in settings %}
	{% set x_offset = settings.bltouch.x_offset %}
	{% set y_offset = settings.bltouch.y_offset %}
	{% set probe = "bltouch" %}
	{% elif "probe" in settings %}
	{% set x_offset = settings.probe.x_offset %}
	{% set y_offset = settings.probe.y_offset %}
	{% set probe = "probe" %}
	{% else %}
	{% set x_offset = 0.0 %}
	{% set y_offset = 0.0 %}
	{% endif %}
	
	{% set output = [] %}
	{% set warn =
	"* mesh_%s (%f, %f) adjusted by " ~ probe ~
	".%s_offset (%f) can move out of range for "
	"stepper_%s.position_%s (%f)." %}
	{% if x_offset > 0 and (mesh_min_x - x_offset) < x_min %}
	{% set dummy = output.append(warn % ('min', mesh_min_x, mesh_min_y,
	'x', x_offset, 'x', 'min', x_min)) %}
	{% elif x_offset < 0 and (mesh_max_x - x_offset) > x_max %}
	{% set dummy = output.append(warn % ('max', mesh_max_x, mesh_max_y,
	'x', x_offset, 'x', 'max', x_max)) %}
	{% endif %}
	{% if y_offset > 0 and (mesh_min_y - y_offset) < y_min %}
	{% set dummy = output.append(warn % ('min', mesh_min_x, mesh_min_y,
	'y', y_offset, 'y', 'min', y_min)) %}
	{% elif y_offset < 0 and (mesh_max_y - y_offset) > y_max %}
	{% set dummy = output.append(warn % ('max', mesh_max_x, mesh_max_y,
	'y', y_offset, 'y', 'max', y_max)) %}
	{% endif %}
	
	{% if output %}
	{ action(
	"Warning: The following issue(s) were detected in your " ~ label ~
	":\n" ~ output|join("\n")) }
	{% endif %}
	{% endif %}

[gcode_macro _apply_bed_surface_offset]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% if surfaces.active %}
	SET_SURFACE_ACTIVE SURFACE={surfaces.active}
	{% endif %}

[gcode_macro _init_surfaces]
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% if "bed_surfaces" in printer.save_variables.variables %}
	{% set old_surfaces = printer.save_variables.variables.bed_surfaces %}
	{% else %}
	{% set old_surfaces = { 'active' : '', 'available' : {} } %}
	{% endif %}
	{% set settings = printer.configfile.settings %}
	{% set new_probe_z = (settings.probe | default(settings.bltouch) |
	default(settings.smart_effector) | default({})
	).z_offset|default(0.0)|float %}
	{% set new_endstop_z = (settings.stepper_z | default({})).position_endstop |
	default(0.0)|float %}
	{% if 'endstop_z' not in old_surfaces %}
	{% set dummy = old_surfaces.__setitem__('endstop_z', new_endstop_z) %}
	{% endif %}
	{% if 'probe_z' not in old_surfaces %}
	{% set dummy = old_surfaces.__setitem__('probe_z', new_probe_z) %}
	{% endif %}
	{% set surfaces = { 'active' : '', 'available' : {},
	'endstop_z' : old_surfaces.endstop_z,
	'probe_z' : old_surfaces.probe_z } %}
	{% for s in km.bed_surfaces %}
	{% set s = s.split()|join(' ')|lower %}
	{% if s|length > km.bed_surface_max_name_length or
	s|list|select("in", " \r\n\"\'")|list %}
	{action_raise_error('Invalid surface name "%s". Name must be %d or fewer '
	'characters and must not include space or quotation characters'
	| format(s, km.bed_surface_max_name_length))}
	{% endif %}
	{% if s in old_surfaces.available %}
	{% set dummy = surfaces.available.__setitem__(s,
	old_surfaces.available[s]) %}
	{% else %}
	{% set dummy = surfaces.available.__setitem__(s, {'offset' : 0.0}) %}
	{% endif %}
	{% endfor %}
	{% if old_surfaces.active in surfaces.available %}
	{% set dummy = surfaces.__setitem__('active', old_surfaces.active) %}
	{% elif km.bed_surfaces %}
	{% set dummy = surfaces.__setitem__('active', km.bed_surfaces[0]|lower) %}
	{% endif %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	_APPLY_BED_SURFACE_OFFSET
	{% if new_probe_z != surfaces.probe_z or
	new_endstop_z != surfaces.endstop_z %}
	{ action_respond_info(
	'Z probe offset or endstop position changed. Run ADJUST_SURFACE_OFFSETS '
	'to adjust the offset for all saved surfaces by the change differential, '
	'or run ADJUST_SURFACE_OFFSETS IGNORE=1 to hide this message without '
	'making changes.') }
	{% endif %}

[gcode_macro adjust_surface_offsets]
description = Adjusts surface offsets to account for changes in the Z endstop
	position or probe Z offset.
	Usage: ADJUST_SURFACE_OFFSETS [IGNORE]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% set settings = printer.configfile.settings %}
	{% set new_probe_z = (settings.probe | default(settings.bltouch) |
	default(settings.smart_effector) | default({})
	).z_offset|default(0.0)|float %}
	{% set new_endstop_z = (settings.stepper_z | default({})).position_endstop |
	default(0.0)|float %}
	{% set diff = (surfaces.probe_z - new_probe_z +
	surfaces.endstop_z - new_endstop_z)|round(6) %}
	{% if not params.IGNORE|default(0)|int %}
	{% for s in surfaces.available %}
	{% set offset = (surfaces.available[s].offset - diff)|round(6) %}
	{% set dummy = surfaces.available.__setitem__(s, {'offset' : offset}) %}
	{% endfor %}
	{ action_respond_info("All bed surfaces now adjusted by %1.4f"|
	format(diff))}
	{% elif diff != 0 %}
	{ action_respond_info("Status cleared without adjustment") }
	{% endif %}
	{% set dummy = surfaces.__setitem__('endstop_z', new_endstop_z| round(6)) %}
	{% set dummy = surfaces.__setitem__('probe_z', new_probe_z|round(6)) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"

[gcode_macro set_surface_offset]
description = Sets the offset for a surface and moves the toolhead (if homed).
	Usage: SET_SURFACE_OFFSET [OFFSET=<offset>] [SURFACE=<surface>]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}
	{% if SURFACE not in surfaces.available %}
	{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }
	{% endif %}
	{% set active = surfaces.available[SURFACE] %}
	
	{% set OFFSET = params.OFFSET|default(active.offset)|float %}
	{% if OFFSET != active.offset %}
	{% set dummy = surfaces.available[SURFACE].__setitem__("offset", OFFSET) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	{% if SURFACE == surfaces.active %}
	_km_set_gcode_offset_base Z="{OFFSET}" MOVE={
	1 if printer.toolhead.homed_axes == 'xyz' else 0}
	{% endif %}
	{% endif %}
	{ action_respond_info("Bed surface: %s Offset: %.3f"
	| format(SURFACE, OFFSET)) }
	
	{% set dummy = None if True else "
	{% set dummy = params.SURFACE|default(active surface) %}
	{% set dummy = params.OFFSET|default(none)|float %}
	" %}

[gcode_macro set_surface_active]
description = Sets the active bed surface and moves the toolhead (if homed). If
	no SURFACE argument is present the available surfaces are listed and the
	active one is preceded by a "*".
	Usage: SET_SURFACE_ACTIVE [SURFACE=<surface>]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% if "SURFACE" in params %}
	{% set SURFACE = params.SURFACE|lower %}
	{% if SURFACE not in surfaces.available %}
	{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }
	{% endif %}
	{% if SURFACE != surfaces.active %}
	{% set dummy = surfaces.__setitem__("active", SURFACE) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	{% endif %}
	{% if surfaces.available[SURFACE].offset !=
	printer.gcode_move.homing_origin.z %}
	_km_set_gcode_offset_base Z="{surfaces.available[SURFACE].offset
	}" MOVE={1 if printer.toolhead.homed_axes == 'xyz' else 0}
	{% endif %}
	{action_respond_info("Active bed surface: %s; offset: %.3f"
	| format(SURFACE, surfaces.available[SURFACE].offset))}
	{% else %}
	{% set output = [] %}
	{% for s in surfaces.available|list|sort %}
	{% set dummy = output.append("%s&nbsp;%s - offset: %.3f"
	| format("*" if s == surfaces.active else "&nbsp;",
	s, surfaces.available[s].offset)) %}
	{% endfor %}
	{action_respond_info(output|join('\n'))}
	{% endif %}
	
	{% set dummy = None if True else "
	{% set dummy = params.SURFACE|default(none) %}
	" %}

[gcode_macro set_gcode_offset]
description = Wraps SET_GCODE_OFFSET to update the current bed sheet offset.
	Usage: SET_GCODE_OFFSET [X=<pos>|X_ADJUST=<adjust>]
	[Y=<pos>|Y_ADJUST=<adjust>]
	[Z=<pos>|Z_ADJUST=<adjust>]
	[MOVE=1 [MOVE_SPEED=<speed>]]
rename_existing = _KM_SET_GCODE_OFFSET_BASE
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% if surfaces.active and
	not printer["gcode_macro _km_save_state"].is_ephemeral %}
	{% set Z = params.Z|default(0.0)|float|round(6) %}
	{% set Z_ADJUST = params.Z_ADJUST|default(0.0)|float %}
	{% if 'Z' in params and
	Z != surfaces.available[surfaces.active].offset %}
	{% set dummy = surfaces.available[surfaces.active].__setitem__("offset",
	Z) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	{% elif Z_ADJUST != 0.0 %}
	{% set dummy = surfaces.available[surfaces.active].__setitem__(
	"offset", (Z_ADJUST + printer.gcode_move.homing_origin.z)|round(6)) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	{% endif %}
	{% endif %}
	_km_set_gcode_offset_base{% for k in params%}{' '~k~'="'~params[k]~'"'
	}{% endfor %}

[gcode_macro make_surface_mesh]
description = Generates and saves a mesh to automatically load in PRINT_START.
	Usage: MAKE_SURFACE_MESH [SURFACE=<surface>] [BED=<probing temperature>]
	[EXTRUDER=<probing temperature>]
	[MESH_MULTIPLIER=<integer multiple of mesh density>]
	[bed_mesh_calibrate parameters]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}
	{% if SURFACE not in surfaces.available %}
	{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }
	{% endif %}
	{% set dummy = params.__setitem__('PROFILE', SURFACE) %}
	{% set BED = params.BED|default(70) | int %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set EXTRUDER = params.EXTRUDER|default(km.start_extruder_probing_temp) |
	int %}
	{% set MESH_MULTIPLIER = (params.MESH_MULTIPLIER|default(2)|int, 1)|max %}
	
	M104 S{EXTRUDER}
	M140 S{BED}
	G28
	
	
	{% if surfaces.available[SURFACE].offset !=
	printer.gcode_move.homing_origin.z %}
	_km_set_gcode_offset_base Z="{surfaces.available[SURFACE].offset
	}" MOVE=1
	{% endif %}
	
	
	{% if BED > 0 %}
	{action_respond_info("Stabilizing bed at %iC" | format(BED,))}
	_KM_PARK_IF_NEEDED HEATER=heater_bed RANGE=0.5
	{% if BED < (printer.heater_bed.temperature - 0.2) %}
	M190 R{BED}
	G4 P{((km.start_bed_heat_delay * 10, 30000)|min,
	km.start_bed_heat_delay)|max}
	{% else %}
	G4 P{km.start_bed_heat_delay}
	{% endif %}
	M190 R{BED}
	{% endif %}
	
	{% if EXTRUDER > 0 %}
	_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=2
	M109 R{km.start_extruder_probing_temp}
	{% endif %}
	
	{% if km.start_home_z_at_temp and not bed_at_target %}
	G28 Z
	{% endif %}
	
	
	
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count
	if not params.PROBE_COUNT else
	params.PROBE_COUNT.split(",")|map('int')|list %}
	{% set dummy = params.__setitem__('PROBE_COUNT',(
	MESH_MULTIPLIER * (probe_count[0] - 1) + 1,
	MESH_MULTIPLIER * (probe_count[-1] - 1) + 1,)|join(',')) %}
	
	BED_MESH_CLEAR
	BED_MESH_CALIBRATE_FAST {%
	for k in params|reject('in',['BED','SURFACE'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor %}
	SAVE_CONFIG
	
	
	{% set dummy = None if True else "
	{% set dummy = params.MESH_MULTIPLIER|default(2) %}
	{% set dummy = params.SURFACE|default(active surface) %}
	" %}

[gcode_macro load_surface_mesh]
description = Attempts to load a mesh associated with the specified surface.
	Usage: LOAD_SURFACE_MESH [SURFACE=<surface>]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}
	{% if SURFACE != surfaces.active %}
	SET_SURFACE_ACTIVE SURFACE={SURFACE}
	{% endif %}
	
	{% if SURFACE in printer.bed_mesh.profiles %}
	{% set mesh = printer.bed_mesh.profiles[SURFACE].mesh_params %}
	{% set default = printer.configfile.settings.bed_mesh %}
	
	{% if mesh.min_x <= (default.mesh_min[0] + 0.5) and
	mesh.min_y <= (default.mesh_min[1] + 0.5) and
	mesh.max_x >= (default.mesh_max[0] - 0.5) and
	mesh.max_y >= (default.mesh_max[1] - 0.5) and
	mesh.x_count >= default.probe_count[0] and
	mesh.y_count >= default.probe_count[-1] %}
	
	BED_MESH_PROFILE LOAD={SURFACE}
	{action_respond_info("Loaded mesh: %s" | format(SURFACE,))}
	{% endif %}
	{% endif %}

[gcode_macro m300]
description = Emits and audible beep.
	Usage: M300 [P<duration>] [S<frequency>]
gcode = 
	{% set settings = printer.configfile.settings %}
	{% if "output_pin beeper" in printer %}
	{% set P = (params.P|default(100)|int, 0)|max %}
	{% set S = (params.S|default(1000)|int, 1)|max %}
	SET_PIN PIN=beeper VALUE={% if settings["output_pin beeper"].pwm %}{
	settings["output_pin beeper"].scale|default(1.0) * 0.5
	} CYCLE_TIME={ 1.0 / S }{% else %}1{% endif %}
	G4 P{P}
	SET_PIN PIN=beeper VALUE=0
	{% else %}
	{action_respond_info(
	"M300 is disabled. To enable create an [output_pin beeper] config.")}
	{% endif %}

[gcode_macro set_draw_params]
description = Sets the default parameters used by DRAW_LINE_TO.
	Usage: SET_DRAW_PARAMS [HEIGHT=<mm>] [WIDTH=<mm>] [FEEDRATE=<mm/m>]
variable_height = 0.2
variable_width = 0.0
variable_feedrate = 1200
gcode = 
	{% set dparams = printer["gcode_macro set_draw_params"] %}
	{% for k in params %}
	{% set kl = k|lower %}
	{% if kl in dparams %}
	{% if dparams[kl] is float %}
	{% set v = params[k]|float %}
	{% elif dparams[kl] is integer %}
	{% set v = params[k]|int %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=set_draw_params VARIABLE={kl} VALUE="{v}"
	{% endif %}
	{% endfor %}

[gcode_macro draw_line_to]
description = Extrudes a line of filament at the specified height and width from
	the current coordinate to the supplied XY coordinate. (The height is used only
	to calculate the extrusion volume.)
	Usage: DRAW_LINE_TO [X=<pos>] [Y=<pos>] [HEIGHT=<mm>] [WIDTH=<mm>]
	[FEEDRATE=<mm/m>]
gcode = 
	{% set dparams = printer["gcode_macro set_draw_params"] %}
	{% set position = printer.gcode_move.gcode_position %}
	{% set X = params.X|default(position.x)|float %}
	{% set Y = params.Y|default(position.y)|float %}
	{% set HEIGHT = params.HEIGHT|default(dparams.height)|float %}
	{% set WIDTH = params.WIDTH|default(dparams.width)|float %}
	{% set FEEDRATE = params.FEEDRATE|default(dparams.feedrate)|int %}
	
	{% set distance = ((X - position.x) ** 2 + (Y - position.y) ** 2) ** 0.5 %}
	
	{% set filament_area = 3.14159 *
	(printer.configfile.settings[
	printer.toolhead.extruder].filament_diameter ** 2) / 4 %}
	{% set E = distance * ((WIDTH * HEIGHT) / filament_area) %}
	
	
	_KM_SAVE_GCODE_STATE NAME=_KM_PURGE
	G90
	G92 E0.0
	G1 X{"%.3f" % X} Y{"%.3f" % Y} E{"%.5f" % E} F{FEEDRATE}
	_KM_RESTORE_GCODE_STATE NAME=_KM_PURGE MOVE=0

[gcode_macro draw_purge_line]
description = Purges the specified length of filament as a line (or rows of
	lines) in front of the supplied print area. If no print area is specified the
	purge lines are drawn at the front edge of the maximum printable area. If no
	printable area is set it defaults to the XY axis limits.
	Usage: DRAW_PURGE_LINE [PRINT_MIN=<X,Y>] [PRINT_MAX=<X,Y>] [HEIGHT=<mm>]
	[WIDTH=<mm>] [LENGTH=<mm>]
gcode = 
	
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set origin = printer.gcode_move.homing_origin %}
	{% set dummy = km.__setitem__('print_min', (km.print_min[0] - origin.x,
	km.print_min[1] - origin.y)) %}
	{% set dummy = km.__setitem__('print_max', (km.print_max[0] - origin.x,
	km.print_max[1] - origin.y)) %}
	
	{% if "PRINT_MIN" in params %}
	{% set PRINT_MIN = (
	(params.PRINT_MIN.split(",")[0]|float, km.print_min[0])|max,
	(params.PRINT_MIN.split(",")[1]|float, km.print_min[1])|max
	) %}
	{% else %}
	{% set PRINT_MIN = km.print_min %}
	{% endif %}
	{% if "PRINT_MAX" in params %}
	{% set PRINT_MAX = (
	(params.PRINT_MAX.split(",")[0]|float, km.print_max[0])|min,
	(params.PRINT_MAX.split(",")[1]|float, km.print_max[1])|min
	) %}
	{% else %}
	{% set PRINT_MAX = km.print_max %}
	{% endif %}
	{% set extruder = printer.toolhead.extruder|string %}
	{% set HEIGHT = params.HEIGHT|default(
	printer.configfile.settings[extruder].nozzle_diameter * 0.625)|float %}
	{% set WIDTH = params.WIDTH|default(
	printer.configfile.settings[extruder].nozzle_diameter * 1.25)|float %}
	{% set LENGTH = params.LENGTH|default(km.start_purge_length)|float %}
	
	{% set dparams = printer["gcode_macro set_draw_params"] %}
	{% set filament_area = 3.14159 *
	(printer.configfile.settings[extruder].filament_diameter ** 2) / 4 %}
	{% set purge_length = (LENGTH * filament_area) / (WIDTH * HEIGHT) %}
	{% set printable_length = PRINT_MAX[0] - PRINT_MIN[0] %}
	{% set purge_rows = (purge_length / printable_length)|round(0,'ceil')|int %}
	{% set printable_inset = (printable_length - purge_length / purge_rows) / 2 %}
	{% set PRINT_MIN = (PRINT_MIN[0] + printable_inset, PRINT_MIN[1]) %}
	{% set PRINT_MAX = (PRINT_MAX[0] - printable_inset, PRINT_MAX[1]) %}
	
	{% set y_start = (km.print_min[1], PRINT_MIN[1] - km.start_purge_clearance -
	(purge_rows + 0.5) * WIDTH )|max %}
	G90
	
	G1 X{"%.3f" % (PRINT_MIN[0] - 30, km.print_min[0])|max} Y{
	"%.3f" % (y_start - 10, km.print_min[1])|max} F{km.travel_speed_xy}
	
	G1 X{"%.3f" % (PRINT_MIN[0] - 2, km.print_min[0])|max} Y{"%.3f" % y_start} Z{
	"%.4f" % HEIGHT} F{km.travel_speed_xy}
	
	G92 E0.0
	G1 E{"%.3f" % km.start_purge_prime_length} F{km.load_priming_speed}
	G92 E0.0
	
	G1 X{"%.3f" % PRINT_MIN[0]} F{km.travel_speed_xy}
	{% for n in range(purge_rows - 1) %}
	{% set x_pos = PRINT_MIN[0] if n % 2 else PRINT_MAX[0] %}
	DRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{
	WIDTH * n + y_start}"
	DRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{
	WIDTH * (n + 1) + y_start}"
	{% endfor %}
	{% set x_pos = PRINT_MAX[0] if purge_rows % 2 else PRINT_MIN[0] %}
	DRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{
	WIDTH * (purge_rows - 1) + y_start}"
	G92 E0.0

[gcode_macro _check_fan_params]
gcode = 
	{% set MAXIMUM = params.MAXIMUM|default(
	printer["gcode_macro set_fan_scaling"].maximum)|int %}
	{% set MINIMUM = params.MINIMUM|default(
	printer["gcode_macro set_fan_scaling"].minimum)|int %}
	
	{% if params.SCALE and params.SCALE|float <= 0 %}
	{ action_raise_error("SCALE must be a positive value.") }
	{% elif MINIMUM < 0 or MINIMUM > 255 %}
	{ action_raise_error("MINIMUM must be between 0 and 255.") }
	{% elif MAXIMUM < 0 or MAXIMUM > 255 %}
	{ action_raise_error("MAXIMUM must be between 0 and 255.") }
	{% elif params.SPEED and (params.SPEED|int < 0 or params.SPEED|int > 255) %}
	{ action_raise_error("SPEED must be between 0 and 255.") }
	{% elif params.BOOST and (params.BOOST|int < 0 or params.BOOST|int > 255) %}
	{ action_raise_error("BOOST must be between 0 and 255.") }
	{% elif MINIMUM > MAXIMUM %}
	{ action_raise_error("MINIMUM must be less than or equal to MAXIMUM.") }
	{% endif %}

[gcode_macro set_fan_scaling]
description = Sets fan scaling factors applied to M106 command. If a speed is
	provided it will be adjusted according to the scaling parameters.
	Usage: SET_FAN_SCALING [SCALE=<scale>] [BOOST=<boost>] [MAXIMUM=<max>]
	[MINIMUM=<min>] [SPEED=<speed>]
variable_scale = 1.0
variable_boost = 0
variable_minimum = 0
variable_maximum = 255
variable_real_speed = 0
gcode = 
	_CHECK_FAN_PARAMS{% for k in params %}{' '~k~'='~params[k]}{% endfor %}
	{% set SCALE = params.SCALE|default(scale)|float %}
	{% set BOOST = params.BOOST|default(boost)|float %}
	{% set MAXIMUM = params.MAXIMUM|default(maximum)|int %}
	{% set MINIMUM = params.MINIMUM|default(minimum)|int %}
	{% set SPEED = params.SPEED|default(real_speed)|int %}
	
	{% if SCALE != 1.0 or BOOST != 0 or MAXIMUM != 255 or MINIMUM != 0 %}
	{action_respond_info("Fan: Scale: %.2f Minimum:%i Maximum: %i Speed: %i"|
	format(SCALE, MINIMUM, MAXIMUM, SPEED))}
	{% endif %}
	
	
	{% if params|length > 0 %}
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=scale VALUE="{SCALE}"
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=boost VALUE="{BOOST}"
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=minimum VALUE="{MINIMUM}"
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=maximum VALUE="{MAXIMUM}"
	
	M106 S{SPEED}
	{% endif %}
	
	{% set dummy = None if True else "
	{% set dummy = params.SCALE|default(1.0)|float %}
	{% set dummy = params.BUMP|default(0)|int %}
	{% set dummy = params.MAXIMUM|default(255)|int %}
	{% set dummy = params.MINIMUM|default(0)|int %}
	{% set dummy = params.SPEED|default(current speed)|int %}
	" %}

[gcode_macro reset_fan_scaling]
description = Clears all fan scaling factors.
	Usage: RESET_FAN_SCALING
gcode = 
	SET_FAN_SCALING SCALE=1.0 BOOST=0 MAXIMUM=255 MINIMUM=0

[gcode_macro m106]
description = Wraps M106 to implement scaling overrides.
rename_existing = M106.6245197
gcode = 
	{% set S = params.S|default(255)|int %}
	{% set scale = printer["gcode_macro set_fan_scaling"] %}
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=real_speed VALUE="{S}"
	M106.6245197 S{((((S + scale.boost) * scale.scale) | round | int,
	scale.minimum) | max, scale.maximum) | min}

[gcode_macro _load_unload]
gcode = 
	{% set saved_extruder = printer.toolhead.extruder %}
	{% set EXTRUDER = params.EXTRUDER|default(saved_extruder)|lower %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% set BEEPS = params.BEEPS|default(8)|int if "output_pin beeper" in printer
	else 0 %}
	{% set default_minimum = km.load_min_temp if km.load_min_temp else
	(printer.configfile.settings[EXTRUDER].min_extrude_temp + 5) %}
	{% if 'MINIMUM' in params %}
	{% set MINIMUM = params.MINIMUM|int %}
	
	{% elif printer.pause_resume.is_paused and printer[EXTRUDER].target == 0 and
	printer["gcode_macro resume"].saved_extruder_temp %}
	{% set MINIMUM = printer["gcode_macro resume"].saved_extruder_temp %}
	
	{% elif printer[EXTRUDER].target > default_minimum %}
	{% set MINIMUM = printer[EXTRUDER].target %}
	{% else %}
	{% set MINIMUM = default_minimum %}
	{% endif %}
	{% if MINIMUM < printer.configfile.settings[EXTRUDER].min_extrude_temp %}
	{ action_raise_error("Extrude below minimum temp.") }
	{% elif printer.pause_resume.is_paused %}
	
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"
	{% endif %}
	{% set SPEED = params.SPEED|default(km.load_speed)|int %}
	{% set priming_length = km.load_priming_length %}
	{% set LENGTH = params.LENGTH|default(km.load_length)|float - priming_length%}
	{% if LENGTH < 0 %}
	{% set priming_length = (priming_length + LENGTH, 0)|max %}
	{% set LENGTH = 0 %}
	{% endif %}
	SAVE_GCODE_STATE NAME=_KM_LOAD_UNLOAD
	{% if EXTRUDER != saved_extruder%}
	ACTIVATE_EXTRUDER EXTRUDER={EXTRUDER}
	{% endif %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	{% if not printer.extruder.can_extrude or
	printer[EXTRUDER].target < default_minimum %}
	{action_respond_info("Preheating %s to %d" | format(EXTRUDER, MINIMUM))}
	M109 S{MINIMUM}
	{% endif %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS={"filament_load"
	if params.LOAD|int else "filament_unload"}
	M83
	{% set priming_speed = (km.load_priming_speed, SPEED)|min %}
	{% if params.LOAD|int %}
	G0 E{LENGTH} F{SPEED}
	G0 E{priming_length} F{priming_speed}
	G0 E{'%.4f' % -printer["gcode_macro resume"].saved_e} F{km.load_speed}
	{% else %}
	{% set pre_prime_distance = 5.0 %}
	{% set shaping_moves = 5 %}
	{% set shaping_distance = (shaping_moves * (1 + shaping_moves)/20) %}
	
	G0 E{pre_prime_distance} F{SPEED}
	G4 P500
	G0 E{'%.4f' % -(priming_length - shaping_distance)} F{SPEED}
	
	
	{% for i in range(1, shaping_moves + 1) %}
	G0 E2 F{priming_speed}
	G0 E-{2 + (0.1 * i)} F{priming_speed}
	{% endfor %}
	
	G0 E{'%.4f' % -(LENGTH + pre_prime_distance)} F{SPEED}
	{% endif %}
	RESTORE_GCODE_STATE NAME=_KM_LOAD_UNLOAD
	
	
	{% for i in range(BEEPS) %}
	M300 P100
	G4 P200
	{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro LOAD_FILAMENT]
description = Loads filament to the extruder.
	Usage: LOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]
	[EXTRUDER=<extruder>] [MINIMUM=<temperature>]
	[BEEPS=<beep count on completion>]
gcode = 
	_LOAD_UNLOAD LOAD=1{% for k in params
	%}{' '~k~'="'~params[k]~'"'}{% endfor %}
	
	
	{% set dummy = None if True else "
	M109
	{% set dummy = params.LENGTH|default(variable_load_length)|float %}
	{% set dummy = params.SPEED|default(variable_load_speed)|float %}
	{% set dummy = params.EXTRUDER|default(current extruder) %}
	{% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}
	{% set dummy = params.BEEPS|default(10)|int %}
	" %}

[gcode_macro UNLOAD_FILAMENT]
description = Unloads filament from the extruder.
	Usage: UNLOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]
	[EXTRUDER=<extruder>] [MINIMUM=<temperature>]
	[BEEPS=<beep count on completion>]
gcode = 
	_LOAD_UNLOAD LOAD=0{% for k in params
	%}{' '~k~'="'~params[k]~'"'}{% endfor %}
	
	
	{% set dummy = None if True else "
	M109
	{% set dummy = params.LENGTH|default(variable_load_length)|float %}
	{% set dummy = params.SPEED|default(variable_load_speed)|float %}
	{% set dummy = params.EXTRUDER|default(default extruder) %}
	{% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}
	{% set dummy = params.BEEPS|default(10)|int %}
	" %}

[gcode_macro _pause_inner_m700]
gcode = 
	{% set extruder = "extruder" ~ params.T|replace('0', '')
	if "T" in params else printer.toolhead.extruder %}
	{% if extruder != printer.toolhead.extruder%}
	ACTIVATE_EXTRUDER EXTRUDER={extruder}
	{% endif %}
	
	{% set z_param = (' Z="%f"' % params.Z) if 'Z' in params else "" %}
	
	{% if printer.idle_timeout.state|string == "Printing" %}
	PAUSE B="{0}" P=2{z_param}
	{% elif not printer.pause_resume.is_paused%}
	PARK B="{0}" P=2{z_param}
	{% endif %}

[gcode_macro m701]
description = Pauses/parks the toolhead then loads filament to the extruder.
	Usage: M701 [L<distance>] [Z<pos>] [T<extruder>]
gcode = 
	{% if 'U' in params %}
	{% if not 'L' in params %}
	RESPOND TYPE=error MSG="Argument \"U\" substituted for missing \"L\"."
	{% set dummy = params.__setitem__("L", params.U) %}
	{% else %}
	RESPOND TYPE=error MSG="Invalid argument \"U\" ignored."
	{% endif %}
	{% endif %}
	
	_PAUSE_INNER_M700 {% for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	LOAD_FILAMENT BEEPS="{10}" LENGTH={
	params.L|default(printer["gcode_macro _km_globals"].load_length)|float}

[gcode_macro m702]
description = Pauses/parks the toolhead then unloads filament from the extruder.
	Usage: M702 [U<distance>] [Z<pos>] [T<extruder>]
gcode = 
	{% if 'L' in params %}
	{% if not 'U' in params %}
	RESPOND TYPE=error MSG="Argument \"L\" substituted for missing \"U\"."
	{% set dummy = params.__setitem__("U", params.L) %}
	{% else %}
	RESPOND TYPE=error MSG="Invalid argument \"L\" ignored."
	{% endif %}
	{% endif %}
	
	_PAUSE_INNER_M700 {% for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	UNLOAD_FILAMENT BEEPS="{10}" LENGTH={
	params.U|default(printer["gcode_macro _km_globals"].load_length)|float}

[gcode_macro _km_globals]
variable_bed_surface_max_name_length = 10
variable_bed_surfaces = ['default']
variable_load_length = 90.0
variable_load_min_temp = 0
variable_load_priming_length = 20.0
variable_load_priming_speed = 200
variable_load_speed = 1200
variable_menu_show_octoprint = True
variable_menu_show_sdcard = True
variable_menu_temperature = [
	{'name' : 'PLA',  'extruder' : 200, 'bed' : 60},
	{'name' : 'PETG', 'extruder' : 230, 'bed' : 85},
	{'name' : 'ABS',  'extruder' : 245, 'bed' : 110}]
variable_park_x = 0.0
variable_park_y = 0.0
variable_park_z = 20.0
variable_print_min = ()
variable_print_max = ()
variable_pressure_advance_scale = -1.0
variable_probe_mesh_padding = 5.0
variable_probe_min_count = 3
variable_probe_count_scale = 1.0
variable_start_bed_heat_delay = 2000
variable_start_bed_heat_overshoot = 2.0
variable_start_clear_adjustments_at_end = True
variable_start_end_park_y = 0.0
variable_start_extruder_preheat_scale = 0.5
variable_start_extruder_probing_temp = 0
variable_start_home_z_at_temp = True
variable_start_level_bed_at_temp = True
variable_start_purge_clearance = 2.0
variable_start_purge_length = 0.0
variable_start_purge_prime_length = 12.0
variable_start_quad_gantry_level_at_temp = True
variable_start_random_placement_max = 0
variable_start_random_placement_padding = 10.0
variable_start_try_saved_surface_mesh = False
variable_start_z_tilt_adjust_at_temp = True
variable_travel_speed_xy = 3000
variable_travel_speed_z = 600
description = Initializes our globals, including any _km_options overrides.
gcode = 
	
	
	
	
	
	
	
	
	{% set required_sections = {"heater_bed" : None,
	"extruder" : None,
	"gcode_macro _km_options" : None,
	"idle_timeout" : ("gcode", "_KM_IDLE_TIMEOUT"),
	"pause_resume" : None,
	"respond" : None,
	"save_variables" : None,
	"virtual_sdcard" :
	("on_error_gcode", "CANCEL_PRINT")
	} %}
	{% set warn_removed = {
	"start_extruder_set_target_before_level" :
	"The start_extruder_set_target_before_level option has been removed. "
	"Use the start_extruder_probing_temp option instead to set a fixed "
	"probing temperature.",
	"start_gcode_before_print" :
	"The start_gcode_before_print option has been removed. The same effect "
	"can now be achieved by inserting custom gcode before the "
	"_PRINT_START_PHASE_PURGE line in your slicer's start gcode, or by "
	"wrapping the _PRINT_START_PHASE_PURGE macro. See the Slicer "
	"Configuration section in the readme for more information.",
	"velocity_decel_scale" :
	"The velocity_decel_scale option has been removed. Klipper's input "
	"shaping provides a superior mechanism for improving print quality "
	"at higher speeds.",
	} %}
	{% set output = [] %}
	{% for s in required_sections %}
	{% set f = required_sections[s][0] if required_sections[s] else None %}
	{% set v = required_sections[s][1] if required_sections[s] else None %}
	{% if s not in printer.configfile.config %}
	{% set dummy = output.append("Missing [%s] section.\n" | format(s)) %}
	{% elif f and
	(v not in printer.configfile.config[s][f]|default("")|upper) %}
	{% set dummy = output.append("Missing %s in %s for [%s] section.\n"
	| format(v, f, s)) %}
	{% endif %}
	{% endfor %}
	{% if output %}
	{ action_emergency_stop((
	"required printer.cfg section(s) missing:\n"
	~ output | join("\n")) ~
	"See readme: https://github.com/jschuh/klipper-macros\x23klipper-setup")
	}
	{% endif %}
	
	
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_level_bed_at_temp VALUE="{
	1 if printer.bed_mesh is defined else 0}"
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_quad_gantry_level_at_temp VALUE="{
	1 if printer.quad_gantry_level is defined else 0}"
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_z_tilt_adjust_at_temp VALUE="{
	1 if printer.z_tilt is defined else 0}"
	{% set toolhead = printer.toolhead %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=print_min VALUE="{
	(toolhead.axis_minimum.x, toolhead.axis_minimum.y)}"
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=print_max VALUE="{
	(toolhead.axis_maximum.x, toolhead.axis_maximum.y)}"
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_end_park_y VALUE="{
	toolhead.axis_maximum.y}"
	{% set settings = printer.configfile.settings %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_home_z_at_temp VALUE="{
	1 if ("stepper_z" in settings and
	settings.stepper_z.endstop_pin.split()|join("")|lower ==
	"probe:z_virtual_endstop") else 0}"
	
	{% set options = printer["gcode_macro _km_options"] %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	
	{% if options.park_x|default("")|string|lower == "min" %}
	{% set dummy = options.__setitem__("park_x",
	printer.configfile.settings.stepper_x.position_min) %}
	{% elif options.park_x|default("")|string|lower == "max" %}
	{% set dummy = options.__setitem__("park_x",
	printer.configfile.settings.stepper_x.position_max) %}
	{% endif %}
	{% if options.park_y|default("")|string|lower == "min" %}
	{% set dummy = options.__setitem__("park_y",
	printer.configfile.settings.stepper_y.position_min) %}
	{% elif options.park_y|default("")|string|lower == "max" %}
	{% set dummy = options.__setitem__("park_y",
	printer.configfile.settings.stepper_y.position_max) %}
	{% endif %}
	{% if options.start_end_park_y|default("")|string|lower == "min" %}
	{% set dummy = options.__setitem__("start_end_park_y",
	printer.configfile.settings.stepper_y.position_min) %}
	{% elif options.start_end_park_y|default("")|string|lower == "max" %}
	{% set dummy = options.__setitem__("start_end_park_y",
	printer.configfile.settings.stepper_y.position_max) %}
	{% endif %}
	{% if options.park_z|default("")|string|lower == "min" %}
	{% set dummy = options.__setitem__("park_z",
	printer.configfile.settings.stepper_z.position_min) %}
	{% elif options.park_z|default("")|string|lower == "max" %}
	{% set dummy = options.__setitem__("park_z",
	printer.configfile.settings.stepper_z.position_max) %}
	{% endif %}
	
	
	{% for k in options %}
	{% if k not in km %}
	{% if k in warn_removed %}
	{action_respond_info(warn_removed[k])}
	{% else %}
	{% set dummy = output.append("%s is not valid for _KM_OPTIONS." |
	format(k)) %}
	{% endif %}
	{% elif km[k] is string %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k
	} VALUE="'{options[k]|replace('\\','\\\\')|replace('\'','\\\'')
	|replace('\"','\\\"')}'"
	{% elif km[k] is float %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k
	} VALUE="{options[k]|float}"
	{% elif km[k] is integer or km[k] is boolean %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k} VALUE="{options[k]|int}"
	{% elif km[k] is mapping %}
	{% if options[k] is not mapping %}
	{% set dummy = output.append("%s requires a mapping type." |
	format(k)) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k
	} VALUE="{options[k]|replace('\"','\\\"')}"
	{% elif km[k] is sequence %}
	{% if options[k] is not sequence %}
	{% set dummy = output.append("%s requires a sequence type." |
	format(k)) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k
	} VALUE="{options[k]|replace('\"','\\\"')}"
	{% else %}
	{% set dummy = output.append("%s is not a valid type for _KM_OPTIONS." |
	format(k)) %}
	{% endif %}
	{% endfor %}
	
	{% if "homing_override" in printer.configfile.config %}
	{% for l in printer.configfile.config.homing_override.gcode.split("\n") %}
	{% if " g28 " in (" " ~ l.split("\x23")[0].split(";")[0]|lower ~ " ") %}
	{% set dummy = output.append(
	"G28 in [homing_override] gcode. Replace with G28.6245197 to "
	"fix recursive macro call.\n"
	"See readme: https://github.com/jschuh/klipper-macros\x23g28") %}
	{% endif %}
	{% endfor %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=check_km_config VARIABLE=load_errors VALUE="{
	output|replace('\"','\\\"')}"
	M400

[delayed_gcode INIT_GLOBALS]
initial_duration = 1
gcode = 
	LIST_MACROS SILENT=1
	_KM_GLOBALS
	
	CHECK_KM_CONFIG
	_INIT_SURFACES
	BED_MESH_CHECK
	
	SET_DRAW_PARAMS WIDTH="{printer.configfile.settings.extruder.nozzle_diameter}"
	
	_KM_OPTIONS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready

[gcode_macro check_km_config]
variable_load_errors = []
description = Checks global variables and throws an error on any invalid values.
	Does nothing if the config has no errors.
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set toolhead = printer.toolhead %}
	{% set output = load_errors %}
	{% if km.park_x > toolhead.axis_maximum.x or
	km.park_x < toolhead.axis_minimum.x %}
	{% set dummy = output.append("park_x is invalid.") %}
	{% endif %}
	{% if km.park_y > toolhead.axis_maximum.y or
	km.park_y < toolhead.axis_minimum.y %}
	{% set dummy = output.append("park_y is invalid.") %}
	{% endif %}
	{% if km.park_z > toolhead.axis_maximum.z or
	km.park_z < toolhead.axis_minimum.z %}
	{% set dummy = output.append("park_z is invalid.") %}
	{% endif %}
	{% if km.print_max[0] > toolhead.axis_maximum.x or
	km.print_max[1] > toolhead.axis_maximum.y %}
	{% set dummy = output.append("print_max is invalid.") %}
	{% endif %}
	{% if km.print_min[0] < toolhead.axis_minimum.x or
	km.print_min[1] < toolhead.axis_minimum.y %}
	{% set dummy = output.append("print_min is invalid.") %}
	{% endif %}
	{% if km.start_extruder_preheat_scale > 1.0 or
	km.start_extruder_preheat_scale < 0.0 %}
	{% set dummy = output.append("extruder_preheat_scale is invalid.") %}
	{% endif %}
	{% if km.load_length >
	printer.configfile.settings["extruder"].max_extrude_only_distance %}
	{% set dummy = output.append(
	"load_length exceeds max_extrude_only_distance.") %}
	{% endif %}
	{% if km.load_length < km.load_priming_length %}
	{% set dummy = output.append(
	"load_length is shorter than load_priming_length.") %}
	{% endif %}
	{% if km.load_length < 0.0 %}
	{% set dummy = output.append("load_length is negative.") %}
	{% endif %}
	{% if km.load_priming_length < 0.0 %}
	{% set dummy = output.append("load_priming_length is negative.") %}
	{% endif %}
	
	
	{% if output %}
	{ action_raise_error(output|sort|join('\nError: ')) }
	{% endif %}
	M400

[gcode_macro kmvars]
description = Lists global variables used by klipper-macros.
	Usage: KMVARS [SEARCH=<search_string>]
gcode = 
	{% set SEARCH = params.SEARCH|default(params.S|default(""))|lower %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set output = [] %}
	{% for k in km %}
	{% if SEARCH in k %}
	{% set dummy = output.append(k ~ ": " ~ km[k]) %}
	{% endif %}
	{% endfor %}
	{ action_respond_info(output|sort|join('\n')) }

[gcode_macro check_macro_docs]
description = Lists macros lacking proper documentation.
	Usage: CHECK_MACRO_DOCS [USAGE=<0|1>] [HIDDEN=<1|0>] [RENAMED=<1|0>]
gcode = 
	{% set USAGE = params.USAGE|default(0)|int %}
	{% set HIDDEN = params.HIDDEN|default(0)|int %}
	{% set RENAMED = params.RENAMED|default(0)|int %}
	{% set output = [] %}
	{%set config = printer.configfile.config %}
	{% for k in config|sort %}
	{% if k.startswith("gcode_macro") %}
	{% set name = k.split()[1] %}
	{% set desc = config[k].description|default("") %}
	{% set is_renamed = config[k].rename_existing|default("") %}
	{% if (not desc or (USAGE and not "Usage: "~name.upper() in desc)) and
	(HIDDEN or not name.startswith('_')) and (RENAMED or is_renamed) %}
	{% set dummy = output.append("%s&nbsp;%s: missing %s."
	| format("*" if is_renamed else "&nbsp;", name,
	"description" if not desc else "usage")) %}
	{% endif %}
	{% endif %}
	{% endfor %}
	{action_respond_info(output|join("\n"))}

[gcode_macro listvars]
description = Lists per-macro variables with a name containing SEARCH. This is
	useful for debugging macros by allowing you to probe printer state. Be very
	careful, however, as an overly broad SEARCH parameter can take a long time
	to process and potentially hang or crash klipper.
	Usage: LISTVARS SEARCH=<search_string>
gcode = 
	
	{% if 'SEARCH' not in params and 'S' not in params %}
	{ action_raise_error("Must provide a SEARCH parameter.") }
	{% endif %}
	{% set SEARCH = params.SEARCH|default(params.S)|lower %}
	{% set ns = namespace() %}
	{% set output = [] %}
	{% for item in printer %}
	{% if item is not string %}
	{% set ns.path = ['printer', "[%s]" % (item|string), ''] %}
	{% elif ' ' in item %}
	{% set ns.path = ['printer', "['%s']" % (item), ''] %}
	{% else %}
	{% set ns.path = ['printer.', item, ''] %}
	{% endif %}
	
	{% if SEARCH in ns.path|lower %}
	{% set dummy = output.append(ns.path|join) %}
	{% endif %}
	
	{% if printer[item].items() %}
	{% for childkey, child in printer[item].items() recursive %}
	{% set ns.path = ns.path[:loop.depth|int + 1] %}
	{% if childkey is not string %}
	{% set null = ns.path.append("[%s]" % (childkey|string)) %}
	{% elif ' ' in childkey %}
	{% set null = ns.path.append("['%s']" % (childkey)) %}
	{% else %}
	{% set null = ns.path.append(".%s" % (childkey)) %}
	{% endif %}
	
	{% if child is mapping  %}
	{loop(child.items())}
	{% else %}
	{% if SEARCH in ns.path|lower %}
	{% set dummy = output.append("%s : %s" % (ns.path|join, child)) %}
	{% endif %}
	{% endif %}
	{% endfor %}
	{% endif %}
	{% endfor %}
	{ action_respond_info(output|join("\n")) }

[gcode_macro list_macros]
description = Lists registered macros (and optionally show variable state).
	Usage: LISTVARS SEARCH=<search_string> VARS=<0|1> SILENT=<0|1>
variable_macros = {}
gcode = 
	
	{% if not macros %}
	{% set renames = {} %}
	{% for k in printer.configfile.config %}
	{% if k.lower().startswith("gcode_macro") and
	printer.configfile.config[k].rename_existing %}
	{% set name = k.split(None, 1)[1] | lower %}
	{% set dummy = renames.__setitem__(name,
	[printer.configfile.config[k].rename_existing|lower] +
	renames[name]|default([])) %}
	{% endif %}
	{% endfor %}
	{% for k in printer %}
	{% if k.lower().startswith("gcode_macro") %}
	{% set name = k.split(None, 1)[1] | lower %}
	{% set dummy = macros.__setitem__(name, renames[name]|default([])) %}
	{% endif %}
	{% endfor %}
	{% endif %}
	
	{% if params.SILENT|default(0)|int == 0 %}
	_LIST_MACROS_DISPLAY {rawparams}
	{% endif %}

[gcode_macro _list_macros_display]
gcode = 
	{% set SEARCH = params.SEARCH | default(params.S) | default("") | lower %}
	{% set VARS = params.VARS | default(params.V) | default(0) | int != 0 %}
	
	{% set macros = printer["gcode_macro list_macros"].macros %}
	{% set output = [] %}
	{% for k in macros %}
	{% if SEARCH in k | lower %}
	{% set line = k ~ ((" (renames: %s)" % (macros[k]|join(","))) if macros[k]
	else "") %}
	{% set outvars = [] %}
	{% if VARS %}
	{% for v in printer["gcode_macro " ~ k] | sort %}
	{% set dummy = outvars.append("\n* %s: %s" %
	(v, printer["gcode_macro " ~ k][v]|string)) %}
	{% endfor %}
	{% endif %}
	{% set dummy = output.append(line + outvars | join("")) %}
	{% endif %}
	{% endfor %}
	{ action_respond_info(output | sort | join("\n")) }

[gcode_macro set_heater_temperature_scaled]
gcode = 
	{% set HEATER = params.HEATER.lower() %}
	{% set TARGET = params.TARGET|default(0.0)|float %}
	{% set scaled_heaters =
	printer["gcode_macro set_heater_scaling"].scaled_heaters %}
	{% if HEATER in scaled_heaters %}
	{% set scales = scaled_heaters[HEATER] %}
	{% set dummy = scales.__setitem__("real_target", TARGET) %}
	{%if TARGET > 0.0 %}
	{% set TARGET = (((TARGET + scales.bump) * scales.scale, scales.minimum)
	| max, scales.maximum)|min %}
	{% endif %}
	{% endif %}
	SET_HEATER_TEMPERATURE HEATER="{HEATER}" TARGET={TARGET}

[gcode_macro temperature_wait_scaled]
gcode = 
	{% set SENSOR = params.SENSOR.lower() %}
	{% set heater = SENSOR if not SENSOR.startswith("heater_generic") else
	SENSOR.split()[1] %}
	{% set scaled_heaters =
	printer["gcode_macro set_heater_scaling"].scaled_heaters %}
	{% if heater in scaled_heaters %}
	{% set scales = scaled_heaters[heater] %}
	{% if "MINIMUM" in params and MINIMUM > 0.0 %}
	{% set MINIMUM = (((MINIMUM + scales.bump) * scales.scale, scales.minimum)
	| max, scales.maximum)|min %}
	{% endif %}
	{% if "MAXIMUM" in params and MAXIMUM > 0.0 %}
	{% set MAXIMUM = (((MAXIMUM + scales.bump) * scales.scale, scales.minimum)
	| max, scales.maximum)|min %}
	{% endif %}
	{% else %}
	{% set settings = printer.configfile.settings[SENSOR] %}
	{% set MINIMUM = params.MINIMUM|default(settings.min_temp) %}
	{% set MAXIMUM = params.MAXIMUM|default(settings.max_temp) %}
	{% endif %}
	{% if printer[sensor].temperature < MINIMUM or
	printer[sensor].temperature > MAXIMUM %}
	TEMPERATURE_WAIT SENSOR="{SENSOR}" MINIMUM={MINIMUM} MAXIMUM={MAXIMUM}
	{% endif %}

[gcode_macro _gcode_wait_wrapper_inner]
gcode = 
	
	
	{% set sensor = params.HEATER if params.HEATER in
	printer.heaters.available_heaters
	else ("heater_generic " ~ params.HEATER) %}
	{% set target = printer[sensor].target %}
	{% if 'R' in params and target > 0.0 %}
	{% set T = params.T|default("") %}
	M{params.M}.6245197 S{target} { (" T"~T) if T else "" }
	{% elif printer[sensor].temperature < target %}
	TEMPERATURE_WAIT SENSOR="{sensor}" MINIMUM={target}
	{% endif %}

[gcode_macro _gcode_wait_wrapper]
gcode = 
	{% set target = params.S | default(params.R | default(0))| float %}
	SET_HEATER_TEMPERATURE_SCALED HEATER="{params.HEATER}" TARGET={target}
	_GCODE_WAIT_WRAPPER_INNER{%
	for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}

[gcode_macro m109]
rename_existing = M109.6245197
gcode = 
	{% set extruder = "extruder" ~ params.T|replace('0', '')
	if "T" in params else printer.toolhead.extruder %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating
	_GCODE_WAIT_WRAPPER HEATER={extruder}{%
	for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro m190]
rename_existing = M190.6245197
gcode = 
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=bed_heating
	_GCODE_WAIT_WRAPPER HEATER=heater_bed {%
	for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro m191]
description = Sets chamber temperature (with wait for heating).
	Usage: M191 [S<temp>]
gcode = 
	
	{% if "R" in params %}
	{% set dummy = params.__setitem__("S", params.R) %}
	{% endif %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=chamber_heating
	_GCODE_WAIT_WRAPPER HEATER=chamber {%
	for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro m104]
rename_existing = M104.6245197
gcode = 
	{% set extruder = "extruder" ~ params.T|replace('0', '')
	if "T" in params else printer.toolhead.extruder %}
	SET_HEATER_TEMPERATURE_SCALED HEATER={extruder} TARGET={params.S|default(0)}

[gcode_macro m140]
rename_existing = M140.6245197
gcode = 
	SET_HEATER_TEMPERATURE_SCALED HEATER=heater_bed TARGET={params.S|default(0)}

[gcode_macro m141]
description = Sets chamber temperature.
	Usage: M141 [S<temp>]
gcode = 
	SET_HEATER_TEMPERATURE_SCALED HEATER=chamber TARGET={params.S|default(0)}

[gcode_macro _check_heater_params]
gcode = 
	{% set HEATER = params.HEATER|lower %}
	{% set sensor = params.HEATER %}
	{% if HEATER not in printer.heaters.available_heaters %}
	{% set sensor = "heater_generic " ~ HEATER %}
	{% if sensor not in printer.heaters.available_heaters %}
	{ action_raise_error("The value '%s' is not valid for HEATER"
	| format(HEATER)) }
	{% endif %}
	{% endif %}
	{% set settings = printer.configfile.settings[sensor] %}
	{% set scaled_heaters =
	printer["gcode_macro set_heater_scaling"].scaled_heaters %}
	{% if HEATER is in scaled_heaters %}
	{% set scales = scaled_heaters[HEATER] %}
	{% else %}
	{% set scales = { "scale": 1.0, "bump": 0.0, "minimum": settings.min_temp,
	"maximum": settings.max_temp,
	"real_target": printer[sensor].target} %}
	{% endif %}
	{% set SCALE = params.SCALE|default(scales.scale)|float %}
	{% set BUMP = params.BUMP|default(scales.bump)|float %}
	{% set MINIMUM = params.MINIMUM|default(scales.minimum)|float %}
	{% set MAXIMUM = params.MAXIMUM|default(scales.maximum)|float %}
	
	{% if SCALE <= 0 %}
	{ action_raise_error("SCALE must be a positive value.") }
	{% elif MINIMUM < settings.min_temp or MINIMUM > settings.max_temp %}
	{ action_raise_error("MINIMUM must be between %.1f and %.1f" |
	format(settings.min_temp, settings.max_temp)) }
	{% elif MAXIMUM < settings.min_temp or MAXIMUM > settings.max_temp %}
	{ action_raise_error("MAXIMUM must be between %.1f and %.1f" |
	format(settings.min_temp, settings.max_temp)) }
	{% elif MINIMUM >= MAXIMUM %}
	{ action_raise_error("MINIMUM must be less than MAXIMUM.") }
	{% elif "TARGET" in params and (params.TARGET|float < MINIMUM or
	params.TARGET|float > MAXIMUM) %}
	{ action_raise_error("TARGET must be between %.1f and %.1f" |
	format(settings.min_temp, settings.max_temp)) }
	{% endif %}

[gcode_macro set_heater_scaling]
description = Sets scaling parameters for heater. If a new target temperature is
	passed it will be adjusted to the scaling parameters.
	Usage: SET_HEATER_SCALING [HEATER=<heater>] [SCALE=<scale_factor>]
	[BUMP=<degrees>] [MAXIMUM=<degrees>]
	[MINIMUM=<degrees>] [TARGET=<temp>]
variable_scaled_heaters = {}
gcode = 
	
	{% if "HEATER" is not in params %}
	{% set output = [] %}
	{% for h in scaled_heaters %}
	{% set dummy = output.append(
	"%s: Scale: %.2f Bump: %.1f Minimum:%.1f Maximum: %.1f"
	| format(h, scaled_heaters[h].scale, scaled_heaters[h].bump,
	scaled_heaters[h].minimum, scaled_heaters[h].maximum)) %}
	{% endfor %}
	{% if output %}}{action_respond_info(output|join('\n'))}{% endif %}
	{% else %}
	
	{% set HEATER = params.HEATER.lower() %}
	{% set settings = printer.configfile.settings[HEATER] %}
	{% if HEATER is not in scaled_heaters %}
	{% set dummy = scaled_heaters.__setitem__(HEATER, {"scale": 1.0,
	"bump": 0.0, "minimum": settings.min_temp,
	"maximum": settings.max_temp,
	"real_target": printer[HEATER].target}) %}
	{% endif %}
	_CHECK_HEATER_PARAMS{% for k in params %}{' '~k~'='~params[k]}{% endfor %}
	{% set scales = scaled_heaters[HEATER] %}
	{% set SCALE = params.SCALE|default(scales.scale)|float %}
	{% set BUMP = params.BUMP|default(scales.bump)|float %}
	{% set MAXIMUM = params.MAXIMUM|default(scales.maximum)|float %}
	{% set MINIMUM = params.MINIMUM|default(scales.minimum)|float %}
	{% set TARGET = params.TARGET|default(scales.real_target)|float %}
	{% set dummy = scales.__setitem__("scale", SCALE) %}
	{% set dummy = scales.__setitem__("bump", BUMP) %}
	{% set dummy = scales.__setitem__("maximum", MAXIMUM) %}
	{% set dummy = scales.__setitem__("minimum", MINIMUM) %}
	{% set dummy = scales.__setitem__("real_target", TARGET) %}
	
	{% set settings = printer.configfile.settings[HEATER] %}
	{% if SCALE != 1.0 or BUMP != 0.0 or MINIMUM != settings.min_temp or
	MAXIMUM != settings.max_temp %}
	{% set dummy = scaled_heaters.__setitem__(HEATER, scales) %}
	{% else %}
	{% set dummy = scaled_heaters.__delitem__(HEATER) %}
	{% endif %}
	SET_HEATER_TEMPERATURE_SCALED HEATER={HEATER} TARGET={TARGET}
	{action_respond_info(
	"%s: Scale: %.2f Bump: %.1f Minimum:%.1f Maximum: %.1f Target: %.1f"
	| format(HEATER, SCALE, BUMP, MINIMUM, MAXIMUM, TARGET))}
	{% endif %}
	
	{% set dummy = None if True else "
	{% set dummy = params.HEATER|default(e.g. extruder) %}
	{% set dummy = params.SCALE|default(1.0)|float %}
	{% set dummy = params.BUMP|default(0.0)|float %}
	{% set dummy = params.MAXIMUM|default(max_temp)|float %}
	{% set dummy = params.MINIMUM|default(min_temp)|float %}
	{% set dummy = params.TARGET|default(current target)|float %}
	" %}

[gcode_macro reset_heater_scaling]
description = Clears scaling for heater (or all heaters if none specified).
	Usage: RESET_HEATER_SCALING [HEATER=<heater>]
gcode = 
	{% if "HEATER" in params %}
	{% set HEATER = params.HEATER.lower() %}
	{% if HEATER not in printer.heaters.available_heaters %}
	{ action_raise_error("The value '%s' is not valid for HEATER"
	| format(HEATER)) }
	{% endif %}
	{% set settings = printer.configfile.settings[HEATER] %}
	SET_HEATER_SCALING HEATER={HEATER
	} SCALE=1.0 BUMP=0.0 MINIMUM={settings.min_temp
	} MAXIMUM={settings.max_temp}
	{% else %}
	
	SET_GCODE_VARIABLE MACRO=set_heater_scaling VARIABLE=scaled_heaters VALUE={
	"{}"}
	{% endif %}

[gcode_macro _km_idle_timeout]
gcode = 
	{% if printer.pause_resume.is_paused %}
	{action_respond_info("Extruder powered down on idle timeout.")}
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{
	printer[printer.toolhead.extruder].target}"
	M104; Turn off extruder but leave the bed on.
	{% else %}
	TURN_OFF_HEATERS
	M107; turn off fan
	M84
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready
	{% endif %}

[gcode_macro _check_kinematic_limits]
gcode = 
	{% set toolhead = printer.toolhead %}
	{% if params.X and (params.X|float < toolhead.axis_minimum.x or
	params.X|float > toolhead.axis_maximum.x) %}
	{action_raise_error("X[%.3f] must be between %.3f and %.3f."
	| format(params.X|float, toolhead.axis_minimum.x,
	toolhead.axis_maximum.x))}
	{% elif params.Y and (params.Y|float < toolhead.axis_minimum.y or
	params.Y|float > toolhead.axis_maximum.y) %}
	{action_raise_error("Y[%.3f] must be between %.3f and %.3f."
	| format(params.Y|float, toolhead.axis_minimum.y,
	toolhead.axis_maximum.y))}
	{% elif params.Z and (params.Z|float < toolhead.axis_minimum.z or
	params.Z|float > toolhead.axis_maximum.z) %}
	{action_raise_error("Z[%.3f] must be between %.3f and %.3f."
	| format(params.Z|float, toolhead.axis_minimum.z,
	toolhead.axis_maximum.z))}
	{% elif params.E and (params.E|float|abs > printer.configfile.settings[
	"extruder"].max_extrude_only_distance) %}
	{action_raise_error("E[%.4f] exceeds max_extrude_only_distance[%.4f]."
	| format(params.E|float|abs, printer.configfile.settings[
	"extruder"].max_extrude_only_distance))}
	{% endif %}

[gcode_macro lazy_home]
description = Homes the specified axes. If lazy is true, already homed axes
	are skipped.
	Usage: LAZY_HOME [LAZY=<1|0>] [AXES=<axes_string>]
gcode = 
	
	LIST_MACROS SILENT=1
	_LAZY_HOME_INNER {rawparams}

[gcode_macro _lazy_home_inner]
gcode = 
	
	{% set G28 = (printer["gcode_macro list_macros"].macros.g28|
	default(["g28"],True))[-1] %}
	{% set axes = 'XYZ'|select('in', params.AXES|default("XYZ")|upper|list) %}
	{% if not axes %}
	{% set axes = 'XYZ' %}
	{% endif %}
	{% if params.LAZY|default(1)|int %}
	{% set axes = axes|reject('in', printer.toolhead.homed_axes|upper)|join() %}
	{% endif %}
	
	{% if axes %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing
	{G28}{% for k in axes %}{' ' ~ k}{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status
	{% endif %}

[gcode_macro g28]
description = Wraps the G28 command to add the Marlin "O" parameter so that
	already homed axes will not be homed again. See the Klipper documentation on
	G28 for the behavior of the other parameters.
	Usage: G28 [O] ...
rename_existing = G28.6245197
gcode = 
	{% set axes = 'XYZ'|select('in', params)|join() %}
	LAZY_HOME LAZY={('O' in params)|int}{%if axes%} AXES={axes}{%endif%}

[gcode_macro before_layer_change]
description = Add this to the "before layer change" input box in the slicer.
	Usage: BEFORE_LAYER_CHANGE HEIGHT=<current_height> LAYER=<current_layer>
gcode = 
	{% set height = params.HEIGHT|default(printer.toolhead.position.z)|float %}
	{% set layer = params.LAYER|default(-1)|int + 1 %}
	{% if height >= 0.0 and layer >= 0 %}
	SET_PRINT_STATS_INFO CURRENT_LAYER="{layer}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{height}"
	{% if printer["gcode_macro _km_layer_run"].clearance_z < height %}
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{
	height}"
	{% endif %}
	{% endif %}

[gcode_macro after_layer_change]
description = Add this to the "after layer change" input box in the slicer.
	Usage: AFTER_LAYER_CHANGE
gcode = 
	_KM_LAYER_RUN

[gcode_macro gcode_at_layer]
description = Schedules the specified g-code command to be run at the specified
	layer. LAYER=next will cause the command to run at the next layer change.
	Usage: GCODE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } COMMAND=<gcode>
	[CANCEL=<0|1>]
gcode = 
	{% set tot_layers = printer.print_stats.info.total_layer %}
	{% if params|length > 0 %}
	_KM_CHECK_IS_PRINTING
	
	{% set CANCEL = params.CANCEL|default(0)|int != 0 %}
	{% set COMMAND = params.COMMAND|default(None) %}
	{% if COMMAND %}
	{% set COMMAND = COMMAND.lstrip().split(None, 1) %}
	{% set COMMAND = " ".join([COMMAND[0]|upper] + COMMAND[1:]) %}
	{% endif %}
	
	{% if "LAYER" in params %}
	{% set cmd_container = "commands_layer" %}
	{% set cur_layer = printer.print_stats.info.current_layer|int %}
	{% if "HEIGHT" in params %}
	{action_raise_error("Conflicting HEIGHT and LAYER arguments provided.")}
	{% elif params.LAYER|string|lower == "next" %}
	{% set LAYER = cur_layer + 1 %}
	{% else %}
	{% set LAYER = params.LAYER|int %}
	{% endif %}
	{% if LAYER <= cur_layer %}
	{action_raise_error("LAYER[%i] must be above current print layer[%i]."
	| format(LAYER, cur_layer))}
	{% elif tot_layers and LAYER > tot_layers %}
	{action_raise_error("LAYER[%i] must not be above top layer[%i]."
	| format(LAYER, tot_layers))}
	{% endif %}
	{% set key = LAYER %}
	
	{% elif "HEIGHT" in params %}
	{% set cmd_container = "commands_height" %}
	{% set HEIGHT = params.HEIGHT|float %}
	{% set cur_height = printer["gcode_macro _km_layer_run"].cur_height %}
	{% if HEIGHT <= cur_height %}
	{action_raise_error(
	"HEIGHT[%.3f] must be above current print height[%.3f].")
	| format(HEIGHT, cur_height)}
	{% elif HEIGHT >= printer.toolhead.axis_maximum.z %}
	{action_raise_error(
	"HEIGHT[%.3f] must be below maximum Z height[%.3f].")
	| format(HEIGHT, printer.toolhead.axis_maximum.z)}
	{% endif %}
	{% set key = HEIGHT %}
	
	{% else %}
	{action_raise_error("No HEIGHT or LAYER argument provided.")}
	{% endif %}
	
	{% set commands = printer["gcode_macro _km_layer_run"][cmd_container] %}
	{% if key not in commands and not CANCEL %}
	{% set dummy = commands.__setitem__(key, []) %}
	{% endif %}
	
	{% if CANCEL %}
	{% if key in commands %}
	{% set pos = ("%i"|format(key)) if key is integer else
	("%.3fmm"|format(key)) %}
	{% if COMMAND %}
	{% set dummy = commands[key].remove(COMMAND) %}
	{% if commands[key]|length == 0 %}
	{% set dummy = commands.__delitem__(key) %}
	{% endif %}
	{action_respond_info("Cancelled %s %s:\n* %s" |
	format("layer" if k is integer else "height",
	pos, COMMAND))}
	{% else %}
	{% set dummy = commands.__delitem__(key) %}
	{action_respond_info("Cancelled all commands at %s %s." |
	format("layer" if k is integer else "height",
	pos))}
	{% endif %}
	{% endif %}
	{% elif not COMMAND %}
	{action_raise_error("No COMMAND argument provided.")}
	{% elif COMMAND in commands[key] %}
	{action_raise_error("Duplicate command previously scheduled.")}
	{% else %}
	{% set dummy = commands[key].append(COMMAND) %}
	{% set pos = ("%i"|format(key)) if key is integer else
	("%.3fmm"|format(key)) %}
	{action_respond_info("%s %s:\n* %s" |
	format("layer" if key is integer else "height",
	pos, COMMAND))}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE={cmd_container} VALUE="{
	commands|replace('\"','\\\"')}"
	_UPDATE_LAYER_COMPAT
	
	
	{% else %}
	{% set output = [] %}
	{% set commands = printer["gcode_macro _km_layer_run"].commands_layer %}
	{% for key in commands|list|sort %}
	{% set dummy = output.append("layer %i:" | format(key)) %}
	{% for c in commands[key] %}
	{% set dummy = output.append("* %s" | format(c)) %}
	{% endfor %}
	{% endfor %}
	{% set commands = printer["gcode_macro _km_layer_run"].commands_height %}
	{% for key in commands|list|sort %}
	{% set dummy = output.append("height %.3fmm:" | format(key)) %}
	{% for c in commands[key] %}
	{% set dummy = output.append("* %s" | format(c)) %}
	{% endfor %}
	{% endfor %}
	{action_respond_info(output|join('\n'))}
	{% endif %}

[gcode_macro _km_layer_run]
description = Runs pending commands for the current layer change.
	Usage: _KM_LAYER_RUN
variable_cur_height = 0.0
variable_clearance_z = 0.0
variable_commands_layer = {}
variable_commands_height = {}
gcode = 
	{% set cur_layer = printer.print_stats.info.current_layer %}
	{% for key in commands_layer | select("<=", cur_layer) | sort %}
	{action_respond_info("Executing scheduled commands at layer %d:\n%s" |
	format(key, commands_layer[key]|join('\n')))}
	{% for c in commands_layer[key] %}
	{c}
	{% endfor %}
	{% set dummy = commands_layer.__delitem__(key) %}
	{% endfor %}
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{
	commands_layer|replace('\"','\\\"')}"
	{% for key in commands_height | select("<=", cur_height) | sort %}
	{action_respond_info("Executing scheduled commands at height %.3f:\n%s" |
	format(key, commands_height[key]|join('\n')))}
	{% for c in commands_height[key] %}
	{c}
	{% endfor %}
	{% set dummy = commands_height.__delitem__(key) %}
	{% endfor %}
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{
	commands_height|replace('\"','\\\"')}"
	_UPDATE_LAYER_COMPAT

[gcode_macro init_layer_gcode]
description = Clears scheduled gcode commands and state for all layers.
	Usage: INIT_LAYER_GCODE LAYERS=<num>
gcode = 
	SET_PRINT_STATS_INFO TOTAL_LAYER="{params.LAYERS|int + 1}" CURRENT_LAYER="{0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"
	_UPDATE_LAYER_COMPAT

[gcode_macro _reset_layer_gcode]
description = Clears scheduled gcode commands and state for all layers.
	Usage: _RESET_LAYER_GCODE
gcode = 
	SET_PRINT_STATS_INFO TOTAL_LAYER="{0}" CURRENT_LAYER="{0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"
	_UPDATE_LAYER_COMPAT

[gcode_macro cancel_all_layer_gcode]
description = Clears all scheduled gcode commands.
	Usage: CANCEL_ALL_LAYER_GCODE
gcode = 
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"
	_UPDATE_LAYER_COMPAT

[gcode_macro _update_layer_compat]
gcode = 
	{% set next_layer = printer.print_stats.info.current_layer|int + 1 %}
	{% set commands_layer = printer["gcode_macro _km_layer_run"].commands_layer %}
	{% set keys = commands_layer | sort(reverse=True) %}
	
	{% set pause_next_layer = {'enable': False, 'call':
	printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer.call} %}
	{% if pause_next_layer.call in commands_layer[next_layer] | default([]) %}
	{% set dummy = pause_next_layer.__setitem__('enable', True) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{
	pause_next_layer|replace('\"','\\\"') }"
	
	
	{% set pause_at_layer = {'enable': False, 'layer': 0, 'call':
	printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer.call} %}
	{% if pause_next_layer.enable and
	pause_next_layer.call == pause_at_layer.call %}
	{% set keys = keys | reject("==", next_layer) %}
	{% endif %}
	
	
	
	
	{% for key in keys %}
	{% if pause_at_layer.call in commands_layer[key] %}
	{% set dummy = pause_at_layer.__setitem__('enable', True) %}
	{% set dummy = pause_at_layer.__setitem__('layer', key) %}
	{% endif %}
	{% endfor %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{
	pause_at_layer|replace('\"','\\\"') }"

[gcode_macro pause_next_layer]
description = Convenience macro to schedule the current print to pause at the
	next layer change. See PAUSE for additional arguments.
	Usage: PAUSE_NEXT_LAYER ...
gcode = 
	_CHECK_KINEMATIC_LIMITS{% for k in params%}{' ' ~k~ '=' ~ params[k]
	}{% endfor %}
	GCODE_AT_LAYER LAYER=NEXT COMMAND="PAUSE{% for k in params %}{
	' ' ~ k ~ '=' ~ params[k]}{% endfor %}"

[gcode_macro pause_at_layer]
description = Convenience macro to schedule the current print to pause at the
	specified layer change. LAYER=next will cause the command to run at the next
	layer change. See PAUSE for additional arguments.
	Usage: PAUSE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...
gcode = 
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	" %}
	{% set filtered_params = params|reject('in',['HEIGHT','LAYER'])|list|sort %}
	_CHECK_KINEMATIC_LIMITS{% for k in filtered_params%}{' ' ~k~ '=' ~ params[k]
	}{% endfor %}
	GCODE_AT_LAYER {% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor
	%} COMMAND="PAUSE{% for k in filtered_params %}{
	' ' ~ k ~ '=' ~ params[k]}{% endfor %}"

[gcode_macro speed_at_layer]
description = Convenience macro to schedule a feedrate adjustment at the
	specified layer change. LAYER=next will cause the command to run at the next
	layer change. (SPEED parameter behaves the same as the M220 S parameter.)
	Usage: SPEED_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } SPEED=<percentage>
gcode = 
	{% set SPEED = params.SPEED|default(0)|int %}
	{% if SPEED < 1 or SPEED > 500 %}
	{action_raise_error("SPEED[%i] parameter between 1 and 500 is required."
	% SPEED)}
	{% endif %}
	GCODE_AT_LAYER {% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor %} COMMAND="M220 S{SPEED|int}"
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	{% set dummy = params.SPEED|default(percentage)|int %}
	" %}

[gcode_macro flow_at_layer]
description = Convenience macro to schedule a flow percentage adjustment at the
	specified layer change. LAYER=next will cause the command to run at the next
	layer change. (FLOW parameter behaves the same as the M221 S parameter.)
	Usage: FLOW_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } FLOW=<percentage>
gcode = 
	{% set FLOW = params.FLOW|default(0)|int %}
	{% if FLOW < 1 or FLOW > 500 %}
	{action_raise_error("FLOW[%i] parameter between 1 and 500 is required."
	% FLOW)}
	{% endif %}
	GCODE_AT_LAYER {% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor %} COMMAND="M221 S{FLOW|int}"
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	{% set dummy = params.FLOW|default(percentage)|int %}
	" %}

[gcode_macro fan_at_layer]
description = Convenience macro to schedule a fan adjustment at the specified
	layer change. LAYER=next will cause the command to run at the next layer
	change. See SET_FAN_SCALING for additional arguments.
	Usage: FAN_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...
gcode = 
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	{% set dummy = params.SCALE|default(1.0)|float %}
	{% set dummy = params.BUMP|default(0)|int %}
	{% set dummy = params.MAXIMUM|default(0)|int %}
	{% set dummy = params.MINIMUM|default(255)|int %}
	{% set dummy = params.SPEED|default(current speed)|int %}
	" %}
	{% set filtered_params = params|reject('in',['HEIGHT','LAYER'])|list|sort %}
	{% if filtered_params|length == 0 %}
	{action_raise_error("No fan parameters provided.")}
	{% endif %}
	_CHECK_FAN_PARAMS{% for k in filtered_params %}{' '~k~'='~params[k]
	}{% endfor %}
	GCODE_AT_LAYER {% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor
	%} COMMAND="SET_FAN_SCALING{% for k in filtered_params %}{
	' ' ~ k ~ '=' ~ params[k]}{% endfor %}"

[gcode_macro heater_at_layer]
description = Convenience macro to schedule a heater adjustment at the specified
	layer change. LAYER=next will cause the command to run at the next layer
	change. See SET_HEATER_SCALING for additional arguments.
	Usage: HEATER_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...
gcode = 
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	{% set dummy = params.HEATER|default(e.g. extruder) %}
	{% set dummy = params.SCALE|default(1.0)|float %}
	{% set dummy = params.BUMP|default(0.0)|float %}
	{% set dummy = params.MAXIMUM|default(max_temp)|float %}
	{% set dummy = params.MINIMUM|default(min_temp)|float %}
	{% set dummy = params.TARGET|default(current target)|float %}
	" %}
	{% set filtered_params = params|reject('in',['HEIGHT','LAYER'])|list|sort %}
	_CHECK_HEATER_PARAMS{% for k in filtered_params%}{' ' ~ k ~ '=' ~ params[k]
	}{% endfor %}
	GCODE_AT_LAYER{% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor
	%} COMMAND="SET_HEATER_SCALING{% for k in filtered_params %}{
	' ' ~ k ~ '=\\\"' ~ params[k]|replace('\\','\\\\')|replace('\'','\\\'')
	|replace('\"','\\\"') ~ '\\\"'
	}{% endfor %}"

[gcode_macro park]
description = Park the toolhead
	Usage: PARK [P=<0|1|2>] [X=<pos>] [Y=<pos>] [Z=<pos>] [LAZY=<1|0>]
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set LAZY = params.LAZY|default(1)|int %}
	{% if printer.toolhead.homed_axes != "xyz" %}
	{% if LAZY %}
	LAZY_HOME
	{% else %}
	{action_raise_error("Must home axes first.")}
	{% endif %}
	{% endif %}
	
	
	{% set P = (params.P|default(2))|int %}
	{% set X = params.X|default(km.park_x)|float %}
	{% set Y = params.Y|default(km.park_y)|float %}
	{% set Z = params.Z|default(km.park_z)|float %}
	
	M400
	_CHECK_KINEMATIC_LIMITS X="{X}" Y="{Y}" Z="{Z}"
	_PARK_INNER X="{X}" Y="{Y}" Z="{Z}" P="{P}" LAZY="{LAZY}"
	
	{% set dummy = None if True else "
	{% set dummy = params.P|default(mode=<0|1|2>)|int %}
	{% set dummy = params.X|default(X position)|int %}
	{% set dummy = params.Y|default(Y position)|int %}
	{% set dummy = params.Z|default(Z position)|int %}
	" %}

[gcode_macro _park_inner]
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set travel_speed_xy = km.travel_speed_xy %}
	{% set travel_speed_z = km.travel_speed_z %}
	
	{% set position = printer.gcode_move.gcode_position %}
	{% set origin = printer.gcode_move.homing_origin%}
	
	
	
	{% set clearance_z = (printer["gcode_macro _km_layer_run"].clearance_z,
	position.z) | max %}
	{% set P = params.P|int %}
	{% set X = params.X|float - origin.x %}
	{% set Y = params.Y|float - origin.y %}
	{% set Z = params.Z|float %}
	{% set LAZY = params.LAZY|int %}
	
	
	{% if P == 0 %}
	{% if clearance_z > Z %}
	{% set Z = clearance_z %}
	{% endif %}
	{% elif P == 1 %}
	{% set Z = Z - origin.z %}
	{% elif P == 2 %}
	{% set Z = Z + clearance_z %}
	{% else %}
	{action_raise_error("Invalid parameter P=%i. Value must be 0, 1, or 2." |
	format(P)) }
	{% endif %}
	
	
	{% set Z = ((Z, printer.toolhead.axis_maximum.z - origin.z)|min,
	printer.toolhead.axis_minimum.z - origin.z)|max %}
	
	
	{% if (not LAZY) or P != 2 or X != position.x or Y != position.y
	or Z < clearance_z %}
	SAVE_GCODE_STATE NAME=_KM_PARK
	G90
	G0 Z{Z} F{travel_speed_z}
	G0 X{X} Y{Y} F{travel_speed_xy}
	RESTORE_GCODE_STATE NAME=_KM_PARK MOVE=0
	{% endif %}

[gcode_macro g27]
description = Parks the toolhead.
	Usage: G27 [P=<0|1|2>]
gcode = 
	
	PARK P={params.P|default(0)} {% for k in params|reject("in", "GP") %}{
	' '~k~'="'~params[k]~'"'
	}{% endfor %}

[gcode_macro pause]
description = Pauses the current print.
	Usage: PAUSE [X=<pos>] [Y=<pos>] [Z=<pos>] [E=<retract_length>] [B=<beeps>]
rename_existing = _KM_PAUSE_BASE
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% set E = (params.E|default(5))|float %}
	
	{% set B = params.B|default(10)|int if "output_pin beeper" in printer else 0
	%}
	
	{% if printer.pause_resume.is_paused %}
	{ action_respond_info("Print already paused") }
	{% elif printer.idle_timeout.state | string == "Printing" or
	(printer.virtual_sdcard|default({})).is_active|default(False) %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pausing RESET_STACK=1
	{% set position = printer.gcode_move.gcode_position %}
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_x VALUE="{position.x}"
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_y VALUE="{position.y}"
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_z VALUE="{position.z}"
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{E}"
	SAVE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE
	_KM_PAUSE_BASE
	M83
	{% if printer.extruder.can_extrude %}
	G1 E{'%.4f' % -E} F{km.load_speed}
	{% endif %}
	PARK P=2{% for k in params|select("in", "XYZ") %}{
	' '~k~'="'~params[k]~'"'}{% endfor %}
	
	{% for i in range(B) %}
	M300 P100
	G4 P200
	{% endfor %}
	{% else %}
	{ action_respond_info("Print not in progress") }
	{% endif %}

[gcode_macro m600]
description = Pauses the current print.
	Usage: M600 [B<beeps>] [E<pos>] [L<pos>] [R<temp>] [U<pos>] [X<pos>] [Y<pos>]
	[Z<pos>]
gcode = 
	PAUSE B="{0}" P=2{% for k in params|select("in", "EXYZ") %}{
	' '~k~'="'~params[k]~'"'}{% endfor %}
	UNLOAD_FILAMENT{% if 'U' in params %} LENGTH={params.U}{% endif
	%} BEEPS="{params.B|default(10)|int}"
	{% if 'R' in params %}M109 S{params.R}{% endif %}

[gcode_macro m601]
description = Pauses the current print.
	Usage: M601
gcode = 
	PAUSE

[gcode_macro m602]
description = Resumes the currently paused print.
	Usage: M602
gcode = 
	RESUME

[gcode_macro m24]
rename_existing = M24.6245197
gcode = 
	{% if printer.pause_resume.is_paused %}
	RESUME
	{% else %}
	M24.6245197
	{% endif %}

[gcode_macro m25]
rename_existing = M25.6245197
gcode = 
	PAUSE

[gcode_macro resume]
description = Resumes the currently paused print.
	Usage: RESUME [E<pos>]
rename_existing = _KM_RESUME_BASE
variable_saved_extruder_temp = 0
variable_saved_x = 0.0
variable_saved_y = 0.0
variable_saved_z = 0.0
variable_saved_e = 0.0
gcode = 
	{% if printer.pause_resume.is_paused %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% set extruder = printer[printer.toolhead.extruder] %}
	{% if extruder.target <= printer.configfile.settings[
	printer.toolhead.extruder].min_temp
	| float + 0.5 %}
	M109 S{saved_extruder_temp}
	{% endif %}
	
	
	
	{% if 'E' not in params and not saved_e %}
	{% set saved_e = 5.0 %}
	G1 E{'%.4f' % -saved_e } F{km.load_speed}
	{% endif %}
	
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"
	G90
	
	G0 X{saved_x} Y{saved_y} F{km.travel_speed_xy}
	G0 Z{saved_z} F{km.travel_speed_z}
	G91
	
	G1 E{'%.4f' % (params.E|default(saved_e))} F{km.load_speed}
	RESTORE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE MOVE=1
	_KM_RESUME_BASE
	{% else %}
	{ action_respond_info("Printer is not paused.") }
	{% endif %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=printing RESET_STACK=1

[gcode_macro clear_pause]
description = Clears the current pause state.
	Usage: CLEAR_PAUSE
rename_existing = _KM_CLEAR_PAUSE
gcode = 
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"
	_KM_CLEAR_PAUSE

[gcode_macro print_start]
description = Inserted by slicer at start of print. Rather than using this macro
	directly you should configure your slicer as instructed in the readme.
	Usage: PRINT_START BED=<temp> EXTRUDER=<temp> [CHAMBER=<temp>]
	[MESH_MIN=<x,y>] [MESH_MAX=<x,y>] [LAYERS=<num>]
	[NOZZLE_SIZE=<mm>]
gcode = 
	{action_respond_info(
	"This file is using an old The PRINT_START format. This print will run "
	"fine, but you should update your slicer config to take advantage of the "
	"phased PRINT_START macros. The slicer documentation is here:\n"
	"https://github.com/jschuh/klipper-macros\x23slicer-configuration"
	)}
	
	_PRINT_START_PHASE_INIT {rawparams}
	_PRINT_START_PHASE_PREHEAT
	_PRINT_START_PHASE_PROBING
	_PRINT_START_PHASE_EXTRUDER
	_PRINT_START_PHASE_PURGE

[gcode_macro _print_start_phase_init]
description = Inserted by slicer at start of print. Initializes PRINT_START
	phases.
	Usage: See PRINT_START.
gcode = 
	CHECK_KM_CONFIG
	SET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{False}"
	_KM_APPLY_PRINT_OFFSET RESET=1
	_PRINT_START_PHASE_CHECK PHASE=none
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% if not params.BED %}
	{% set dummy = params.__setitem__('BED', params.BED_TEMP|int) %}
	{% endif %}
	{% if not params.EXTRUDER %}
	{% set dummy = params.__setitem__('EXTRUDER', params.EXTRUDER_TEMP|int) %}
	{% endif %}
	
	
	PRINT_START_SET PRINT_START_PHASE="init" {% for k in params %}{' %s=\"%s\"' %
	(k,params[k]|replace('\\','\\\\')|replace('\'','\\\'')|replace('\"','\\\"'))
	}{% endfor %}
	
	
	_km_check_and_set_print_bounds
	
	M107
	CLEAR_PAUSE
	
	M140 S{params.BED}
	{% if params.CHAMBER %}M141 S{params.CHAMBER|int}{% endif %}
	{% if printer.bed_mesh %}BED_MESH_CLEAR{% endif %}
	
	{% if km.start_try_saved_surface_mesh and printer.bed_mesh %}
	LOAD_SURFACE_MESH
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="preheat"

[gcode_macro _print_start_phase_preheat]
description = Inserted by slicer at start of print. Handles the bed and chamber
	heating phases and ends when both are stabilized at their target temperatures.
	Usage: See PRINT_START.
gcode = 
	_PRINT_START_PHASE_CHECK PHASE=preheat
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set BED = print.BED|int %}
	{% set EXTRUDER = print.EXTRUDER|int %}
	{% set CHAMBER = print.CHAMBER|default(0)|int %}
	{% set LAYERS = print.LAYERS|default(0)|int %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% set bed_at_target = (BED + 0.4 - printer.heater_bed.temperature) |
	abs <= 0.6 %}
	PRINT_START_SET BED_AT_TARGET={1 if bed_at_target else 0}
	{% set start_level_bed_at_temp = km.start_level_bed_at_temp and
	not printer.bed_mesh.profile_name %}
	{% set actions_at_temp = start_level_bed_at_temp or
	km.start_quad_gantry_level_at_temp or
	km.start_z_tilt_adjust_at_temp or
	(km.start_home_z_at_temp and not bed_at_target) %}
	{% set bed_overshoot = (BED + (km.start_bed_heat_overshoot if
	(BED and not bed_at_target) else 0.0),
	printer.configfile.settings.heater_bed.max_temp ) | min %}
	
	INIT_LAYER_GCODE LAYERS="{LAYERS}"
	{% if CHAMBER > 0.0 %}
	M141 S{CHAMBER}
	{% endif %}
	
	M140 S{bed_overshoot}
	{% if actions_at_temp %}
	
	
	M104 S{km.start_extruder_probing_temp if km.start_extruder_probing_temp > 0
	else (km.start_extruder_preheat_scale * EXTRUDER)|round(0,'ceil')|int}
	{% else %}
	M104 S{EXTRUDER}
	{% endif %}
	
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing RESET_STACK=1
	G28
	G90
	{% if BED > 0.0 %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=bed_heating RESET_STACK=1
	
	{% if not bed_at_target %}
	PARK
	
	M190 S{bed_overshoot}
	G4 P{km.start_bed_heat_delay / 2}
	M190 R{BED}
	G4 P{km.start_bed_heat_delay / 2}
	{% endif %}
	{% endif %}
	
	{% if CHAMBER > 0.0 %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=chamber_heating RESET_STACK=1
	_KM_PARK_IF_NEEDED HEATER="chamber" RANGE=ABOVE
	M191 S{CHAMBER}
	{% endif %}
	
	{% if BED > 0.0 and bed_at_target%}
	M190 R{BED}
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="probing"

[gcode_macro _print_start_phase_probing]
description = Inserted by slicer at start of print. Performs probing (including
	mesh bed level) and other operations that should be run when the bed and
	chamber are stabilized at their target temps.
	Usage: See PRINT_START.
gcode = 
	_PRINT_START_PHASE_CHECK PHASE=probing
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set MESH_MIN = print.MESH_MIN|default(None) %}
	{% set MESH_MAX = print.MESH_MAX|default(None) %}
	
	{% if km.start_random_placement_max > 0 and print.PRINT_MIN and MESH_MIN %}
	{% set PRINT_MIN = print.PRINT_MIN.split(",")|map('float')|list %}
	{% set PRINT_MAX = print.PRINT_MAX.split(",")|map('float')|list %}
	{% set x_offset = (((km.print_max[0] - km.print_min[0] - PRINT_MAX[0] +
	PRINT_MIN[0] - 2 * km.start_random_placement_padding)|int,
	km.start_random_placement_max * 2)|min, 0)|max %}
	{% set y_offset = (((km.print_max[1] - km.print_min[1] - PRINT_MAX[1] +
	PRINT_MIN[1] - 2 * km.start_random_placement_padding)|int,
	km.start_random_placement_max * 2)|min, 0)|max %}
	{% if x_offset > 0 %}
	{% set x_offset = range(x_offset)|random + km.print_min[0] -
	PRINT_MIN[0] + km.start_random_placement_padding %}
	{% endif %}
	{% if y_offset > 0 %}
	{% set y_offset = range(y_offset)|random + km.print_min[1] -
	PRINT_MIN[1] + km.start_random_placement_padding %}
	{% endif %}
	
	
	{% set MESH_MIN = MESH_MIN.split(",")|map('float')|list %}
	{% set MESH_MAX = MESH_MAX.split(",")|map('float')|list %}
	{% set MESH_MIN_NEW = (MESH_MIN[0] + x_offset, MESH_MIN[1] + y_offset) %}
	{% set MESH_MAX_NEW = (MESH_MAX[0] + x_offset, MESH_MAX[1] + y_offset) %}
	{action_respond_info(
	"Relocating print origin from (%.3f,%.3f) "|format(*MESH_MIN) +
	"to (%.3f,%.3f)"|format(*MESH_MIN_NEW))}
	{% set MESH_MIN = (MESH_MIN_NEW[0], MESH_MIN_NEW[1])|join(',') %}
	{% set MESH_MAX = (MESH_MAX_NEW[0], MESH_MAX_NEW[1])|join(',') %}
	PRINT_START_SET PRINT_OFFSET={"%d,%d" % (x_offset,y_offset)}
	{% endif %}
	
	{% set EXTRUDER = print.EXTRUDER|int %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set start_level_bed_at_temp = km.start_level_bed_at_temp and
	not printer.bed_mesh.profile_name %}
	{% set start_home_z_at_temp = km.start_home_z_at_temp and
	not print.BED_AT_TARGET|int %}
	{% set actions_at_temp = start_level_bed_at_temp or
	km.start_quad_gantry_level_at_temp or
	km.start_z_tilt_adjust_at_temp or
	start_home_z_at_temp %}
	{% if actions_at_temp %}
	{% if km.start_extruder_probing_temp > 0 %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating RESET_STACK=1
	_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=2
	M109 R{km.start_extruder_probing_temp}
	{% else %}
	M104 S{EXTRUDER}
	{% endif %}
	{% if start_home_z_at_temp %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing RESET_STACK=1
	G28 Z
	{% endif %}
	{% if km.start_z_tilt_adjust_at_temp %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=calibrating_z RESET_STACK=1
	Z_TILT_ADJUST
	{% endif %}
	{% if km.start_quad_gantry_level_at_temp %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=leveling_gantry RESET_STACK=1
	QUAD_GANTRY_LEVEL
	{% endif %}
	{% if start_level_bed_at_temp %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=meshing RESET_STACK=1
	_km_mesh_if_needed {% if MESH_MIN %} MESH_MIN={MESH_MIN}{% endif
	%}{% if MESH_MAX %} MESH_MAX={MESH_MAX}{% endif %}
	{% endif %}
	{% if km.start_extruder_probing_temp > 0 %}
	M104 S{EXTRUDER}
	{% endif %}
	G4
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="extruder"

[gcode_macro _print_start_phase_extruder]
description = Inserted by slicer at start of print. Preheats the extruder.
	Usage: See PRINT_START.
gcode = 
	_PRINT_START_PHASE_CHECK PHASE=extruder
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set EXTRUDER = print.EXTRUDER|default(print.EXTRUDER_TEMP)|float %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	
	{% if EXTRUDER > 0 %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating RESET_STACK=1
	_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=ABOVE
	M109 S{EXTRUDER}
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="purge"

[gcode_macro _print_start_phase_purge]
description = Inserted by slicer at start of print. Generates purge lines.
	Usage: See PRINT_START.
gcode = 
	_PRINT_START_PHASE_CHECK PHASE=purge
	
	_KM_APPLY_PRINT_OFFSET
	
	_APPLY_BED_SURFACE_OFFSET
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set MESH_MIN = print.MESH_MIN|default(None) %}
	{% set MESH_MAX = print.MESH_MAX|default(None) %}
	{% set NOZZLE_SIZE = print.NOZZLE_SIZE|default(print.NOZZLE_SIZE)|
	default(printer.configfile.settings.extruder.nozzle_diameter)|float %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% if km.start_purge_length > 0.0 and printer.extruder.can_extrude %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=purging RESET_STACK=1
	DRAW_PURGE_LINE WIDTH="{NOZZLE_SIZE * 1.25}" HEIGHT="{NOZZLE_SIZE * 0.625
	}"{% if MESH_MIN %} PRINT_MIN={MESH_MIN}{% endif
	%}{% if MESH_MAX %} PRINT_MAX={MESH_MAX}{% endif %}
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="printing"
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=printing RESET_STACK=1

[gcode_macro _km_park_if_needed]
description = Parks the extruder if the current temperature of the supplied
	heater is not within the specified target range.
	Usage: _KM_PARK_IF_NEEDED HEATER=<heater> RANGE=[<percentage>|ABOVE|BELOW]
gcode = 
	
	{% set HEATER = params.HEATER if params.HEATER in
	printer.heaters.available_heaters else
	("heater_generic " ~ params.HEATER) %}
	{% set RANGE = (params.RANGE|default(1))|string|upper %}
	
	{% if printer[HEATER].target %}
	{% if RANGE == "ABOVE" %}
	{% if printer[HEATER].temperature < printer[HEATER].target %}
	PARK
	{% endif %}
	{% elif RANGE == "BELOW" %}
	{% if printer[HEATER].temperature > printer[HEATER].target %}
	PARK
	{% endif %}
	{% elif (printer[HEATER].temperature - printer[HEATER].target)|abs >
	(printer[HEATER].target * RANGE|float * 0.01)|abs %}
	PARK
	{% endif %}
	{% endif %}

[gcode_macro _km_apply_print_offset]
variable_offset = []
gcode = 
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% if params.RESET|default(0)|int and offset and
	not printer["gcode_macro _km_save_state"].is_ephemeral%}
	{% set PRINT_OFFSET = [offset.pop(0) * -1, offset.pop() * -1] %}
	{% elif print.PRINT_OFFSET and not offset and
	not printer["gcode_macro _km_save_state"].is_ephemeral %}
	{% set PRINT_OFFSET = print.PRINT_OFFSET.split(",")|map('float')|list %}
	{% set dummy = offset.extend(PRINT_OFFSET) %}
	{% endif %}
	
	{% if PRINT_OFFSET %}
	_KM_SET_GCODE_OFFSET_BASE {"X_ADJUST=%.2f Y_ADJUST=%.2f"|
	format(*PRINT_OFFSET)}
	{% endif %}

[gcode_macro _km_mesh_if_needed]
gcode = 
	
	
	
	{% if not printer.bed_mesh.profile_name %}
	BED_MESH_CALIBRATE_FAST {rawparams}
	{% endif %}

[gcode_macro print_start_set]
description = Inserted by slicer to set values used by PRINT_START.
	Usage: PRINT_START_SET <VARIABLE>=<value>
variable_print = {}
gcode = 
	{%for k in params %}
	{% set dummy = print.__setitem__(k|upper, params[k]) %}
	{% endfor %}

[gcode_macro _print_start_phase_check]
gcode = 
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set PRINT_START_PHASE = print.PRINT_START_PHASE|default("none") %}
	{% if PRINT_START_PHASE != params.PHASE %}
	
	SET_GCODE_VARIABLE MACRO=print_start_set VARIABLE=print VALUE="{{}}"
	{% if params.PHASE != 'none' %}
	{% set error = "PRINT_START phase error. Expected '%s' but found '%s'" %
	(params.PHASE, PRINT_START_PHASE) %}
	
	{% if not 'virtual_sdcard' in printer or
	not printer.virtual_sdcard.is_active or 'CANCEL_PRINT' not in
	printer.configfile.settings.virtual_sdcard.on_error_gcode|
	default("")|upper %}
	{action_respond_info(error)}
	CANCEL_PRINT
	{% else %}
	{action_raise_error(error)}
	{% endif %}
	{% else %}
	{ action_respond_info("Expected phase '%s' but found '%s'. Resetting."
	% (params.PHASE, PRINT_START_PHASE)) }
	{% endif %}
	{% endif %}

[gcode_macro print_end]
description = Inserted by slicer at end of print.
	Usage: PRINT_END
gcode = 
	_KM_CHECK_IS_PRINTING
	M400
	_PRINT_END_INNER
	
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% if km.start_clear_adjustments_at_end != 0 %}
	RESET_HEATER_SCALING
	RESET_FAN_SCALING
	M220 S100
	M221 S100
	{% endif %}
	_RESET_LAYER_GCODE
	_RESET_VELOCITY_LIMITS
	TURN_OFF_HEATERS
	M107; turn off fan
	{% if printer.bed_mesh %}BED_MESH_CLEAR{% endif %}
	
	{% if printer.toolhead.homed_axes|lower == "xyz" %}
	PARK Y="{km.start_end_park_y}"
	{% endif %}
	M84
	CLEAR_PAUSE
	SET_GCODE_VARIABLE MACRO=print_start_set VARIABLE=print VALUE="{{}}"
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready RESET_STACK=1

[gcode_macro _print_end_inner]
variable_cancelled = False
gcode = 
	SET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{False}"
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set toolhead = printer.toolhead %}
	{% set origin = printer.gcode_move.homing_origin%}
	{% set max_x = km.print_max[0] - origin.x %}
	{% set max_y = km.print_max[1] - origin.y %}
	{% set max_z = toolhead.axis_maximum.z - origin.z %}
	
	{% if not cancelled %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=completing
	{% endif %}
	
	{% if printer.extruder.can_extrude %}
	
	{% if not printer.pause_resume.is_paused and not cancelled and
	toolhead.homed_axes|lower == "xyz" %}
	{% set x_safe = (max_x - toolhead.position.x, 2.0)|min %}
	{% set y_safe = (max_y - toolhead.position.y, 2.0)|min %}
	{% set z_safe = (max_z - toolhead.position.z, 2.0)|min %}
	G91
	G0 Z{z_safe} E-1.0 F{km.travel_speed_z * 2}
	G0 X{x_safe} Y{y_safe} E-1.0 F{km.travel_speed_xy}
	
	_KM_APPLY_PRINT_OFFSET RESET=1
	{% endif %}
	
	
	G92 E0
	G1 E-5.0 F3600
	M400
	{% endif %}

[gcode_macro _km_check_is_printing]
variable_debug_state = False
description = Throws an error if print is not currently in progress.
gcode = 
	{% if not debug_state and
	printer.idle_timeout.state|string != "Printing" and
	not (printer.virtual_sdcard|default({})).is_active|default(False) and
	not printer.pause_resume.is_paused %}
	{ action_raise_error("No active print.") }
	{% endif %}

[gcode_macro _km_check_and_set_print_bounds]
description = Validates all print bounds and caches their values.
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set print = printer["gcode_macro print_start_set"].print %}
	
	
	{% if print.MESH_MIN %}
	{% set MESH_MIN = print.MESH_MIN.split(",")|map('float')|list %}
	{% set MESH_MAX = print.MESH_MAX.split(",")|map('float')|list %}
	{%if MESH_MIN[0] < km.print_min[0] or MESH_MIN[1] < km.print_min[1] %}
	{action_raise_error("MESH_MIN %s is outside the printable bounds" %
	(MESH_MIN|string, km.print_min|string))}
	{%elif MESH_MAX[0] > km.print_max[0] or MESH_MAX[1] > km.print_max[1] %}
	{action_raise_error("MESH_MAX %s is outside the printable bounds %s" %
	(MESH_MAX|string, km.print_max|string))}
	{% endif %}
	{% endif %}
	
	
	{% set points = [] %}
	{% if print.MODEL_MIN or print.MODEL_MAX %}
	{% set MODEL_MIN = print.MODEL_MIN.split(",")|map('float')|list %}
	{% set MODEL_MAX = print.MODEL_MAX.split(",")|map('float')|list %}
	{% set points = [MODEL_MIN, MODEL_MAX] %}
	{% endif %}
	{% if (printer.exclude_object|default({})).objects %}
	{% set points = printer.exclude_object.objects|selectattr('polygon')|
	map(attribute='polygon')|sum(start=points) %}
	{% set points_len = points|length %}
	{% if points_len >= 2 %}
	{% set x_coords = (points|map(attribute=0)|sort|list)[0::points_len-1] %}
	{% set y_coords = (points|map(attribute=1)|sort|list)[0::points_len-1] %}
	{% set MODEL_MIN = (x_coords[0],y_coords[0])|map('float')|list %}
	{% set MODEL_MAX = (x_coords[1],y_coords[1])|map('float')|list %}
	PRINT_START_SET MODEL_MIN="{MODEL_MIN|join(',')
	}" MODEL_MAX="{MODEL_MAX|join(',')}"
	{% endif %}
	{% endif %}
	
	{% if MODEL_MIN %}
	
	{% if MODEL_MIN[0] < km.print_min[0] or MODEL_MIN[1] < km.print_min[1] %}
	{action_raise_error("MODEL_MIN %s is outside the printable bounds" %
	(MODEL_MIN|string, km.print_min|string))}
	{% elif MODEL_MAX[0] > km.print_max[0] or MODEL_MAX[1] > km.print_max[1] %}
	{action_raise_error("MODEL_MAX %s is outside the printable bounds %s" %
	(MODEL_MAX|string, km.print_max|string))}
	{% endif %}
	{% endif %}
	
	
	{% if MESH_MIN and MODEL_MIN %}
	PRINT_START_SET PRINT_MIN="{((MODEL_MIN[0],MESH_MIN[0])|min,
	(MODEL_MIN[1],MESH_MIN[1])|min)|join(',')
	}" PRINT_MAX="{((MODEL_MAX[0],MESH_MAX[0])|max,
	(MODEL_MAX[1],MESH_MAX[1])|max)|join(',')}"
	{% else %}
	PRINT_START_SET PRINT_MIN="{km.print_min|join(',')
	}" PRINT_MAX="{km.print_max|join(',')}"
	{% endif %}

[gcode_macro _km_save_state]
description = Tracks gcode state.
variable_state_set = {}
variable_is_ephemeral = 0
gcode = 
	{% if params.SAVE|int %}
	{% set dummy = state_set.__setitem__(params.NAME, None) %}
	{% else %}
	{% set dummy = state_set.__delitem__(params.NAME) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=_km_save_state VARIABLE=is_ephemeral VALUE="{
	1 if state_set|length > 0 else 0 }"

[gcode_macro save_gcode_state]
description = Wraps SAVE_GCODE_STATE to track persistence state.
	Usage: See Klipper documentation
rename_existing = _KM_SAVE_GCODE_STATE
gcode = 
	_KM_SAVE_GCODE_STATE {rawparams}
	{% set NAME = params.NAME|default("default") %}
	_km_save_state NAME={NAME} SAVE=1

[gcode_macro restore_gcode_state]
description = Wraps RESTORE_GCODE_STATE to track persistence state.
	Usage: See Klipper documentation
rename_existing = _KM_RESTORE_GCODE_STATE
gcode = 
	_KM_RESTORE_GCODE_STATE {rawparams}
	{% set NAME = params.NAME|default("default") %}
	_km_save_state NAME={NAME} SAVE=0

[gcode_macro _abort_on_gcode_state]
gcode = 
	{% set save_state = printer["gcode_macro _km_save_state"] %}
	{% if save_state.is_ephemeral %}
	{action_raise_error("Encountered unexpected save state " +
	save_state.state_set|list|sort|string)}
	{% endif %}

[gcode_macro _km_print_status]
variable_last_status = 'none'
variable_status_stack = []
variable_command_list = {}
variable_status_list = [
	'ready',
	'filament_load',
	'filament_unload',
	'bed_heating',
	'chamber_heating',
	'homing',
	'leveling_gantry',
	'calibrating_z',
	'meshing',
	'extruder_heating',
	'purging',
	'printing',
	'pausing',
	'cancelling',
	'completing',
	]
gcode = 
	{% set ACTION = params.ACTION|trim|upper %}
	{% set STATUS = params.STATUS|default("")|trim|lower %}
	
	
	{% if ACTION == "ADD_EVENT" %}
	{% set COMMAND = params.COMMAND %}
	{% set ARGS = params.ARGS|default(0)|int != 0 %}
	{% set TYPE = params.TYPE|default('ENTER')|trim|upper %}
	{% set WHEN = params.WHEN|default('PRINTING')|trim|upper %}
	{% set FILTER_ENTER =
	(params.FILTER_ENTER|default("")|trim|lower).split(',')|
	select()|unique|list %}
	{% set FILTER_LEAVE =
	(params.FILTER_LEAVE|default("")|trim|lower).split(',')|
	select()|unique|list %}
	
	{% set STATUSES = STATUS.split(',')|map('trim')|list %}
	{% for s in (STATUSES if STATUSES[0] != 'all' else status_list) %}
	{% if not s in command_list %}
	{% set dummy = command_list.__setitem__(s,[]) %}
	{% endif %}
	{% set dummy = command_list[s].append({'cmd':COMMAND, 'args':ARGS,
	'type':TYPE, 'when':WHEN,
	'filt_e':FILTER_ENTER,
	'filt_l':FILTER_LEAVE}) %}
	{% endfor %}
	
	
	{% elif ACTION == "CHANGE" %}
	{% if params.RESET_STACK|default(0)|int %}
	{% for dummy in range(status_stack|length) %}
	{% set dummy = status_stack.pop() %}
	{% endfor %}
	
	
	{% elif STATUS == "pop_status" %}
	{% set STATUS = (status_stack|default(['ready'], True)).pop() %}
	{% endif %}
	
	{% if STATUS not in status_list %}
	{action_raise_error("Status '%s' not valid."|format(STATUS))}
	{% endif %}
	
	{% if STATUS != last_status %}
	{% set is_printing =
	printer["gcode_macro print_start_set"].print.PRINT_START_PHASE|
	default("")|length != 0 %}
	{% set print_states = ('ALWAYS', 'PRINTING' if is_printing else 'IDLE') %}
	
	{% for c in command_list[last_status]|default([]) %}
	{% if c.type in ('BOTH','LEAVE') and c.when in print_states and
	(not c.filt_l or STATUS in c.filt_l) %}
	M400
	{c.cmd}{% if c.args %} TYPE=LEAVE WHEN={print_states[1]
	} LAST_STATUS={last_status} NEXT_STATUS={STATUS}{% endif %}
	{% endif %}
	{% endfor %}
	
	{% for c in command_list[STATUS]|default([]) %}
	{% if c.type in ('BOTH','ENTER') and c.when in print_states and
	(not c.filt_e or STATUS in c.filt_e) %}
	M400
	{c.cmd}{% if c.args %} TYPE=ENTER WHEN={print_states[1]
	} LAST_STATUS={last_status} NEXT_STATUS={STATUS}{% endif %}
	{% endif %}
	{% endfor %}
	SET_GCODE_VARIABLE MACRO=_km_print_status VARIABLE=last_status VALUE="'{
	STATUS}'"
	{% endif %}
	
	
	{% elif ACTION == "PUSH_STATUS" %}
	{% set dummy = status_stack.append(last_status) %}
	
	
	{% else %}
	{action_raise_error("Action '%s' not valid."|format(ACTION))}
	{% endif %}

[gcode_macro gcode_on_print_status]
description = Adds a gcode command for a status event.
	Usage: GCODE_ON_PRINT_STATUS STATUS=<status> COMMAND=<gcode> [ARGS=<1|0>]
	[WHEN=<PRINTING|IDLE|ALWAYS>]
	[TYPE=<ENTER|LEAVE|BOTH>]
	[FILTER_ENTER=<status list>]
	[FILTER_LEAVE=<status list>]
gcode = 
	{% set STATUS = (params.STATUS|lower).split(',')|map('trim')|list %}
	{% set TYPE = params.TYPE|default('ENTER')|trim|upper %}
	{% set WHEN = params.WHEN|default('PRINTING')|trim|upper %}
	{% set FILTER_ENTER =
	(params.FILTER_ENTER|default("")|trim|lower).split(',')|select()|list %}
	{% set FILTER_LEAVE =
	(params.FILTER_LEAVE|default("")|trim|lower).split(',')|select()|list %}
	
	
	{% set status_list = printer["gcode_macro _km_print_status"].status_list %}
	{% for s in STATUS %}
	{% if not (s in status_list or s == 'all' and STATUS|length == 1) %}
	{action_raise_error("STATUS parameter '%s' not valid."|format(s))}
	{% endif %}
	{% endfor %}
	
	{% if TYPE not in ('ENTER', 'LEAVE', 'BOTH') %}
	{action_raise_error("TYPE paramater '%s' not valid."|format(TYPE))}
	{% elif WHEN not in ('PRINTING', 'IDLE', 'ALWAYS') %}
	{action_raise_error("WHEN parameter '%s' not valid."|format(WHEN))}
	{% elif TYPE == 'ENTER' and FILTER_LEAVE %}
	{action_raise_error("FILTER_LEAVE not valid with TYPE=ENTER.")}
	{% elif TYPE == 'LEAVE' and FILTER_ENTER %}
	{action_raise_error("FILTER_ENTER not valid with TYPE=LEAVE.")}
	{% endif %}
	{% for f in FILTER_ENTER %}
	{% if f not in status_list %}
	{action_raise_error("FILTER_ENTER parameter '%s' not valid."|format(f))}
	{% endif %}
	{% endfor %}
	{% for f in FILTER_LEAVE %}
	{% if f not in status_list %}
	{action_raise_error("FILTER_LEAVE parameter '%s' not valid."|format(f))}
	{% endif %}
	{% endfor %}
	
	
	_KM_PRINT_STATUS ACTION=ADD_EVENT {rawparams}

[gcode_macro m201]
description = Sets maximum accelleration.
	Usage: M201 [X<accel>] [Y<accel>]
variable_max_accel = 1.7976931348623157e+308
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% if 'X' in params or 'Y' in params %}
	{% set accel = (params.X|default(params.Y)|float,
	params.Y|default(params.X)|float)|min %}
	SET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{accel}"
	{% else %}
	SET_VELOCITY_LIMIT
	{% endif %}

[gcode_macro m203]
description = Sets maximum velocity.
	Usage: M203 [X<velocity>] [Y<velocity>]
gcode = 
	{% if 'X' in params or 'Y' in params %}
	{% set velocity = (params.X|default(params.Y)|float,
	params.Y|default(params.X)|float)|min %}
	SET_VELOCITY_LIMIT VELOCITY="{velocity}"
	{% else %}
	SET_VELOCITY_LIMIT
	{% endif %}

[gcode_macro m205]
description = Sets square corner velocity.
	Usage: M203 [X<velocity>] [Y<velocity>]
gcode = 
	{% if 'X' in params or 'Y' in params %}
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY="{
	(params.X|default(0)|float, params.Y|default(0)|float)|min}"
	{% else %}
	SET_VELOCITY_LIMIT
	{% endif %}

[gcode_macro m900]
description = Sets pressure advance.
	Usage: M900 [K<advance>] [T<extruder_index>]
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% if km.pressure_advance_scale > 0.0 %}
	{% set extruder = "extruder" ~ params.T|replace('0', '')
	if "T" in params else printer.toolhead.extruder %}
	{% if 'K' in params %}
	SET_PRESSURE_ADVANCE EXTRUDER="{extruder}" ADVANCE="{
	params.K|float * km.pressure_advance_scale}"
	{% endif %}
	{% endif %}

[gcode_macro _reset_velocity_limits]
description = Sets maximum accelleration.
	Usage: M204 [S<accel>] [P<accel> T<accel>]
gcode = 
	SET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{1.7976931348623157e+308}"

[gcode_macro bed_mesh_calibrate]
rename_existing = _KM_BED_MESH_CALIBRATE_BASE
description = Wraps BED_MESH_CALIBRATE, scaling probe count to specified area.
	Usage: See Klipper documentation.
gcode = 
	BED_MESH_CALIBRATE_FAST{%for k in params%}{' '~k~'="'~params[k]~'"'}{%endfor%}

[gcode_macro g29]
gcode = 
	BED_MESH_CALIBRATE

[idle_timeout]
gcode = 
	_KM_IDLE_TIMEOUT

[respond]

[gcode_macro PRINT_START]
rename_existing = KM_PRINT_START
gcode = 
	
	STATUS_HOMING
	KM_PRINT_START {rawparams}
	STATUS_PRINTING

[board_pins EBB36_G0B1_v1.2]
mcu = ebbcan
aliases = 
aliases_step = 
	EXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15
aliases_limitsw = 
	LIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6
aliases_bltouch = 
	PROBE_1=PB9,PROBE_2=PB8
aliases_fans = 
	FAN0=PA1,FAN1=PA0
aliases_thermistors = 
	TH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7
aliases_heaters = 
	HE0=PB13
aliases_rgb = 
	RGBLED=PD3
aliases_adxl = 
	ADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11
aliases_i2c = 
	AUX0=PB3,AUX1=PB4

[neopixel sb_leds]
pin = ebbcan:RGBLED
chain_count = 3
color_order = GRB
initial_red = 0.0
initial_green = 0.0
initial_blue = 0.0
initial_white = 1.0

[save_variables]
filename = ~/printer_data/variables.cfg

[mcu CB1]
serial = /tmp/klipper_host_mcu

[mcu]
canbus_uuid = f94e10a9add8

[mcu ebbcan]
canbus_uuid = 57244ec148c0

[printer]
kinematics = corexy
max_velocity = 600
max_accel = 10000
max_accel_to_decel = 5000
max_z_velocity = 5
max_z_accel = 100

[stepper_x]
step_pin = PE2
dir_pin = !PB4
enable_pin = !PC11
microsteps = 16
rotation_distance = 40
endstop_pin = !ebbcan:LIMIT_2
position_endstop = 220
position_min = -4
position_max = 220
homing_speed = 50

[tmc2209 stepper_x]
uart_pin = PC10
diag_pin = PF3
run_current = 1.1

[tmc2209 stepper_y]
uart_pin = PF13
diag_pin = PF4
run_current = 1.1

[tmc2209 stepper_z]
uart_pin = PF9
diag_pin = PF5
run_current = 0.650

[tmc2209 extruder]
uart_pin = ebbcan:EXT_UART
diag_pin = ebbcan:LIMIT_3
run_current = 0.650

[stepper_y]
step_pin = PF12
dir_pin = !PF11
enable_pin = !PB3
microsteps = 16
rotation_distance = 40
endstop_pin = ^PF3
position_endstop = 220
position_min = -4
position_max = 220
homing_speed = 50

[stepper_z]
step_pin = PD7
dir_pin = !PD6
enable_pin = !PF10
microsteps = 16
rotation_distance = 8
endstop_pin = probe:z_virtual_endstop
position_max = 300
position_min = -3

[heater_bed]
heater_pin = PB7
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PA0
min_temp = 0
max_temp = 130
control = pid
pid_kp = 63.528
pid_ki = 0.875
pid_kd = 1153.041

[temperature_sensor raspberry_pi]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor mcu_temp]
sensor_type = temperature_mcu
min_temp = 0
max_temp = 100

[controller_fan MCU_Fan]
pin = PE6
heater = extruder
fan_speed = 1

[heater_fan heatbreak_cooling_fan]
pin = ebbcan:FAN0
kick_start_time = 0.25
heater = extruder
heater_temp = 50.0
fan_speed = 1

[fan]
pin = ebbcan:FAN1

[safe_z_home]
home_xy_position = 140, 140
speed = 100
z_hop = 10
z_hop_speed = 20

[extruder]
step_pin = ebbcan:EXT_STEP
dir_pin = ebbcan:EXT_DIR
enable_pin = !ebbcan:EXT_EN
microsteps = 16
rotation_distance = 4.71
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.750
max_extrude_only_distance = 101.0
heater_pin = ebbcan:HE0
sensor_type = ATC Semitec 104NT-4-R025H42G
sensor_pin = ebbcan:TH0
min_temp = 0
max_temp = 300
max_extrude_cross_section = 5
pressure_advance = 0.02
control = pid
pid_kp = 20.603
pid_ki = 0.988
pid_kd = 107.392

[bltouch]
sensor_pin = ebbcan:PROBE_2
control_pin = ebbcan:PROBE_1
x_offset = -40
y_offset = -17
samples = 2
samples_tolerance = 0.015
samples_tolerance_retries = 5
z_offset = 2.849

[bed_mesh]
speed = 100
horizontal_move_z = 5
mesh_min = 10, 27
mesh_max = 173, 200
probe_count = 5, 5
algorithm = bicubic
fade_start = 1
fade_end = 10

[bed_screws]
screw1 = 55,55
screw2 = 200,55
screw3 = 200,205
screw4 = 55,205

[screws_tilt_adjust]
screw1 = 65,55
screw1_name = front left screw
screw2 = 218,55
screw2_name = front right screw
screw3 = 218,215
screw3_name = rear right screw
screw4 = 65,215
screw4_name = rear left screw
horizontal_move_z = 10
speed = 50
screw_thread = CW-M4

[display]
lcd_type = st7920
cs_pin = PB12
sclk_pin = PB13
sid_pin = PB15
encoder_pins = ^PB14, ^PB10
click_pin = ^!PB2

[exclude_object]

[firmware_retraction]
retract_length = 0.4
retract_speed = 20
unretract_extra_length = 0
unretract_speed = 10

[input_shaper]
shaper_type_x = 2hump_ei
shaper_freq_x = 86.2
shaper_type_y = zv
shaper_freq_y = 44.8

[gcode_arcs]
resolution = 1.0

[adxl345]
cs_pin = ebbcan:ADXL_CS
spi_software_sclk_pin = ebbcan:ADXL_SCLK
spi_software_mosi_pin = ebbcan:ADXL_MOSI
spi_software_miso_pin = ebbcan:ADXL_MISO

[resonance_tester]
accel_chip = adxl345
probe_points = 
	120,120,20

[bed_mesh default]
version = 1
points = 
	0.027500, 0.058750, 0.091250, 0.182500
	-0.003750, 0.061250, 0.072500, 0.125000
	0.021250, 0.016250, 0.013750, 0.033750
	-0.023750, -0.018750, -0.036250, -0.037500
x_count = 4
y_count = 4
mesh_x_pps = 2
mesh_y_pps = 2
algo = bicubic
tension = 0.2
min_x = 48.75
max_x = 171.24
min_y = 48.75
max_y = 171.24
=======================
Extruder max_extrude_ratio=2.078758
mcu 'mcu': Starting CAN connect
Created a socket
webhooks client 281473234977456: New connection
webhooks client 281473234977456: Client info {'program': 'Moonraker', 'version': 'v0.8.0-92-g504a3a7'}
mcu 'mcu': got {'oid': 11, 'next_clock': 1141701632, 'value': 31238, '#name': 'analog_in_state', '#sent_time': 1382.375168783, '#receive_time': 1382.404785033}
mcu 'mcu': got {'oid': 13, 'next_clock': 1142981632, 'value': 7745, '#name': 'analog_in_state', '#sent_time': 1382.375168783, '#receive_time': 1382.424792825}
Loaded MCU 'mcu' 109 commands (v0.11.0-241-gffb5105b / gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2)
MCU 'mcu' config: ADC_MAX=4095 BUS_PINS_i2c1_PA9_PA10=PA9,PA10 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_i2c2_PB13_PB14=PB13,PB14 BUS_PINS_i2c3_PB3_PB4=PB3,PB4 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3=PB4,PB5,PB3 CANBUS_BRIDGE=1 CLOCK_FREQ=64000000 MCU=stm32g0b1xx PWM_MAX=255 RECEIVE_WINDOW=192 RESERVE_PINS_CAN=PD12,PD13 RESERVE_PINS_USB=PA11,PA12 RESERVE_PINS_crystal=PF0,PF1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
mcu 'CB1': Starting connect
mcu 'mcu': got {'oid': 11, 'next_clock': 1160901632, 'value': 31232, '#name': 'analog_in_state', '#sent_time': 1382.64068545, '#receive_time': 1382.704813575}
mcu 'mcu': got {'oid': 13, 'next_clock': 1162181632, 'value': 7749, '#name': 'analog_in_state', '#sent_time': 1382.64068545, '#receive_time': 1382.724836992}
mcu 'mcu': got {'oid': 11, 'next_clock': 1180101632, 'value': 31240, '#name': 'analog_in_state', '#sent_time': 1382.64068545, '#receive_time': 1383.004800825}
mcu 'mcu': got {'oid': 13, 'next_clock': 1181381632, 'value': 7751, '#name': 'analog_in_state', '#sent_time': 1382.64068545, '#receive_time': 1383.024792408}
Loaded MCU 'CB1' 113 commands (v0.11.0-241-gffb5105b / gcc: (Debian 10.2.1-6) 10.2.1 20210110 binutils: (GNU Binutils for Debian) 2.35.2)
MCU 'CB1' config: ADC_MAX=4095 CLOCK_FREQ=50000000 MCU=linux PCA9685_MAX=4096 PWM_MAX=32768 STATS_SUMSQ_BASE=256
mcu 'ebbcan': Starting CAN connect
Created a socket
mcu 'mcu': got {'oid': 11, 'next_clock': 1199301632, 'value': 31236, '#name': 'analog_in_state', '#sent_time': 1382.64068545, '#receive_time': 1383.304815034}
mcu 'mcu': got {'oid': 13, 'next_clock': 1200581632, 'value': 7749, '#name': 'analog_in_state', '#sent_time': 1382.64068545, '#receive_time': 1383.324785867}
mcu 'mcu': got {'oid': 11, 'next_clock': 1218501632, 'value': 31235, '#name': 'analog_in_state', '#sent_time': 1382.64068545, '#receive_time': 1383.6048572}
mcu 'ebbcan': got {'oid': 12, 'next_clock': 1220124792, 'value': 31259, '#name': 'analog_in_state', '#sent_time': 1383.5837106170002, '#receive_time': 1383.621242867}
mcu 'mcu': got {'oid': 13, 'next_clock': 1219781632, 'value': 7748, '#name': 'analog_in_state', '#sent_time': 1382.64068545, '#receive_time': 1383.624801617}
Loaded MCU 'ebbcan' 109 commands (v0.11.0-241-gffb5105b / gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2)
MCU 'ebbcan' config: ADC_MAX=4095 BUS_PINS_i2c1_PA9_PA10=PA9,PA10 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_i2c2_PB13_PB14=PB13,PB14 BUS_PINS_i2c3_PB3_PB4=PB3,PB4 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3=PB4,PB5,PB3 CANBUS_FREQUENCY=1000000 CLOCK_FREQ=64000000 MCU=stm32g0b1xx PWM_MAX=255 RECEIVE_WINDOW=192 RESERVE_PINS_CAN=PB0,PB1 RESERVE_PINS_crystal=PF0,PF1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
mcu_temperature 'mcu' nominal base=-268.847262 slope=1298.126801
Configured MCU 'mcu' (1024 moves)
Configured MCU 'CB1' (1024 moves)
Configured MCU 'ebbcan' (1024 moves)
mcu 'ebbcan': got {'oid': 5, 'clock': 1217262251, 'query_ticks': 1941, 'next_sequence': 0, 'buffered': 0, 'fifo': 0, 'limit_count': 0, '#name': 'adxl345_status', '#sent_time': 1383.869065825, '#receive_time': 1383.8707364089998}
Starting heater checks for heater_bed
bed_mesh: generated points
Index |  Tool Adjusted  |   Probe
  0   | (50.0, 44.0)    | (10.0, 27.0)
  1   | (90.8, 44.0)    | (50.8, 27.0)
  2   | (131.5, 44.0)   | (91.5, 27.0)
  3   | (172.2, 44.0)   | (132.2, 27.0)
  4   | (213.0, 44.0)   | (173.0, 27.0)
  5   | (213.0, 87.2)   | (173.0, 70.2)
  6   | (172.2, 87.2)   | (132.2, 70.2)
  7   | (131.5, 87.2)   | (91.5, 70.2)
  8   | (90.8, 87.2)    | (50.8, 70.2)
  9   | (50.0, 87.2)    | (10.0, 70.2)
  10  | (50.0, 130.5)   | (10.0, 113.5)
  11  | (90.8, 130.5)   | (50.8, 113.5)
  12  | (131.5, 130.5)  | (91.5, 113.5)
  13  | (172.2, 130.5)  | (132.2, 113.5)
  14  | (213.0, 130.5)  | (173.0, 113.5)
  15  | (213.0, 173.8)  | (173.0, 156.8)
  16  | (172.2, 173.8)  | (132.2, 156.8)
  17  | (131.5, 173.8)  | (91.5, 156.8)
  18  | (90.8, 173.8)   | (50.8, 156.8)
  19  | (50.0, 173.8)   | (10.0, 156.8)
  20  | (50.0, 217.0)   | (10.0, 200.0)
  21  | (90.8, 217.0)   | (50.8, 200.0)
  22  | (131.5, 217.0)  | (91.5, 200.0)
  23  | (172.2, 217.0)  | (132.2, 200.0)
  24  | (213.0, 217.0)  | (173.0, 200.0)
Starting heater checks for extruder
webhooks: registering remote method 'shutdown_machine' for connection id: 281473234977456
webhooks: registering remote method 'reboot_machine' for connection id: 281473234977456
webhooks: registering remote method 'pause_job_queue' for connection id: 281473234977456
webhooks: registering remote method 'start_job_queue' for connection id: 281473234977456
Active bed surface: default; offset: -0.050
Timeout with MCU 'ebbcan' (eventtime=1476.579696)
Transition to shutdown state: Lost communication with MCU 'ebbcan'
Dumping gcode input 0 blocks
Dumping 20 requests for client 281473234977456
Received 1385.392836: b'{"id": 281472631153040, "method": "info", "params": {}}'
Received 1385.395874: b'{"id": 281472685556928, "method": "objects/subscribe", "params": {"objects": {"webhooks": null, "print_stats": null, "heater_bed": null, "temperature_sensor raspberry_pi": null, "temperature_sensor mcu_temp": null, "extruder": null}, "response_template": {"method": "process_status_update"}}}'
Received 1385.399949: b'{"id": 281472685556928, "method": "gcode/subscribe_output", "params": {"response_template": {"method": "process_gcode_response"}}}'
Received 1385.403628: b'{"id": 281472685558656, "method": "list_endpoints", "params": {}}'
Received 1385.407247: b'{"id": 281472684900016, "method": "objects/subscribe", "params": {"objects": {"webhooks": null, "print_stats": null, "heater_bed": null, "temperature_sensor raspberry_pi": null, "temperature_sensor mcu_temp": null, "extruder": null}, "response_template": {"method": "process_status_update"}}}'
Received 1385.651479: b'{"id": 281472685556928, "method": "objects/list", "params": {}}'
Received 1385.655672: b'{"id": 281472685556928, "method": "objects/query", "params": {"objects": {"configfile": null}}}'
Received 1385.922630: b'{"id": 281472685556928, "method": "register_remote_method", "params": {"response_template": {"method": "shutdown_machine"}, "remote_method": "shutdown_machine"}}'
Received 1385.926960: b'{"id": 281472685556928, "method": "register_remote_method", "params": {"response_template": {"method": "reboot_machine"}, "remote_method": "reboot_machine"}}'
Received 1385.929988: b'{"id": 281472685556928, "method": "register_remote_method", "params": {"response_template": {"method": "pause_job_queue"}, "remote_method": "pause_job_queue"}}'
Received 1385.933149: b'{"id": 281472685556928, "method": "register_remote_method", "params": {"response_template": {"method": "start_job_queue"}, "remote_method": "start_job_queue"}}'
Received 1385.940688: b'{"id": 281472640478320, "method": "objects/query", "params": {"objects": {"heaters": null}}}'
Received 1385.940688: b'{"id": 281472631225072, "method": "objects/query", "params": {"objects": {"heaters": null}}}'
Received 1385.950818: b'{"id": 281472631014208, "method": "info", "params": {}}'
Received 1385.952192: b'{"id": 281472631013872, "method": "objects/list", "params": {}}'
Received 1385.952192: b'{"id": 281472684897088, "method": "gcode/help", "params": {}}'
Received 1385.981163: b'{"id": 281472631014496, "method": "objects/subscribe", "params": {"objects": {"webhooks": null, "print_stats": null, "heater_bed": null, "temperature_sensor raspberry_pi": null, "temperature_sensor mcu_temp": null, "extruder": null, "configfile": null, "mcu": null, "mcu CB1": null, "mcu ebbcan": null, "gcode_move": null, "virtual_sdcard": null, "pause_resume": null, "display_status": null, "gcode_macro CANCEL_PRINT": null, "gcode_macro PAUSE": null, "gcode_macro RESUME": null, "gcode_macro SET_PAUSE_NEXT_LAYER": null, "gcode_macro SET_PAUSE_AT_LAYER": null, "gcode_macro SET_PRINT_STATS_INFO": null, "gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL": null, "gcode_macro _CLIENT_EXTRUDE": null, "gcode_macro _CLIENT_RETRACT": null, "gcode_macro _km_options": null, "gcode_macro bed_mesh_calibrate_fast": null, "gcode_macro bed_mesh_check": null, "gcode_macro _apply_bed_surface_offset": null, "gcode_macro _init_surfaces": null, "gcode_macro adjust_surface_offsets": null, "gcode_macro set_surface_offset": null, "gcode_macro set_surface_active": null, "gcode_macro set_gcode_offset": null, "gcode_macro make_surface_mesh": null, "gcode_macro load_surface_mesh": null, "gcode_macro m300": null, "gcode_macro set_draw_params": null, "gcode_macro draw_line_to": null, "gcode_macro draw_purge_line": null, "gcode_macro _check_fan_params": null, "gcode_macro set_fan_scaling": null, "gcode_macro reset_fan_scaling": null, "gcode_macro m106": null, "gcode_macro _load_unload": null, "gcode_macro LOAD_FILAMENT": null, "gcode_macro UNLOAD_FILAMENT": null, "gcode_macro _pause_inner_m700": null, "gcode_macro m701": null, "gcode_macro m702": null, "gcode_macro _km_globals": null, "gcode_macro check_km_config": null, "gcode_macro kmvars": null, "gcode_macro check_macro_docs": null, "gcode_macro listvars": null, "gcode_macro list_macros": null, "gcode_macro _list_macros_display": null, "gcode_macro set_heater_temperature_scaled": null, "gcode_macro temperature_wait_scaled": null, "gcode_macro _gcode_wait_wrapper_inner": null, "gcode_macro _gcode_wait_wrapper": null, "gcode_macro m109": null, "gcode_macro m190": null, "gcode_macro m191": null, "gcode_macro m104": null, "gcode_macro m140": null, "gcode_macro m141": null, "gcode_macro _check_heater_params": null, "gcode_macro set_heater_scaling": null, "gcode_macro reset_heater_scaling": null, "gcode_macro _km_idle_timeout": null, "gcode_macro _check_kinematic_limits": null, "gcode_macro lazy_home": null, "gcode_macro _lazy_home_inner": null, "gcode_macro g28": null, "gcode_macro before_layer_change": null, "gcode_macro after_layer_change": null, "gcode_macro gcode_at_layer": null, "gcode_macro _km_layer_run": null, "gcode_macro init_layer_gcode": null, "gcode_macro _reset_layer_gcode": null, "gcode_macro cancel_all_layer_gcode": null, "gcode_macro _update_layer_compat": null, "gcode_macro pause_next_layer": null, "gcode_macro pause_at_layer": null, "gcode_macro speed_at_layer": null, "gcode_macro flow_at_layer": null, "gcode_macro fan_at_layer": null, "gcode_macro heater_at_layer": null, "gcode_macro park": null, "gcode_macro _park_inner": null, "gcode_macro g27": null, "gcode_macro pause": null, "gcode_macro m600": null, "gcode_macro m601": null, "gcode_macro m602": null, "gcode_macro m24": null, "gcode_macro m25": null, "gcode_macro resume": null, "gcode_macro clear_pause": null, "gcode_macro print_start": null, "gcode_macro _print_start_phase_init": null, "gcode_macro _print_start_phase_preheat": null, "gcode_macro _print_start_phase_probing": null, "gcode_macro _print_start_phase_extruder": null, "gcode_macro _print_start_phase_purge": null, "gcode_macro _km_park_if_needed": null, "gcode_macro _km_apply_print_offset": null, "gcode_macro _km_mesh_if_needed": null, "gcode_macro print_start_set": null, "gcode_macro _print_start_phase_check": null, "gcode_macro print_end": null, "gcode_macro _print_end_inner": null, "gcode_macro _km_check_is_printing": null, "gcode_macro _km_check_and_set_print_bounds": null, "gcode_macro _km_save_state": null, "gcode_macro save_gcode_state": null, "gcode_macro restore_gcode_state": null, "gcode_macro _abort_on_gcode_state": null, "gcode_macro _km_print_status": null, "gcode_macro gcode_on_print_status": null, "gcode_macro m201": null, "gcode_macro m203": null, "gcode_macro m205": null, "gcode_macro m900": null, "gcode_macro _reset_velocity_limits": null, "gcode_macro bed_mesh_calibrate": null, "gcode_macro g29": null, "idle_timeout": null, "gcode_macro PRINT_START": null, "neopixel sb_leds": null, "save_variables": null, "stepper_enable": null, "tmc2209 stepper_x": null, "tmc2209 stepper_y": null, "tmc2209 stepper_z": null, "tmc2209 extruder": null, "heaters": null, "temperature_host raspberry_pi": null, "controller_fan MCU_Fan": null, "heater_fan heatbreak_cooling_fan": null, "fan": null, "probe": null, "bed_mesh": null, "bed_screws": null, "screws_tilt_adjust": null, "exclude_object": null, "firmware_retraction": null, "motion_report": null, "query_endstops": null, "system_stats": null, "manual_probe": null, "toolhead": null}, "response_template": {"method": "process_status_update"}}}'
Received 1386.175297: b'{"id": 281472686153344, "method": "objects/subscribe", "params": {"objects": {"webhooks": null, "print_stats": null, "heater_bed": null, "temperature_sensor raspberry_pi": null, "temperature_sensor mcu_temp": null, "extruder": null, "configfile": null, "mcu": null, "mcu CB1": null, "mcu ebbcan": null, "gcode_move": null, "virtual_sdcard": null, "pause_resume": null, "display_status": null, "gcode_macro CANCEL_PRINT": null, "gcode_macro PAUSE": null, "gcode_macro RESUME": null, "gcode_macro SET_PAUSE_NEXT_LAYER": null, "gcode_macro SET_PAUSE_AT_LAYER": null, "gcode_macro SET_PRINT_STATS_INFO": null, "gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL": null, "gcode_macro _CLIENT_EXTRUDE": null, "gcode_macro _CLIENT_RETRACT": null, "gcode_macro _km_options": null, "gcode_macro bed_mesh_calibrate_fast": null, "gcode_macro bed_mesh_check": null, "gcode_macro _apply_bed_surface_offset": null, "gcode_macro _init_surfaces": null, "gcode_macro adjust_surface_offsets": null, "gcode_macro set_surface_offset": null, "gcode_macro set_surface_active": null, "gcode_macro set_gcode_offset": null, "gcode_macro make_surface_mesh": null, "gcode_macro load_surface_mesh": null, "gcode_macro m300": null, "gcode_macro set_draw_params": null, "gcode_macro draw_line_to": null, "gcode_macro draw_purge_line": null, "gcode_macro _check_fan_params": null, "gcode_macro set_fan_scaling": null, "gcode_macro reset_fan_scaling": null, "gcode_macro m106": null, "gcode_macro _load_unload": null, "gcode_macro LOAD_FILAMENT": null, "gcode_macro UNLOAD_FILAMENT": null, "gcode_macro _pause_inner_m700": null, "gcode_macro m701": null, "gcode_macro m702": null, "gcode_macro _km_globals": null, "gcode_macro check_km_config": null, "gcode_macro kmvars": null, "gcode_macro check_macro_docs": null, "gcode_macro listvars": null, "gcode_macro list_macros": null, "gcode_macro _list_macros_display": null, "gcode_macro set_heater_temperature_scaled": null, "gcode_macro temperature_wait_scaled": null, "gcode_macro _gcode_wait_wrapper_inner": null, "gcode_macro _gcode_wait_wrapper": null, "gcode_macro m109": null, "gcode_macro m190": null, "gcode_macro m191": null, "gcode_macro m104": null, "gcode_macro m140": null, "gcode_macro m141": null, "gcode_macro _check_heater_params": null, "gcode_macro set_heater_scaling": null, "gcode_macro reset_heater_scaling": null, "gcode_macro _km_idle_timeout": null, "gcode_macro _check_kinematic_limits": null, "gcode_macro lazy_home": null, "gcode_macro _lazy_home_inner": null, "gcode_macro g28": null, "gcode_macro before_layer_change": null, "gcode_macro after_layer_change": null, "gcode_macro gcode_at_layer": null, "gcode_macro _km_layer_run": null, "gcode_macro init_layer_gcode": null, "gcode_macro _reset_layer_gcode": null, "gcode_macro cancel_all_layer_gcode": null, "gcode_macro _update_layer_compat": null, "gcode_macro pause_next_layer": null, "gcode_macro pause_at_layer": null, "gcode_macro speed_at_layer": null, "gcode_macro flow_at_layer": null, "gcode_macro fan_at_layer": null, "gcode_macro heater_at_layer": null, "gcode_macro park": null, "gcode_macro _park_inner": null, "gcode_macro g27": null, "gcode_macro pause": null, "gcode_macro m600": null, "gcode_macro m601": null, "gcode_macro m602": null, "gcode_macro m24": null, "gcode_macro m25": null, "gcode_macro resume": null, "gcode_macro clear_pause": null, "gcode_macro print_start": null, "gcode_macro _print_start_phase_init": null, "gcode_macro _print_start_phase_preheat": null, "gcode_macro _print_start_phase_probing": null, "gcode_macro _print_start_phase_extruder": null, "gcode_macro _print_start_phase_purge": null, "gcode_macro _km_park_if_needed": null, "gcode_macro _km_apply_print_offset": null, "gcode_macro _km_mesh_if_needed": null, "gcode_macro print_start_set": null, "gcode_macro _print_start_phase_check": null, "gcode_macro print_end": null, "gcode_macro _print_end_inner": null, "gcode_macro _km_check_is_printing": null, "gcode_macro _km_check_and_set_print_bounds": null, "gcode_macro _km_save_state": null, "gcode_macro save_gcode_state": null, "gcode_macro restore_gcode_state": null, "gcode_macro _abort_on_gcode_state": null, "gcode_macro _km_print_status": null, "gcode_macro gcode_on_print_status": null, "gcode_macro m201": null, "gcode_macro m203": null, "gcode_macro m205": null, "gcode_macro m900": null, "gcode_macro _reset_velocity_limits": null, "gcode_macro bed_mesh_calibrate": null, "gcode_macro g29": null, "idle_timeout": null, "gcode_macro PRINT_START": null, "neopixel sb_leds": null, "save_variables": null, "stepper_enable": null, "tmc2209 stepper_x": null, "tmc2209 stepper_y": null, "tmc2209 stepper_z": null, "tmc2209 extruder": null, "heaters": null, "temperature_host raspberry_pi": null, "controller_fan MCU_Fan": null, "heater_fan heatbreak_cooling_fan": null, "fan": null, "probe": null, "bed_mesh": null, "bed_screws": null, "screws_tilt_adjust": null, "exclude_object": null, "firmware_retraction": null, "motion_report": null, "query_endstops": null, "system_stats": null, "manual_probe": null, "toolhead": null}, "response_template": {"method": "process_status_update"}}}'
Received 1386.176855: b'{"id": 281472631013488, "method": "objects/subscribe", "params": {"objects": {"webhooks": null, "print_stats": null, "heater_bed": null, "temperature_sensor raspberry_pi": null, "temperature_sensor mcu_temp": null, "extruder": null, "configfile": null, "mcu": null, "mcu CB1": null, "mcu ebbcan": null, "gcode_move": null, "virtual_sdcard": null, "pause_resume": null, "display_status": null, "gcode_macro CANCEL_PRINT": null, "gcode_macro PAUSE": null, "gcode_macro RESUME": null, "gcode_macro SET_PAUSE_NEXT_LAYER": null, "gcode_macro SET_PAUSE_AT_LAYER": null, "gcode_macro SET_PRINT_STATS_INFO": null, "gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL": null, "gcode_macro _CLIENT_EXTRUDE": null, "gcode_macro _CLIENT_RETRACT": null, "gcode_macro _km_options": null, "gcode_macro bed_mesh_calibrate_fast": null, "gcode_macro bed_mesh_check": null, "gcode_macro _apply_bed_surface_offset": null, "gcode_macro _init_surfaces": null, "gcode_macro adjust_surface_offsets": null, "gcode_macro set_surface_offset": null, "gcode_macro set_surface_active": null, "gcode_macro set_gcode_offset": null, "gcode_macro make_surface_mesh": null, "gcode_macro load_surface_mesh": null, "gcode_macro m300": null, "gcode_macro set_draw_params": null, "gcode_macro draw_line_to": null, "gcode_macro draw_purge_line": null, "gcode_macro _check_fan_params": null, "gcode_macro set_fan_scaling": null, "gcode_macro reset_fan_scaling": null, "gcode_macro m106": null, "gcode_macro _load_unload": null, "gcode_macro LOAD_FILAMENT": null, "gcode_macro UNLOAD_FILAMENT": null, "gcode_macro _pause_inner_m700": null, "gcode_macro m701": null, "gcode_macro m702": null, "gcode_macro _km_globals": null, "gcode_macro check_km_config": null, "gcode_macro kmvars": null, "gcode_macro check_macro_docs": null, "gcode_macro listvars": null, "gcode_macro list_macros": null, "gcode_macro _list_macros_display": null, "gcode_macro set_heater_temperature_scaled": null, "gcode_macro temperature_wait_scaled": null, "gcode_macro _gcode_wait_wrapper_inner": null, "gcode_macro _gcode_wait_wrapper": null, "gcode_macro m109": null, "gcode_macro m190": null, "gcode_macro m191": null, "gcode_macro m104": null, "gcode_macro m140": null, "gcode_macro m141": null, "gcode_macro _check_heater_params": null, "gcode_macro set_heater_scaling": null, "gcode_macro reset_heater_scaling": null, "gcode_macro _km_idle_timeout": null, "gcode_macro _check_kinematic_limits": null, "gcode_macro lazy_home": null, "gcode_macro _lazy_home_inner": null, "gcode_macro g28": null, "gcode_macro before_layer_change": null, "gcode_macro after_layer_change": null, "gcode_macro gcode_at_layer": null, "gcode_macro _km_layer_run": null, "gcode_macro init_layer_gcode": null, "gcode_macro _reset_layer_gcode": null, "gcode_macro cancel_all_layer_gcode": null, "gcode_macro _update_layer_compat": null, "gcode_macro pause_next_layer": null, "gcode_macro pause_at_layer": null, "gcode_macro speed_at_layer": null, "gcode_macro flow_at_layer": null, "gcode_macro fan_at_layer": null, "gcode_macro heater_at_layer": null, "gcode_macro park": null, "gcode_macro _park_inner": null, "gcode_macro g27": null, "gcode_macro pause": null, "gcode_macro m600": null, "gcode_macro m601": null, "gcode_macro m602": null, "gcode_macro m24": null, "gcode_macro m25": null, "gcode_macro resume": null, "gcode_macro clear_pause": null, "gcode_macro print_start": null, "gcode_macro _print_start_phase_init": null, "gcode_macro _print_start_phase_preheat": null, "gcode_macro _print_start_phase_probing": null, "gcode_macro _print_start_phase_extruder": null, "gcode_macro _print_start_phase_purge": null, "gcode_macro _km_park_if_needed": null, "gcode_macro _km_apply_print_offset": null, "gcode_macro _km_mesh_if_needed": null, "gcode_macro print_start_set": null, "gcode_macro _print_start_phase_check": null, "gcode_macro print_end": null, "gcode_macro _print_end_inner": null, "gcode_macro _km_check_is_printing": null, "gcode_macro _km_check_and_set_print_bounds": null, "gcode_macro _km_save_state": null, "gcode_macro save_gcode_state": null, "gcode_macro restore_gcode_state": null, "gcode_macro _abort_on_gcode_state": null, "gcode_macro _km_print_status": null, "gcode_macro gcode_on_print_status": null, "gcode_macro m201": null, "gcode_macro m203": null, "gcode_macro m205": null, "gcode_macro m900": null, "gcode_macro _reset_velocity_limits": null, "gcode_macro bed_mesh_calibrate": null, "gcode_macro g29": null, "idle_timeout": null, "gcode_macro PRINT_START": null, "neopixel sb_leds": null, "save_variables": null, "stepper_enable": null, "tmc2209 stepper_x": null, "tmc2209 stepper_y": null, "tmc2209 stepper_z": null, "tmc2209 extruder": null, "heaters": null, "temperature_host raspberry_pi": null, "controller_fan MCU_Fan": null, "heater_fan heatbreak_cooling_fan": null, "fan": null, "probe": null, "bed_mesh": null, "bed_screws": null, "screws_tilt_adjust": null, "exclude_object": null, "firmware_retraction": null, "motion_report": null, "query_endstops": null, "system_stats": null, "manual_probe": null, "toolhead": null}, "response_template": {"method": "process_status_update"}}}'
Received 1395.361302: b'{"id": 281472631155248, "method": "gcode/script", "params": {"script": "SET_LED LED=\\"sb_leds\\" RED=1 GREEN=1 BLUE=1 SYNC=0 TRANSMIT=1"}}'
gcode state: absolute_coord=True absolute_extrude=True base_position=[0.0, 0.0, -0.05, 0.0] last_position=[0.0, 0.0, 0.0, 0.0] homing_position=[0.0, 0.0, -0.05, 0.0] speed_factor=0.016666666666666666 extrude_factor=1.0 speed=25.0
Reactor garbage collection: (1442.100044478, 0.0, 0.0)
MCU 'mcu' shutdown: Command request
clocksync state: mcu_freq=64000000 last_clock=41484646444 clock_est=(1448.756 39729253827 64001151.107) min_half_rtt=0.000175 min_rtt_time=1456.491 time_avg=1448.756(629.630) clock_avg=39729253827.708(40297040097.861) pred_variance=122871074.195
Dumping serial stats: bytes_write=5920 bytes_read=16808 bytes_retransmit=0 bytes_invalid=0 send_seq=383 receive_seq=383 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0
Dumping send queue 100 messages
Sent 0 1419.075642 1419.075642 6: seq: 1b, get_clock
Sent 1 1420.060157 1420.060157 6: seq: 1c, get_clock
Sent 2 1421.045246 1421.045246 6: seq: 1d, get_clock
Sent 3 1421.072285 1421.072285 9: seq: 1e, st7920_send_cmds oid=3 cmds=b'\x82'
Sent 4 1421.077914 1421.077914 10: seq: 1f, st7920_send_data oid=3 data=b'6 '
Sent 5 1422.029905 1422.029905 6: seq: 10, get_clock
Sent 6 1423.014965 1423.014965 6: seq: 11, get_clock
Sent 7 1423.068704 1423.068704 9: seq: 12, st7920_send_cmds oid=3 cmds=b'\x82'
Sent 8 1423.074175 1423.074175 10: seq: 13, st7920_send_data oid=3 data=b'5 '
Sent 9 1423.577027 1423.577027 9: seq: 14, st7920_send_cmds oid=3 cmds=b'\x82'
Sent 10 1423.582710 1423.582710 10: seq: 15, st7920_send_data oid=3 data=b'6 '
Sent 11 1424.000042 1424.000042 6: seq: 16, get_clock
Sent 12 1424.073948 1424.073948 9: seq: 17, st7920_send_cmds oid=3 cmds=b'\x82'
Sent 13 1424.079597 1424.079597 10: seq: 18, st7920_send_data oid=3 data=b'5 '
Sent 14 1424.573967 1424.573967 9: seq: 19, st7920_send_cmds oid=3 cmds=b'\x82'
Sent 15 1424.579635 1424.579635 10: seq: 1a, st7920_send_data oid=3 data=b'6 '
Sent 16 1424.984658 1424.984658 6: seq: 1b, get_clock
Sent 17 1425.968992 1425.968992 6: seq: 1c, get_clock
Sent 18 1426.953383 1426.953383 6: seq: 1d, get_clock
Sent 19 1427.938405 1427.938405 6: seq: 1e, get_clock
Sent 20 1428.923032 1428.923032 6: seq: 1f, get_clock
Sent 21 1429.079684 1429.079684 9: seq: 10, st7920_send_cmds oid=3 cmds=b'\x82'
Sent 22 1429.085249 1429.085249 10: seq: 11, st7920_send_data oid=3 data=b'5 '
Sent 23 1429.580978 1429.580978 9: seq: 12, st7920_send_cmds oid=3 cmds=b'\x82'
Sent 24 1429.586601 1429.586601 10: seq: 13, st7920_send_data oid=3 data=b'6 '
Sent 25 1429.907189 1429.907189 6: seq: 14, get_clock
Sent 26 1430.892520 1430.892520 6: seq: 15, get_clock
Sent 27 1431.877148 1431.877148 6: seq: 16, get_clock
Sent 28 1432.582373 1432.582373 9: seq: 17, st7920_send_cmds oid=3 cmds=b'\x82'
Sent 29 1432.587922 1432.587922 10: seq: 18, st7920_send_data oid=3 data=b'5 '
Sent 30 1432.861504 1432.861504 6: seq: 19, get_clock
Sent 31 1433.082373 1433.082373 9: seq: 1a, st7920_send_cmds oid=3 cmds=b'\x82'
Sent 32 1433.087930 1433.087930 10: seq: 1b, st7920_send_data oid=3 data=b'6 '
Sent 33 1433.846082 1433.846082 6: seq: 1c, get_clock
Sent 34 1434.830925 1434.830925 6: seq: 1d, get_clock
Sent 35 1435.815517 1435.815517 6: seq: 1e, get_clock
Sent 36 1436.800205 1436.800205 6: seq: 1f, get_clock
Sent 37 1437.784598 1437.784598 6: seq: 10, get_clock
Sent 38 1438.769135 1438.769135 6: seq: 11, get_clock
Sent 39 1439.754159 1439.754159 6: seq: 12, get_clock
Sent 40 1440.738263 1440.738263 6: seq: 13, get_clock
Sent 41 1441.723276 1441.723276 6: seq: 14, get_clock
Sent 42 1442.707784 1442.707784 6: seq: 15, get_clock
Sent 43 1443.598922 1443.598922 9: seq: 16, st7920_send_cmds oid=3 cmds=b'\x82'
Sent 44 1443.604791 1443.604791 10: seq: 17, st7920_send_data oid=3 data=b'5 '
Sent 45 1443.692573 1443.692573 6: seq: 18, get_clock
Sent 46 1444.603164 1444.603164 9: seq: 19, st7920_send_cmds oid=3 cmds=b'\x82'
Sent 47 1444.608679 1444.608679 10: seq: 1a, st7920_send_data oid=3 data=b'6 '
Sent 48 1444.676850 1444.676850 6: seq: 1b, get_clock
Sent 49 1445.101639 1445.101639 9: seq: 1c, st7920_send_cmds oid=3 cmds=b'\x82'
Sent 50 1445.107700 1445.107700 10: seq: 1d, st7920_send_data oid=3 data=b'5 '
Sent 51 1445.609734 1445.609734 9: seq: 1e, st7920_send_cmds oid=3 cmds=b'\x82'
Sent 52 1445.615340 1445.615340 10: seq: 1f, st7920_send_data oid=3 data=b'6 '
Sent 53 1445.661735 1445.661735 6: seq: 10, get_clock
Sent 54 1446.108988 1446.108988 9: seq: 11, st7920_send_cmds oid=3 cmds=b'\x82'
Sent 55 1446.114614 1446.114614 10: seq: 12, st7920_send_data oid=3 data=b'5 '
Sent 56 1446.646564 1446.646564 6: seq: 13, get_clock
Sent 57 1447.607283 1447.607283 9: seq: 14, st7920_send_cmds oid=3 cmds=b'\x82'
Sent 58 1447.612811 1447.612811 10: seq: 15, st7920_send_data oid=3 data=b'6 '
Sent 59 1447.630868 1447.630868 6: seq: 16, get_clock
Sent 60 1448.615706 1448.615706 6: seq: 17, get_clock
Sent 61 1449.599792 1449.599792 6: seq: 18, get_clock
Sent 62 1450.584243 1450.584243 6: seq: 19, get_clock
Sent 63 1451.568341 1451.568341 6: seq: 1a, get_clock
Sent 64 1452.552663 1452.552663 6: seq: 1b, get_clock
Sent 65 1453.537758 1453.537758 6: seq: 1c, get_clock
Sent 66 1454.522229 1454.522229 6: seq: 1d, get_clock
Sent 67 1455.506492 1455.506492 6: seq: 1e, get_clock
Sent 68 1456.491471 1456.491471 6: seq: 1f, get_clock
Sent 69 1457.475808 1457.475808 6: seq: 10, get_clock
Sent 70 1458.460811 1458.460811 6: seq: 11, get_clock
Sent 71 1459.444954 1459.444954 6: seq: 12, get_clock
Sent 72 1460.429769 1460.429769 6: seq: 13, get_clock
Sent 73 1461.414150 1461.414150 6: seq: 14, get_clock
Sent 74 1462.399184 1462.399184 6: seq: 15, get_clock
Sent 75 1463.383707 1463.383707 6: seq: 16, get_clock
Sent 76 1464.368235 1464.368235 6: seq: 17, get_clock
Sent 77 1465.352849 1465.352849 6: seq: 18, get_clock
Sent 78 1465.632504 1465.632504 9: seq: 19, st7920_send_cmds oid=3 cmds=b'\x82'
Sent 79 1465.638040 1465.638040 10: seq: 1a, st7920_send_data oid=3 data=b'5 '
Sent 80 1466.133086 1466.133086 9: seq: 1b, st7920_send_cmds oid=3 cmds=b'\x82'
Sent 81 1466.138687 1466.138687 10: seq: 1c, st7920_send_data oid=3 data=b'6 '
Sent 82 1466.337606 1466.337606 6: seq: 1d, get_clock
Sent 83 1467.322339 1467.322339 6: seq: 1e, get_clock
Sent 84 1467.635081 1467.635081 9: seq: 1f, st7920_send_cmds oid=3 cmds=b'\x82'
Sent 85 1467.640666 1467.640666 10: seq: 10, st7920_send_data oid=3 data=b'5 '
Sent 86 1468.306936 1468.306936 6: seq: 11, get_clock
Sent 87 1468.637432 1468.637432 9: seq: 12, st7920_send_cmds oid=3 cmds=b'\x82'
Sent 88 1468.642928 1468.642928 10: seq: 13, st7920_send_data oid=3 data=b'6 '
Sent 89 1469.291533 1469.291533 6: seq: 14, get_clock
Sent 90 1470.275681 1470.275681 6: seq: 15, get_clock
Sent 91 1471.140298 1471.140298 9: seq: 16, st7920_send_cmds oid=3 cmds=b'\x82'
Sent 92 1471.145796 1471.145796 10: seq: 17, st7920_send_data oid=3 data=b'5 '
Sent 93 1471.260107 1471.260107 6: seq: 18, get_clock
Sent 94 1472.244944 1472.244944 6: seq: 19, get_clock
Sent 95 1473.229839 1473.229839 6: seq: 1a, get_clock
Sent 96 1474.214676 1474.214676 6: seq: 1b, get_clock
Sent 97 1475.198957 1475.198957 6: seq: 1c, get_clock
Sent 98 1476.183204 1476.183204 6: seq: 1d, get_clock
Sent 99 1476.585744 1476.585744 6: seq: 1e, emergency_stop
Dumping receive queue 100 messages
Receive: 0 1464.023364 1463.383707 14: seq: 17, analog_in_state oid=13 next_clock=2070414336 value=7752
Receive: 1 1464.303296 1463.383707 15: seq: 17, analog_in_state oid=11 next_clock=2088334336 value=31236
Receive: 2 1464.323326 1463.383707 14: seq: 17, analog_in_state oid=13 next_clock=2089614336 value=7749
Receive: 3 1464.368608 1464.368235 11: seq: 18, clock clock=2073768500
Receive: 4 1464.603315 1464.368235 15: seq: 18, analog_in_state oid=11 next_clock=2107534336 value=31233
Receive: 5 1464.623279 1464.368235 14: seq: 18, analog_in_state oid=13 next_clock=2108814336 value=7753
Receive: 6 1464.903301 1464.368235 15: seq: 18, analog_in_state oid=11 next_clock=2126734336 value=31232
Receive: 7 1464.923327 1464.368235 14: seq: 18, analog_in_state oid=13 next_clock=2128014336 value=7749
Receive: 8 1465.203329 1464.368235 15: seq: 18, analog_in_state oid=11 next_clock=2145934336 value=31235
Receive: 9 1465.223294 1464.368235 14: seq: 18, analog_in_state oid=13 next_clock=2147214336 value=7752
Receive: 10 1465.353258 1465.352849 11: seq: 19, clock clock=2136785000
Receive: 11 1465.503339 1465.352849 15: seq: 19, analog_in_state oid=11 next_clock=2165134336 value=31229
Receive: 12 1465.523280 1465.352849 14: seq: 19, analog_in_state oid=13 next_clock=2166414336 value=7752
Receive: 13 1465.803290 1465.638040 15: seq: 1b, analog_in_state oid=11 next_clock=2184334336 value=31232
Receive: 14 1465.823291 1465.638040 14: seq: 1b, analog_in_state oid=13 next_clock=2185614336 value=7752
Receive: 15 1466.103290 1465.638040 15: seq: 1b, analog_in_state oid=11 next_clock=2203534336 value=31235
Receive: 16 1466.123286 1465.638040 14: seq: 1b, analog_in_state oid=13 next_clock=2204814336 value=7757
Receive: 17 1466.338030 1466.138687 15: seq: 1d, stats count=390 sum=389272 sumsq=2504255
Receive: 18 1466.338142 1466.337606 11: seq: 1e, clock clock=2199812838
Receive: 19 1466.403355 1466.337606 15: seq: 1e, analog_in_state oid=11 next_clock=2222734336 value=31229
Receive: 20 1466.423351 1466.337606 14: seq: 1e, analog_in_state oid=13 next_clock=2224014336 value=7751
Receive: 21 1466.703426 1466.337606 15: seq: 1e, analog_in_state oid=11 next_clock=2241934336 value=31240
Receive: 22 1466.723527 1466.337606 14: seq: 1e, analog_in_state oid=13 next_clock=2243214336 value=7750
Receive: 23 1467.003288 1466.337606 15: seq: 1e, analog_in_state oid=11 next_clock=2261134336 value=31235
Receive: 24 1467.023296 1466.337606 14: seq: 1e, analog_in_state oid=13 next_clock=2262414336 value=7749
Receive: 25 1467.303303 1466.337606 15: seq: 1e, analog_in_state oid=11 next_clock=2280334336 value=31234
Receive: 26 1467.322734 1467.322339 11: seq: 1f, clock clock=2262834800
Receive: 27 1467.323257 1467.322339 14: seq: 1f, analog_in_state oid=13 next_clock=2281614336 value=7751
Receive: 28 1467.603293 1467.322339 15: seq: 1f, analog_in_state oid=11 next_clock=2299534336 value=31236
Receive: 29 1467.623310 1467.322339 14: seq: 1f, analog_in_state oid=13 next_clock=2300814336 value=7749
Receive: 30 1467.903301 1467.640666 15: seq: 11, analog_in_state oid=11 next_clock=2318734336 value=31233
Receive: 31 1467.923287 1467.640666 14: seq: 11, analog_in_state oid=13 next_clock=2320014336 value=7750
Receive: 32 1468.203296 1467.640666 15: seq: 11, analog_in_state oid=11 next_clock=2337934336 value=31234
Receive: 33 1468.223273 1467.640666 14: seq: 11, analog_in_state oid=13 next_clock=2339214336 value=7752
Receive: 34 1468.307320 1468.306936 11: seq: 12, clock clock=2325849420
Receive: 35 1468.503298 1468.306936 15: seq: 12, analog_in_state oid=11 next_clock=2357134336 value=31234
Receive: 36 1468.523293 1468.306936 14: seq: 12, analog_in_state oid=13 next_clock=2358414336 value=7751
Receive: 37 1468.803353 1468.642928 15: seq: 14, analog_in_state oid=11 next_clock=2376334336 value=31228
Receive: 38 1468.823332 1468.642928 14: seq: 14, analog_in_state oid=13 next_clock=2377614336 value=7753
Receive: 39 1469.103370 1468.642928 15: seq: 14, analog_in_state oid=11 next_clock=2395534336 value=31231
Receive: 40 1469.123368 1468.642928 14: seq: 14, analog_in_state oid=13 next_clock=2396814336 value=7752
Receive: 41 1469.291916 1469.291533 11: seq: 15, clock clock=2388865577
Receive: 42 1469.403205 1469.291533 15: seq: 15, analog_in_state oid=11 next_clock=2414734336 value=31234
Receive: 43 1469.423201 1469.291533 14: seq: 15, analog_in_state oid=13 next_clock=2416014336 value=7744
Receive: 44 1469.703207 1469.291533 15: seq: 15, analog_in_state oid=11 next_clock=2433934336 value=31238
Receive: 45 1469.723196 1469.291533 14: seq: 15, analog_in_state oid=13 next_clock=2435214336 value=7752
Receive: 46 1470.003200 1469.291533 15: seq: 15, analog_in_state oid=11 next_clock=2453134336 value=31233
Receive: 47 1470.023201 1469.291533 14: seq: 15, analog_in_state oid=13 next_clock=2454414336 value=7751
Receive: 48 1470.276075 1470.275681 11: seq: 16, clock clock=2451853473
Receive: 49 1470.303199 1470.275681 15: seq: 16, analog_in_state oid=11 next_clock=2472334336 value=31231
Receive: 50 1470.323201 1470.275681 14: seq: 16, analog_in_state oid=13 next_clock=2473614336 value=7749
Receive: 51 1470.603199 1470.275681 15: seq: 16, analog_in_state oid=11 next_clock=2491534336 value=31233
Receive: 52 1470.623198 1470.275681 14: seq: 16, analog_in_state oid=13 next_clock=2492814336 value=7757
Receive: 53 1470.903202 1470.275681 15: seq: 16, analog_in_state oid=11 next_clock=2510734336 value=31232
Receive: 54 1470.923196 1470.275681 14: seq: 16, analog_in_state oid=13 next_clock=2512014336 value=7749
Receive: 55 1471.203255 1471.145796 15: seq: 18, analog_in_state oid=11 next_clock=2529934336 value=31236
Receive: 56 1471.223250 1471.145796 14: seq: 18, analog_in_state oid=13 next_clock=2531214336 value=7750
Receive: 57 1471.260568 1471.260107 11: seq: 19, clock clock=2514857991
Receive: 58 1471.386219 1471.260107 15: seq: 19, stats count=411 sum=418992 sumsq=2932674
Receive: 59 1471.503196 1471.260107 15: seq: 19, analog_in_state oid=11 next_clock=2549134336 value=31235
Receive: 60 1471.523232 1471.260107 14: seq: 19, analog_in_state oid=13 next_clock=2550414336 value=7747
Receive: 61 1471.803199 1471.260107 15: seq: 19, analog_in_state oid=11 next_clock=2568334336 value=31229
Receive: 62 1471.823159 1471.260107 14: seq: 19, analog_in_state oid=13 next_clock=2569614336 value=7752
Receive: 63 1472.103169 1471.260107 15: seq: 19, analog_in_state oid=11 next_clock=2587534336 value=31235
Receive: 64 1472.123165 1471.260107 14: seq: 19, analog_in_state oid=13 next_clock=2588814336 value=7750
Receive: 65 1472.245322 1472.244944 11: seq: 1a, clock clock=2577887545
Receive: 66 1472.403181 1472.244944 15: seq: 1a, analog_in_state oid=11 next_clock=2606734336 value=31235
Receive: 67 1472.423164 1472.244944 14: seq: 1a, analog_in_state oid=13 next_clock=2608014336 value=7751
Receive: 68 1472.703195 1472.244944 15: seq: 1a, analog_in_state oid=11 next_clock=2625934336 value=31232
Receive: 69 1472.723174 1472.244944 14: seq: 1a, analog_in_state oid=13 next_clock=2627214336 value=7749
Receive: 70 1473.003169 1472.244944 15: seq: 1a, analog_in_state oid=11 next_clock=2645134336 value=31239
Receive: 71 1473.023196 1472.244944 14: seq: 1a, analog_in_state oid=13 next_clock=2646414336 value=7748
Receive: 72 1473.230200 1473.229839 11: seq: 1b, clock clock=2640921637
Receive: 73 1473.303167 1473.229839 15: seq: 1b, analog_in_state oid=11 next_clock=2664334336 value=31229
Receive: 74 1473.323154 1473.229839 14: seq: 1b, analog_in_state oid=13 next_clock=2665614336 value=7750
Receive: 75 1473.603179 1473.229839 15: seq: 1b, analog_in_state oid=11 next_clock=2683534336 value=31232
Receive: 76 1473.623173 1473.229839 14: seq: 1b, analog_in_state oid=13 next_clock=2684814336 value=7755
Receive: 77 1473.903226 1473.229839 15: seq: 1b, analog_in_state oid=11 next_clock=2702734336 value=31234
Receive: 78 1473.923204 1473.229839 14: seq: 1b, analog_in_state oid=13 next_clock=2704014336 value=7754
Receive: 79 1474.203221 1473.229839 15: seq: 1b, analog_in_state oid=11 next_clock=2721934336 value=31229
Receive: 80 1474.215088 1474.214676 11: seq: 1c, clock clock=2703954249
Receive: 81 1474.223232 1474.214676 14: seq: 1c, analog_in_state oid=13 next_clock=2723214336 value=7757
Receive: 82 1474.503236 1474.214676 15: seq: 1c, analog_in_state oid=11 next_clock=2741134336 value=31236
Receive: 83 1474.523218 1474.214676 14: seq: 1c, analog_in_state oid=13 next_clock=2742414336 value=7751
Receive: 84 1474.803245 1474.214676 15: seq: 1c, analog_in_state oid=11 next_clock=2760334336 value=31240
Receive: 85 1474.823223 1474.214676 14: seq: 1c, analog_in_state oid=13 next_clock=2761614336 value=7751
Receive: 86 1475.103225 1474.214676 15: seq: 1c, analog_in_state oid=11 next_clock=2779534336 value=31240
Receive: 87 1475.123215 1474.214676 14: seq: 1c, analog_in_state oid=13 next_clock=2780814336 value=7750
Receive: 88 1475.199415 1475.198957 11: seq: 1d, clock clock=2766948991
Receive: 89 1475.403232 1475.198957 15: seq: 1d, analog_in_state oid=11 next_clock=2798734336 value=31234
Receive: 90 1475.423208 1475.198957 14: seq: 1d, analog_in_state oid=13 next_clock=2800014336 value=7750
Receive: 91 1475.703247 1475.198957 15: seq: 1d, analog_in_state oid=11 next_clock=2817934336 value=31230
Receive: 92 1475.723278 1475.198957 14: seq: 1d, analog_in_state oid=13 next_clock=2819214336 value=7752
Receive: 93 1476.003173 1475.198957 15: seq: 1d, analog_in_state oid=11 next_clock=2837134336 value=31232
Receive: 94 1476.023272 1475.198957 14: seq: 1d, analog_in_state oid=13 next_clock=2838414336 value=7749
Receive: 95 1476.183572 1476.183204 11: seq: 1e, clock clock=2829940780
Receive: 96 1476.303076 1476.183204 15: seq: 1e, analog_in_state oid=11 next_clock=2856334336 value=31235
Receive: 97 1476.323075 1476.183204 14: seq: 1e, analog_in_state oid=13 next_clock=2857614336 value=7753
Receive: 98 1476.386047 1476.183204 15: seq: 1e, stats count=306 sum=302270 sumsq=1628953
Receive: 99 1476.586487 1476.585744 12: seq: 1f, shutdown clock=2855704650 static_string_id=Command request
MCU 'CB1' shutdown: Command request
clocksync state: mcu_freq=50000000 last_clock=32389473865 clock_est=(1448.406 31019897069 49999970.920) min_half_rtt=0.000073 min_rtt_time=1449.208 time_avg=1448.406(624.603) clock_avg=31019897069.557(31230142193.924) pred_variance=85769458.969 clock_adj=(0.010 49999083.500)
Dumping serial stats: bytes_write=1353 bytes_read=6260 bytes_retransmit=0 bytes_invalid=0 send_seq=197 receive_seq=197 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0
Dumping send queue 100 messages
Sent 0 1383.123177 1383.123177 6: seq: 11, get_clock
Sent 1 1383.174728 1383.174728 6: seq: 12, get_clock
Sent 2 1383.226279 1383.226279 6: seq: 13, get_clock
Sent 3 1383.234497 1383.234497 6: seq: 14, get_clock
Sent 4 1383.861718 1383.861718 6: seq: 15, get_config
Sent 5 1384.219025 1384.219025 6: seq: 16, get_clock
Sent 6 1385.204375 1385.204375 6: seq: 17, get_clock
Sent 7 1386.188906 1386.188906 6: seq: 18, get_clock
Sent 8 1387.173597 1387.173597 6: seq: 19, get_clock
Sent 9 1388.157836 1388.157836 6: seq: 1a, get_clock
Sent 10 1389.142585 1389.142585 6: seq: 1b, get_clock
Sent 11 1390.127655 1390.127655 6: seq: 1c, get_clock
Sent 12 1391.112428 1391.112428 6: seq: 1d, get_clock
Sent 13 1392.096707 1392.096707 6: seq: 1e, get_clock
Sent 14 1393.081282 1393.081282 6: seq: 1f, get_clock
Sent 15 1394.065575 1394.065575 6: seq: 10, get_clock
Sent 16 1395.050503 1395.050503 6: seq: 11, get_clock
Sent 17 1396.034822 1396.034822 6: seq: 12, get_clock
Sent 18 1397.019215 1397.019215 6: seq: 13, get_clock
Sent 19 1398.003470 1398.003470 6: seq: 14, get_clock
Sent 20 1398.988126 1398.988126 6: seq: 15, get_clock
Sent 21 1399.972670 1399.972670 6: seq: 16, get_clock
Sent 22 1400.957005 1400.957005 6: seq: 17, get_clock
Sent 23 1401.941740 1401.941740 6: seq: 18, get_clock
Sent 24 1402.926256 1402.926256 6: seq: 19, get_clock
Sent 25 1403.910897 1403.910897 6: seq: 1a, get_clock
Sent 26 1404.895704 1404.895704 6: seq: 1b, get_clock
Sent 27 1405.880887 1405.880887 6: seq: 1c, get_clock
Sent 28 1406.864843 1406.864843 6: seq: 1d, get_clock
Sent 29 1407.849207 1407.849207 6: seq: 1e, get_clock
Sent 30 1408.836847 1408.836847 6: seq: 1f, get_clock
Sent 31 1409.821917 1409.821917 6: seq: 10, get_clock
Sent 32 1410.806656 1410.806656 6: seq: 11, get_clock
Sent 33 1411.791477 1411.791477 6: seq: 12, get_clock
Sent 34 1412.776148 1412.776148 6: seq: 13, get_clock
Sent 35 1413.760992 1413.760992 6: seq: 14, get_clock
Sent 36 1414.746032 1414.746032 6: seq: 15, get_clock
Sent 37 1415.730812 1415.730812 6: seq: 16, get_clock
Sent 38 1416.715693 1416.715693 6: seq: 17, get_clock
Sent 39 1417.699924 1417.699924 6: seq: 18, get_clock
Sent 40 1418.684670 1418.684670 6: seq: 19, get_clock
Sent 41 1419.669558 1419.669558 6: seq: 1a, get_clock
Sent 42 1420.654454 1420.654454 6: seq: 1b, get_clock
Sent 43 1421.639371 1421.639371 6: seq: 1c, get_clock
Sent 44 1422.623478 1422.623478 6: seq: 1d, get_clock
Sent 45 1423.607974 1423.607974 6: seq: 1e, get_clock
Sent 46 1424.592894 1424.592894 6: seq: 1f, get_clock
Sent 47 1425.577149 1425.577149 6: seq: 10, get_clock
Sent 48 1426.561642 1426.561642 6: seq: 11, get_clock
Sent 49 1427.546056 1427.546056 6: seq: 12, get_clock
Sent 50 1428.530782 1428.530782 6: seq: 13, get_clock
Sent 51 1429.515367 1429.515367 6: seq: 14, get_clock
Sent 52 1430.499666 1430.499666 6: seq: 15, get_clock
Sent 53 1431.484499 1431.484499 6: seq: 16, get_clock
Sent 54 1432.469332 1432.469332 6: seq: 17, get_clock
Sent 55 1433.454387 1433.454387 6: seq: 18, get_clock
Sent 56 1434.439111 1434.439111 6: seq: 19, get_clock
Sent 57 1435.423353 1435.423353 6: seq: 1a, get_clock
Sent 58 1436.408340 1436.408340 6: seq: 1b, get_clock
Sent 59 1437.392657 1437.392657 6: seq: 1c, get_clock
Sent 60 1438.377303 1438.377303 6: seq: 1d, get_clock
Sent 61 1439.361999 1439.361999 6: seq: 1e, get_clock
Sent 62 1440.346542 1440.346542 6: seq: 1f, get_clock
Sent 63 1441.331581 1441.331581 6: seq: 10, get_clock
Sent 64 1442.316560 1442.316560 6: seq: 11, get_clock
Sent 65 1443.300852 1443.300852 6: seq: 12, get_clock
Sent 66 1444.285356 1444.285356 6: seq: 13, get_clock
Sent 67 1445.270213 1445.270213 6: seq: 14, get_clock
Sent 68 1446.254636 1446.254636 6: seq: 15, get_clock
Sent 69 1447.238967 1447.238967 6: seq: 16, get_clock
Sent 70 1448.223699 1448.223699 6: seq: 17, get_clock
Sent 71 1449.208404 1449.208404 6: seq: 18, get_clock
Sent 72 1450.192949 1450.192949 6: seq: 19, get_clock
Sent 73 1451.177712 1451.177712 6: seq: 1a, get_clock
Sent 74 1452.162280 1452.162280 6: seq: 1b, get_clock
Sent 75 1453.146934 1453.146934 6: seq: 1c, get_clock
Sent 76 1454.131743 1454.131743 6: seq: 1d, get_clock
Sent 77 1455.118990 1455.118990 6: seq: 1e, get_clock
Sent 78 1456.103970 1456.103970 6: seq: 1f, get_clock
Sent 79 1457.088098 1457.088098 6: seq: 10, get_clock
Sent 80 1458.072487 1458.072487 6: seq: 11, get_clock
Sent 81 1459.056951 1459.056951 6: seq: 12, get_clock
Sent 82 1460.041994 1460.041994 6: seq: 13, get_clock
Sent 83 1461.026585 1461.026585 6: seq: 14, get_clock
Sent 84 1462.011786 1462.011786 6: seq: 15, get_clock
Sent 85 1462.996465 1462.996465 6: seq: 16, get_clock
Sent 86 1463.981514 1463.981514 6: seq: 17, get_clock
Sent 87 1464.966598 1464.966598 6: seq: 18, get_clock
Sent 88 1465.951650 1465.951650 6: seq: 19, get_clock
Sent 89 1466.936840 1466.936840 6: seq: 1a, get_clock
Sent 90 1467.921000 1467.921000 6: seq: 1b, get_clock
Sent 91 1468.905309 1468.905309 6: seq: 1c, get_clock
Sent 92 1469.889783 1469.889783 6: seq: 1d, get_clock
Sent 93 1470.874843 1470.874843 6: seq: 1e, get_clock
Sent 94 1471.859581 1471.859581 6: seq: 1f, get_clock
Sent 95 1472.843747 1472.843747 6: seq: 10, get_clock
Sent 96 1473.828264 1473.828264 6: seq: 11, get_clock
Sent 97 1474.812678 1474.812678 6: seq: 12, get_clock
Sent 98 1475.797174 1475.797174 6: seq: 13, get_clock
Sent 99 1476.587193 1476.587193 6: seq: 14, emergency_stop
Dumping receive queue 100 messages
Receive: 0 1395.050811 1395.050503 11: seq: 12, clock clock=2582341048
Receive: 1 1396.035123 1396.034822 11: seq: 13, clock clock=2631556674
Receive: 2 1397.019363 1397.019215 11: seq: 14, clock clock=2680772085
Receive: 3 1398.003628 1398.003470 11: seq: 15, clock clock=2729985182
Receive: 4 1398.988377 1398.988126 11: seq: 16, clock clock=2779220876
Receive: 5 1399.508101 1398.988126 13: seq: 16, stats count=55 sum=28469 sumsq=190481
Receive: 6 1399.972907 1399.972670 11: seq: 17, clock clock=2828447240
Receive: 7 1400.957252 1400.957005 11: seq: 18, clock clock=2877664371
Receive: 8 1401.941906 1401.941740 11: seq: 19, clock clock=2926898812
Receive: 9 1402.926476 1402.926256 11: seq: 1a, clock clock=2976125776
Receive: 10 1403.911108 1403.910897 11: seq: 1b, clock clock=3025357538
Receive: 11 1404.608107 1403.910897 13: seq: 1b, stats count=56 sum=27659 sumsq=164761
Receive: 12 1404.895989 1404.895704 11: seq: 1c, clock clock=3074600486
Receive: 13 1405.881153 1405.880887 11: seq: 1d, clock clock=3123858571
Receive: 14 1406.864998 1406.864843 11: seq: 1e, clock clock=3173053182
Receive: 15 1407.849361 1407.849207 11: seq: 1f, clock clock=3222271422
Receive: 16 1408.837158 1408.836847 11: seq: 10, clock clock=3271657747
Receive: 17 1409.708143 1408.836847 13: seq: 10, stats count=56 sum=27958 sumsq=173658
Receive: 18 1409.822285 1409.821917 11: seq: 11, clock clock=3320911016
Receive: 19 1410.806839 1410.806656 11: seq: 12, clock clock=3370144079
Receive: 20 1411.791652 1411.791477 11: seq: 13, clock clock=3419385432
Receive: 21 1412.776404 1412.776148 11: seq: 14, clock clock=3468622133
Receive: 22 1413.761267 1413.760992 11: seq: 15, clock clock=3517864291
Receive: 23 1414.746266 1414.746032 11: seq: 16, clock clock=3567114503
Receive: 24 1414.746342 1414.746032 13: seq: 16, stats count=56 sum=31655 sumsq=233700
Receive: 25 1415.731018 1415.730812 11: seq: 17, clock clock=3616353058
Receive: 26 1416.715855 1416.715693 11: seq: 18, clock clock=3665595008
Receive: 27 1417.700102 1417.699924 11: seq: 19, clock clock=3714807066
Receive: 28 1418.684900 1418.684670 11: seq: 1a, clock clock=3764045647
Receive: 29 1419.669767 1419.669558 11: seq: 1b, clock clock=3813290584
Receive: 30 1419.808095 1419.669558 13: seq: 1b, stats count=56 sum=25542 sumsq=125516
Receive: 31 1420.654702 1420.654454 11: seq: 1c, clock clock=3862536576
Receive: 32 1421.639555 1421.639371 11: seq: 1d, clock clock=3911780372
Receive: 33 1422.623686 1422.623478 11: seq: 1e, clock clock=3960985754
Receive: 34 1423.608197 1423.607974 11: seq: 1f, clock clock=4010210038
Receive: 35 1424.593160 1424.592894 11: seq: 10, clock clock=4059457282
Receive: 36 1424.808127 1424.592894 13: seq: 10, stats count=55 sum=27993 sumsq=173253
Receive: 37 1425.577423 1425.577149 11: seq: 11, clock clock=4108670333
Receive: 38 1426.561799 1426.561642 11: seq: 12, clock clock=4157892744
Receive: 39 1427.546203 1427.546056 11: seq: 13, clock clock=4207112943
Receive: 40 1428.531097 1428.530782 10: seq: 14, clock clock=4256355805
Receive: 41 1429.515628 1429.515367 10: seq: 15, clock clock=10613704
Receive: 42 1429.908098 1429.515367 13: seq: 15, stats count=56 sum=27251 sumsq=163307
Receive: 43 1430.499960 1430.499666 10: seq: 16, clock clock=59830968
Receive: 44 1431.484674 1431.484499 10: seq: 17, clock clock=109067680
Receive: 45 1432.469500 1432.469332 10: seq: 18, clock clock=158309115
Receive: 46 1433.454664 1433.454387 11: seq: 19, clock clock=207565027
Receive: 47 1434.439360 1434.439111 11: seq: 1a, clock clock=256801369
Receive: 48 1434.908213 1434.439111 13: seq: 1a, stats count=55 sum=29674 sumsq=231928
Receive: 49 1435.423563 1435.423353 11: seq: 1b, clock clock=306012385
Receive: 50 1436.408494 1436.408340 11: seq: 1c, clock clock=355258848
Receive: 51 1437.392824 1437.392657 11: seq: 1d, clock clock=404476167
Receive: 52 1438.377566 1438.377303 11: seq: 1e, clock clock=453710095
Receive: 53 1439.362479 1439.361999 11: seq: 1f, clock clock=502953495
Receive: 54 1440.008039 1439.361999 13: seq: 1f, stats count=56 sum=28699 sumsq=204250
Receive: 55 1440.346698 1440.346542 11: seq: 10, clock clock=552169862
Receive: 56 1441.331759 1441.331581 11: seq: 11, clock clock=601421713
Receive: 57 1442.316766 1442.316560 11: seq: 12, clock clock=650672212
Receive: 58 1443.301009 1443.300852 11: seq: 13, clock clock=699885292
Receive: 59 1444.285514 1444.285356 11: seq: 14, clock clock=749110510
Receive: 60 1445.108025 1444.285356 13: seq: 14, stats count=56 sum=23404 sumsq=101334
Receive: 61 1445.270445 1445.270213 11: seq: 15, clock clock=798355243
Receive: 62 1446.254791 1446.254636 11: seq: 16, clock clock=847574271
Receive: 63 1447.239117 1447.238967 11: seq: 17, clock clock=896790531
Receive: 64 1448.224223 1448.223699 11: seq: 18, clock clock=946040679
Receive: 65 1449.208550 1449.208404 11: seq: 19, clock clock=995261527
Receive: 66 1450.108128 1449.208404 13: seq: 19, stats count=55 sum=26043 sumsq=165163
Receive: 67 1450.193105 1450.192949 11: seq: 1a, clock clock=1044489862
Receive: 68 1451.177862 1451.177712 11: seq: 1b, clock clock=1093727906
Receive: 69 1452.162429 1452.162280 11: seq: 1c, clock clock=1142956187
Receive: 70 1453.147086 1453.146934 11: seq: 1d, clock clock=1192188764
Receive: 71 1454.131949 1454.131743 11: seq: 1e, clock clock=1241431194
Receive: 72 1455.119155 1455.118990 11: seq: 1f, clock clock=1290791580
Receive: 73 1455.119171 1455.118990 13: seq: 1f, stats count=56 sum=26584 sumsq=183859
Receive: 74 1456.104227 1456.103970 11: seq: 10, clock clock=1340042843
Receive: 75 1457.088252 1457.088098 11: seq: 11, clock clock=1389246981
Receive: 76 1458.072641 1458.072487 11: seq: 12, clock clock=1438466505
Receive: 77 1459.057121 1459.056951 11: seq: 13, clock clock=1487689333
Receive: 78 1460.042164 1460.041994 11: seq: 14, clock clock=1536941605
Receive: 79 1460.208068 1460.041994 13: seq: 14, stats count=56 sum=22484 sumsq=101910
Receive: 80 1461.026841 1461.026585 11: seq: 15, clock clock=1586174533
Receive: 81 1462.012306 1462.011786 11: seq: 16, clock clock=1635447214
Receive: 82 1462.996689 1462.996465 11: seq: 17, clock clock=1684667538
Receive: 83 1463.981787 1463.981514 11: seq: 18, clock clock=1733920205
Receive: 84 1464.966856 1464.966598 11: seq: 19, clock clock=1783172860
Receive: 85 1465.308046 1464.966598 13: seq: 19, stats count=56 sum=26269 sumsq=152447
Receive: 86 1465.951800 1465.951650 11: seq: 1a, clock clock=1832424189
Receive: 87 1466.936994 1466.936840 11: seq: 1b, clock clock=1881683870
Receive: 88 1467.921148 1467.921000 11: seq: 1c, clock clock=1930891497
Receive: 89 1468.905551 1468.905309 11: seq: 1d, clock clock=1980109781
Receive: 90 1469.889939 1469.889783 11: seq: 1e, clock clock=2029330752
Receive: 91 1470.308053 1469.889783 13: seq: 1e, stats count=55 sum=22980 sumsq=101800
Receive: 92 1470.874999 1470.874843 11: seq: 1f, clock clock=2078584040
Receive: 93 1471.859737 1471.859581 11: seq: 10, clock clock=2127820792
Receive: 94 1472.843960 1472.843747 11: seq: 11, clock clock=2177030882
Receive: 95 1473.828584 1473.828264 11: seq: 12, clock clock=2226258946
Receive: 96 1474.812953 1474.812678 11: seq: 13, clock clock=2275477034
Receive: 97 1475.308148 1474.812678 13: seq: 13, stats count=55 sum=27907 sumsq=191729
Receive: 98 1475.797463 1475.797174 11: seq: 14, clock clock=2324702793
Receive: 99 1476.587558 1476.587193 12: seq: 15, shutdown clock=2364204219 static_string_id=Command request
Starting Klippy...
Args: ['/home/biqu/klipper/klippy/klippy.py', '/home/biqu/printer_data/config/printer.cfg', '-I', '/home/biqu/printer_data/comms/klippy.serial', '-l', '/home/biqu/printer_data/logs/klippy.log', '-a', '/home/biqu/printer_data/comms/klippy.sock']
Git version: 'v0.11.0-241-gffb5105b'
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ?
Python: '3.9.2 (default, Feb 28 2021, 17:03:44) \n[GCC 10.2.1 20210110]'
Start printer at Sun Aug 20 17:10:48 2023 (1692551448.3 47.3)
===== Config file =====
[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancels the current print.
	Usage: CANCEL_PRINT
rename_existing = _KM_CANCEL_PRINT_BASE
gcode = 
	_KM_CHECK_IS_PRINTING
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=cancelling RESET_STACK=1
	SET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{True}"
	PRINT_END
	_KM_CANCEL_PRINT_BASE
	{% if printer.pause_resume.is_paused %}
	RESTORE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE MOVE=0
	{% endif %}
	CLEAR_PAUSE
	_KM_APPLY_PRINT_OFFSET RESET=1
	{% if 'virtual_sdcard' in printer and not printer.virtual_sdcard.is_active %}
	SDCARD_RESET_FILE
	{% endif %}

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
variable_restore_idle_timeout = 0
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set idle_timeout = client.idle_timeout|default(0) %}
	
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE={printer[printer.toolhead.extruder].target}
	
	{% if idle_timeout > 0 %}
	SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
	SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
	{% endif %}
	PAUSE_BASE
	_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
variable_last_extruder_temp = 0
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move = client.speed_move|default(velocity) %}
	
	
	{% if printer['gcode_macro PAUSE'].restore_idle_timeout > 0 %}
	SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro PAUSE'].restore_idle_timeout}
	{% endif %}
	M109 S{last_extruder_temp}
	_CLIENT_EXTRUDE
	RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	_KM_CHECK_IS_PRINTING
	{% set pause_next_layer =
	printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE | default(1) | int != 0 %}
	{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VALUE="{
	{ 'enable': False, 'call': MACRO }}" VARIABLE=pause_next_layer
	GCODE_AT_LAYER COMMAND="{MACRO|replace('\"','\\\"')
	}" CANCEL="{0 if ENABLE else 1}" LAYER="next"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	_KM_CHECK_IS_PRINTING
	{% set pause_at_layer =
	printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	
	{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined else
	params.LAYER is defined %}
	{% set LAYER = params.LAYER |
	default((pause_at_layer.layer|int,
	printer.print_stats.info.current_layer|int + 1)|max)%}
	{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}
	
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{
	{ 'enable': False, 'layer': 0, 'call': MACRO }}"
	{% if ENABLE and pause_at_layer.enable %}
	
	GCODE_AT_LAYER COMMAND="{pause_at_layer.call|replace('\"','\\\"')
	}" CANCEL="{1}" LAYER="{pause_at_layer.layer}"
	{% endif %}
	
	GCODE_AT_LAYER COMMAND="{MACRO|replace('\"','\\\"')
	}" CANCEL="{0 if ENABLE else 1}" LAYER="{LAYER}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = _KM_SET_PRINT_STATS_INFO
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	_KM_SET_PRINT_STATS_INFO {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.extruder.can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[gcode_macro _km_options]
variable_load_length = 90.0
variable_menu_temperature = [
	{'name' : 'PLA',  'extruder' : 200.0, 'bed' : 60.0},
	{'name' : 'PETG', 'extruder' : 230.0, 'bed' : 85.0},
	{'name' : 'ABS',  'extruder' : 245.0, 'bed' : 110.0, 'chamber' : 60}]
variable_start_purge_length = 50
variable_start_extruder_probing_temp = 150
variable_park_x = 200.0
variable_park_y = 200.0
gcode = 

[gcode_macro bed_mesh_calibrate_fast]
description = Wraps BED_MESH_CALIBRATE, scaling probe count to specified area.
	Usage: See Klipper documentation.
gcode = 
	
	BED_MESH_CHECK ABORT=1
	
	
	{% set calibrate_cmd =
	(printer["gcode_macro list_macros"].macros.bed_mesh_calibrate|
	default(["bed_mesh_calibrate"],True))[-1] %}
	
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set probe_mesh_padding = km.probe_mesh_padding %}
	{% set probe_min_count = km.probe_min_count %}
	{% set probe_count_scale = km.probe_count_scale %}
	{% set bed_mesh = printer.configfile.settings.bed_mesh %}
	
	
	{%if "mesh_radius" not in bed_mesh and
	"MESH_RADIUS" not in params %}
	{% set safe_min_x = bed_mesh.mesh_min[0] %}
	{% set safe_min_y = bed_mesh.mesh_min[1] %}
	{% set safe_max_x = bed_mesh.mesh_max[0] %}
	{% set safe_max_y = bed_mesh.mesh_max[1] %}
	
	
	{% if "MESH_MIN" in params %}
	{% set mesh_min_x = (params.MESH_MIN.split(",")[0]|float -
	probe_mesh_padding, safe_min_x)|max %}
	{% set mesh_min_y = (params.MESH_MIN.split(",")[1]|float -
	probe_mesh_padding, safe_min_y)|max %}
	{% else %}
	{% set mesh_min_x = safe_min_x %}
	{% set mesh_min_y = safe_min_y %}
	{% endif %}
	{% if "MESH_MAX" in params %}
	{% set mesh_max_x = (params.MESH_MAX.split(",")[0]|float +
	probe_mesh_padding, safe_max_x)|min %}
	{% set mesh_max_y = (params.MESH_MAX.split(",")[1]|float +
	probe_mesh_padding, safe_max_y)|min %}
	{% else %}
	{% set mesh_max_x = safe_max_x %}
	{% set mesh_max_y = safe_max_y %}
	{% endif %}
	
	{% set probe_count = bed_mesh.probe_count if not params.PROBE_COUNT else
	params.PROBE_COUNT.split(",")|map('int')|list %}
	
	{% if "PROBE_COUNT" not in params %}
	{% set max_x_probes = probe_count[0] %}
	{% set max_y_probes = probe_count[-1] %}
	
	{% set x_probes = (max_x_probes * (mesh_max_x - mesh_min_x) /
	(safe_max_x - safe_min_x) * probe_count_scale)
	| round(0) | int %}
	{% set x_probes = ((x_probes, probe_min_count)|max, max_x_probes)|min %}
	
	{% set y_probes = (max_y_probes * (mesh_max_y - mesh_min_y ) /
	(safe_max_y - safe_min_y) * probe_count_scale )
	| round(0) | int %}
	{% set y_probes = ((y_probes, probe_min_count)|max, max_y_probes)|min %}
	
	{% if x_probes > 6 and y_probes < 4 %}
	{% set y_probes = 4 %}
	{% elif y_probes > 6 and x_probes < 4 %}
	{% set x_probes = 4 %}
	{% endif %}
	{% set probe_count = [x_probes,y_probes] %}
	{% elif probe_count|length == 1 %}
	{% set dummy = probe_count.append(probe_count[0]) %}
	{% endif %}
	
	
	
	
	
	
	
	{% if "relative_reference_index" in bed_mesh %}
	{% set row = (bed_mesh.relative_reference_index / bed_mesh.probe_count[0]
	)|int%}
	{% set rrf_x = (((safe_max_x - safe_min_x) /
	(bed_mesh.probe_count[0] - 1))|round(2, 'floor')) *
	(bed_mesh.relative_reference_index %
	bed_mesh.probe_count[-1]) %}
	{% if row % 2 %}
	{% set rrf_x = safe_max_x - rrf_x %}
	{% else %}
	{% set rrf_x = safe_min_x + rrf_x %}
	{% endif %}
	{% set rrf_y = (((safe_max_y - safe_min_y) /
	(bed_mesh.probe_count[-1] - 1))|round(2, 'floor')) *
	row + safe_min_x %}
	{% set x_dist = (mesh_max_x - mesh_min_x) / (probe_count[0] - 1) %}
	{% set y_dist = (mesh_max_y - mesh_min_y) / (probe_count[1] - 1) %}
	{% set rrf = {'x':0, 'y':0, 'dist':safe_max_x**2+safe_max_y**2,'pos':0} %}
	{% for row in range(probe_count[1])%}
	{% for col in range(probe_count[0])%}
	{% if row % 2 %}
	{% set x = mesh_max_x - col * x_dist %}
	{% else %}
	{% set x = mesh_min_x + col * x_dist %}
	{% endif %}
	{% set y = mesh_min_y + row * y_dist %}
	{% set dist = ((x - rrf_x)**2 + (y - rrf_y)**2)**0.5 %}
	{% if dist < rrf.dist %}
	{% set dummy = rrf.__setitem__("dist", dist) %}
	{% set dummy = rrf.__setitem__("x", x) %}
	{% set dummy = rrf.__setitem__("y", y) %}
	{% set dummy = rrf.__setitem__("pos", row * probe_count[1] + col) %}
	{% endif %}
	{% endfor %}
	{% endfor %}
	{% if rrf.x != rrf_x or rrf.y != rrf_y %}
	{action_respond_info("relative_reference_index remapped to"
	" %d (%.2f,%.2f) from %d (%.2f,%.2f)" %
	(rrf.pos, rrf.x, rrf.y,
	bed_mesh.relative_reference_index, rrf_x, rrf_y))}
	{% endif %}
	{% set dummy = params.__setitem__("RELATIVE_REFERENCE_INDEX", rrf.pos) %}
	{% endif %}
	
	{% set dummy = params.__setitem__("MESH_MIN", mesh_min_x~","~mesh_min_y) %}
	{% set dummy = params.__setitem__("MESH_MAX", mesh_max_x~","~mesh_max_y) %}
	{% set dummy = params.__setitem__("PROBE_COUNT", probe_count|join(',')) %}
	
	{% if probe_count[0] > 6 or probe_count[1]|default(0) > 6 %}
	{% set dummy = params.__setitem__("ALGORITHM", "bicubic") %}
	{% endif %}
	
	{% if "MESH_MIN" in params or "MESH_MAX" in params %}
	BED_MESH_CHECK {rawparams}
	{% endif %}
	{% else %}
	
	{% set dummy = params.__delitem__("MESH_MIN") %}
	{% set dummy = params.__delitem__("MESH_MAX") %}
	{% endif %}
	
	{% if "MESH_MIN" in params or "MESH_MAX" in params %}
	BED_MESH_CHECK ABORT=1{%for k in params%}{' '~k~'="'~params[k]~'"'}{%
	endfor%}
	{% endif %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=meshing
	{calibrate_cmd}{%for k in params%}{' '~k~'="'~params[k]~'"'}{%endfor%}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro bed_mesh_check]
description = Warns if bed_mesh config may generate an invalid mesh.
	Usage: BED_MESH_CHECK [MESH_MIN=<x,y>] [MESH_MAX=<x,y>] [ABORT=<0|1>]
gcode = 
	{% if printer.bed_mesh is defined %}
	{% set action = action_respond_info if params.ABORT|default(0)|int == 0 else
	action_raise_error %}
	{% set settings = printer.configfile.settings %}
	{% set x_min = settings.stepper_x.position_min %}
	{% set y_min = settings.stepper_y.position_min %}
	{% set x_max = settings.stepper_x.position_max %}
	{% set y_max = settings.stepper_y.position_max %}
	
	{% set label = "[bed_mesh] config" %}
	{% if "MESH_MIN" in params %}
	{% set label = "BED_MESH_CALIBRATE params" %}
	{% set mesh_min_x = params.MESH_MIN.split(",")[0]|float %}
	{% set mesh_min_y = params.MESH_MIN.split(",")[1]|float %}
	{% else %}
	{% set mesh_min_x = settings.bed_mesh.mesh_min[0] %}
	{% set mesh_min_y = settings.bed_mesh.mesh_min[1] %}
	{% endif %}
	{% if "MESH_MAX" in params %}
	{% set label = "BED_MESH_CALIBRATE params" %}
	{% set mesh_max_x = params.MESH_MAX.split(",")[0]|float %}
	{% set mesh_max_y = params.MESH_MAX.split(",")[1]|float %}
	{% else %}
	{% set mesh_max_x = settings.bed_mesh.mesh_max[0] %}
	{% set mesh_max_y = settings.bed_mesh.mesh_max[1] %}
	{% endif %}
	
	{% if "bltouch" in settings %}
	{% set x_offset = settings.bltouch.x_offset %}
	{% set y_offset = settings.bltouch.y_offset %}
	{% set probe = "bltouch" %}
	{% elif "probe" in settings %}
	{% set x_offset = settings.probe.x_offset %}
	{% set y_offset = settings.probe.y_offset %}
	{% set probe = "probe" %}
	{% else %}
	{% set x_offset = 0.0 %}
	{% set y_offset = 0.0 %}
	{% endif %}
	
	{% set output = [] %}
	{% set warn =
	"* mesh_%s (%f, %f) adjusted by " ~ probe ~
	".%s_offset (%f) can move out of range for "
	"stepper_%s.position_%s (%f)." %}
	{% if x_offset > 0 and (mesh_min_x - x_offset) < x_min %}
	{% set dummy = output.append(warn % ('min', mesh_min_x, mesh_min_y,
	'x', x_offset, 'x', 'min', x_min)) %}
	{% elif x_offset < 0 and (mesh_max_x - x_offset) > x_max %}
	{% set dummy = output.append(warn % ('max', mesh_max_x, mesh_max_y,
	'x', x_offset, 'x', 'max', x_max)) %}
	{% endif %}
	{% if y_offset > 0 and (mesh_min_y - y_offset) < y_min %}
	{% set dummy = output.append(warn % ('min', mesh_min_x, mesh_min_y,
	'y', y_offset, 'y', 'min', y_min)) %}
	{% elif y_offset < 0 and (mesh_max_y - y_offset) > y_max %}
	{% set dummy = output.append(warn % ('max', mesh_max_x, mesh_max_y,
	'y', y_offset, 'y', 'max', y_max)) %}
	{% endif %}
	
	{% if output %}
	{ action(
	"Warning: The following issue(s) were detected in your " ~ label ~
	":\n" ~ output|join("\n")) }
	{% endif %}
	{% endif %}

[gcode_macro _apply_bed_surface_offset]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% if surfaces.active %}
	SET_SURFACE_ACTIVE SURFACE={surfaces.active}
	{% endif %}

[gcode_macro _init_surfaces]
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% if "bed_surfaces" in printer.save_variables.variables %}
	{% set old_surfaces = printer.save_variables.variables.bed_surfaces %}
	{% else %}
	{% set old_surfaces = { 'active' : '', 'available' : {} } %}
	{% endif %}
	{% set settings = printer.configfile.settings %}
	{% set new_probe_z = (settings.probe | default(settings.bltouch) |
	default(settings.smart_effector) | default({})
	).z_offset|default(0.0)|float %}
	{% set new_endstop_z = (settings.stepper_z | default({})).position_endstop |
	default(0.0)|float %}
	{% if 'endstop_z' not in old_surfaces %}
	{% set dummy = old_surfaces.__setitem__('endstop_z', new_endstop_z) %}
	{% endif %}
	{% if 'probe_z' not in old_surfaces %}
	{% set dummy = old_surfaces.__setitem__('probe_z', new_probe_z) %}
	{% endif %}
	{% set surfaces = { 'active' : '', 'available' : {},
	'endstop_z' : old_surfaces.endstop_z,
	'probe_z' : old_surfaces.probe_z } %}
	{% for s in km.bed_surfaces %}
	{% set s = s.split()|join(' ')|lower %}
	{% if s|length > km.bed_surface_max_name_length or
	s|list|select("in", " \r\n\"\'")|list %}
	{action_raise_error('Invalid surface name "%s". Name must be %d or fewer '
	'characters and must not include space or quotation characters'
	| format(s, km.bed_surface_max_name_length))}
	{% endif %}
	{% if s in old_surfaces.available %}
	{% set dummy = surfaces.available.__setitem__(s,
	old_surfaces.available[s]) %}
	{% else %}
	{% set dummy = surfaces.available.__setitem__(s, {'offset' : 0.0}) %}
	{% endif %}
	{% endfor %}
	{% if old_surfaces.active in surfaces.available %}
	{% set dummy = surfaces.__setitem__('active', old_surfaces.active) %}
	{% elif km.bed_surfaces %}
	{% set dummy = surfaces.__setitem__('active', km.bed_surfaces[0]|lower) %}
	{% endif %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	_APPLY_BED_SURFACE_OFFSET
	{% if new_probe_z != surfaces.probe_z or
	new_endstop_z != surfaces.endstop_z %}
	{ action_respond_info(
	'Z probe offset or endstop position changed. Run ADJUST_SURFACE_OFFSETS '
	'to adjust the offset for all saved surfaces by the change differential, '
	'or run ADJUST_SURFACE_OFFSETS IGNORE=1 to hide this message without '
	'making changes.') }
	{% endif %}

[gcode_macro adjust_surface_offsets]
description = Adjusts surface offsets to account for changes in the Z endstop
	position or probe Z offset.
	Usage: ADJUST_SURFACE_OFFSETS [IGNORE]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% set settings = printer.configfile.settings %}
	{% set new_probe_z = (settings.probe | default(settings.bltouch) |
	default(settings.smart_effector) | default({})
	).z_offset|default(0.0)|float %}
	{% set new_endstop_z = (settings.stepper_z | default({})).position_endstop |
	default(0.0)|float %}
	{% set diff = (surfaces.probe_z - new_probe_z +
	surfaces.endstop_z - new_endstop_z)|round(6) %}
	{% if not params.IGNORE|default(0)|int %}
	{% for s in surfaces.available %}
	{% set offset = (surfaces.available[s].offset - diff)|round(6) %}
	{% set dummy = surfaces.available.__setitem__(s, {'offset' : offset}) %}
	{% endfor %}
	{ action_respond_info("All bed surfaces now adjusted by %1.4f"|
	format(diff))}
	{% elif diff != 0 %}
	{ action_respond_info("Status cleared without adjustment") }
	{% endif %}
	{% set dummy = surfaces.__setitem__('endstop_z', new_endstop_z| round(6)) %}
	{% set dummy = surfaces.__setitem__('probe_z', new_probe_z|round(6)) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"

[gcode_macro set_surface_offset]
description = Sets the offset for a surface and moves the toolhead (if homed).
	Usage: SET_SURFACE_OFFSET [OFFSET=<offset>] [SURFACE=<surface>]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}
	{% if SURFACE not in surfaces.available %}
	{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }
	{% endif %}
	{% set active = surfaces.available[SURFACE] %}
	
	{% set OFFSET = params.OFFSET|default(active.offset)|float %}
	{% if OFFSET != active.offset %}
	{% set dummy = surfaces.available[SURFACE].__setitem__("offset", OFFSET) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	{% if SURFACE == surfaces.active %}
	_km_set_gcode_offset_base Z="{OFFSET}" MOVE={
	1 if printer.toolhead.homed_axes == 'xyz' else 0}
	{% endif %}
	{% endif %}
	{ action_respond_info("Bed surface: %s Offset: %.3f"
	| format(SURFACE, OFFSET)) }
	
	{% set dummy = None if True else "
	{% set dummy = params.SURFACE|default(active surface) %}
	{% set dummy = params.OFFSET|default(none)|float %}
	" %}

[gcode_macro set_surface_active]
description = Sets the active bed surface and moves the toolhead (if homed). If
	no SURFACE argument is present the available surfaces are listed and the
	active one is preceded by a "*".
	Usage: SET_SURFACE_ACTIVE [SURFACE=<surface>]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% if "SURFACE" in params %}
	{% set SURFACE = params.SURFACE|lower %}
	{% if SURFACE not in surfaces.available %}
	{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }
	{% endif %}
	{% if SURFACE != surfaces.active %}
	{% set dummy = surfaces.__setitem__("active", SURFACE) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	{% endif %}
	{% if surfaces.available[SURFACE].offset !=
	printer.gcode_move.homing_origin.z %}
	_km_set_gcode_offset_base Z="{surfaces.available[SURFACE].offset
	}" MOVE={1 if printer.toolhead.homed_axes == 'xyz' else 0}
	{% endif %}
	{action_respond_info("Active bed surface: %s; offset: %.3f"
	| format(SURFACE, surfaces.available[SURFACE].offset))}
	{% else %}
	{% set output = [] %}
	{% for s in surfaces.available|list|sort %}
	{% set dummy = output.append("%s&nbsp;%s - offset: %.3f"
	| format("*" if s == surfaces.active else "&nbsp;",
	s, surfaces.available[s].offset)) %}
	{% endfor %}
	{action_respond_info(output|join('\n'))}
	{% endif %}
	
	{% set dummy = None if True else "
	{% set dummy = params.SURFACE|default(none) %}
	" %}

[gcode_macro set_gcode_offset]
description = Wraps SET_GCODE_OFFSET to update the current bed sheet offset.
	Usage: SET_GCODE_OFFSET [X=<pos>|X_ADJUST=<adjust>]
	[Y=<pos>|Y_ADJUST=<adjust>]
	[Z=<pos>|Z_ADJUST=<adjust>]
	[MOVE=1 [MOVE_SPEED=<speed>]]
rename_existing = _KM_SET_GCODE_OFFSET_BASE
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% if surfaces.active and
	not printer["gcode_macro _km_save_state"].is_ephemeral %}
	{% set Z = params.Z|default(0.0)|float|round(6) %}
	{% set Z_ADJUST = params.Z_ADJUST|default(0.0)|float %}
	{% if 'Z' in params and
	Z != surfaces.available[surfaces.active].offset %}
	{% set dummy = surfaces.available[surfaces.active].__setitem__("offset",
	Z) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	{% elif Z_ADJUST != 0.0 %}
	{% set dummy = surfaces.available[surfaces.active].__setitem__(
	"offset", (Z_ADJUST + printer.gcode_move.homing_origin.z)|round(6)) %}
	SAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"
	{% endif %}
	{% endif %}
	_km_set_gcode_offset_base{% for k in params%}{' '~k~'="'~params[k]~'"'
	}{% endfor %}

[gcode_macro make_surface_mesh]
description = Generates and saves a mesh to automatically load in PRINT_START.
	Usage: MAKE_SURFACE_MESH [SURFACE=<surface>] [BED=<probing temperature>]
	[EXTRUDER=<probing temperature>]
	[MESH_MULTIPLIER=<integer multiple of mesh density>]
	[bed_mesh_calibrate parameters]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}
	{% if SURFACE not in surfaces.available %}
	{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }
	{% endif %}
	{% set dummy = params.__setitem__('PROFILE', SURFACE) %}
	{% set BED = params.BED|default(70) | int %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set EXTRUDER = params.EXTRUDER|default(km.start_extruder_probing_temp) |
	int %}
	{% set MESH_MULTIPLIER = (params.MESH_MULTIPLIER|default(2)|int, 1)|max %}
	
	M104 S{EXTRUDER}
	M140 S{BED}
	G28
	
	
	{% if surfaces.available[SURFACE].offset !=
	printer.gcode_move.homing_origin.z %}
	_km_set_gcode_offset_base Z="{surfaces.available[SURFACE].offset
	}" MOVE=1
	{% endif %}
	
	
	{% if BED > 0 %}
	{action_respond_info("Stabilizing bed at %iC" | format(BED,))}
	_KM_PARK_IF_NEEDED HEATER=heater_bed RANGE=0.5
	{% if BED < (printer.heater_bed.temperature - 0.2) %}
	M190 R{BED}
	G4 P{((km.start_bed_heat_delay * 10, 30000)|min,
	km.start_bed_heat_delay)|max}
	{% else %}
	G4 P{km.start_bed_heat_delay}
	{% endif %}
	M190 R{BED}
	{% endif %}
	
	{% if EXTRUDER > 0 %}
	_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=2
	M109 R{km.start_extruder_probing_temp}
	{% endif %}
	
	{% if km.start_home_z_at_temp and not bed_at_target %}
	G28 Z
	{% endif %}
	
	
	
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count
	if not params.PROBE_COUNT else
	params.PROBE_COUNT.split(",")|map('int')|list %}
	{% set dummy = params.__setitem__('PROBE_COUNT',(
	MESH_MULTIPLIER * (probe_count[0] - 1) + 1,
	MESH_MULTIPLIER * (probe_count[-1] - 1) + 1,)|join(',')) %}
	
	BED_MESH_CLEAR
	BED_MESH_CALIBRATE_FAST {%
	for k in params|reject('in',['BED','SURFACE'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor %}
	SAVE_CONFIG
	
	
	{% set dummy = None if True else "
	{% set dummy = params.MESH_MULTIPLIER|default(2) %}
	{% set dummy = params.SURFACE|default(active surface) %}
	" %}

[gcode_macro load_surface_mesh]
description = Attempts to load a mesh associated with the specified surface.
	Usage: LOAD_SURFACE_MESH [SURFACE=<surface>]
gcode = 
	{% set surfaces = printer.save_variables.variables.bed_surfaces %}
	{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}
	{% if SURFACE != surfaces.active %}
	SET_SURFACE_ACTIVE SURFACE={SURFACE}
	{% endif %}
	
	{% if SURFACE in printer.bed_mesh.profiles %}
	{% set mesh = printer.bed_mesh.profiles[SURFACE].mesh_params %}
	{% set default = printer.configfile.settings.bed_mesh %}
	
	{% if mesh.min_x <= (default.mesh_min[0] + 0.5) and
	mesh.min_y <= (default.mesh_min[1] + 0.5) and
	mesh.max_x >= (default.mesh_max[0] - 0.5) and
	mesh.max_y >= (default.mesh_max[1] - 0.5) and
	mesh.x_count >= default.probe_count[0] and
	mesh.y_count >= default.probe_count[-1] %}
	
	BED_MESH_PROFILE LOAD={SURFACE}
	{action_respond_info("Loaded mesh: %s" | format(SURFACE,))}
	{% endif %}
	{% endif %}

[gcode_macro m300]
description = Emits and audible beep.
	Usage: M300 [P<duration>] [S<frequency>]
gcode = 
	{% set settings = printer.configfile.settings %}
	{% if "output_pin beeper" in printer %}
	{% set P = (params.P|default(100)|int, 0)|max %}
	{% set S = (params.S|default(1000)|int, 1)|max %}
	SET_PIN PIN=beeper VALUE={% if settings["output_pin beeper"].pwm %}{
	settings["output_pin beeper"].scale|default(1.0) * 0.5
	} CYCLE_TIME={ 1.0 / S }{% else %}1{% endif %}
	G4 P{P}
	SET_PIN PIN=beeper VALUE=0
	{% else %}
	{action_respond_info(
	"M300 is disabled. To enable create an [output_pin beeper] config.")}
	{% endif %}

[gcode_macro set_draw_params]
description = Sets the default parameters used by DRAW_LINE_TO.
	Usage: SET_DRAW_PARAMS [HEIGHT=<mm>] [WIDTH=<mm>] [FEEDRATE=<mm/m>]
variable_height = 0.2
variable_width = 0.0
variable_feedrate = 1200
gcode = 
	{% set dparams = printer["gcode_macro set_draw_params"] %}
	{% for k in params %}
	{% set kl = k|lower %}
	{% if kl in dparams %}
	{% if dparams[kl] is float %}
	{% set v = params[k]|float %}
	{% elif dparams[kl] is integer %}
	{% set v = params[k]|int %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=set_draw_params VARIABLE={kl} VALUE="{v}"
	{% endif %}
	{% endfor %}

[gcode_macro draw_line_to]
description = Extrudes a line of filament at the specified height and width from
	the current coordinate to the supplied XY coordinate. (The height is used only
	to calculate the extrusion volume.)
	Usage: DRAW_LINE_TO [X=<pos>] [Y=<pos>] [HEIGHT=<mm>] [WIDTH=<mm>]
	[FEEDRATE=<mm/m>]
gcode = 
	{% set dparams = printer["gcode_macro set_draw_params"] %}
	{% set position = printer.gcode_move.gcode_position %}
	{% set X = params.X|default(position.x)|float %}
	{% set Y = params.Y|default(position.y)|float %}
	{% set HEIGHT = params.HEIGHT|default(dparams.height)|float %}
	{% set WIDTH = params.WIDTH|default(dparams.width)|float %}
	{% set FEEDRATE = params.FEEDRATE|default(dparams.feedrate)|int %}
	
	{% set distance = ((X - position.x) ** 2 + (Y - position.y) ** 2) ** 0.5 %}
	
	{% set filament_area = 3.14159 *
	(printer.configfile.settings[
	printer.toolhead.extruder].filament_diameter ** 2) / 4 %}
	{% set E = distance * ((WIDTH * HEIGHT) / filament_area) %}
	
	
	_KM_SAVE_GCODE_STATE NAME=_KM_PURGE
	G90
	G92 E0.0
	G1 X{"%.3f" % X} Y{"%.3f" % Y} E{"%.5f" % E} F{FEEDRATE}
	_KM_RESTORE_GCODE_STATE NAME=_KM_PURGE MOVE=0

[gcode_macro draw_purge_line]
description = Purges the specified length of filament as a line (or rows of
	lines) in front of the supplied print area. If no print area is specified the
	purge lines are drawn at the front edge of the maximum printable area. If no
	printable area is set it defaults to the XY axis limits.
	Usage: DRAW_PURGE_LINE [PRINT_MIN=<X,Y>] [PRINT_MAX=<X,Y>] [HEIGHT=<mm>]
	[WIDTH=<mm>] [LENGTH=<mm>]
gcode = 
	
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set origin = printer.gcode_move.homing_origin %}
	{% set dummy = km.__setitem__('print_min', (km.print_min[0] - origin.x,
	km.print_min[1] - origin.y)) %}
	{% set dummy = km.__setitem__('print_max', (km.print_max[0] - origin.x,
	km.print_max[1] - origin.y)) %}
	
	{% if "PRINT_MIN" in params %}
	{% set PRINT_MIN = (
	(params.PRINT_MIN.split(",")[0]|float, km.print_min[0])|max,
	(params.PRINT_MIN.split(",")[1]|float, km.print_min[1])|max
	) %}
	{% else %}
	{% set PRINT_MIN = km.print_min %}
	{% endif %}
	{% if "PRINT_MAX" in params %}
	{% set PRINT_MAX = (
	(params.PRINT_MAX.split(",")[0]|float, km.print_max[0])|min,
	(params.PRINT_MAX.split(",")[1]|float, km.print_max[1])|min
	) %}
	{% else %}
	{% set PRINT_MAX = km.print_max %}
	{% endif %}
	{% set extruder = printer.toolhead.extruder|string %}
	{% set HEIGHT = params.HEIGHT|default(
	printer.configfile.settings[extruder].nozzle_diameter * 0.625)|float %}
	{% set WIDTH = params.WIDTH|default(
	printer.configfile.settings[extruder].nozzle_diameter * 1.25)|float %}
	{% set LENGTH = params.LENGTH|default(km.start_purge_length)|float %}
	
	{% set dparams = printer["gcode_macro set_draw_params"] %}
	{% set filament_area = 3.14159 *
	(printer.configfile.settings[extruder].filament_diameter ** 2) / 4 %}
	{% set purge_length = (LENGTH * filament_area) / (WIDTH * HEIGHT) %}
	{% set printable_length = PRINT_MAX[0] - PRINT_MIN[0] %}
	{% set purge_rows = (purge_length / printable_length)|round(0,'ceil')|int %}
	{% set printable_inset = (printable_length - purge_length / purge_rows) / 2 %}
	{% set PRINT_MIN = (PRINT_MIN[0] + printable_inset, PRINT_MIN[1]) %}
	{% set PRINT_MAX = (PRINT_MAX[0] - printable_inset, PRINT_MAX[1]) %}
	
	{% set y_start = (km.print_min[1], PRINT_MIN[1] - km.start_purge_clearance -
	(purge_rows + 0.5) * WIDTH )|max %}
	G90
	
	G1 X{"%.3f" % (PRINT_MIN[0] - 30, km.print_min[0])|max} Y{
	"%.3f" % (y_start - 10, km.print_min[1])|max} F{km.travel_speed_xy}
	
	G1 X{"%.3f" % (PRINT_MIN[0] - 2, km.print_min[0])|max} Y{"%.3f" % y_start} Z{
	"%.4f" % HEIGHT} F{km.travel_speed_xy}
	
	G92 E0.0
	G1 E{"%.3f" % km.start_purge_prime_length} F{km.load_priming_speed}
	G92 E0.0
	
	G1 X{"%.3f" % PRINT_MIN[0]} F{km.travel_speed_xy}
	{% for n in range(purge_rows - 1) %}
	{% set x_pos = PRINT_MIN[0] if n % 2 else PRINT_MAX[0] %}
	DRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{
	WIDTH * n + y_start}"
	DRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{
	WIDTH * (n + 1) + y_start}"
	{% endfor %}
	{% set x_pos = PRINT_MAX[0] if purge_rows % 2 else PRINT_MIN[0] %}
	DRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{
	WIDTH * (purge_rows - 1) + y_start}"
	G92 E0.0

[gcode_macro _check_fan_params]
gcode = 
	{% set MAXIMUM = params.MAXIMUM|default(
	printer["gcode_macro set_fan_scaling"].maximum)|int %}
	{% set MINIMUM = params.MINIMUM|default(
	printer["gcode_macro set_fan_scaling"].minimum)|int %}
	
	{% if params.SCALE and params.SCALE|float <= 0 %}
	{ action_raise_error("SCALE must be a positive value.") }
	{% elif MINIMUM < 0 or MINIMUM > 255 %}
	{ action_raise_error("MINIMUM must be between 0 and 255.") }
	{% elif MAXIMUM < 0 or MAXIMUM > 255 %}
	{ action_raise_error("MAXIMUM must be between 0 and 255.") }
	{% elif params.SPEED and (params.SPEED|int < 0 or params.SPEED|int > 255) %}
	{ action_raise_error("SPEED must be between 0 and 255.") }
	{% elif params.BOOST and (params.BOOST|int < 0 or params.BOOST|int > 255) %}
	{ action_raise_error("BOOST must be between 0 and 255.") }
	{% elif MINIMUM > MAXIMUM %}
	{ action_raise_error("MINIMUM must be less than or equal to MAXIMUM.") }
	{% endif %}

[gcode_macro set_fan_scaling]
description = Sets fan scaling factors applied to M106 command. If a speed is
	provided it will be adjusted according to the scaling parameters.
	Usage: SET_FAN_SCALING [SCALE=<scale>] [BOOST=<boost>] [MAXIMUM=<max>]
	[MINIMUM=<min>] [SPEED=<speed>]
variable_scale = 1.0
variable_boost = 0
variable_minimum = 0
variable_maximum = 255
variable_real_speed = 0
gcode = 
	_CHECK_FAN_PARAMS{% for k in params %}{' '~k~'='~params[k]}{% endfor %}
	{% set SCALE = params.SCALE|default(scale)|float %}
	{% set BOOST = params.BOOST|default(boost)|float %}
	{% set MAXIMUM = params.MAXIMUM|default(maximum)|int %}
	{% set MINIMUM = params.MINIMUM|default(minimum)|int %}
	{% set SPEED = params.SPEED|default(real_speed)|int %}
	
	{% if SCALE != 1.0 or BOOST != 0 or MAXIMUM != 255 or MINIMUM != 0 %}
	{action_respond_info("Fan: Scale: %.2f Minimum:%i Maximum: %i Speed: %i"|
	format(SCALE, MINIMUM, MAXIMUM, SPEED))}
	{% endif %}
	
	
	{% if params|length > 0 %}
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=scale VALUE="{SCALE}"
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=boost VALUE="{BOOST}"
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=minimum VALUE="{MINIMUM}"
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=maximum VALUE="{MAXIMUM}"
	
	M106 S{SPEED}
	{% endif %}
	
	{% set dummy = None if True else "
	{% set dummy = params.SCALE|default(1.0)|float %}
	{% set dummy = params.BUMP|default(0)|int %}
	{% set dummy = params.MAXIMUM|default(255)|int %}
	{% set dummy = params.MINIMUM|default(0)|int %}
	{% set dummy = params.SPEED|default(current speed)|int %}
	" %}

[gcode_macro reset_fan_scaling]
description = Clears all fan scaling factors.
	Usage: RESET_FAN_SCALING
gcode = 
	SET_FAN_SCALING SCALE=1.0 BOOST=0 MAXIMUM=255 MINIMUM=0

[gcode_macro m106]
description = Wraps M106 to implement scaling overrides.
rename_existing = M106.6245197
gcode = 
	{% set S = params.S|default(255)|int %}
	{% set scale = printer["gcode_macro set_fan_scaling"] %}
	SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=real_speed VALUE="{S}"
	M106.6245197 S{((((S + scale.boost) * scale.scale) | round | int,
	scale.minimum) | max, scale.maximum) | min}

[gcode_macro _load_unload]
gcode = 
	{% set saved_extruder = printer.toolhead.extruder %}
	{% set EXTRUDER = params.EXTRUDER|default(saved_extruder)|lower %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% set BEEPS = params.BEEPS|default(8)|int if "output_pin beeper" in printer
	else 0 %}
	{% set default_minimum = km.load_min_temp if km.load_min_temp else
	(printer.configfile.settings[EXTRUDER].min_extrude_temp + 5) %}
	{% if 'MINIMUM' in params %}
	{% set MINIMUM = params.MINIMUM|int %}
	
	{% elif printer.pause_resume.is_paused and printer[EXTRUDER].target == 0 and
	printer["gcode_macro resume"].saved_extruder_temp %}
	{% set MINIMUM = printer["gcode_macro resume"].saved_extruder_temp %}
	
	{% elif printer[EXTRUDER].target > default_minimum %}
	{% set MINIMUM = printer[EXTRUDER].target %}
	{% else %}
	{% set MINIMUM = default_minimum %}
	{% endif %}
	{% if MINIMUM < printer.configfile.settings[EXTRUDER].min_extrude_temp %}
	{ action_raise_error("Extrude below minimum temp.") }
	{% elif printer.pause_resume.is_paused %}
	
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"
	{% endif %}
	{% set SPEED = params.SPEED|default(km.load_speed)|int %}
	{% set priming_length = km.load_priming_length %}
	{% set LENGTH = params.LENGTH|default(km.load_length)|float - priming_length%}
	{% if LENGTH < 0 %}
	{% set priming_length = (priming_length + LENGTH, 0)|max %}
	{% set LENGTH = 0 %}
	{% endif %}
	SAVE_GCODE_STATE NAME=_KM_LOAD_UNLOAD
	{% if EXTRUDER != saved_extruder%}
	ACTIVATE_EXTRUDER EXTRUDER={EXTRUDER}
	{% endif %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	{% if not printer.extruder.can_extrude or
	printer[EXTRUDER].target < default_minimum %}
	{action_respond_info("Preheating %s to %d" | format(EXTRUDER, MINIMUM))}
	M109 S{MINIMUM}
	{% endif %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS={"filament_load"
	if params.LOAD|int else "filament_unload"}
	M83
	{% set priming_speed = (km.load_priming_speed, SPEED)|min %}
	{% if params.LOAD|int %}
	G0 E{LENGTH} F{SPEED}
	G0 E{priming_length} F{priming_speed}
	G0 E{'%.4f' % -printer["gcode_macro resume"].saved_e} F{km.load_speed}
	{% else %}
	{% set pre_prime_distance = 5.0 %}
	{% set shaping_moves = 5 %}
	{% set shaping_distance = (shaping_moves * (1 + shaping_moves)/20) %}
	
	G0 E{pre_prime_distance} F{SPEED}
	G4 P500
	G0 E{'%.4f' % -(priming_length - shaping_distance)} F{SPEED}
	
	
	{% for i in range(1, shaping_moves + 1) %}
	G0 E2 F{priming_speed}
	G0 E-{2 + (0.1 * i)} F{priming_speed}
	{% endfor %}
	
	G0 E{'%.4f' % -(LENGTH + pre_prime_distance)} F{SPEED}
	{% endif %}
	RESTORE_GCODE_STATE NAME=_KM_LOAD_UNLOAD
	
	
	{% for i in range(BEEPS) %}
	M300 P100
	G4 P200
	{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro LOAD_FILAMENT]
description = Loads filament to the extruder.
	Usage: LOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]
	[EXTRUDER=<extruder>] [MINIMUM=<temperature>]
	[BEEPS=<beep count on completion>]
gcode = 
	_LOAD_UNLOAD LOAD=1{% for k in params
	%}{' '~k~'="'~params[k]~'"'}{% endfor %}
	
	
	{% set dummy = None if True else "
	M109
	{% set dummy = params.LENGTH|default(variable_load_length)|float %}
	{% set dummy = params.SPEED|default(variable_load_speed)|float %}
	{% set dummy = params.EXTRUDER|default(current extruder) %}
	{% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}
	{% set dummy = params.BEEPS|default(10)|int %}
	" %}

[gcode_macro UNLOAD_FILAMENT]
description = Unloads filament from the extruder.
	Usage: UNLOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]
	[EXTRUDER=<extruder>] [MINIMUM=<temperature>]
	[BEEPS=<beep count on completion>]
gcode = 
	_LOAD_UNLOAD LOAD=0{% for k in params
	%}{' '~k~'="'~params[k]~'"'}{% endfor %}
	
	
	{% set dummy = None if True else "
	M109
	{% set dummy = params.LENGTH|default(variable_load_length)|float %}
	{% set dummy = params.SPEED|default(variable_load_speed)|float %}
	{% set dummy = params.EXTRUDER|default(default extruder) %}
	{% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}
	{% set dummy = params.BEEPS|default(10)|int %}
	" %}

[gcode_macro _pause_inner_m700]
gcode = 
	{% set extruder = "extruder" ~ params.T|replace('0', '')
	if "T" in params else printer.toolhead.extruder %}
	{% if extruder != printer.toolhead.extruder%}
	ACTIVATE_EXTRUDER EXTRUDER={extruder}
	{% endif %}
	
	{% set z_param = (' Z="%f"' % params.Z) if 'Z' in params else "" %}
	
	{% if printer.idle_timeout.state|string == "Printing" %}
	PAUSE B="{0}" P=2{z_param}
	{% elif not printer.pause_resume.is_paused%}
	PARK B="{0}" P=2{z_param}
	{% endif %}

[gcode_macro m701]
description = Pauses/parks the toolhead then loads filament to the extruder.
	Usage: M701 [L<distance>] [Z<pos>] [T<extruder>]
gcode = 
	{% if 'U' in params %}
	{% if not 'L' in params %}
	RESPOND TYPE=error MSG="Argument \"U\" substituted for missing \"L\"."
	{% set dummy = params.__setitem__("L", params.U) %}
	{% else %}
	RESPOND TYPE=error MSG="Invalid argument \"U\" ignored."
	{% endif %}
	{% endif %}
	
	_PAUSE_INNER_M700 {% for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	LOAD_FILAMENT BEEPS="{10}" LENGTH={
	params.L|default(printer["gcode_macro _km_globals"].load_length)|float}

[gcode_macro m702]
description = Pauses/parks the toolhead then unloads filament from the extruder.
	Usage: M702 [U<distance>] [Z<pos>] [T<extruder>]
gcode = 
	{% if 'L' in params %}
	{% if not 'U' in params %}
	RESPOND TYPE=error MSG="Argument \"L\" substituted for missing \"U\"."
	{% set dummy = params.__setitem__("U", params.L) %}
	{% else %}
	RESPOND TYPE=error MSG="Invalid argument \"L\" ignored."
	{% endif %}
	{% endif %}
	
	_PAUSE_INNER_M700 {% for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	UNLOAD_FILAMENT BEEPS="{10}" LENGTH={
	params.U|default(printer["gcode_macro _km_globals"].load_length)|float}

[gcode_macro _km_globals]
variable_bed_surface_max_name_length = 10
variable_bed_surfaces = ['default']
variable_load_length = 90.0
variable_load_min_temp = 0
variable_load_priming_length = 20.0
variable_load_priming_speed = 200
variable_load_speed = 1200
variable_menu_show_octoprint = True
variable_menu_show_sdcard = True
variable_menu_temperature = [
	{'name' : 'PLA',  'extruder' : 200, 'bed' : 60},
	{'name' : 'PETG', 'extruder' : 230, 'bed' : 85},
	{'name' : 'ABS',  'extruder' : 245, 'bed' : 110}]
variable_park_x = 0.0
variable_park_y = 0.0
variable_park_z = 20.0
variable_print_min = ()
variable_print_max = ()
variable_pressure_advance_scale = -1.0
variable_probe_mesh_padding = 5.0
variable_probe_min_count = 3
variable_probe_count_scale = 1.0
variable_start_bed_heat_delay = 2000
variable_start_bed_heat_overshoot = 2.0
variable_start_clear_adjustments_at_end = True
variable_start_end_park_y = 0.0
variable_start_extruder_preheat_scale = 0.5
variable_start_extruder_probing_temp = 0
variable_start_home_z_at_temp = True
variable_start_level_bed_at_temp = True
variable_start_purge_clearance = 2.0
variable_start_purge_length = 0.0
variable_start_purge_prime_length = 12.0
variable_start_quad_gantry_level_at_temp = True
variable_start_random_placement_max = 0
variable_start_random_placement_padding = 10.0
variable_start_try_saved_surface_mesh = False
variable_start_z_tilt_adjust_at_temp = True
variable_travel_speed_xy = 3000
variable_travel_speed_z = 600
description = Initializes our globals, including any _km_options overrides.
gcode = 
	
	
	
	
	
	
	
	
	{% set required_sections = {"heater_bed" : None,
	"extruder" : None,
	"gcode_macro _km_options" : None,
	"idle_timeout" : ("gcode", "_KM_IDLE_TIMEOUT"),
	"pause_resume" : None,
	"respond" : None,
	"save_variables" : None,
	"virtual_sdcard" :
	("on_error_gcode", "CANCEL_PRINT")
	} %}
	{% set warn_removed = {
	"start_extruder_set_target_before_level" :
	"The start_extruder_set_target_before_level option has been removed. "
	"Use the start_extruder_probing_temp option instead to set a fixed "
	"probing temperature.",
	"start_gcode_before_print" :
	"The start_gcode_before_print option has been removed. The same effect "
	"can now be achieved by inserting custom gcode before the "
	"_PRINT_START_PHASE_PURGE line in your slicer's start gcode, or by "
	"wrapping the _PRINT_START_PHASE_PURGE macro. See the Slicer "
	"Configuration section in the readme for more information.",
	"velocity_decel_scale" :
	"The velocity_decel_scale option has been removed. Klipper's input "
	"shaping provides a superior mechanism for improving print quality "
	"at higher speeds.",
	} %}
	{% set output = [] %}
	{% for s in required_sections %}
	{% set f = required_sections[s][0] if required_sections[s] else None %}
	{% set v = required_sections[s][1] if required_sections[s] else None %}
	{% if s not in printer.configfile.config %}
	{% set dummy = output.append("Missing [%s] section.\n" | format(s)) %}
	{% elif f and
	(v not in printer.configfile.config[s][f]|default("")|upper) %}
	{% set dummy = output.append("Missing %s in %s for [%s] section.\n"
	| format(v, f, s)) %}
	{% endif %}
	{% endfor %}
	{% if output %}
	{ action_emergency_stop((
	"required printer.cfg section(s) missing:\n"
	~ output | join("\n")) ~
	"See readme: https://github.com/jschuh/klipper-macros\x23klipper-setup")
	}
	{% endif %}
	
	
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_level_bed_at_temp VALUE="{
	1 if printer.bed_mesh is defined else 0}"
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_quad_gantry_level_at_temp VALUE="{
	1 if printer.quad_gantry_level is defined else 0}"
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_z_tilt_adjust_at_temp VALUE="{
	1 if printer.z_tilt is defined else 0}"
	{% set toolhead = printer.toolhead %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=print_min VALUE="{
	(toolhead.axis_minimum.x, toolhead.axis_minimum.y)}"
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=print_max VALUE="{
	(toolhead.axis_maximum.x, toolhead.axis_maximum.y)}"
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_end_park_y VALUE="{
	toolhead.axis_maximum.y}"
	{% set settings = printer.configfile.settings %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_home_z_at_temp VALUE="{
	1 if ("stepper_z" in settings and
	settings.stepper_z.endstop_pin.split()|join("")|lower ==
	"probe:z_virtual_endstop") else 0}"
	
	{% set options = printer["gcode_macro _km_options"] %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	
	{% if options.park_x|default("")|string|lower == "min" %}
	{% set dummy = options.__setitem__("park_x",
	printer.configfile.settings.stepper_x.position_min) %}
	{% elif options.park_x|default("")|string|lower == "max" %}
	{% set dummy = options.__setitem__("park_x",
	printer.configfile.settings.stepper_x.position_max) %}
	{% endif %}
	{% if options.park_y|default("")|string|lower == "min" %}
	{% set dummy = options.__setitem__("park_y",
	printer.configfile.settings.stepper_y.position_min) %}
	{% elif options.park_y|default("")|string|lower == "max" %}
	{% set dummy = options.__setitem__("park_y",
	printer.configfile.settings.stepper_y.position_max) %}
	{% endif %}
	{% if options.start_end_park_y|default("")|string|lower == "min" %}
	{% set dummy = options.__setitem__("start_end_park_y",
	printer.configfile.settings.stepper_y.position_min) %}
	{% elif options.start_end_park_y|default("")|string|lower == "max" %}
	{% set dummy = options.__setitem__("start_end_park_y",
	printer.configfile.settings.stepper_y.position_max) %}
	{% endif %}
	{% if options.park_z|default("")|string|lower == "min" %}
	{% set dummy = options.__setitem__("park_z",
	printer.configfile.settings.stepper_z.position_min) %}
	{% elif options.park_z|default("")|string|lower == "max" %}
	{% set dummy = options.__setitem__("park_z",
	printer.configfile.settings.stepper_z.position_max) %}
	{% endif %}
	
	
	{% for k in options %}
	{% if k not in km %}
	{% if k in warn_removed %}
	{action_respond_info(warn_removed[k])}
	{% else %}
	{% set dummy = output.append("%s is not valid for _KM_OPTIONS." |
	format(k)) %}
	{% endif %}
	{% elif km[k] is string %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k
	} VALUE="'{options[k]|replace('\\','\\\\')|replace('\'','\\\'')
	|replace('\"','\\\"')}'"
	{% elif km[k] is float %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k
	} VALUE="{options[k]|float}"
	{% elif km[k] is integer or km[k] is boolean %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k} VALUE="{options[k]|int}"
	{% elif km[k] is mapping %}
	{% if options[k] is not mapping %}
	{% set dummy = output.append("%s requires a mapping type." |
	format(k)) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k
	} VALUE="{options[k]|replace('\"','\\\"')}"
	{% elif km[k] is sequence %}
	{% if options[k] is not sequence %}
	{% set dummy = output.append("%s requires a sequence type." |
	format(k)) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k
	} VALUE="{options[k]|replace('\"','\\\"')}"
	{% else %}
	{% set dummy = output.append("%s is not a valid type for _KM_OPTIONS." |
	format(k)) %}
	{% endif %}
	{% endfor %}
	
	{% if "homing_override" in printer.configfile.config %}
	{% for l in printer.configfile.config.homing_override.gcode.split("\n") %}
	{% if " g28 " in (" " ~ l.split("\x23")[0].split(";")[0]|lower ~ " ") %}
	{% set dummy = output.append(
	"G28 in [homing_override] gcode. Replace with G28.6245197 to "
	"fix recursive macro call.\n"
	"See readme: https://github.com/jschuh/klipper-macros\x23g28") %}
	{% endif %}
	{% endfor %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=check_km_config VARIABLE=load_errors VALUE="{
	output|replace('\"','\\\"')}"
	M400

[delayed_gcode INIT_GLOBALS]
initial_duration = 1
gcode = 
	LIST_MACROS SILENT=1
	_KM_GLOBALS
	
	CHECK_KM_CONFIG
	_INIT_SURFACES
	BED_MESH_CHECK
	
	SET_DRAW_PARAMS WIDTH="{printer.configfile.settings.extruder.nozzle_diameter}"
	
	_KM_OPTIONS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready

[gcode_macro check_km_config]
variable_load_errors = []
description = Checks global variables and throws an error on any invalid values.
	Does nothing if the config has no errors.
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set toolhead = printer.toolhead %}
	{% set output = load_errors %}
	{% if km.park_x > toolhead.axis_maximum.x or
	km.park_x < toolhead.axis_minimum.x %}
	{% set dummy = output.append("park_x is invalid.") %}
	{% endif %}
	{% if km.park_y > toolhead.axis_maximum.y or
	km.park_y < toolhead.axis_minimum.y %}
	{% set dummy = output.append("park_y is invalid.") %}
	{% endif %}
	{% if km.park_z > toolhead.axis_maximum.z or
	km.park_z < toolhead.axis_minimum.z %}
	{% set dummy = output.append("park_z is invalid.") %}
	{% endif %}
	{% if km.print_max[0] > toolhead.axis_maximum.x or
	km.print_max[1] > toolhead.axis_maximum.y %}
	{% set dummy = output.append("print_max is invalid.") %}
	{% endif %}
	{% if km.print_min[0] < toolhead.axis_minimum.x or
	km.print_min[1] < toolhead.axis_minimum.y %}
	{% set dummy = output.append("print_min is invalid.") %}
	{% endif %}
	{% if km.start_extruder_preheat_scale > 1.0 or
	km.start_extruder_preheat_scale < 0.0 %}
	{% set dummy = output.append("extruder_preheat_scale is invalid.") %}
	{% endif %}
	{% if km.load_length >
	printer.configfile.settings["extruder"].max_extrude_only_distance %}
	{% set dummy = output.append(
	"load_length exceeds max_extrude_only_distance.") %}
	{% endif %}
	{% if km.load_length < km.load_priming_length %}
	{% set dummy = output.append(
	"load_length is shorter than load_priming_length.") %}
	{% endif %}
	{% if km.load_length < 0.0 %}
	{% set dummy = output.append("load_length is negative.") %}
	{% endif %}
	{% if km.load_priming_length < 0.0 %}
	{% set dummy = output.append("load_priming_length is negative.") %}
	{% endif %}
	
	
	{% if output %}
	{ action_raise_error(output|sort|join('\nError: ')) }
	{% endif %}
	M400

[gcode_macro kmvars]
description = Lists global variables used by klipper-macros.
	Usage: KMVARS [SEARCH=<search_string>]
gcode = 
	{% set SEARCH = params.SEARCH|default(params.S|default(""))|lower %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set output = [] %}
	{% for k in km %}
	{% if SEARCH in k %}
	{% set dummy = output.append(k ~ ": " ~ km[k]) %}
	{% endif %}
	{% endfor %}
	{ action_respond_info(output|sort|join('\n')) }

[gcode_macro check_macro_docs]
description = Lists macros lacking proper documentation.
	Usage: CHECK_MACRO_DOCS [USAGE=<0|1>] [HIDDEN=<1|0>] [RENAMED=<1|0>]
gcode = 
	{% set USAGE = params.USAGE|default(0)|int %}
	{% set HIDDEN = params.HIDDEN|default(0)|int %}
	{% set RENAMED = params.RENAMED|default(0)|int %}
	{% set output = [] %}
	{%set config = printer.configfile.config %}
	{% for k in config|sort %}
	{% if k.startswith("gcode_macro") %}
	{% set name = k.split()[1] %}
	{% set desc = config[k].description|default("") %}
	{% set is_renamed = config[k].rename_existing|default("") %}
	{% if (not desc or (USAGE and not "Usage: "~name.upper() in desc)) and
	(HIDDEN or not name.startswith('_')) and (RENAMED or is_renamed) %}
	{% set dummy = output.append("%s&nbsp;%s: missing %s."
	| format("*" if is_renamed else "&nbsp;", name,
	"description" if not desc else "usage")) %}
	{% endif %}
	{% endif %}
	{% endfor %}
	{action_respond_info(output|join("\n"))}

[gcode_macro listvars]
description = Lists per-macro variables with a name containing SEARCH. This is
	useful for debugging macros by allowing you to probe printer state. Be very
	careful, however, as an overly broad SEARCH parameter can take a long time
	to process and potentially hang or crash klipper.
	Usage: LISTVARS SEARCH=<search_string>
gcode = 
	
	{% if 'SEARCH' not in params and 'S' not in params %}
	{ action_raise_error("Must provide a SEARCH parameter.") }
	{% endif %}
	{% set SEARCH = params.SEARCH|default(params.S)|lower %}
	{% set ns = namespace() %}
	{% set output = [] %}
	{% for item in printer %}
	{% if item is not string %}
	{% set ns.path = ['printer', "[%s]" % (item|string), ''] %}
	{% elif ' ' in item %}
	{% set ns.path = ['printer', "['%s']" % (item), ''] %}
	{% else %}
	{% set ns.path = ['printer.', item, ''] %}
	{% endif %}
	
	{% if SEARCH in ns.path|lower %}
	{% set dummy = output.append(ns.path|join) %}
	{% endif %}
	
	{% if printer[item].items() %}
	{% for childkey, child in printer[item].items() recursive %}
	{% set ns.path = ns.path[:loop.depth|int + 1] %}
	{% if childkey is not string %}
	{% set null = ns.path.append("[%s]" % (childkey|string)) %}
	{% elif ' ' in childkey %}
	{% set null = ns.path.append("['%s']" % (childkey)) %}
	{% else %}
	{% set null = ns.path.append(".%s" % (childkey)) %}
	{% endif %}
	
	{% if child is mapping  %}
	{loop(child.items())}
	{% else %}
	{% if SEARCH in ns.path|lower %}
	{% set dummy = output.append("%s : %s" % (ns.path|join, child)) %}
	{% endif %}
	{% endif %}
	{% endfor %}
	{% endif %}
	{% endfor %}
	{ action_respond_info(output|join("\n")) }

[gcode_macro list_macros]
description = Lists registered macros (and optionally show variable state).
	Usage: LISTVARS SEARCH=<search_string> VARS=<0|1> SILENT=<0|1>
variable_macros = {}
gcode = 
	
	{% if not macros %}
	{% set renames = {} %}
	{% for k in printer.configfile.config %}
	{% if k.lower().startswith("gcode_macro") and
	printer.configfile.config[k].rename_existing %}
	{% set name = k.split(None, 1)[1] | lower %}
	{% set dummy = renames.__setitem__(name,
	[printer.configfile.config[k].rename_existing|lower] +
	renames[name]|default([])) %}
	{% endif %}
	{% endfor %}
	{% for k in printer %}
	{% if k.lower().startswith("gcode_macro") %}
	{% set name = k.split(None, 1)[1] | lower %}
	{% set dummy = macros.__setitem__(name, renames[name]|default([])) %}
	{% endif %}
	{% endfor %}
	{% endif %}
	
	{% if params.SILENT|default(0)|int == 0 %}
	_LIST_MACROS_DISPLAY {rawparams}
	{% endif %}

[gcode_macro _list_macros_display]
gcode = 
	{% set SEARCH = params.SEARCH | default(params.S) | default("") | lower %}
	{% set VARS = params.VARS | default(params.V) | default(0) | int != 0 %}
	
	{% set macros = printer["gcode_macro list_macros"].macros %}
	{% set output = [] %}
	{% for k in macros %}
	{% if SEARCH in k | lower %}
	{% set line = k ~ ((" (renames: %s)" % (macros[k]|join(","))) if macros[k]
	else "") %}
	{% set outvars = [] %}
	{% if VARS %}
	{% for v in printer["gcode_macro " ~ k] | sort %}
	{% set dummy = outvars.append("\n* %s: %s" %
	(v, printer["gcode_macro " ~ k][v]|string)) %}
	{% endfor %}
	{% endif %}
	{% set dummy = output.append(line + outvars | join("")) %}
	{% endif %}
	{% endfor %}
	{ action_respond_info(output | sort | join("\n")) }

[gcode_macro set_heater_temperature_scaled]
gcode = 
	{% set HEATER = params.HEATER.lower() %}
	{% set TARGET = params.TARGET|default(0.0)|float %}
	{% set scaled_heaters =
	printer["gcode_macro set_heater_scaling"].scaled_heaters %}
	{% if HEATER in scaled_heaters %}
	{% set scales = scaled_heaters[HEATER] %}
	{% set dummy = scales.__setitem__("real_target", TARGET) %}
	{%if TARGET > 0.0 %}
	{% set TARGET = (((TARGET + scales.bump) * scales.scale, scales.minimum)
	| max, scales.maximum)|min %}
	{% endif %}
	{% endif %}
	SET_HEATER_TEMPERATURE HEATER="{HEATER}" TARGET={TARGET}

[gcode_macro temperature_wait_scaled]
gcode = 
	{% set SENSOR = params.SENSOR.lower() %}
	{% set heater = SENSOR if not SENSOR.startswith("heater_generic") else
	SENSOR.split()[1] %}
	{% set scaled_heaters =
	printer["gcode_macro set_heater_scaling"].scaled_heaters %}
	{% if heater in scaled_heaters %}
	{% set scales = scaled_heaters[heater] %}
	{% if "MINIMUM" in params and MINIMUM > 0.0 %}
	{% set MINIMUM = (((MINIMUM + scales.bump) * scales.scale, scales.minimum)
	| max, scales.maximum)|min %}
	{% endif %}
	{% if "MAXIMUM" in params and MAXIMUM > 0.0 %}
	{% set MAXIMUM = (((MAXIMUM + scales.bump) * scales.scale, scales.minimum)
	| max, scales.maximum)|min %}
	{% endif %}
	{% else %}
	{% set settings = printer.configfile.settings[SENSOR] %}
	{% set MINIMUM = params.MINIMUM|default(settings.min_temp) %}
	{% set MAXIMUM = params.MAXIMUM|default(settings.max_temp) %}
	{% endif %}
	{% if printer[sensor].temperature < MINIMUM or
	printer[sensor].temperature > MAXIMUM %}
	TEMPERATURE_WAIT SENSOR="{SENSOR}" MINIMUM={MINIMUM} MAXIMUM={MAXIMUM}
	{% endif %}

[gcode_macro _gcode_wait_wrapper_inner]
gcode = 
	
	
	{% set sensor = params.HEATER if params.HEATER in
	printer.heaters.available_heaters
	else ("heater_generic " ~ params.HEATER) %}
	{% set target = printer[sensor].target %}
	{% if 'R' in params and target > 0.0 %}
	{% set T = params.T|default("") %}
	M{params.M}.6245197 S{target} { (" T"~T) if T else "" }
	{% elif printer[sensor].temperature < target %}
	TEMPERATURE_WAIT SENSOR="{sensor}" MINIMUM={target}
	{% endif %}

[gcode_macro _gcode_wait_wrapper]
gcode = 
	{% set target = params.S | default(params.R | default(0))| float %}
	SET_HEATER_TEMPERATURE_SCALED HEATER="{params.HEATER}" TARGET={target}
	_GCODE_WAIT_WRAPPER_INNER{%
	for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}

[gcode_macro m109]
rename_existing = M109.6245197
gcode = 
	{% set extruder = "extruder" ~ params.T|replace('0', '')
	if "T" in params else printer.toolhead.extruder %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating
	_GCODE_WAIT_WRAPPER HEATER={extruder}{%
	for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro m190]
rename_existing = M190.6245197
gcode = 
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=bed_heating
	_GCODE_WAIT_WRAPPER HEATER=heater_bed {%
	for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro m191]
description = Sets chamber temperature (with wait for heating).
	Usage: M191 [S<temp>]
gcode = 
	
	{% if "R" in params %}
	{% set dummy = params.__setitem__("S", params.R) %}
	{% endif %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=chamber_heating
	_GCODE_WAIT_WRAPPER HEATER=chamber {%
	for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

[gcode_macro m104]
rename_existing = M104.6245197
gcode = 
	{% set extruder = "extruder" ~ params.T|replace('0', '')
	if "T" in params else printer.toolhead.extruder %}
	SET_HEATER_TEMPERATURE_SCALED HEATER={extruder} TARGET={params.S|default(0)}

[gcode_macro m140]
rename_existing = M140.6245197
gcode = 
	SET_HEATER_TEMPERATURE_SCALED HEATER=heater_bed TARGET={params.S|default(0)}

[gcode_macro m141]
description = Sets chamber temperature.
	Usage: M141 [S<temp>]
gcode = 
	SET_HEATER_TEMPERATURE_SCALED HEATER=chamber TARGET={params.S|default(0)}

[gcode_macro _check_heater_params]
gcode = 
	{% set HEATER = params.HEATER|lower %}
	{% set sensor = params.HEATER %}
	{% if HEATER not in printer.heaters.available_heaters %}
	{% set sensor = "heater_generic " ~ HEATER %}
	{% if sensor not in printer.heaters.available_heaters %}
	{ action_raise_error("The value '%s' is not valid for HEATER"
	| format(HEATER)) }
	{% endif %}
	{% endif %}
	{% set settings = printer.configfile.settings[sensor] %}
	{% set scaled_heaters =
	printer["gcode_macro set_heater_scaling"].scaled_heaters %}
	{% if HEATER is in scaled_heaters %}
	{% set scales = scaled_heaters[HEATER] %}
	{% else %}
	{% set scales = { "scale": 1.0, "bump": 0.0, "minimum": settings.min_temp,
	"maximum": settings.max_temp,
	"real_target": printer[sensor].target} %}
	{% endif %}
	{% set SCALE = params.SCALE|default(scales.scale)|float %}
	{% set BUMP = params.BUMP|default(scales.bump)|float %}
	{% set MINIMUM = params.MINIMUM|default(scales.minimum)|float %}
	{% set MAXIMUM = params.MAXIMUM|default(scales.maximum)|float %}
	
	{% if SCALE <= 0 %}
	{ action_raise_error("SCALE must be a positive value.") }
	{% elif MINIMUM < settings.min_temp or MINIMUM > settings.max_temp %}
	{ action_raise_error("MINIMUM must be between %.1f and %.1f" |
	format(settings.min_temp, settings.max_temp)) }
	{% elif MAXIMUM < settings.min_temp or MAXIMUM > settings.max_temp %}
	{ action_raise_error("MAXIMUM must be between %.1f and %.1f" |
	format(settings.min_temp, settings.max_temp)) }
	{% elif MINIMUM >= MAXIMUM %}
	{ action_raise_error("MINIMUM must be less than MAXIMUM.") }
	{% elif "TARGET" in params and (params.TARGET|float < MINIMUM or
	params.TARGET|float > MAXIMUM) %}
	{ action_raise_error("TARGET must be between %.1f and %.1f" |
	format(settings.min_temp, settings.max_temp)) }
	{% endif %}

[gcode_macro set_heater_scaling]
description = Sets scaling parameters for heater. If a new target temperature is
	passed it will be adjusted to the scaling parameters.
	Usage: SET_HEATER_SCALING [HEATER=<heater>] [SCALE=<scale_factor>]
	[BUMP=<degrees>] [MAXIMUM=<degrees>]
	[MINIMUM=<degrees>] [TARGET=<temp>]
variable_scaled_heaters = {}
gcode = 
	
	{% if "HEATER" is not in params %}
	{% set output = [] %}
	{% for h in scaled_heaters %}
	{% set dummy = output.append(
	"%s: Scale: %.2f Bump: %.1f Minimum:%.1f Maximum: %.1f"
	| format(h, scaled_heaters[h].scale, scaled_heaters[h].bump,
	scaled_heaters[h].minimum, scaled_heaters[h].maximum)) %}
	{% endfor %}
	{% if output %}}{action_respond_info(output|join('\n'))}{% endif %}
	{% else %}
	
	{% set HEATER = params.HEATER.lower() %}
	{% set settings = printer.configfile.settings[HEATER] %}
	{% if HEATER is not in scaled_heaters %}
	{% set dummy = scaled_heaters.__setitem__(HEATER, {"scale": 1.0,
	"bump": 0.0, "minimum": settings.min_temp,
	"maximum": settings.max_temp,
	"real_target": printer[HEATER].target}) %}
	{% endif %}
	_CHECK_HEATER_PARAMS{% for k in params %}{' '~k~'='~params[k]}{% endfor %}
	{% set scales = scaled_heaters[HEATER] %}
	{% set SCALE = params.SCALE|default(scales.scale)|float %}
	{% set BUMP = params.BUMP|default(scales.bump)|float %}
	{% set MAXIMUM = params.MAXIMUM|default(scales.maximum)|float %}
	{% set MINIMUM = params.MINIMUM|default(scales.minimum)|float %}
	{% set TARGET = params.TARGET|default(scales.real_target)|float %}
	{% set dummy = scales.__setitem__("scale", SCALE) %}
	{% set dummy = scales.__setitem__("bump", BUMP) %}
	{% set dummy = scales.__setitem__("maximum", MAXIMUM) %}
	{% set dummy = scales.__setitem__("minimum", MINIMUM) %}
	{% set dummy = scales.__setitem__("real_target", TARGET) %}
	
	{% set settings = printer.configfile.settings[HEATER] %}
	{% if SCALE != 1.0 or BUMP != 0.0 or MINIMUM != settings.min_temp or
	MAXIMUM != settings.max_temp %}
	{% set dummy = scaled_heaters.__setitem__(HEATER, scales) %}
	{% else %}
	{% set dummy = scaled_heaters.__delitem__(HEATER) %}
	{% endif %}
	SET_HEATER_TEMPERATURE_SCALED HEATER={HEATER} TARGET={TARGET}
	{action_respond_info(
	"%s: Scale: %.2f Bump: %.1f Minimum:%.1f Maximum: %.1f Target: %.1f"
	| format(HEATER, SCALE, BUMP, MINIMUM, MAXIMUM, TARGET))}
	{% endif %}
	
	{% set dummy = None if True else "
	{% set dummy = params.HEATER|default(e.g. extruder) %}
	{% set dummy = params.SCALE|default(1.0)|float %}
	{% set dummy = params.BUMP|default(0.0)|float %}
	{% set dummy = params.MAXIMUM|default(max_temp)|float %}
	{% set dummy = params.MINIMUM|default(min_temp)|float %}
	{% set dummy = params.TARGET|default(current target)|float %}
	" %}

[gcode_macro reset_heater_scaling]
description = Clears scaling for heater (or all heaters if none specified).
	Usage: RESET_HEATER_SCALING [HEATER=<heater>]
gcode = 
	{% if "HEATER" in params %}
	{% set HEATER = params.HEATER.lower() %}
	{% if HEATER not in printer.heaters.available_heaters %}
	{ action_raise_error("The value '%s' is not valid for HEATER"
	| format(HEATER)) }
	{% endif %}
	{% set settings = printer.configfile.settings[HEATER] %}
	SET_HEATER_SCALING HEATER={HEATER
	} SCALE=1.0 BUMP=0.0 MINIMUM={settings.min_temp
	} MAXIMUM={settings.max_temp}
	{% else %}
	
	SET_GCODE_VARIABLE MACRO=set_heater_scaling VARIABLE=scaled_heaters VALUE={
	"{}"}
	{% endif %}

[gcode_macro _km_idle_timeout]
gcode = 
	{% if printer.pause_resume.is_paused %}
	{action_respond_info("Extruder powered down on idle timeout.")}
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{
	printer[printer.toolhead.extruder].target}"
	M104; Turn off extruder but leave the bed on.
	{% else %}
	TURN_OFF_HEATERS
	M107; turn off fan
	M84
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready
	{% endif %}

[gcode_macro _check_kinematic_limits]
gcode = 
	{% set toolhead = printer.toolhead %}
	{% if params.X and (params.X|float < toolhead.axis_minimum.x or
	params.X|float > toolhead.axis_maximum.x) %}
	{action_raise_error("X[%.3f] must be between %.3f and %.3f."
	| format(params.X|float, toolhead.axis_minimum.x,
	toolhead.axis_maximum.x))}
	{% elif params.Y and (params.Y|float < toolhead.axis_minimum.y or
	params.Y|float > toolhead.axis_maximum.y) %}
	{action_raise_error("Y[%.3f] must be between %.3f and %.3f."
	| format(params.Y|float, toolhead.axis_minimum.y,
	toolhead.axis_maximum.y))}
	{% elif params.Z and (params.Z|float < toolhead.axis_minimum.z or
	params.Z|float > toolhead.axis_maximum.z) %}
	{action_raise_error("Z[%.3f] must be between %.3f and %.3f."
	| format(params.Z|float, toolhead.axis_minimum.z,
	toolhead.axis_maximum.z))}
	{% elif params.E and (params.E|float|abs > printer.configfile.settings[
	"extruder"].max_extrude_only_distance) %}
	{action_raise_error("E[%.4f] exceeds max_extrude_only_distance[%.4f]."
	| format(params.E|float|abs, printer.configfile.settings[
	"extruder"].max_extrude_only_distance))}
	{% endif %}

[gcode_macro lazy_home]
description = Homes the specified axes. If lazy is true, already homed axes
	are skipped.
	Usage: LAZY_HOME [LAZY=<1|0>] [AXES=<axes_string>]
gcode = 
	
	LIST_MACROS SILENT=1
	_LAZY_HOME_INNER {rawparams}

[gcode_macro _lazy_home_inner]
gcode = 
	
	{% set G28 = (printer["gcode_macro list_macros"].macros.g28|
	default(["g28"],True))[-1] %}
	{% set axes = 'XYZ'|select('in', params.AXES|default("XYZ")|upper|list) %}
	{% if not axes %}
	{% set axes = 'XYZ' %}
	{% endif %}
	{% if params.LAZY|default(1)|int %}
	{% set axes = axes|reject('in', printer.toolhead.homed_axes|upper)|join() %}
	{% endif %}
	
	{% if axes %}
	_KM_PRINT_STATUS ACTION=PUSH_STATUS
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing
	{G28}{% for k in axes %}{' ' ~ k}{% endfor %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status
	{% endif %}

[gcode_macro g28]
description = Wraps the G28 command to add the Marlin "O" parameter so that
	already homed axes will not be homed again. See the Klipper documentation on
	G28 for the behavior of the other parameters.
	Usage: G28 [O] ...
rename_existing = G28.6245197
gcode = 
	{% set axes = 'XYZ'|select('in', params)|join() %}
	LAZY_HOME LAZY={('O' in params)|int}{%if axes%} AXES={axes}{%endif%}

[gcode_macro before_layer_change]
description = Add this to the "before layer change" input box in the slicer.
	Usage: BEFORE_LAYER_CHANGE HEIGHT=<current_height> LAYER=<current_layer>
gcode = 
	{% set height = params.HEIGHT|default(printer.toolhead.position.z)|float %}
	{% set layer = params.LAYER|default(-1)|int + 1 %}
	{% if height >= 0.0 and layer >= 0 %}
	SET_PRINT_STATS_INFO CURRENT_LAYER="{layer}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{height}"
	{% if printer["gcode_macro _km_layer_run"].clearance_z < height %}
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{
	height}"
	{% endif %}
	{% endif %}

[gcode_macro after_layer_change]
description = Add this to the "after layer change" input box in the slicer.
	Usage: AFTER_LAYER_CHANGE
gcode = 
	_KM_LAYER_RUN

[gcode_macro gcode_at_layer]
description = Schedules the specified g-code command to be run at the specified
	layer. LAYER=next will cause the command to run at the next layer change.
	Usage: GCODE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } COMMAND=<gcode>
	[CANCEL=<0|1>]
gcode = 
	{% set tot_layers = printer.print_stats.info.total_layer %}
	{% if params|length > 0 %}
	_KM_CHECK_IS_PRINTING
	
	{% set CANCEL = params.CANCEL|default(0)|int != 0 %}
	{% set COMMAND = params.COMMAND|default(None) %}
	{% if COMMAND %}
	{% set COMMAND = COMMAND.lstrip().split(None, 1) %}
	{% set COMMAND = " ".join([COMMAND[0]|upper] + COMMAND[1:]) %}
	{% endif %}
	
	{% if "LAYER" in params %}
	{% set cmd_container = "commands_layer" %}
	{% set cur_layer = printer.print_stats.info.current_layer|int %}
	{% if "HEIGHT" in params %}
	{action_raise_error("Conflicting HEIGHT and LAYER arguments provided.")}
	{% elif params.LAYER|string|lower == "next" %}
	{% set LAYER = cur_layer + 1 %}
	{% else %}
	{% set LAYER = params.LAYER|int %}
	{% endif %}
	{% if LAYER <= cur_layer %}
	{action_raise_error("LAYER[%i] must be above current print layer[%i]."
	| format(LAYER, cur_layer))}
	{% elif tot_layers and LAYER > tot_layers %}
	{action_raise_error("LAYER[%i] must not be above top layer[%i]."
	| format(LAYER, tot_layers))}
	{% endif %}
	{% set key = LAYER %}
	
	{% elif "HEIGHT" in params %}
	{% set cmd_container = "commands_height" %}
	{% set HEIGHT = params.HEIGHT|float %}
	{% set cur_height = printer["gcode_macro _km_layer_run"].cur_height %}
	{% if HEIGHT <= cur_height %}
	{action_raise_error(
	"HEIGHT[%.3f] must be above current print height[%.3f].")
	| format(HEIGHT, cur_height)}
	{% elif HEIGHT >= printer.toolhead.axis_maximum.z %}
	{action_raise_error(
	"HEIGHT[%.3f] must be below maximum Z height[%.3f].")
	| format(HEIGHT, printer.toolhead.axis_maximum.z)}
	{% endif %}
	{% set key = HEIGHT %}
	
	{% else %}
	{action_raise_error("No HEIGHT or LAYER argument provided.")}
	{% endif %}
	
	{% set commands = printer["gcode_macro _km_layer_run"][cmd_container] %}
	{% if key not in commands and not CANCEL %}
	{% set dummy = commands.__setitem__(key, []) %}
	{% endif %}
	
	{% if CANCEL %}
	{% if key in commands %}
	{% set pos = ("%i"|format(key)) if key is integer else
	("%.3fmm"|format(key)) %}
	{% if COMMAND %}
	{% set dummy = commands[key].remove(COMMAND) %}
	{% if commands[key]|length == 0 %}
	{% set dummy = commands.__delitem__(key) %}
	{% endif %}
	{action_respond_info("Cancelled %s %s:\n* %s" |
	format("layer" if k is integer else "height",
	pos, COMMAND))}
	{% else %}
	{% set dummy = commands.__delitem__(key) %}
	{action_respond_info("Cancelled all commands at %s %s." |
	format("layer" if k is integer else "height",
	pos))}
	{% endif %}
	{% endif %}
	{% elif not COMMAND %}
	{action_raise_error("No COMMAND argument provided.")}
	{% elif COMMAND in commands[key] %}
	{action_raise_error("Duplicate command previously scheduled.")}
	{% else %}
	{% set dummy = commands[key].append(COMMAND) %}
	{% set pos = ("%i"|format(key)) if key is integer else
	("%.3fmm"|format(key)) %}
	{action_respond_info("%s %s:\n* %s" |
	format("layer" if key is integer else "height",
	pos, COMMAND))}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE={cmd_container} VALUE="{
	commands|replace('\"','\\\"')}"
	_UPDATE_LAYER_COMPAT
	
	
	{% else %}
	{% set output = [] %}
	{% set commands = printer["gcode_macro _km_layer_run"].commands_layer %}
	{% for key in commands|list|sort %}
	{% set dummy = output.append("layer %i:" | format(key)) %}
	{% for c in commands[key] %}
	{% set dummy = output.append("* %s" | format(c)) %}
	{% endfor %}
	{% endfor %}
	{% set commands = printer["gcode_macro _km_layer_run"].commands_height %}
	{% for key in commands|list|sort %}
	{% set dummy = output.append("height %.3fmm:" | format(key)) %}
	{% for c in commands[key] %}
	{% set dummy = output.append("* %s" | format(c)) %}
	{% endfor %}
	{% endfor %}
	{action_respond_info(output|join('\n'))}
	{% endif %}

[gcode_macro _km_layer_run]
description = Runs pending commands for the current layer change.
	Usage: _KM_LAYER_RUN
variable_cur_height = 0.0
variable_clearance_z = 0.0
variable_commands_layer = {}
variable_commands_height = {}
gcode = 
	{% set cur_layer = printer.print_stats.info.current_layer %}
	{% for key in commands_layer | select("<=", cur_layer) | sort %}
	{action_respond_info("Executing scheduled commands at layer %d:\n%s" |
	format(key, commands_layer[key]|join('\n')))}
	{% for c in commands_layer[key] %}
	{c}
	{% endfor %}
	{% set dummy = commands_layer.__delitem__(key) %}
	{% endfor %}
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{
	commands_layer|replace('\"','\\\"')}"
	{% for key in commands_height | select("<=", cur_height) | sort %}
	{action_respond_info("Executing scheduled commands at height %.3f:\n%s" |
	format(key, commands_height[key]|join('\n')))}
	{% for c in commands_height[key] %}
	{c}
	{% endfor %}
	{% set dummy = commands_height.__delitem__(key) %}
	{% endfor %}
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{
	commands_height|replace('\"','\\\"')}"
	_UPDATE_LAYER_COMPAT

[gcode_macro init_layer_gcode]
description = Clears scheduled gcode commands and state for all layers.
	Usage: INIT_LAYER_GCODE LAYERS=<num>
gcode = 
	SET_PRINT_STATS_INFO TOTAL_LAYER="{params.LAYERS|int + 1}" CURRENT_LAYER="{0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"
	_UPDATE_LAYER_COMPAT

[gcode_macro _reset_layer_gcode]
description = Clears scheduled gcode commands and state for all layers.
	Usage: _RESET_LAYER_GCODE
gcode = 
	SET_PRINT_STATS_INFO TOTAL_LAYER="{0}" CURRENT_LAYER="{0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"
	_UPDATE_LAYER_COMPAT

[gcode_macro cancel_all_layer_gcode]
description = Clears all scheduled gcode commands.
	Usage: CANCEL_ALL_LAYER_GCODE
gcode = 
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"
	SET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"
	_UPDATE_LAYER_COMPAT

[gcode_macro _update_layer_compat]
gcode = 
	{% set next_layer = printer.print_stats.info.current_layer|int + 1 %}
	{% set commands_layer = printer["gcode_macro _km_layer_run"].commands_layer %}
	{% set keys = commands_layer | sort(reverse=True) %}
	
	{% set pause_next_layer = {'enable': False, 'call':
	printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer.call} %}
	{% if pause_next_layer.call in commands_layer[next_layer] | default([]) %}
	{% set dummy = pause_next_layer.__setitem__('enable', True) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{
	pause_next_layer|replace('\"','\\\"') }"
	
	
	{% set pause_at_layer = {'enable': False, 'layer': 0, 'call':
	printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer.call} %}
	{% if pause_next_layer.enable and
	pause_next_layer.call == pause_at_layer.call %}
	{% set keys = keys | reject("==", next_layer) %}
	{% endif %}
	
	
	
	
	{% for key in keys %}
	{% if pause_at_layer.call in commands_layer[key] %}
	{% set dummy = pause_at_layer.__setitem__('enable', True) %}
	{% set dummy = pause_at_layer.__setitem__('layer', key) %}
	{% endif %}
	{% endfor %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{
	pause_at_layer|replace('\"','\\\"') }"

[gcode_macro pause_next_layer]
description = Convenience macro to schedule the current print to pause at the
	next layer change. See PAUSE for additional arguments.
	Usage: PAUSE_NEXT_LAYER ...
gcode = 
	_CHECK_KINEMATIC_LIMITS{% for k in params%}{' ' ~k~ '=' ~ params[k]
	}{% endfor %}
	GCODE_AT_LAYER LAYER=NEXT COMMAND="PAUSE{% for k in params %}{
	' ' ~ k ~ '=' ~ params[k]}{% endfor %}"

[gcode_macro pause_at_layer]
description = Convenience macro to schedule the current print to pause at the
	specified layer change. LAYER=next will cause the command to run at the next
	layer change. See PAUSE for additional arguments.
	Usage: PAUSE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...
gcode = 
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	" %}
	{% set filtered_params = params|reject('in',['HEIGHT','LAYER'])|list|sort %}
	_CHECK_KINEMATIC_LIMITS{% for k in filtered_params%}{' ' ~k~ '=' ~ params[k]
	}{% endfor %}
	GCODE_AT_LAYER {% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor
	%} COMMAND="PAUSE{% for k in filtered_params %}{
	' ' ~ k ~ '=' ~ params[k]}{% endfor %}"

[gcode_macro speed_at_layer]
description = Convenience macro to schedule a feedrate adjustment at the
	specified layer change. LAYER=next will cause the command to run at the next
	layer change. (SPEED parameter behaves the same as the M220 S parameter.)
	Usage: SPEED_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } SPEED=<percentage>
gcode = 
	{% set SPEED = params.SPEED|default(0)|int %}
	{% if SPEED < 1 or SPEED > 500 %}
	{action_raise_error("SPEED[%i] parameter between 1 and 500 is required."
	% SPEED)}
	{% endif %}
	GCODE_AT_LAYER {% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor %} COMMAND="M220 S{SPEED|int}"
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	{% set dummy = params.SPEED|default(percentage)|int %}
	" %}

[gcode_macro flow_at_layer]
description = Convenience macro to schedule a flow percentage adjustment at the
	specified layer change. LAYER=next will cause the command to run at the next
	layer change. (FLOW parameter behaves the same as the M221 S parameter.)
	Usage: FLOW_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } FLOW=<percentage>
gcode = 
	{% set FLOW = params.FLOW|default(0)|int %}
	{% if FLOW < 1 or FLOW > 500 %}
	{action_raise_error("FLOW[%i] parameter between 1 and 500 is required."
	% FLOW)}
	{% endif %}
	GCODE_AT_LAYER {% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor %} COMMAND="M221 S{FLOW|int}"
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	{% set dummy = params.FLOW|default(percentage)|int %}
	" %}

[gcode_macro fan_at_layer]
description = Convenience macro to schedule a fan adjustment at the specified
	layer change. LAYER=next will cause the command to run at the next layer
	change. See SET_FAN_SCALING for additional arguments.
	Usage: FAN_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...
gcode = 
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	{% set dummy = params.SCALE|default(1.0)|float %}
	{% set dummy = params.BUMP|default(0)|int %}
	{% set dummy = params.MAXIMUM|default(0)|int %}
	{% set dummy = params.MINIMUM|default(255)|int %}
	{% set dummy = params.SPEED|default(current speed)|int %}
	" %}
	{% set filtered_params = params|reject('in',['HEIGHT','LAYER'])|list|sort %}
	{% if filtered_params|length == 0 %}
	{action_raise_error("No fan parameters provided.")}
	{% endif %}
	_CHECK_FAN_PARAMS{% for k in filtered_params %}{' '~k~'='~params[k]
	}{% endfor %}
	GCODE_AT_LAYER {% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor
	%} COMMAND="SET_FAN_SCALING{% for k in filtered_params %}{
	' ' ~ k ~ '=' ~ params[k]}{% endfor %}"

[gcode_macro heater_at_layer]
description = Convenience macro to schedule a heater adjustment at the specified
	layer change. LAYER=next will cause the command to run at the next layer
	change. See SET_HEATER_SCALING for additional arguments.
	Usage: HEATER_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...
gcode = 
	
	{% set dummy = None if True else "
	{% set dummy = params.LAYER|default(layer number)|float %}
	{% set dummy = params.HEIGHT|default(Z height)|int %}
	{% set dummy = params.HEATER|default(e.g. extruder) %}
	{% set dummy = params.SCALE|default(1.0)|float %}
	{% set dummy = params.BUMP|default(0.0)|float %}
	{% set dummy = params.MAXIMUM|default(max_temp)|float %}
	{% set dummy = params.MINIMUM|default(min_temp)|float %}
	{% set dummy = params.TARGET|default(current target)|float %}
	" %}
	{% set filtered_params = params|reject('in',['HEIGHT','LAYER'])|list|sort %}
	_CHECK_HEATER_PARAMS{% for k in filtered_params%}{' ' ~ k ~ '=' ~ params[k]
	}{% endfor %}
	GCODE_AT_LAYER{% for k in params|select('in',['HEIGHT','LAYER'])|list %}{
	' ' ~ k ~ '=' ~ params[k] }{% endfor
	%} COMMAND="SET_HEATER_SCALING{% for k in filtered_params %}{
	' ' ~ k ~ '=\\\"' ~ params[k]|replace('\\','\\\\')|replace('\'','\\\'')
	|replace('\"','\\\"') ~ '\\\"'
	}{% endfor %}"

[gcode_macro park]
description = Park the toolhead
	Usage: PARK [P=<0|1|2>] [X=<pos>] [Y=<pos>] [Z=<pos>] [LAZY=<1|0>]
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set LAZY = params.LAZY|default(1)|int %}
	{% if printer.toolhead.homed_axes != "xyz" %}
	{% if LAZY %}
	LAZY_HOME
	{% else %}
	{action_raise_error("Must home axes first.")}
	{% endif %}
	{% endif %}
	
	
	{% set P = (params.P|default(2))|int %}
	{% set X = params.X|default(km.park_x)|float %}
	{% set Y = params.Y|default(km.park_y)|float %}
	{% set Z = params.Z|default(km.park_z)|float %}
	
	M400
	_CHECK_KINEMATIC_LIMITS X="{X}" Y="{Y}" Z="{Z}"
	_PARK_INNER X="{X}" Y="{Y}" Z="{Z}" P="{P}" LAZY="{LAZY}"
	
	{% set dummy = None if True else "
	{% set dummy = params.P|default(mode=<0|1|2>)|int %}
	{% set dummy = params.X|default(X position)|int %}
	{% set dummy = params.Y|default(Y position)|int %}
	{% set dummy = params.Z|default(Z position)|int %}
	" %}

[gcode_macro _park_inner]
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set travel_speed_xy = km.travel_speed_xy %}
	{% set travel_speed_z = km.travel_speed_z %}
	
	{% set position = printer.gcode_move.gcode_position %}
	{% set origin = printer.gcode_move.homing_origin%}
	
	
	
	{% set clearance_z = (printer["gcode_macro _km_layer_run"].clearance_z,
	position.z) | max %}
	{% set P = params.P|int %}
	{% set X = params.X|float - origin.x %}
	{% set Y = params.Y|float - origin.y %}
	{% set Z = params.Z|float %}
	{% set LAZY = params.LAZY|int %}
	
	
	{% if P == 0 %}
	{% if clearance_z > Z %}
	{% set Z = clearance_z %}
	{% endif %}
	{% elif P == 1 %}
	{% set Z = Z - origin.z %}
	{% elif P == 2 %}
	{% set Z = Z + clearance_z %}
	{% else %}
	{action_raise_error("Invalid parameter P=%i. Value must be 0, 1, or 2." |
	format(P)) }
	{% endif %}
	
	
	{% set Z = ((Z, printer.toolhead.axis_maximum.z - origin.z)|min,
	printer.toolhead.axis_minimum.z - origin.z)|max %}
	
	
	{% if (not LAZY) or P != 2 or X != position.x or Y != position.y
	or Z < clearance_z %}
	SAVE_GCODE_STATE NAME=_KM_PARK
	G90
	G0 Z{Z} F{travel_speed_z}
	G0 X{X} Y{Y} F{travel_speed_xy}
	RESTORE_GCODE_STATE NAME=_KM_PARK MOVE=0
	{% endif %}

[gcode_macro g27]
description = Parks the toolhead.
	Usage: G27 [P=<0|1|2>]
gcode = 
	
	PARK P={params.P|default(0)} {% for k in params|reject("in", "GP") %}{
	' '~k~'="'~params[k]~'"'
	}{% endfor %}

[gcode_macro pause]
description = Pauses the current print.
	Usage: PAUSE [X=<pos>] [Y=<pos>] [Z=<pos>] [E=<retract_length>] [B=<beeps>]
rename_existing = _KM_PAUSE_BASE
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% set E = (params.E|default(5))|float %}
	
	{% set B = params.B|default(10)|int if "output_pin beeper" in printer else 0
	%}
	
	{% if printer.pause_resume.is_paused %}
	{ action_respond_info("Print already paused") }
	{% elif printer.idle_timeout.state | string == "Printing" or
	(printer.virtual_sdcard|default({})).is_active|default(False) %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=pausing RESET_STACK=1
	{% set position = printer.gcode_move.gcode_position %}
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_x VALUE="{position.x}"
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_y VALUE="{position.y}"
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_z VALUE="{position.z}"
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{E}"
	SAVE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE
	_KM_PAUSE_BASE
	M83
	{% if printer.extruder.can_extrude %}
	G1 E{'%.4f' % -E} F{km.load_speed}
	{% endif %}
	PARK P=2{% for k in params|select("in", "XYZ") %}{
	' '~k~'="'~params[k]~'"'}{% endfor %}
	
	{% for i in range(B) %}
	M300 P100
	G4 P200
	{% endfor %}
	{% else %}
	{ action_respond_info("Print not in progress") }
	{% endif %}

[gcode_macro m600]
description = Pauses the current print.
	Usage: M600 [B<beeps>] [E<pos>] [L<pos>] [R<temp>] [U<pos>] [X<pos>] [Y<pos>]
	[Z<pos>]
gcode = 
	PAUSE B="{0}" P=2{% for k in params|select("in", "EXYZ") %}{
	' '~k~'="'~params[k]~'"'}{% endfor %}
	UNLOAD_FILAMENT{% if 'U' in params %} LENGTH={params.U}{% endif
	%} BEEPS="{params.B|default(10)|int}"
	{% if 'R' in params %}M109 S{params.R}{% endif %}

[gcode_macro m601]
description = Pauses the current print.
	Usage: M601
gcode = 
	PAUSE

[gcode_macro m602]
description = Resumes the currently paused print.
	Usage: M602
gcode = 
	RESUME

[gcode_macro m24]
rename_existing = M24.6245197
gcode = 
	{% if printer.pause_resume.is_paused %}
	RESUME
	{% else %}
	M24.6245197
	{% endif %}

[gcode_macro m25]
rename_existing = M25.6245197
gcode = 
	PAUSE

[gcode_macro resume]
description = Resumes the currently paused print.
	Usage: RESUME [E<pos>]
rename_existing = _KM_RESUME_BASE
variable_saved_extruder_temp = 0
variable_saved_x = 0.0
variable_saved_y = 0.0
variable_saved_z = 0.0
variable_saved_e = 0.0
gcode = 
	{% if printer.pause_resume.is_paused %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% set extruder = printer[printer.toolhead.extruder] %}
	{% if extruder.target <= printer.configfile.settings[
	printer.toolhead.extruder].min_temp
	| float + 0.5 %}
	M109 S{saved_extruder_temp}
	{% endif %}
	
	
	
	{% if 'E' not in params and not saved_e %}
	{% set saved_e = 5.0 %}
	G1 E{'%.4f' % -saved_e } F{km.load_speed}
	{% endif %}
	
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"
	G90
	
	G0 X{saved_x} Y{saved_y} F{km.travel_speed_xy}
	G0 Z{saved_z} F{km.travel_speed_z}
	G91
	
	G1 E{'%.4f' % (params.E|default(saved_e))} F{km.load_speed}
	RESTORE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE MOVE=1
	_KM_RESUME_BASE
	{% else %}
	{ action_respond_info("Printer is not paused.") }
	{% endif %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=printing RESET_STACK=1

[gcode_macro clear_pause]
description = Clears the current pause state.
	Usage: CLEAR_PAUSE
rename_existing = _KM_CLEAR_PAUSE
gcode = 
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"
	SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"
	_KM_CLEAR_PAUSE

[gcode_macro print_start]
description = Inserted by slicer at start of print. Rather than using this macro
	directly you should configure your slicer as instructed in the readme.
	Usage: PRINT_START BED=<temp> EXTRUDER=<temp> [CHAMBER=<temp>]
	[MESH_MIN=<x,y>] [MESH_MAX=<x,y>] [LAYERS=<num>]
	[NOZZLE_SIZE=<mm>]
gcode = 
	{action_respond_info(
	"This file is using an old The PRINT_START format. This print will run "
	"fine, but you should update your slicer config to take advantage of the "
	"phased PRINT_START macros. The slicer documentation is here:\n"
	"https://github.com/jschuh/klipper-macros\x23slicer-configuration"
	)}
	
	_PRINT_START_PHASE_INIT {rawparams}
	_PRINT_START_PHASE_PREHEAT
	_PRINT_START_PHASE_PROBING
	_PRINT_START_PHASE_EXTRUDER
	_PRINT_START_PHASE_PURGE

[gcode_macro _print_start_phase_init]
description = Inserted by slicer at start of print. Initializes PRINT_START
	phases.
	Usage: See PRINT_START.
gcode = 
	CHECK_KM_CONFIG
	SET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{False}"
	_KM_APPLY_PRINT_OFFSET RESET=1
	_PRINT_START_PHASE_CHECK PHASE=none
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% if not params.BED %}
	{% set dummy = params.__setitem__('BED', params.BED_TEMP|int) %}
	{% endif %}
	{% if not params.EXTRUDER %}
	{% set dummy = params.__setitem__('EXTRUDER', params.EXTRUDER_TEMP|int) %}
	{% endif %}
	
	
	PRINT_START_SET PRINT_START_PHASE="init" {% for k in params %}{' %s=\"%s\"' %
	(k,params[k]|replace('\\','\\\\')|replace('\'','\\\'')|replace('\"','\\\"'))
	}{% endfor %}
	
	
	_km_check_and_set_print_bounds
	
	M107
	CLEAR_PAUSE
	
	M140 S{params.BED}
	{% if params.CHAMBER %}M141 S{params.CHAMBER|int}{% endif %}
	{% if printer.bed_mesh %}BED_MESH_CLEAR{% endif %}
	
	{% if km.start_try_saved_surface_mesh and printer.bed_mesh %}
	LOAD_SURFACE_MESH
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="preheat"

[gcode_macro _print_start_phase_preheat]
description = Inserted by slicer at start of print. Handles the bed and chamber
	heating phases and ends when both are stabilized at their target temperatures.
	Usage: See PRINT_START.
gcode = 
	_PRINT_START_PHASE_CHECK PHASE=preheat
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set BED = print.BED|int %}
	{% set EXTRUDER = print.EXTRUDER|int %}
	{% set CHAMBER = print.CHAMBER|default(0)|int %}
	{% set LAYERS = print.LAYERS|default(0)|int %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% set bed_at_target = (BED + 0.4 - printer.heater_bed.temperature) |
	abs <= 0.6 %}
	PRINT_START_SET BED_AT_TARGET={1 if bed_at_target else 0}
	{% set start_level_bed_at_temp = km.start_level_bed_at_temp and
	not printer.bed_mesh.profile_name %}
	{% set actions_at_temp = start_level_bed_at_temp or
	km.start_quad_gantry_level_at_temp or
	km.start_z_tilt_adjust_at_temp or
	(km.start_home_z_at_temp and not bed_at_target) %}
	{% set bed_overshoot = (BED + (km.start_bed_heat_overshoot if
	(BED and not bed_at_target) else 0.0),
	printer.configfile.settings.heater_bed.max_temp ) | min %}
	
	INIT_LAYER_GCODE LAYERS="{LAYERS}"
	{% if CHAMBER > 0.0 %}
	M141 S{CHAMBER}
	{% endif %}
	
	M140 S{bed_overshoot}
	{% if actions_at_temp %}
	
	
	M104 S{km.start_extruder_probing_temp if km.start_extruder_probing_temp > 0
	else (km.start_extruder_preheat_scale * EXTRUDER)|round(0,'ceil')|int}
	{% else %}
	M104 S{EXTRUDER}
	{% endif %}
	
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing RESET_STACK=1
	G28
	G90
	{% if BED > 0.0 %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=bed_heating RESET_STACK=1
	
	{% if not bed_at_target %}
	PARK
	
	M190 S{bed_overshoot}
	G4 P{km.start_bed_heat_delay / 2}
	M190 R{BED}
	G4 P{km.start_bed_heat_delay / 2}
	{% endif %}
	{% endif %}
	
	{% if CHAMBER > 0.0 %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=chamber_heating RESET_STACK=1
	_KM_PARK_IF_NEEDED HEATER="chamber" RANGE=ABOVE
	M191 S{CHAMBER}
	{% endif %}
	
	{% if BED > 0.0 and bed_at_target%}
	M190 R{BED}
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="probing"

[gcode_macro _print_start_phase_probing]
description = Inserted by slicer at start of print. Performs probing (including
	mesh bed level) and other operations that should be run when the bed and
	chamber are stabilized at their target temps.
	Usage: See PRINT_START.
gcode = 
	_PRINT_START_PHASE_CHECK PHASE=probing
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set MESH_MIN = print.MESH_MIN|default(None) %}
	{% set MESH_MAX = print.MESH_MAX|default(None) %}
	
	{% if km.start_random_placement_max > 0 and print.PRINT_MIN and MESH_MIN %}
	{% set PRINT_MIN = print.PRINT_MIN.split(",")|map('float')|list %}
	{% set PRINT_MAX = print.PRINT_MAX.split(",")|map('float')|list %}
	{% set x_offset = (((km.print_max[0] - km.print_min[0] - PRINT_MAX[0] +
	PRINT_MIN[0] - 2 * km.start_random_placement_padding)|int,
	km.start_random_placement_max * 2)|min, 0)|max %}
	{% set y_offset = (((km.print_max[1] - km.print_min[1] - PRINT_MAX[1] +
	PRINT_MIN[1] - 2 * km.start_random_placement_padding)|int,
	km.start_random_placement_max * 2)|min, 0)|max %}
	{% if x_offset > 0 %}
	{% set x_offset = range(x_offset)|random + km.print_min[0] -
	PRINT_MIN[0] + km.start_random_placement_padding %}
	{% endif %}
	{% if y_offset > 0 %}
	{% set y_offset = range(y_offset)|random + km.print_min[1] -
	PRINT_MIN[1] + km.start_random_placement_padding %}
	{% endif %}
	
	
	{% set MESH_MIN = MESH_MIN.split(",")|map('float')|list %}
	{% set MESH_MAX = MESH_MAX.split(",")|map('float')|list %}
	{% set MESH_MIN_NEW = (MESH_MIN[0] + x_offset, MESH_MIN[1] + y_offset) %}
	{% set MESH_MAX_NEW = (MESH_MAX[0] + x_offset, MESH_MAX[1] + y_offset) %}
	{action_respond_info(
	"Relocating print origin from (%.3f,%.3f) "|format(*MESH_MIN) +
	"to (%.3f,%.3f)"|format(*MESH_MIN_NEW))}
	{% set MESH_MIN = (MESH_MIN_NEW[0], MESH_MIN_NEW[1])|join(',') %}
	{% set MESH_MAX = (MESH_MAX_NEW[0], MESH_MAX_NEW[1])|join(',') %}
	PRINT_START_SET PRINT_OFFSET={"%d,%d" % (x_offset,y_offset)}
	{% endif %}
	
	{% set EXTRUDER = print.EXTRUDER|int %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set start_level_bed_at_temp = km.start_level_bed_at_temp and
	not printer.bed_mesh.profile_name %}
	{% set start_home_z_at_temp = km.start_home_z_at_temp and
	not print.BED_AT_TARGET|int %}
	{% set actions_at_temp = start_level_bed_at_temp or
	km.start_quad_gantry_level_at_temp or
	km.start_z_tilt_adjust_at_temp or
	start_home_z_at_temp %}
	{% if actions_at_temp %}
	{% if km.start_extruder_probing_temp > 0 %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating RESET_STACK=1
	_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=2
	M109 R{km.start_extruder_probing_temp}
	{% else %}
	M104 S{EXTRUDER}
	{% endif %}
	{% if start_home_z_at_temp %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing RESET_STACK=1
	G28 Z
	{% endif %}
	{% if km.start_z_tilt_adjust_at_temp %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=calibrating_z RESET_STACK=1
	Z_TILT_ADJUST
	{% endif %}
	{% if km.start_quad_gantry_level_at_temp %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=leveling_gantry RESET_STACK=1
	QUAD_GANTRY_LEVEL
	{% endif %}
	{% if start_level_bed_at_temp %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=meshing RESET_STACK=1
	_km_mesh_if_needed {% if MESH_MIN %} MESH_MIN={MESH_MIN}{% endif
	%}{% if MESH_MAX %} MESH_MAX={MESH_MAX}{% endif %}
	{% endif %}
	{% if km.start_extruder_probing_temp > 0 %}
	M104 S{EXTRUDER}
	{% endif %}
	G4
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="extruder"

[gcode_macro _print_start_phase_extruder]
description = Inserted by slicer at start of print. Preheats the extruder.
	Usage: See PRINT_START.
gcode = 
	_PRINT_START_PHASE_CHECK PHASE=extruder
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set EXTRUDER = print.EXTRUDER|default(print.EXTRUDER_TEMP)|float %}
	{% set km = printer["gcode_macro _km_globals"] %}
	
	
	{% if EXTRUDER > 0 %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating RESET_STACK=1
	_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=ABOVE
	M109 S{EXTRUDER}
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="purge"

[gcode_macro _print_start_phase_purge]
description = Inserted by slicer at start of print. Generates purge lines.
	Usage: See PRINT_START.
gcode = 
	_PRINT_START_PHASE_CHECK PHASE=purge
	
	_KM_APPLY_PRINT_OFFSET
	
	_APPLY_BED_SURFACE_OFFSET
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set MESH_MIN = print.MESH_MIN|default(None) %}
	{% set MESH_MAX = print.MESH_MAX|default(None) %}
	{% set NOZZLE_SIZE = print.NOZZLE_SIZE|default(print.NOZZLE_SIZE)|
	default(printer.configfile.settings.extruder.nozzle_diameter)|float %}
	{% set km = printer["gcode_macro _km_globals"] %}
	{% if km.start_purge_length > 0.0 and printer.extruder.can_extrude %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=purging RESET_STACK=1
	DRAW_PURGE_LINE WIDTH="{NOZZLE_SIZE * 1.25}" HEIGHT="{NOZZLE_SIZE * 0.625
	}"{% if MESH_MIN %} PRINT_MIN={MESH_MIN}{% endif
	%}{% if MESH_MAX %} PRINT_MAX={MESH_MAX}{% endif %}
	{% endif %}
	PRINT_START_SET PRINT_START_PHASE="printing"
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=printing RESET_STACK=1

[gcode_macro _km_park_if_needed]
description = Parks the extruder if the current temperature of the supplied
	heater is not within the specified target range.
	Usage: _KM_PARK_IF_NEEDED HEATER=<heater> RANGE=[<percentage>|ABOVE|BELOW]
gcode = 
	
	{% set HEATER = params.HEATER if params.HEATER in
	printer.heaters.available_heaters else
	("heater_generic " ~ params.HEATER) %}
	{% set RANGE = (params.RANGE|default(1))|string|upper %}
	
	{% if printer[HEATER].target %}
	{% if RANGE == "ABOVE" %}
	{% if printer[HEATER].temperature < printer[HEATER].target %}
	PARK
	{% endif %}
	{% elif RANGE == "BELOW" %}
	{% if printer[HEATER].temperature > printer[HEATER].target %}
	PARK
	{% endif %}
	{% elif (printer[HEATER].temperature - printer[HEATER].target)|abs >
	(printer[HEATER].target * RANGE|float * 0.01)|abs %}
	PARK
	{% endif %}
	{% endif %}

[gcode_macro _km_apply_print_offset]
variable_offset = []
gcode = 
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% if params.RESET|default(0)|int and offset and
	not printer["gcode_macro _km_save_state"].is_ephemeral%}
	{% set PRINT_OFFSET = [offset.pop(0) * -1, offset.pop() * -1] %}
	{% elif print.PRINT_OFFSET and not offset and
	not printer["gcode_macro _km_save_state"].is_ephemeral %}
	{% set PRINT_OFFSET = print.PRINT_OFFSET.split(",")|map('float')|list %}
	{% set dummy = offset.extend(PRINT_OFFSET) %}
	{% endif %}
	
	{% if PRINT_OFFSET %}
	_KM_SET_GCODE_OFFSET_BASE {"X_ADJUST=%.2f Y_ADJUST=%.2f"|
	format(*PRINT_OFFSET)}
	{% endif %}

[gcode_macro _km_mesh_if_needed]
gcode = 
	
	
	
	{% if not printer.bed_mesh.profile_name %}
	BED_MESH_CALIBRATE_FAST {rawparams}
	{% endif %}

[gcode_macro print_start_set]
description = Inserted by slicer to set values used by PRINT_START.
	Usage: PRINT_START_SET <VARIABLE>=<value>
variable_print = {}
gcode = 
	{%for k in params %}
	{% set dummy = print.__setitem__(k|upper, params[k]) %}
	{% endfor %}

[gcode_macro _print_start_phase_check]
gcode = 
	{% set print = printer["gcode_macro print_start_set"].print %}
	{% set PRINT_START_PHASE = print.PRINT_START_PHASE|default("none") %}
	{% if PRINT_START_PHASE != params.PHASE %}
	
	SET_GCODE_VARIABLE MACRO=print_start_set VARIABLE=print VALUE="{{}}"
	{% if params.PHASE != 'none' %}
	{% set error = "PRINT_START phase error. Expected '%s' but found '%s'" %
	(params.PHASE, PRINT_START_PHASE) %}
	
	{% if not 'virtual_sdcard' in printer or
	not printer.virtual_sdcard.is_active or 'CANCEL_PRINT' not in
	printer.configfile.settings.virtual_sdcard.on_error_gcode|
	default("")|upper %}
	{action_respond_info(error)}
	CANCEL_PRINT
	{% else %}
	{action_raise_error(error)}
	{% endif %}
	{% else %}
	{ action_respond_info("Expected phase '%s' but found '%s'. Resetting."
	% (params.PHASE, PRINT_START_PHASE)) }
	{% endif %}
	{% endif %}

[gcode_macro print_end]
description = Inserted by slicer at end of print.
	Usage: PRINT_END
gcode = 
	_KM_CHECK_IS_PRINTING
	M400
	_PRINT_END_INNER
	
	{% set km = printer["gcode_macro _km_globals"] %}
	
	{% if km.start_clear_adjustments_at_end != 0 %}
	RESET_HEATER_SCALING
	RESET_FAN_SCALING
	M220 S100
	M221 S100
	{% endif %}
	_RESET_LAYER_GCODE
	_RESET_VELOCITY_LIMITS
	TURN_OFF_HEATERS
	M107; turn off fan
	{% if printer.bed_mesh %}BED_MESH_CLEAR{% endif %}
	
	{% if printer.toolhead.homed_axes|lower == "xyz" %}
	PARK Y="{km.start_end_park_y}"
	{% endif %}
	M84
	CLEAR_PAUSE
	SET_GCODE_VARIABLE MACRO=print_start_set VARIABLE=print VALUE="{{}}"
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready RESET_STACK=1

[gcode_macro _print_end_inner]
variable_cancelled = False
gcode = 
	SET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{False}"
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set toolhead = printer.toolhead %}
	{% set origin = printer.gcode_move.homing_origin%}
	{% set max_x = km.print_max[0] - origin.x %}
	{% set max_y = km.print_max[1] - origin.y %}
	{% set max_z = toolhead.axis_maximum.z - origin.z %}
	
	{% if not cancelled %}
	_KM_PRINT_STATUS ACTION=CHANGE STATUS=completing
	{% endif %}
	
	{% if printer.extruder.can_extrude %}
	
	{% if not printer.pause_resume.is_paused and not cancelled and
	toolhead.homed_axes|lower == "xyz" %}
	{% set x_safe = (max_x - toolhead.position.x, 2.0)|min %}
	{% set y_safe = (max_y - toolhead.position.y, 2.0)|min %}
	{% set z_safe = (max_z - toolhead.position.z, 2.0)|min %}
	G91
	G0 Z{z_safe} E-1.0 F{km.travel_speed_z * 2}
	G0 X{x_safe} Y{y_safe} E-1.0 F{km.travel_speed_xy}
	
	_KM_APPLY_PRINT_OFFSET RESET=1
	{% endif %}
	
	
	G92 E0
	G1 E-5.0 F3600
	M400
	{% endif %}

[gcode_macro _km_check_is_printing]
variable_debug_state = False
description = Throws an error if print is not currently in progress.
gcode = 
	{% if not debug_state and
	printer.idle_timeout.state|string != "Printing" and
	not (printer.virtual_sdcard|default({})).is_active|default(False) and
	not printer.pause_resume.is_paused %}
	{ action_raise_error("No active print.") }
	{% endif %}

[gcode_macro _km_check_and_set_print_bounds]
description = Validates all print bounds and caches their values.
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% set print = printer["gcode_macro print_start_set"].print %}
	
	
	{% if print.MESH_MIN %}
	{% set MESH_MIN = print.MESH_MIN.split(",")|map('float')|list %}
	{% set MESH_MAX = print.MESH_MAX.split(",")|map('float')|list %}
	{%if MESH_MIN[0] < km.print_min[0] or MESH_MIN[1] < km.print_min[1] %}
	{action_raise_error("MESH_MIN %s is outside the printable bounds" %
	(MESH_MIN|string, km.print_min|string))}
	{%elif MESH_MAX[0] > km.print_max[0] or MESH_MAX[1] > km.print_max[1] %}
	{action_raise_error("MESH_MAX %s is outside the printable bounds %s" %
	(MESH_MAX|string, km.print_max|string))}
	{% endif %}
	{% endif %}
	
	
	{% set points = [] %}
	{% if print.MODEL_MIN or print.MODEL_MAX %}
	{% set MODEL_MIN = print.MODEL_MIN.split(",")|map('float')|list %}
	{% set MODEL_MAX = print.MODEL_MAX.split(",")|map('float')|list %}
	{% set points = [MODEL_MIN, MODEL_MAX] %}
	{% endif %}
	{% if (printer.exclude_object|default({})).objects %}
	{% set points = printer.exclude_object.objects|selectattr('polygon')|
	map(attribute='polygon')|sum(start=points) %}
	{% set points_len = points|length %}
	{% if points_len >= 2 %}
	{% set x_coords = (points|map(attribute=0)|sort|list)[0::points_len-1] %}
	{% set y_coords = (points|map(attribute=1)|sort|list)[0::points_len-1] %}
	{% set MODEL_MIN = (x_coords[0],y_coords[0])|map('float')|list %}
	{% set MODEL_MAX = (x_coords[1],y_coords[1])|map('float')|list %}
	PRINT_START_SET MODEL_MIN="{MODEL_MIN|join(',')
	}" MODEL_MAX="{MODEL_MAX|join(',')}"
	{% endif %}
	{% endif %}
	
	{% if MODEL_MIN %}
	
	{% if MODEL_MIN[0] < km.print_min[0] or MODEL_MIN[1] < km.print_min[1] %}
	{action_raise_error("MODEL_MIN %s is outside the printable bounds" %
	(MODEL_MIN|string, km.print_min|string))}
	{% elif MODEL_MAX[0] > km.print_max[0] or MODEL_MAX[1] > km.print_max[1] %}
	{action_raise_error("MODEL_MAX %s is outside the printable bounds %s" %
	(MODEL_MAX|string, km.print_max|string))}
	{% endif %}
	{% endif %}
	
	
	{% if MESH_MIN and MODEL_MIN %}
	PRINT_START_SET PRINT_MIN="{((MODEL_MIN[0],MESH_MIN[0])|min,
	(MODEL_MIN[1],MESH_MIN[1])|min)|join(',')
	}" PRINT_MAX="{((MODEL_MAX[0],MESH_MAX[0])|max,
	(MODEL_MAX[1],MESH_MAX[1])|max)|join(',')}"
	{% else %}
	PRINT_START_SET PRINT_MIN="{km.print_min|join(',')
	}" PRINT_MAX="{km.print_max|join(',')}"
	{% endif %}

[gcode_macro _km_save_state]
description = Tracks gcode state.
variable_state_set = {}
variable_is_ephemeral = 0
gcode = 
	{% if params.SAVE|int %}
	{% set dummy = state_set.__setitem__(params.NAME, None) %}
	{% else %}
	{% set dummy = state_set.__delitem__(params.NAME) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=_km_save_state VARIABLE=is_ephemeral VALUE="{
	1 if state_set|length > 0 else 0 }"

[gcode_macro save_gcode_state]
description = Wraps SAVE_GCODE_STATE to track persistence state.
	Usage: See Klipper documentation
rename_existing = _KM_SAVE_GCODE_STATE
gcode = 
	_KM_SAVE_GCODE_STATE {rawparams}
	{% set NAME = params.NAME|default("default") %}
	_km_save_state NAME={NAME} SAVE=1

[gcode_macro restore_gcode_state]
description = Wraps RESTORE_GCODE_STATE to track persistence state.
	Usage: See Klipper documentation
rename_existing = _KM_RESTORE_GCODE_STATE
gcode = 
	_KM_RESTORE_GCODE_STATE {rawparams}
	{% set NAME = params.NAME|default("default") %}
	_km_save_state NAME={NAME} SAVE=0

[gcode_macro _abort_on_gcode_state]
gcode = 
	{% set save_state = printer["gcode_macro _km_save_state"] %}
	{% if save_state.is_ephemeral %}
	{action_raise_error("Encountered unexpected save state " +
	save_state.state_set|list|sort|string)}
	{% endif %}

[gcode_macro _km_print_status]
variable_last_status = 'none'
variable_status_stack = []
variable_command_list = {}
variable_status_list = [
	'ready',
	'filament_load',
	'filament_unload',
	'bed_heating',
	'chamber_heating',
	'homing',
	'leveling_gantry',
	'calibrating_z',
	'meshing',
	'extruder_heating',
	'purging',
	'printing',
	'pausing',
	'cancelling',
	'completing',
	]
gcode = 
	{% set ACTION = params.ACTION|trim|upper %}
	{% set STATUS = params.STATUS|default("")|trim|lower %}
	
	
	{% if ACTION == "ADD_EVENT" %}
	{% set COMMAND = params.COMMAND %}
	{% set ARGS = params.ARGS|default(0)|int != 0 %}
	{% set TYPE = params.TYPE|default('ENTER')|trim|upper %}
	{% set WHEN = params.WHEN|default('PRINTING')|trim|upper %}
	{% set FILTER_ENTER =
	(params.FILTER_ENTER|default("")|trim|lower).split(',')|
	select()|unique|list %}
	{% set FILTER_LEAVE =
	(params.FILTER_LEAVE|default("")|trim|lower).split(',')|
	select()|unique|list %}
	
	{% set STATUSES = STATUS.split(',')|map('trim')|list %}
	{% for s in (STATUSES if STATUSES[0] != 'all' else status_list) %}
	{% if not s in command_list %}
	{% set dummy = command_list.__setitem__(s,[]) %}
	{% endif %}
	{% set dummy = command_list[s].append({'cmd':COMMAND, 'args':ARGS,
	'type':TYPE, 'when':WHEN,
	'filt_e':FILTER_ENTER,
	'filt_l':FILTER_LEAVE}) %}
	{% endfor %}
	
	
	{% elif ACTION == "CHANGE" %}
	{% if params.RESET_STACK|default(0)|int %}
	{% for dummy in range(status_stack|length) %}
	{% set dummy = status_stack.pop() %}
	{% endfor %}
	
	
	{% elif STATUS == "pop_status" %}
	{% set STATUS = (status_stack|default(['ready'], True)).pop() %}
	{% endif %}
	
	{% if STATUS not in status_list %}
	{action_raise_error("Status '%s' not valid."|format(STATUS))}
	{% endif %}
	
	{% if STATUS != last_status %}
	{% set is_printing =
	printer["gcode_macro print_start_set"].print.PRINT_START_PHASE|
	default("")|length != 0 %}
	{% set print_states = ('ALWAYS', 'PRINTING' if is_printing else 'IDLE') %}
	
	{% for c in command_list[last_status]|default([]) %}
	{% if c.type in ('BOTH','LEAVE') and c.when in print_states and
	(not c.filt_l or STATUS in c.filt_l) %}
	M400
	{c.cmd}{% if c.args %} TYPE=LEAVE WHEN={print_states[1]
	} LAST_STATUS={last_status} NEXT_STATUS={STATUS}{% endif %}
	{% endif %}
	{% endfor %}
	
	{% for c in command_list[STATUS]|default([]) %}
	{% if c.type in ('BOTH','ENTER') and c.when in print_states and
	(not c.filt_e or STATUS in c.filt_e) %}
	M400
	{c.cmd}{% if c.args %} TYPE=ENTER WHEN={print_states[1]
	} LAST_STATUS={last_status} NEXT_STATUS={STATUS}{% endif %}
	{% endif %}
	{% endfor %}
	SET_GCODE_VARIABLE MACRO=_km_print_status VARIABLE=last_status VALUE="'{
	STATUS}'"
	{% endif %}
	
	
	{% elif ACTION == "PUSH_STATUS" %}
	{% set dummy = status_stack.append(last_status) %}
	
	
	{% else %}
	{action_raise_error("Action '%s' not valid."|format(ACTION))}
	{% endif %}

[gcode_macro gcode_on_print_status]
description = Adds a gcode command for a status event.
	Usage: GCODE_ON_PRINT_STATUS STATUS=<status> COMMAND=<gcode> [ARGS=<1|0>]
	[WHEN=<PRINTING|IDLE|ALWAYS>]
	[TYPE=<ENTER|LEAVE|BOTH>]
	[FILTER_ENTER=<status list>]
	[FILTER_LEAVE=<status list>]
gcode = 
	{% set STATUS = (params.STATUS|lower).split(',')|map('trim')|list %}
	{% set TYPE = params.TYPE|default('ENTER')|trim|upper %}
	{% set WHEN = params.WHEN|default('PRINTING')|trim|upper %}
	{% set FILTER_ENTER =
	(params.FILTER_ENTER|default("")|trim|lower).split(',')|select()|list %}
	{% set FILTER_LEAVE =
	(params.FILTER_LEAVE|default("")|trim|lower).split(',')|select()|list %}
	
	
	{% set status_list = printer["gcode_macro _km_print_status"].status_list %}
	{% for s in STATUS %}
	{% if not (s in status_list or s == 'all' and STATUS|length == 1) %}
	{action_raise_error("STATUS parameter '%s' not valid."|format(s))}
	{% endif %}
	{% endfor %}
	
	{% if TYPE not in ('ENTER', 'LEAVE', 'BOTH') %}
	{action_raise_error("TYPE paramater '%s' not valid."|format(TYPE))}
	{% elif WHEN not in ('PRINTING', 'IDLE', 'ALWAYS') %}
	{action_raise_error("WHEN parameter '%s' not valid."|format(WHEN))}
	{% elif TYPE == 'ENTER' and FILTER_LEAVE %}
	{action_raise_error("FILTER_LEAVE not valid with TYPE=ENTER.")}
	{% elif TYPE == 'LEAVE' and FILTER_ENTER %}
	{action_raise_error("FILTER_ENTER not valid with TYPE=LEAVE.")}
	{% endif %}
	{% for f in FILTER_ENTER %}
	{% if f not in status_list %}
	{action_raise_error("FILTER_ENTER parameter '%s' not valid."|format(f))}
	{% endif %}
	{% endfor %}
	{% for f in FILTER_LEAVE %}
	{% if f not in status_list %}
	{action_raise_error("FILTER_LEAVE parameter '%s' not valid."|format(f))}
	{% endif %}
	{% endfor %}
	
	
	_KM_PRINT_STATUS ACTION=ADD_EVENT {rawparams}

[gcode_macro m201]
description = Sets maximum accelleration.
	Usage: M201 [X<accel>] [Y<accel>]
variable_max_accel = 1.7976931348623157e+308
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% if 'X' in params or 'Y' in params %}
	{% set accel = (params.X|default(params.Y)|float,
	params.Y|default(params.X)|float)|min %}
	SET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{accel}"
	{% else %}
	SET_VELOCITY_LIMIT
	{% endif %}

[gcode_macro m203]
description = Sets maximum velocity.
	Usage: M203 [X<velocity>] [Y<velocity>]
gcode = 
	{% if 'X' in params or 'Y' in params %}
	{% set velocity = (params.X|default(params.Y)|float,
	params.Y|default(params.X)|float)|min %}
	SET_VELOCITY_LIMIT VELOCITY="{velocity}"
	{% else %}
	SET_VELOCITY_LIMIT
	{% endif %}

[gcode_macro m205]
description = Sets square corner velocity.
	Usage: M203 [X<velocity>] [Y<velocity>]
gcode = 
	{% if 'X' in params or 'Y' in params %}
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY="{
	(params.X|default(0)|float, params.Y|default(0)|float)|min}"
	{% else %}
	SET_VELOCITY_LIMIT
	{% endif %}

[gcode_macro m900]
description = Sets pressure advance.
	Usage: M900 [K<advance>] [T<extruder_index>]
gcode = 
	{% set km = printer["gcode_macro _km_globals"] %}
	{% if km.pressure_advance_scale > 0.0 %}
	{% set extruder = "extruder" ~ params.T|replace('0', '')
	if "T" in params else printer.toolhead.extruder %}
	{% if 'K' in params %}
	SET_PRESSURE_ADVANCE EXTRUDER="{extruder}" ADVANCE="{
	params.K|float * km.pressure_advance_scale}"
	{% endif %}
	{% endif %}

[gcode_macro _reset_velocity_limits]
description = Sets maximum accelleration.
	Usage: M204 [S<accel>] [P<accel> T<accel>]
gcode = 
	SET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{1.7976931348623157e+308}"

[gcode_macro bed_mesh_calibrate]
rename_existing = _KM_BED_MESH_CALIBRATE_BASE
description = Wraps BED_MESH_CALIBRATE, scaling probe count to specified area.
	Usage: See Klipper documentation.
gcode = 
	BED_MESH_CALIBRATE_FAST{%for k in params%}{' '~k~'="'~params[k]~'"'}{%endfor%}

[gcode_macro g29]
gcode = 
	BED_MESH_CALIBRATE

[idle_timeout]
gcode = 
	_KM_IDLE_TIMEOUT

[respond]

[gcode_macro PRINT_START]
rename_existing = KM_PRINT_START
gcode = 
	
	STATUS_HOMING
	KM_PRINT_START {rawparams}
	STATUS_PRINTING

[board_pins EBB36_G0B1_v1.2]
mcu = ebbcan
aliases = 
aliases_step = 
	EXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15
aliases_limitsw = 
	LIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6
aliases_bltouch = 
	PROBE_1=PB9,PROBE_2=PB8
aliases_fans = 
	FAN0=PA1,FAN1=PA0
aliases_thermistors = 
	TH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7
aliases_heaters = 
	HE0=PB13
aliases_rgb = 
	RGBLED=PD3
aliases_adxl = 
	ADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11
aliases_i2c = 
	AUX0=PB3,AUX1=PB4

[neopixel sb_leds]
pin = ebbcan:RGBLED
chain_count = 3
color_order = GRB
initial_red = 0.0
initial_green = 0.0
initial_blue = 0.0
initial_white = 1.0

[save_variables]
filename = ~/printer_data/variables.cfg

[mcu CB1]
serial = /tmp/klipper_host_mcu

[mcu]
canbus_uuid = f94e10a9add8

[mcu ebbcan]
canbus_uuid = 57244ec148c0

[printer]
kinematics = corexy
max_velocity = 600
max_accel = 10000
max_accel_to_decel = 5000
max_z_velocity = 5
max_z_accel = 100

[stepper_x]
step_pin = PE2
dir_pin = !PB4
enable_pin = !PC11
microsteps = 16
rotation_distance = 40
endstop_pin = !ebbcan:LIMIT_2
position_endstop = 220
position_min = -4
position_max = 220
homing_speed = 50

[tmc2209 stepper_x]
uart_pin = PC10
diag_pin = PF3
run_current = 1.1

[tmc2209 stepper_y]
uart_pin = PF13
diag_pin = PF4
run_current = 1.1

[tmc2209 stepper_z]
uart_pin = PF9
diag_pin = PF5
run_current = 0.650

[tmc2209 extruder]
uart_pin = ebbcan:EXT_UART
diag_pin = ebbcan:LIMIT_3
run_current = 0.650

[stepper_y]
step_pin = PF12
dir_pin = !PF11
enable_pin = !PB3
microsteps = 16
rotation_distance = 40
endstop_pin = ^PF3
position_endstop = 220
position_min = -4
position_max = 220
homing_speed = 50

[stepper_z]
step_pin = PD7
dir_pin = !PD6
enable_pin = !PF10
microsteps = 16
rotation_distance = 8
endstop_pin = probe:z_virtual_endstop
position_max = 300
position_min = -3

[heater_bed]
heater_pin = PB7
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PA0
min_temp = 0
max_temp = 130
control = pid
pid_kp = 63.528
pid_ki = 0.875
pid_kd = 1153.041

[temperature_sensor raspberry_pi]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor mcu_temp]
sensor_type = temperature_mcu
min_temp = 0
max_temp = 100

[controller_fan MCU_Fan]
pin = PE6
heater = extruder
fan_speed = 1

[heater_fan heatbreak_cooling_fan]
pin = ebbcan:FAN0
kick_start_time = 0.25
heater = extruder
heater_temp = 50.0
fan_speed = 1

[fan]
pin = ebbcan:FAN1

[safe_z_home]
home_xy_position = 140, 140
speed = 100
z_hop = 10
z_hop_speed = 20

[extruder]
step_pin = ebbcan:EXT_STEP
dir_pin = ebbcan:EXT_DIR
enable_pin = !ebbcan:EXT_EN
microsteps = 16
rotation_distance = 4.71
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.750
max_extrude_only_distance = 101.0
heater_pin = ebbcan:HE0
sensor_type = ATC Semitec 104NT-4-R025H42G
sensor_pin = ebbcan:TH0
min_temp = 0
max_temp = 300
max_extrude_cross_section = 5
pressure_advance = 0.02
control = pid
pid_kp = 20.603
pid_ki = 0.988
pid_kd = 107.392

[bltouch]
sensor_pin = ebbcan:PROBE_2
control_pin = ebbcan:PROBE_1
x_offset = -40
y_offset = -17
samples = 2
samples_tolerance = 0.015
samples_tolerance_retries = 5
z_offset = 2.849

[bed_mesh]
speed = 100
horizontal_move_z = 5
mesh_min = 10, 27
mesh_max = 173, 200
probe_count = 5, 5
algorithm = bicubic
fade_start = 1
fade_end = 10

[bed_screws]
screw1 = 55,55
screw2 = 200,55
screw3 = 200,205
screw4 = 55,205

[screws_tilt_adjust]
screw1 = 65,55
screw1_name = front left screw
screw2 = 218,55
screw2_name = front right screw
screw3 = 218,215
screw3_name = rear right screw
screw4 = 65,215
screw4_name = rear left screw
horizontal_move_z = 10
speed = 50
screw_thread = CW-M4

[display]
lcd_type = st7920
cs_pin = PB12
sclk_pin = PB13
sid_pin = PB15
encoder_pins = ^PB14, ^PB10
click_pin = ^!PB2

[exclude_object]

[firmware_retraction]
retract_length = 0.4
retract_speed = 20
unretract_extra_length = 0
unretract_speed = 10

[input_shaper]
shaper_type_x = 2hump_ei
shaper_freq_x = 86.2
shaper_type_y = zv
shaper_freq_y = 44.8

[gcode_arcs]
resolution = 1.0

[adxl345]
cs_pin = ebbcan:ADXL_CS
spi_software_sclk_pin = ebbcan:ADXL_SCLK
spi_software_mosi_pin = ebbcan:ADXL_MOSI
spi_software_miso_pin = ebbcan:ADXL_MISO

[resonance_tester]
accel_chip = adxl345
probe_points = 
	120,120,20

[bed_mesh default]
version = 1
points = 
	0.027500, 0.058750, 0.091250, 0.182500
	-0.003750, 0.061250, 0.072500, 0.125000
	0.021250, 0.016250, 0.013750, 0.033750
	-0.023750, -0.018750, -0.036250, -0.037500
x_count = 4
y_count = 4
mesh_x_pps = 2
mesh_y_pps = 2
algo = bicubic
tension = 0.2
min_x = 48.75
max_x = 171.24
min_y = 48.75
max_y = 171.24
=======================
Extruder max_extrude_ratio=2.078758
mcu 'mcu': Starting CAN connect
Created a socket
webhooks client 281473125865840: New connection
webhooks client 281473125865840: Client info {'program': 'Moonraker', 'version': 'v0.8.0-92-g504a3a7'}
Loaded MCU 'mcu' 109 commands (v0.11.0-241-gffb5105b / gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2)
MCU 'mcu' config: ADC_MAX=4095 BUS_PINS_i2c1_PA9_PA10=PA9,PA10 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_i2c2_PB13_PB14=PB13,PB14 BUS_PINS_i2c3_PB3_PB4=PB3,PB4 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3=PB4,PB5,PB3 CANBUS_BRIDGE=1 CLOCK_FREQ=64000000 MCU=stm32g0b1xx PWM_MAX=255 RECEIVE_WINDOW=192 RESERVE_PINS_CAN=PD12,PD13 RESERVE_PINS_USB=PA11,PA12 RESERVE_PINS_crystal=PF0,PF1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
mcu 'CB1': Starting connect
Loaded MCU 'CB1' 113 commands (v0.11.0-241-gffb5105b / gcc: (Debian 10.2.1-6) 10.2.1 20210110 binutils: (GNU Binutils for Debian) 2.35.2)
MCU 'CB1' config: ADC_MAX=4095 CLOCK_FREQ=50000000 MCU=linux PCA9685_MAX=4096 PWM_MAX=32768 STATS_SUMSQ_BASE=256
mcu 'ebbcan': Starting CAN connect
Created a socket
mcu 'ebbcan': got {'count': 500, 'sum': 583851, 'sumsq': 5555085, '#name': 'stats', '#sent_time': 57.685944235, '#receive_time': 57.724428317999994}
Loaded MCU 'ebbcan' 109 commands (v0.11.0-241-gffb5105b / gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2)
MCU 'ebbcan' config: ADC_MAX=4095 BUS_PINS_i2c1_PA9_PA10=PA9,PA10 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_i2c2_PB13_PB14=PB13,PB14 BUS_PINS_i2c3_PB3_PB4=PB3,PB4 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3=PB4,PB5,PB3 CANBUS_FREQUENCY=1000000 CLOCK_FREQ=64000000 MCU=stm32g0b1xx PWM_MAX=255 RECEIVE_WINDOW=192 RESERVE_PINS_CAN=PB0,PB1 RESERVE_PINS_crystal=PF0,PF1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
mcu_temperature 'mcu' nominal base=-268.847262 slope=1298.126801
Sending MCU 'mcu' printer configuration...
Configured MCU 'mcu' (1024 moves)
Sending MCU 'CB1' printer configuration...
Configured MCU 'CB1' (1024 moves)
Sending MCU 'ebbcan' printer configuration...
Configured MCU 'ebbcan' (1024 moves)
Starting heater checks for heater_bed
Failed to verify BLTouch probe is raised; retrying.
Failed to verify BLTouch probe is raised; retrying.
BLTouch raise probe error: BLTouch failed to raise probe
bed_mesh: generated points
Index |  Tool Adjusted  |   Probe
  0   | (50.0, 44.0)    | (10.0, 27.0)
  1   | (90.8, 44.0)    | (50.8, 27.0)
  2   | (131.5, 44.0)   | (91.5, 27.0)
  3   | (172.2, 44.0)   | (132.2, 27.0)
  4   | (213.0, 44.0)   | (173.0, 27.0)
  5   | (213.0, 87.2)   | (173.0, 70.2)
  6   | (172.2, 87.2)   | (132.2, 70.2)
  7   | (131.5, 87.2)   | (91.5, 70.2)
  8   | (90.8, 87.2)    | (50.8, 70.2)
  9   | (50.0, 87.2)    | (10.0, 70.2)
  10  | (50.0, 130.5)   | (10.0, 113.5)
  11  | (90.8, 130.5)   | (50.8, 113.5)
  12  | (131.5, 130.5)  | (91.5, 113.5)
  13  | (172.2, 130.5)  | (132.2, 113.5)
  14  | (213.0, 130.5)  | (173.0, 113.5)
  15  | (213.0, 173.8)  | (173.0, 156.8)
  16  | (172.2, 173.8)  | (132.2, 156.8)
  17  | (131.5, 173.8)  | (91.5, 156.8)
  18  | (90.8, 173.8)   | (50.8, 156.8)
  19  | (50.0, 173.8)   | (10.0, 156.8)
  20  | (50.0, 217.0)   | (10.0, 200.0)
  21  | (90.8, 217.0)   | (50.8, 200.0)
  22  | (131.5, 217.0)  | (91.5, 200.0)
  23  | (172.2, 217.0)  | (132.2, 200.0)
  24  | (213.0, 217.0)  | (173.0, 200.0)
Starting heater checks for extruder
webhooks: registering remote method 'shutdown_machine' for connection id: 281473125865840
webhooks: registering remote method 'reboot_machine' for connection id: 281473125865840
webhooks: registering remote method 'pause_job_queue' for connection id: 281473125865840
webhooks: registering remote method 'start_job_queue' for connection id: 281473125865840
Active bed surface: default; offset: -0.050
